
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d6  00800060  000072ee  00007382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800336  00800336  00007658  2**0
                  ALLOC
  3 .stab         00006558  00000000  00000000  00007658  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e4f  00000000  00000000  0000dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000f9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  0000fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  0000fe96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  000127e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  00013ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00015410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00015650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  000159bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000165ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__vector_4>
      14:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__vector_5>
      18:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__vector_6>
      1c:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__vector_7>
      20:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__vector_8>
      24:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_9>
      28:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__vector_10>
      2c:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e7       	ldi	r31, 0x72	; 114
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <main>
      8a:	0c 94 75 39 	jmp	0x72ea	; 0x72ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 3e 39 	jmp	0x727c	; 0x727c <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 5a 39 	jmp	0x72b4	; 0x72b4 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 3e 39 	jmp	0x727c	; 0x727c <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a7 eb       	ldi	r26, 0xB7	; 183
     360:	b1 e0       	ldi	r27, 0x01	; 1
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 5a 39 	jmp	0x72b4	; 0x72b4 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 3e 39 	jmp	0x727c	; 0x727c <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	87 eb       	ldi	r24, 0xB7	; 183
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 5a 39 	jmp	0x72b4	; 0x72b4 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 46 39 	jmp	0x728c	; 0x728c <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	67 eb       	ldi	r22, 0xB7	; 183
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 62 39 	jmp	0x72c4	; 0x72c4 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 47 39 	jmp	0x728e	; 0x728e <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 63 39 	jmp	0x72c6	; 0x72c6 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 4e 39 	jmp	0x729c	; 0x729c <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 6a 39 	jmp	0x72d4	; 0x72d4 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 46 39 	jmp	0x728c	; 0x728c <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 62 39 	jmp	0x72c4	; 0x72c4 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e1 54       	subi	r30, 0x41	; 65
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    1228:	a7 e2       	ldi	r26, 0x27	; 39
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e7 e2       	ldi	r30, 0x27	; 39
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    1236:	a7 e2       	ldi	r26, 0x27	; 39
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e7 e2       	ldi	r30, 0x27	; 39
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    1244:	a7 e2       	ldi	r26, 0x27	; 39
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e7 e2       	ldi	r30, 0x27	; 39
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7d       	andi	r24, 0xDF	; 223
    1250:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    1252:	a6 e2       	ldi	r26, 0x26	; 38
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e6 e2       	ldi	r30, 0x26	; 38
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	88 7f       	andi	r24, 0xF8	; 248
    125e:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    1260:	a6 e2       	ldi	r26, 0x26	; 38
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e6 e2       	ldi	r30, 0x26	; 38
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 60       	ori	r24, 0x07	; 7
    126c:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    126e:	a6 e2       	ldi	r26, 0x26	; 38
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e6 e2       	ldi	r30, 0x26	; 38
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7d       	andi	r24, 0xDF	; 223
    127a:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    127c:	a6 e2       	ldi	r26, 0x26	; 38
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e6 e2       	ldi	r30, 0x26	; 38
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 68       	ori	r24, 0x80	; 128
    1288:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    128a:	a6 e2       	ldi	r26, 0x26	; 38
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e6 e2       	ldi	r30, 0x26	; 38
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    12a6:	a6 e2       	ldi	r26, 0x26	; 38
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e6 e2       	ldi	r30, 0x26	; 38
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 68       	ori	r24, 0x80	; 128
    12b2:	8c 93       	st	X, r24
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    12c2:	a6 e2       	ldi	r26, 0x26	; 38
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e6 e2       	ldi	r30, 0x26	; 38
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	8c 93       	st	X, r24
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    12de:	a6 e2       	ldi	r26, 0x26	; 38
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e6 e2       	ldi	r30, 0x26	; 38
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    12fa:	a6 e2       	ldi	r26, 0x26	; 38
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e6 e2       	ldi	r30, 0x26	; 38
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <ADC_u8VoltageReference+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 23       	and	r24, r24
    1322:	31 f0       	breq	.+12     	; 0x1330 <ADC_u8VoltageReference+0x22>
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	19 f0       	breq	.+6      	; 0x1330 <ADC_u8VoltageReference+0x22>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	e1 f4       	brne	.+56     	; 0x1368 <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    1330:	a7 e2       	ldi	r26, 0x27	; 39
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e7 e2       	ldi	r30, 0x27	; 39
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 73       	andi	r24, 0x3F	; 63
    133c:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    133e:	a7 e2       	ldi	r26, 0x27	; 39
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e7 e2       	ldi	r30, 0x27	; 39
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	00 24       	eor	r0, r0
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	07 94       	ror	r0
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	07 94       	ror	r0
    135e:	98 2f       	mov	r25, r24
    1360:	80 2d       	mov	r24, r0
    1362:	82 2b       	or	r24, r18
    1364:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    1366:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <ADC_u8SetPrescaler+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	80 f4       	brcc	.+32     	; 0x13aa <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    138a:	a6 e2       	ldi	r26, 0x26	; 38
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e6 e2       	ldi	r30, 0x26	; 38
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 7f       	andi	r24, 0xF8	; 248
    1396:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    1398:	a6 e2       	ldi	r26, 0x26	; 38
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e6 e2       	ldi	r30, 0x26	; 38
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	90 81       	ld	r25, Z
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	89 2b       	or	r24, r25
    13a6:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <ADC_u8SetAdjustment+0x6>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    13c2:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 23       	and	r24, r24
    13c8:	41 f4       	brne	.+16     	; 0x13da <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    13ca:	a7 e2       	ldi	r26, 0x27	; 39
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e7 e2       	ldi	r30, 0x27	; 39
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	8c 93       	st	X, r24
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	41 f4       	brne	.+16     	; 0x13f0 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    13e0:	a7 e2       	ldi	r26, 0x27	; 39
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e2       	ldi	r30, 0x27	; 39
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 62       	ori	r24, 0x20	; 32
    13ec:	8c 93       	st	X, r24
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <ADC_u8SetTriggerSource+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    140c:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 30       	cpi	r24, 0x08	; 8
    1412:	41 f4       	brne	.+16     	; 0x1424 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    1414:	a6 e2       	ldi	r26, 0x26	; 38
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e6 e2       	ldi	r30, 0x26	; 38
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 7d       	andi	r24, 0xDF	; 223
    1420:	8c 93       	st	X, r24
    1422:	1a c0       	rjmp	.+52     	; 0x1458 <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	a8 f4       	brcc	.+42     	; 0x1454 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    142a:	a6 e2       	ldi	r26, 0x26	; 38
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e6 e2       	ldi	r30, 0x26	; 38
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 62       	ori	r24, 0x20	; 32
    1436:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    1438:	a0 e5       	ldi	r26, 0x50	; 80
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e0 e5       	ldi	r30, 0x50	; 80
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 71       	andi	r24, 0x1F	; 31
    1444:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    1446:	a0 e5       	ldi	r26, 0x50	; 80
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e0 e5       	ldi	r30, 0x50	; 80
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8c 93       	st	X, r24
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	28 97       	sbiw	r28, 0x08	; 8
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	8e 83       	std	Y+6, r24	; 0x06
    147a:	78 87       	std	Y+8, r23	; 0x08
    147c:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    147e:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	1a 82       	std	Y+2, r1	; 0x02
    1484:	1b 82       	std	Y+3, r1	; 0x03
    1486:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    1488:	8f 81       	ldd	r24, Y+7	; 0x07
    148a:	98 85       	ldd	r25, Y+8	; 0x08
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	09 f4       	brne	.+2      	; 0x1492 <ADC_u8GetResultSync+0x2e>
    1490:	78 c0       	rjmp	.+240    	; 0x1582 <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    1492:	80 91 3a 03 	lds	r24, 0x033A
    1496:	88 23       	and	r24, r24
    1498:	09 f0       	breq	.+2      	; 0x149c <ADC_u8GetResultSync+0x38>
    149a:	70 c0       	rjmp	.+224    	; 0x157c <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 3a 03 	sts	0x033A, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	80 32       	cpi	r24, 0x20	; 32
    14a6:	78 f4       	brcc	.+30     	; 0x14c6 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    14a8:	a7 e2       	ldi	r26, 0x27	; 39
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e7 e2       	ldi	r30, 0x27	; 39
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 7e       	andi	r24, 0xE0	; 224
    14b4:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    14b6:	a7 e2       	ldi	r26, 0x27	; 39
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e7 e2       	ldi	r30, 0x27	; 39
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	90 81       	ld	r25, Z
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	89 2b       	or	r24, r25
    14c4:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    14c6:	a6 e2       	ldi	r26, 0x26	; 38
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e6 e2       	ldi	r30, 0x26	; 38
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	8c 93       	st	X, r24
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	ab 81       	ldd	r26, Y+3	; 0x03
    14dc:	bc 81       	ldd	r27, Y+4	; 0x04
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	b1 1d       	adc	r27, r1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	ab 83       	std	Y+3, r26	; 0x03
    14ea:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    14ec:	e6 e2       	ldi	r30, 0x26	; 38
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	80 71       	andi	r24, 0x10	; 16
    14f8:	90 70       	andi	r25, 0x00	; 0
    14fa:	95 95       	asr	r25
    14fc:	87 95       	ror	r24
    14fe:	95 95       	asr	r25
    1500:	87 95       	ror	r24
    1502:	95 95       	asr	r25
    1504:	87 95       	ror	r24
    1506:	95 95       	asr	r25
    1508:	87 95       	ror	r24
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f4       	brne	.+24     	; 0x1526 <ADC_u8GetResultSync+0xc2>
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	ab 81       	ldd	r26, Y+3	; 0x03
    1514:	bc 81       	ldd	r27, Y+4	; 0x04
    1516:	80 35       	cpi	r24, 0x50	; 80
    1518:	23 ec       	ldi	r18, 0xC3	; 195
    151a:	92 07       	cpc	r25, r18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	a2 07       	cpc	r26, r18
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	b2 07       	cpc	r27, r18
    1524:	c0 f2       	brcs	.-80     	; 0x14d6 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	ab 81       	ldd	r26, Y+3	; 0x03
    152c:	bc 81       	ldd	r27, Y+4	; 0x04
    152e:	80 35       	cpi	r24, 0x50	; 80
    1530:	23 ec       	ldi	r18, 0xC3	; 195
    1532:	92 07       	cpc	r25, r18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	a2 07       	cpc	r26, r18
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	b2 07       	cpc	r27, r18
    153c:	19 f4       	brne	.+6      	; 0x1544 <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	19 c0       	rjmp	.+50     	; 0x1576 <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    1544:	a6 e2       	ldi	r26, 0x26	; 38
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e6 e2       	ldi	r30, 0x26	; 38
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    1552:	e4 e2       	ldi	r30, 0x24	; 36
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	e5 e2       	ldi	r30, 0x25	; 37
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	98 2f       	mov	r25, r24
    1568:	88 27       	eor	r24, r24
    156a:	82 2b       	or	r24, r18
    156c:	93 2b       	or	r25, r19
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    1576:	10 92 3a 03 	sts	0x033A, r1
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1588:	28 96       	adiw	r28, 0x08	; 8
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <ADC_u8StartConversionAsynch+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <ADC_u8StartConversionAsynch+0x8>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <ADC_u8StartConversionAsynch+0xa>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8a 83       	std	Y+2, r24	; 0x02
    15aa:	7c 83       	std	Y+4, r23	; 0x04
    15ac:	6b 83       	std	Y+3, r22	; 0x03
    15ae:	5e 83       	std	Y+6, r21	; 0x06
    15b0:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    15b2:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	e9 f1       	breq	.+122    	; 0x1636 <ADC_u8StartConversionAsynch+0x9c>
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	c9 f1       	breq	.+114    	; 0x1636 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    15c4:	80 91 3a 03 	lds	r24, 0x033A
    15c8:	88 23       	and	r24, r24
    15ca:	91 f5       	brne	.+100    	; 0x1630 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 3a 03 	sts	0x033A, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    15d2:	10 92 3b 03 	sts	0x033B, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	90 93 37 03 	sts	0x0337, r25
    15de:	80 93 36 03 	sts	0x0336, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	90 93 39 03 	sts	0x0339, r25
    15ea:	80 93 38 03 	sts	0x0338, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 32       	cpi	r24, 0x20	; 32
    15f2:	78 f4       	brcc	.+30     	; 0x1612 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    15f4:	a7 e2       	ldi	r26, 0x27	; 39
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e7 e2       	ldi	r30, 0x27	; 39
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	80 7e       	andi	r24, 0xE0	; 224
    1600:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    1602:	a7 e2       	ldi	r26, 0x27	; 39
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e7 e2       	ldi	r30, 0x27	; 39
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	90 81       	ld	r25, Z
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    1612:	a6 e2       	ldi	r26, 0x26	; 38
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e6 e2       	ldi	r30, 0x26	; 38
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    1620:	a6 e2       	ldi	r26, 0x26	; 38
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e2       	ldi	r30, 0x26	; 38
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
    162e:	05 c0       	rjmp	.+10     	; 0x163a <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	02 c0       	rjmp	.+4      	; 0x163a <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	26 96       	adiw	r28, 0x06	; 6
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <ADC_u8StartChainAsynch+0x6>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    165e:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f4       	brne	.+2      	; 0x166a <ADC_u8StartChainAsynch+0x1c>
    1668:	79 c0       	rjmp	.+242    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    166a:	ea 81       	ldd	r30, Y+2	; 0x02
    166c:	fb 81       	ldd	r31, Y+3	; 0x03
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f4       	brne	.+2      	; 0x1678 <ADC_u8StartChainAsynch+0x2a>
    1676:	72 c0       	rjmp	.+228    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    1678:	ea 81       	ldd	r30, Y+2	; 0x02
    167a:	fb 81       	ldd	r31, Y+3	; 0x03
    167c:	85 81       	ldd	r24, Z+5	; 0x05
    167e:	96 81       	ldd	r25, Z+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f4       	brne	.+2      	; 0x1686 <ADC_u8StartChainAsynch+0x38>
    1684:	6b c0       	rjmp	.+214    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    1686:	ea 81       	ldd	r30, Y+2	; 0x02
    1688:	fb 81       	ldd	r31, Y+3	; 0x03
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	09 f4       	brne	.+2      	; 0x1694 <ADC_u8StartChainAsynch+0x46>
    1692:	64 c0       	rjmp	.+200    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    1694:	80 91 3a 03 	lds	r24, 0x033A
    1698:	88 23       	and	r24, r24
    169a:	09 f0       	breq	.+2      	; 0x169e <ADC_u8StartChainAsynch+0x50>
    169c:	5c c0       	rjmp	.+184    	; 0x1756 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 3a 03 	sts	0x033A, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 3b 03 	sts	0x033B, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    16aa:	ea 81       	ldd	r30, Y+2	; 0x02
    16ac:	fb 81       	ldd	r31, Y+3	; 0x03
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	90 93 37 03 	sts	0x0337, r25
    16b6:	80 93 36 03 	sts	0x0336, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    16ba:	ea 81       	ldd	r30, Y+2	; 0x02
    16bc:	fb 81       	ldd	r31, Y+3	; 0x03
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	90 93 3d 03 	sts	0x033D, r25
    16c6:	80 93 3c 03 	sts	0x033C, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    16ca:	ea 81       	ldd	r30, Y+2	; 0x02
    16cc:	fb 81       	ldd	r31, Y+3	; 0x03
    16ce:	84 81       	ldd	r24, Z+4	; 0x04
    16d0:	80 93 3e 03 	sts	0x033E, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    16d4:	ea 81       	ldd	r30, Y+2	; 0x02
    16d6:	fb 81       	ldd	r31, Y+3	; 0x03
    16d8:	85 81       	ldd	r24, Z+5	; 0x05
    16da:	96 81       	ldd	r25, Z+6	; 0x06
    16dc:	90 93 39 03 	sts	0x0339, r25
    16e0:	80 93 38 03 	sts	0x0338, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    16e4:	10 92 3f 03 	sts	0x033F, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    16e8:	20 91 3c 03 	lds	r18, 0x033C
    16ec:	30 91 3d 03 	lds	r19, 0x033D
    16f0:	80 91 3f 03 	lds	r24, 0x033F
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	f9 01       	movw	r30, r18
    16fa:	e8 0f       	add	r30, r24
    16fc:	f9 1f       	adc	r31, r25
    16fe:	80 81       	ld	r24, Z
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	d0 f4       	brcc	.+52     	; 0x1738 <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    1704:	a7 e2       	ldi	r26, 0x27	; 39
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e7 e2       	ldi	r30, 0x27	; 39
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 7e       	andi	r24, 0xE0	; 224
    1710:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    1712:	a7 e2       	ldi	r26, 0x27	; 39
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e2       	ldi	r30, 0x27	; 39
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	40 81       	ld	r20, Z
    171c:	20 91 3c 03 	lds	r18, 0x033C
    1720:	30 91 3d 03 	lds	r19, 0x033D
    1724:	80 91 3f 03 	lds	r24, 0x033F
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	f9 01       	movw	r30, r18
    172e:	e8 0f       	add	r30, r24
    1730:	f9 1f       	adc	r31, r25
    1732:	80 81       	ld	r24, Z
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    1738:	a6 e2       	ldi	r26, 0x26	; 38
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    1746:	a6 e2       	ldi	r26, 0x26	; 38
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e6 e2       	ldi	r30, 0x26	; 38
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	88 60       	ori	r24, 0x08	; 8
    1752:	8c 93       	st	X, r24
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    1798:	80 91 3b 03 	lds	r24, 0x033B
    179c:	88 23       	and	r24, r24
    179e:	19 f5       	brne	.+70     	; 0x17e6 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    17a0:	a0 91 36 03 	lds	r26, 0x0336
    17a4:	b0 91 37 03 	lds	r27, 0x0337
    17a8:	e4 e2       	ldi	r30, 0x24	; 36
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	e5 e2       	ldi	r30, 0x25	; 37
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	98 2f       	mov	r25, r24
    17be:	88 27       	eor	r24, r24
    17c0:	82 2b       	or	r24, r18
    17c2:	93 2b       	or	r25, r19
    17c4:	8d 93       	st	X+, r24
    17c6:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    17c8:	10 92 3a 03 	sts	0x033A, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    17cc:	e0 91 38 03 	lds	r30, 0x0338
    17d0:	f0 91 39 03 	lds	r31, 0x0339
    17d4:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    17d6:	a6 e2       	ldi	r26, 0x26	; 38
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e6 e2       	ldi	r30, 0x26	; 38
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	87 7f       	andi	r24, 0xF7	; 247
    17e2:	8c 93       	st	X, r24
    17e4:	6c c0       	rjmp	.+216    	; 0x18be <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    17e6:	80 91 3b 03 	lds	r24, 0x033B
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <__vector_16+0x82>
    17ee:	67 c0       	rjmp	.+206    	; 0x18be <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    17f0:	20 91 36 03 	lds	r18, 0x0336
    17f4:	30 91 37 03 	lds	r19, 0x0337
    17f8:	80 91 3f 03 	lds	r24, 0x033F
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	d9 01       	movw	r26, r18
    1806:	a8 0f       	add	r26, r24
    1808:	b9 1f       	adc	r27, r25
    180a:	e4 e2       	ldi	r30, 0x24	; 36
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	e5 e2       	ldi	r30, 0x25	; 37
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	98 2f       	mov	r25, r24
    1820:	88 27       	eor	r24, r24
    1822:	82 2b       	or	r24, r18
    1824:	93 2b       	or	r25, r19
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    182c:	80 91 3f 03 	lds	r24, 0x033F
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 3f 03 	sts	0x033F, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    1836:	90 91 3f 03 	lds	r25, 0x033F
    183a:	80 91 3e 03 	lds	r24, 0x033E
    183e:	98 17       	cp	r25, r24
    1840:	79 f4       	brne	.+30     	; 0x1860 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    1842:	10 92 3a 03 	sts	0x033A, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    1846:	e0 91 38 03 	lds	r30, 0x0338
    184a:	f0 91 39 03 	lds	r31, 0x0339
    184e:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1850:	a6 e2       	ldi	r26, 0x26	; 38
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	8c 93       	st	X, r24
    185e:	2f c0       	rjmp	.+94     	; 0x18be <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    1860:	20 91 3c 03 	lds	r18, 0x033C
    1864:	30 91 3d 03 	lds	r19, 0x033D
    1868:	80 91 3f 03 	lds	r24, 0x033F
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	f9 01       	movw	r30, r18
    1872:	e8 0f       	add	r30, r24
    1874:	f9 1f       	adc	r31, r25
    1876:	80 81       	ld	r24, Z
    1878:	80 32       	cpi	r24, 0x20	; 32
    187a:	d0 f4       	brcc	.+52     	; 0x18b0 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    187c:	a7 e2       	ldi	r26, 0x27	; 39
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e7 e2       	ldi	r30, 0x27	; 39
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 7e       	andi	r24, 0xE0	; 224
    1888:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    188a:	a7 e2       	ldi	r26, 0x27	; 39
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e7 e2       	ldi	r30, 0x27	; 39
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	40 81       	ld	r20, Z
    1894:	20 91 3c 03 	lds	r18, 0x033C
    1898:	30 91 3d 03 	lds	r19, 0x033D
    189c:	80 91 3f 03 	lds	r24, 0x033F
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	f9 01       	movw	r30, r18
    18a6:	e8 0f       	add	r30, r24
    18a8:	f9 1f       	adc	r31, r25
    18aa:	80 81       	ld	r24, Z
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    18b0:	a6 e2       	ldi	r26, 0x26	; 38
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e2       	ldi	r30, 0x26	; 38
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8c 93       	st	X, r24
    }
  }
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	28 97       	sbiw	r28, 0x08	; 8
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6b 83       	std	Y+3, r22	; 0x03
    18fc:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	08 f0       	brcs	.+2      	; 0x190a <DIO_enumSetPinDir+0x26>
    1908:	f1 c0       	rjmp	.+482    	; 0x1aec <DIO_enumSetPinDir+0x208>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	88 30       	cpi	r24, 0x08	; 8
    190e:	08 f0       	brcs	.+2      	; 0x1912 <DIO_enumSetPinDir+0x2e>
    1910:	ed c0       	rjmp	.+474    	; 0x1aec <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	09 f0       	breq	.+2      	; 0x191a <DIO_enumSetPinDir+0x36>
    1918:	6f c0       	rjmp	.+222    	; 0x19f8 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	38 87       	std	Y+8, r19	; 0x08
    1922:	2f 83       	std	Y+7, r18	; 0x07
    1924:	8f 81       	ldd	r24, Y+7	; 0x07
    1926:	98 85       	ldd	r25, Y+8	; 0x08
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	91 05       	cpc	r25, r1
    192c:	49 f1       	breq	.+82     	; 0x1980 <DIO_enumSetPinDir+0x9c>
    192e:	2f 81       	ldd	r18, Y+7	; 0x07
    1930:	38 85       	ldd	r19, Y+8	; 0x08
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	2c f4       	brge	.+10     	; 0x1942 <DIO_enumSetPinDir+0x5e>
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	98 85       	ldd	r25, Y+8	; 0x08
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 f0       	breq	.+24     	; 0x1958 <DIO_enumSetPinDir+0x74>
    1940:	d6 c0       	rjmp	.+428    	; 0x1aee <DIO_enumSetPinDir+0x20a>
    1942:	2f 81       	ldd	r18, Y+7	; 0x07
    1944:	38 85       	ldd	r19, Y+8	; 0x08
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	71 f1       	breq	.+92     	; 0x19a8 <DIO_enumSetPinDir+0xc4>
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	98 85       	ldd	r25, Y+8	; 0x08
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	e9 f1       	breq	.+122    	; 0x19d0 <DIO_enumSetPinDir+0xec>
    1956:	cb c0       	rjmp	.+406    	; 0x1aee <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1958:	aa e3       	ldi	r26, 0x3A	; 58
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_enumSetPinDir+0x92>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_enumSetPinDir+0x8e>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	b7 c0       	rjmp	.+366    	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1980:	a7 e3       	ldi	r26, 0x37	; 55
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e7 e3       	ldi	r30, 0x37	; 55
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_enumSetPinDir+0xba>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_enumSetPinDir+0xb6>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	a3 c0       	rjmp	.+326    	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    19a8:	a4 e3       	ldi	r26, 0x34	; 52
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_enumSetPinDir+0xe2>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_enumSetPinDir+0xde>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	8f c0       	rjmp	.+286    	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    19d0:	a1 e3       	ldi	r26, 0x31	; 49
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e1 e3       	ldi	r30, 0x31	; 49
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_enumSetPinDir+0x10a>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_enumSetPinDir+0x106>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	7b c0       	rjmp	.+246    	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	88 23       	and	r24, r24
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <DIO_enumSetPinDir+0x11c>
    19fe:	74 c0       	rjmp	.+232    	; 0x1ae8 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3e 83       	std	Y+6, r19	; 0x06
    1a08:	2d 83       	std	Y+5, r18	; 0x05
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	91 05       	cpc	r25, r1
    1a12:	59 f1       	breq	.+86     	; 0x1a6a <DIO_enumSetPinDir+0x186>
    1a14:	2d 81       	ldd	r18, Y+5	; 0x05
    1a16:	3e 81       	ldd	r19, Y+6	; 0x06
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <DIO_enumSetPinDir+0x144>
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f0       	breq	.+26     	; 0x1a40 <DIO_enumSetPinDir+0x15c>
    1a26:	63 c0       	rjmp	.+198    	; 0x1aee <DIO_enumSetPinDir+0x20a>
    1a28:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	89 f1       	breq	.+98     	; 0x1a94 <DIO_enumSetPinDir+0x1b0>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	83 30       	cpi	r24, 0x03	; 3
    1a38:	91 05       	cpc	r25, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <DIO_enumSetPinDir+0x15a>
    1a3c:	40 c0       	rjmp	.+128    	; 0x1abe <DIO_enumSetPinDir+0x1da>
    1a3e:	57 c0       	rjmp	.+174    	; 0x1aee <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1a40:	aa e3       	ldi	r26, 0x3A	; 58
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	ea e3       	ldi	r30, 0x3A	; 58
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_enumSetPinDir+0x17a>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_enumSetPinDir+0x176>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	42 c0       	rjmp	.+132    	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1a6a:	a7 e3       	ldi	r26, 0x37	; 55
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e7 e3       	ldi	r30, 0x37	; 55
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_enumSetPinDir+0x1a4>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_enumSetPinDir+0x1a0>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	2d c0       	rjmp	.+90     	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1a94:	a4 e3       	ldi	r26, 0x34	; 52
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e4 e3       	ldi	r30, 0x34	; 52
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_enumSetPinDir+0x1ce>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_enumSetPinDir+0x1ca>
    1ab6:	80 95       	com	r24
    1ab8:	84 23       	and	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	18 c0       	rjmp	.+48     	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1abe:	a1 e3       	ldi	r26, 0x31	; 49
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e1 e3       	ldi	r30, 0x31	; 49
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_enumSetPinDir+0x1f8>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_enumSetPinDir+0x1f4>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1aec:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af0:	28 96       	adiw	r28, 0x08	; 8
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	28 97       	sbiw	r28, 0x08	; 8
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	6b 83       	std	Y+3, r22	; 0x03
    1b1a:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <DIO_enumWritePinVal+0x26>
    1b26:	f1 c0       	rjmp	.+482    	; 0x1d0a <DIO_enumWritePinVal+0x208>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	88 30       	cpi	r24, 0x08	; 8
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <DIO_enumWritePinVal+0x2e>
    1b2e:	ed c0       	rjmp	.+474    	; 0x1d0a <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <DIO_enumWritePinVal+0x36>
    1b36:	6f c0       	rjmp	.+222    	; 0x1c16 <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	38 87       	std	Y+8, r19	; 0x08
    1b40:	2f 83       	std	Y+7, r18	; 0x07
    1b42:	8f 81       	ldd	r24, Y+7	; 0x07
    1b44:	98 85       	ldd	r25, Y+8	; 0x08
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	49 f1       	breq	.+82     	; 0x1b9e <DIO_enumWritePinVal+0x9c>
    1b4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b4e:	38 85       	ldd	r19, Y+8	; 0x08
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <DIO_enumWritePinVal+0x5e>
    1b56:	8f 81       	ldd	r24, Y+7	; 0x07
    1b58:	98 85       	ldd	r25, Y+8	; 0x08
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <DIO_enumWritePinVal+0x74>
    1b5e:	d6 c0       	rjmp	.+428    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
    1b60:	2f 81       	ldd	r18, Y+7	; 0x07
    1b62:	38 85       	ldd	r19, Y+8	; 0x08
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	71 f1       	breq	.+92     	; 0x1bc6 <DIO_enumWritePinVal+0xc4>
    1b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6c:	98 85       	ldd	r25, Y+8	; 0x08
    1b6e:	83 30       	cpi	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	e9 f1       	breq	.+122    	; 0x1bee <DIO_enumWritePinVal+0xec>
    1b74:	cb c0       	rjmp	.+406    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1b76:	ab e3       	ldi	r26, 0x3B	; 59
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	eb e3       	ldi	r30, 0x3B	; 59
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_enumWritePinVal+0x92>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_enumWritePinVal+0x8e>
    1b98:	84 2b       	or	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	b7 c0       	rjmp	.+366    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1b9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e8 e3       	ldi	r30, 0x38	; 56
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_enumWritePinVal+0xba>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_enumWritePinVal+0xb6>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	a3 c0       	rjmp	.+326    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1bc6:	a5 e3       	ldi	r26, 0x35	; 53
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e5 e3       	ldi	r30, 0x35	; 53
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_enumWritePinVal+0xe2>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_enumWritePinVal+0xde>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	8f c0       	rjmp	.+286    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_enumWritePinVal+0x10a>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_enumWritePinVal+0x106>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	7b c0       	rjmp	.+246    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	88 23       	and	r24, r24
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <DIO_enumWritePinVal+0x11c>
    1c1c:	74 c0       	rjmp	.+232    	; 0x1d06 <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3e 83       	std	Y+6, r19	; 0x06
    1c26:	2d 83       	std	Y+5, r18	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	59 f1       	breq	.+86     	; 0x1c88 <DIO_enumWritePinVal+0x186>
    1c32:	2d 81       	ldd	r18, Y+5	; 0x05
    1c34:	3e 81       	ldd	r19, Y+6	; 0x06
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <DIO_enumWritePinVal+0x144>
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f0       	breq	.+26     	; 0x1c5e <DIO_enumWritePinVal+0x15c>
    1c44:	63 c0       	rjmp	.+198    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
    1c46:	2d 81       	ldd	r18, Y+5	; 0x05
    1c48:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	89 f1       	breq	.+98     	; 0x1cb2 <DIO_enumWritePinVal+0x1b0>
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <DIO_enumWritePinVal+0x15a>
    1c5a:	40 c0       	rjmp	.+128    	; 0x1cdc <DIO_enumWritePinVal+0x1da>
    1c5c:	57 c0       	rjmp	.+174    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1c5e:	ab e3       	ldi	r26, 0x3B	; 59
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	eb e3       	ldi	r30, 0x3B	; 59
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_enumWritePinVal+0x17a>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_enumWritePinVal+0x176>
    1c80:	80 95       	com	r24
    1c82:	84 23       	and	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	42 c0       	rjmp	.+132    	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1c88:	a8 e3       	ldi	r26, 0x38	; 56
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <DIO_enumWritePinVal+0x1a4>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <DIO_enumWritePinVal+0x1a0>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	2d c0       	rjmp	.+90     	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1cb2:	a5 e3       	ldi	r26, 0x35	; 53
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e5 e3       	ldi	r30, 0x35	; 53
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 2e       	mov	r0, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_enumWritePinVal+0x1ce>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_enumWritePinVal+0x1ca>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	18 c0       	rjmp	.+48     	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1cdc:	a2 e3       	ldi	r26, 0x32	; 50
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e2 e3       	ldi	r30, 0x32	; 50
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_enumWritePinVal+0x1f8>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_enumWritePinVal+0x1f4>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	28 96       	adiw	r28, 0x08	; 8
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	27 97       	sbiw	r28, 0x07	; 7
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	6b 83       	std	Y+3, r22	; 0x03
    1d38:	5d 83       	std	Y+5, r21	; 0x05
    1d3a:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <DIO_enumReadPinVal+0x28>
    1d46:	a6 c0       	rjmp	.+332    	; 0x1e94 <DIO_enumReadPinVal+0x174>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	88 30       	cpi	r24, 0x08	; 8
    1d4c:	08 f0       	brcs	.+2      	; 0x1d50 <DIO_enumReadPinVal+0x30>
    1d4e:	a2 c0       	rjmp	.+324    	; 0x1e94 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3f 83       	std	Y+7, r19	; 0x07
    1d58:	2e 83       	std	Y+6, r18	; 0x06
    1d5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d5e:	41 30       	cpi	r20, 0x01	; 1
    1d60:	51 05       	cpc	r21, r1
    1d62:	c1 f1       	breq	.+112    	; 0x1dd4 <DIO_enumReadPinVal+0xb4>
    1d64:	8e 81       	ldd	r24, Y+6	; 0x06
    1d66:	9f 81       	ldd	r25, Y+7	; 0x07
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	34 f4       	brge	.+12     	; 0x1d7a <DIO_enumReadPinVal+0x5a>
    1d6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d70:	3f 81       	ldd	r19, Y+7	; 0x07
    1d72:	21 15       	cp	r18, r1
    1d74:	31 05       	cpc	r19, r1
    1d76:	71 f0       	breq	.+28     	; 0x1d94 <DIO_enumReadPinVal+0x74>
    1d78:	8e c0       	rjmp	.+284    	; 0x1e96 <DIO_enumReadPinVal+0x176>
    1d7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d7e:	42 30       	cpi	r20, 0x02	; 2
    1d80:	51 05       	cpc	r21, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <DIO_enumReadPinVal+0x66>
    1d84:	47 c0       	rjmp	.+142    	; 0x1e14 <DIO_enumReadPinVal+0xf4>
    1d86:	8e 81       	ldd	r24, Y+6	; 0x06
    1d88:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <DIO_enumReadPinVal+0x72>
    1d90:	61 c0       	rjmp	.+194    	; 0x1e54 <DIO_enumReadPinVal+0x134>
    1d92:	81 c0       	rjmp	.+258    	; 0x1e96 <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1d94:	e9 e3       	ldi	r30, 0x39	; 57
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_enumReadPinVal+0x8e>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	2a 95       	dec	r18
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_enumReadPinVal+0x8a>
    1db2:	9a 01       	movw	r18, r20
    1db4:	28 23       	and	r18, r24
    1db6:	39 23       	and	r19, r25
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enumReadPinVal+0xa6>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enumReadPinVal+0xa2>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dce:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd0:	80 83       	st	Z, r24
    1dd2:	61 c0       	rjmp	.+194    	; 0x1e96 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1dd4:	e6 e3       	ldi	r30, 0x36	; 54
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_enumReadPinVal+0xce>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	2a 95       	dec	r18
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_enumReadPinVal+0xca>
    1df2:	9a 01       	movw	r18, r20
    1df4:	28 23       	and	r18, r24
    1df6:	39 23       	and	r19, r25
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a9 01       	movw	r20, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <DIO_enumReadPinVal+0xe6>
    1e02:	55 95       	asr	r21
    1e04:	47 95       	ror	r20
    1e06:	8a 95       	dec	r24
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <DIO_enumReadPinVal+0xe2>
    1e0a:	ca 01       	movw	r24, r20
    1e0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e10:	80 83       	st	Z, r24
    1e12:	41 c0       	rjmp	.+130    	; 0x1e96 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1e14:	e3 e3       	ldi	r30, 0x33	; 51
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_enumReadPinVal+0x10e>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	2a 95       	dec	r18
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_enumReadPinVal+0x10a>
    1e32:	9a 01       	movw	r18, r20
    1e34:	28 23       	and	r18, r24
    1e36:	39 23       	and	r19, r25
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a9 01       	movw	r20, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_enumReadPinVal+0x126>
    1e42:	55 95       	asr	r21
    1e44:	47 95       	ror	r20
    1e46:	8a 95       	dec	r24
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_enumReadPinVal+0x122>
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e50:	80 83       	st	Z, r24
    1e52:	21 c0       	rjmp	.+66     	; 0x1e96 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1e54:	e0 e3       	ldi	r30, 0x30	; 48
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_enumReadPinVal+0x14e>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	2a 95       	dec	r18
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_enumReadPinVal+0x14a>
    1e72:	9a 01       	movw	r18, r20
    1e74:	28 23       	and	r18, r24
    1e76:	39 23       	and	r19, r25
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a9 01       	movw	r20, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_enumReadPinVal+0x166>
    1e82:	55 95       	asr	r21
    1e84:	47 95       	ror	r20
    1e86:	8a 95       	dec	r24
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_enumReadPinVal+0x162>
    1e8a:	ca 01       	movw	r24, r20
    1e8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e90:	80 83       	st	Z, r24
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1e94:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e98:	27 96       	adiw	r28, 0x07	; 7
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <DIO_enumTogglePinVal+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <DIO_enumTogglePinVal+0x8>
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	84 30       	cpi	r24, 0x04	; 4
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <DIO_enumTogglePinVal+0x1e>
    1ec6:	73 c0       	rjmp	.+230    	; 0x1fae <DIO_enumTogglePinVal+0x104>
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 30       	cpi	r24, 0x08	; 8
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <DIO_enumTogglePinVal+0x26>
    1ece:	6f c0       	rjmp	.+222    	; 0x1fae <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	3d 83       	std	Y+5, r19	; 0x05
    1ed8:	2c 83       	std	Y+4, r18	; 0x04
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	49 f1       	breq	.+82     	; 0x1f36 <DIO_enumTogglePinVal+0x8c>
    1ee4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <DIO_enumTogglePinVal+0x4e>
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <DIO_enumTogglePinVal+0x64>
    1ef6:	5c c0       	rjmp	.+184    	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
    1ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    1efa:	3d 81       	ldd	r19, Y+5	; 0x05
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	71 f1       	breq	.+92     	; 0x1f5e <DIO_enumTogglePinVal+0xb4>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	91 05       	cpc	r25, r1
    1f0a:	e9 f1       	breq	.+122    	; 0x1f86 <DIO_enumTogglePinVal+0xdc>
    1f0c:	51 c0       	rjmp	.+162    	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    1f0e:	ab e3       	ldi	r26, 0x3B	; 59
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e3       	ldi	r30, 0x3B	; 59
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_enumTogglePinVal+0x82>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_enumTogglePinVal+0x7e>
    1f30:	84 27       	eor	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	3d c0       	rjmp	.+122    	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    1f36:	a8 e3       	ldi	r26, 0x38	; 56
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e8 e3       	ldi	r30, 0x38	; 56
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_enumTogglePinVal+0xaa>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_enumTogglePinVal+0xa6>
    1f58:	84 27       	eor	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	29 c0       	rjmp	.+82     	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    1f5e:	a5 e3       	ldi	r26, 0x35	; 53
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 e3       	ldi	r30, 0x35	; 53
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_enumTogglePinVal+0xd2>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_enumTogglePinVal+0xce>
    1f80:	84 27       	eor	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	15 c0       	rjmp	.+42     	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    1f86:	a2 e3       	ldi	r26, 0x32	; 50
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e2 e3       	ldi	r30, 0x32	; 50
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_enumTogglePinVal+0xfa>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_enumTogglePinVal+0xf6>
    1fa8:	84 27       	eor	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1fae:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_enumConnectPullUp+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_enumConnectPullUp+0x8>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <DIO_enumConnectPullUp+0xa>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	6b 83       	std	Y+3, r22	; 0x03
    1fd4:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <DIO_enumConnectPullUp+0x20>
    1fe0:	3e c1       	rjmp	.+636    	; 0x225e <DIO_enumConnectPullUp+0x29c>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	88 30       	cpi	r24, 0x08	; 8
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <DIO_enumConnectPullUp+0x28>
    1fe8:	3a c1       	rjmp	.+628    	; 0x225e <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	3e 83       	std	Y+6, r19	; 0x06
    1ff2:	2d 83       	std	Y+5, r18	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <DIO_enumConnectPullUp+0x3e>
    1ffe:	5d c0       	rjmp	.+186    	; 0x20ba <DIO_enumConnectPullUp+0xf8>
    2000:	2d 81       	ldd	r18, Y+5	; 0x05
    2002:	3e 81       	ldd	r19, Y+6	; 0x06
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	2c f4       	brge	.+10     	; 0x2014 <DIO_enumConnectPullUp+0x52>
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	71 f0       	breq	.+28     	; 0x202e <DIO_enumConnectPullUp+0x6c>
    2012:	26 c1       	rjmp	.+588    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
    2014:	2d 81       	ldd	r18, Y+5	; 0x05
    2016:	3e 81       	ldd	r19, Y+6	; 0x06
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <DIO_enumConnectPullUp+0x5e>
    201e:	93 c0       	rjmp	.+294    	; 0x2146 <DIO_enumConnectPullUp+0x184>
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	91 05       	cpc	r25, r1
    2028:	09 f4       	brne	.+2      	; 0x202c <DIO_enumConnectPullUp+0x6a>
    202a:	d3 c0       	rjmp	.+422    	; 0x21d2 <DIO_enumConnectPullUp+0x210>
    202c:	19 c1       	rjmp	.+562    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	71 f5       	brne	.+92     	; 0x2090 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2034:	a0 e5       	ldi	r26, 0x50	; 80
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e5       	ldi	r30, 0x50	; 80
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8b 7f       	andi	r24, 0xFB	; 251
    2040:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2042:	aa e3       	ldi	r26, 0x3A	; 58
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ea e3       	ldi	r30, 0x3A	; 58
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	48 2f       	mov	r20, r24
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 c0       	rjmp	.+4      	; 0x205e <DIO_enumConnectPullUp+0x9c>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	2a 95       	dec	r18
    2060:	e2 f7       	brpl	.-8      	; 0x205a <DIO_enumConnectPullUp+0x98>
    2062:	80 95       	com	r24
    2064:	84 23       	and	r24, r20
    2066:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2068:	ab e3       	ldi	r26, 0x3B	; 59
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	eb e3       	ldi	r30, 0x3B	; 59
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_enumConnectPullUp+0xc4>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <DIO_enumConnectPullUp+0xc0>
    208a:	84 2b       	or	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	e8 c0       	rjmp	.+464    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2090:	ab e3       	ldi	r26, 0x3B	; 59
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	eb e3       	ldi	r30, 0x3B	; 59
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_enumConnectPullUp+0xec>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_enumConnectPullUp+0xe8>
    20b2:	80 95       	com	r24
    20b4:	84 23       	and	r24, r20
    20b6:	8c 93       	st	X, r24
    20b8:	d3 c0       	rjmp	.+422    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	71 f5       	brne	.+92     	; 0x211c <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    20c0:	a0 e5       	ldi	r26, 0x50	; 80
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e0 e5       	ldi	r30, 0x50	; 80
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8b 7f       	andi	r24, 0xFB	; 251
    20cc:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    20ce:	a7 e3       	ldi	r26, 0x37	; 55
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e7 e3       	ldi	r30, 0x37	; 55
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_enumConnectPullUp+0x128>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	2a 95       	dec	r18
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_enumConnectPullUp+0x124>
    20ee:	80 95       	com	r24
    20f0:	84 23       	and	r24, r20
    20f2:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    20f4:	a8 e3       	ldi	r26, 0x38	; 56
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_enumConnectPullUp+0x150>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_enumConnectPullUp+0x14c>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	a2 c0       	rjmp	.+324    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    211c:	a8 e3       	ldi	r26, 0x38	; 56
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e8 e3       	ldi	r30, 0x38	; 56
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_enumConnectPullUp+0x178>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_enumConnectPullUp+0x174>
    213e:	80 95       	com	r24
    2140:	84 23       	and	r24, r20
    2142:	8c 93       	st	X, r24
    2144:	8d c0       	rjmp	.+282    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	71 f5       	brne	.+92     	; 0x21a8 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    214c:	a0 e5       	ldi	r26, 0x50	; 80
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e0 e5       	ldi	r30, 0x50	; 80
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8b 7f       	andi	r24, 0xFB	; 251
    2158:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    215a:	a4 e3       	ldi	r26, 0x34	; 52
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e4 e3       	ldi	r30, 0x34	; 52
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_enumConnectPullUp+0x1b4>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	2a 95       	dec	r18
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_enumConnectPullUp+0x1b0>
    217a:	80 95       	com	r24
    217c:	84 23       	and	r24, r20
    217e:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2180:	a5 e3       	ldi	r26, 0x35	; 53
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e3       	ldi	r30, 0x35	; 53
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <DIO_enumConnectPullUp+0x1dc>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <DIO_enumConnectPullUp+0x1d8>
    21a2:	84 2b       	or	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	5c c0       	rjmp	.+184    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    21a8:	a5 e3       	ldi	r26, 0x35	; 53
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e3       	ldi	r30, 0x35	; 53
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_enumConnectPullUp+0x204>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_enumConnectPullUp+0x200>
    21ca:	80 95       	com	r24
    21cc:	84 23       	and	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	47 c0       	rjmp	.+142    	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	71 f5       	brne	.+92     	; 0x2234 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    21d8:	a0 e5       	ldi	r26, 0x50	; 80
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e0 e5       	ldi	r30, 0x50	; 80
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8b 7f       	andi	r24, 0xFB	; 251
    21e4:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    21e6:	a1 e3       	ldi	r26, 0x31	; 49
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e1 e3       	ldi	r30, 0x31	; 49
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	48 2f       	mov	r20, r24
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_enumConnectPullUp+0x240>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	2a 95       	dec	r18
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_enumConnectPullUp+0x23c>
    2206:	80 95       	com	r24
    2208:	84 23       	and	r24, r20
    220a:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    220c:	a2 e3       	ldi	r26, 0x32	; 50
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e2 e3       	ldi	r30, 0x32	; 50
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 2e       	mov	r0, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_enumConnectPullUp+0x268>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_enumConnectPullUp+0x264>
    222e:	84 2b       	or	r24, r20
    2230:	8c 93       	st	X, r24
    2232:	16 c0       	rjmp	.+44     	; 0x2260 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2234:	a2 e3       	ldi	r26, 0x32	; 50
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e2 e3       	ldi	r30, 0x32	; 50
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	48 2f       	mov	r20, r24
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 2e       	mov	r0, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <DIO_enumConnectPullUp+0x290>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	0a 94       	dec	r0
    2254:	e2 f7       	brpl	.-8      	; 0x224e <DIO_enumConnectPullUp+0x28c>
    2256:	80 95       	com	r24
    2258:	84 23       	and	r24, r20
    225a:	8c 93       	st	X, r24
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    225e:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2260:	89 81       	ldd	r24, Y+1	; 0x01
}
    2262:	26 96       	adiw	r28, 0x06	; 6
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <DIO_enumSetPortDir+0x6>
    227a:	00 d0       	rcall	.+0      	; 0x227c <DIO_enumSetPortDir+0x8>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	84 30       	cpi	r24, 0x04	; 4
    228e:	a8 f5       	brcc	.+106    	; 0x22fa <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3d 83       	std	Y+5, r19	; 0x05
    2298:	2c 83       	std	Y+4, r18	; 0x04
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	91 05       	cpc	r25, r1
    22a2:	d1 f0       	breq	.+52     	; 0x22d8 <DIO_enumSetPortDir+0x64>
    22a4:	2c 81       	ldd	r18, Y+4	; 0x04
    22a6:	3d 81       	ldd	r19, Y+5	; 0x05
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 05       	cpc	r19, r1
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <DIO_enumSetPortDir+0x44>
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	9d 81       	ldd	r25, Y+5	; 0x05
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	61 f0       	breq	.+24     	; 0x22ce <DIO_enumSetPortDir+0x5a>
    22b6:	1f c0       	rjmp	.+62     	; 0x22f6 <DIO_enumSetPortDir+0x82>
    22b8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ba:	3d 81       	ldd	r19, Y+5	; 0x05
    22bc:	22 30       	cpi	r18, 0x02	; 2
    22be:	31 05       	cpc	r19, r1
    22c0:	81 f0       	breq	.+32     	; 0x22e2 <DIO_enumSetPortDir+0x6e>
    22c2:	8c 81       	ldd	r24, Y+4	; 0x04
    22c4:	9d 81       	ldd	r25, Y+5	; 0x05
    22c6:	83 30       	cpi	r24, 0x03	; 3
    22c8:	91 05       	cpc	r25, r1
    22ca:	81 f0       	breq	.+32     	; 0x22ec <DIO_enumSetPortDir+0x78>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    22ce:	ea e3       	ldi	r30, 0x3A	; 58
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	80 83       	st	Z, r24
    22d6:	12 c0       	rjmp	.+36     	; 0x22fc <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    22d8:	e7 e3       	ldi	r30, 0x37	; 55
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	80 83       	st	Z, r24
    22e0:	0d c0       	rjmp	.+26     	; 0x22fc <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    22e2:	e4 e3       	ldi	r30, 0x34	; 52
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	80 83       	st	Z, r24
    22ea:	08 c0       	rjmp	.+16     	; 0x22fc <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    22ec:	e1 e3       	ldi	r30, 0x31	; 49
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	80 83       	st	Z, r24
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    22fa:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <DIO_enumWritePortVal+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <DIO_enumWritePortVal+0x8>
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	8a 83       	std	Y+2, r24	; 0x02
    231e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	84 30       	cpi	r24, 0x04	; 4
    2328:	a8 f5       	brcc	.+106    	; 0x2394 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	3d 83       	std	Y+5, r19	; 0x05
    2332:	2c 83       	std	Y+4, r18	; 0x04
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	9d 81       	ldd	r25, Y+5	; 0x05
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	91 05       	cpc	r25, r1
    233c:	d1 f0       	breq	.+52     	; 0x2372 <DIO_enumWritePortVal+0x64>
    233e:	2c 81       	ldd	r18, Y+4	; 0x04
    2340:	3d 81       	ldd	r19, Y+5	; 0x05
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	2c f4       	brge	.+10     	; 0x2352 <DIO_enumWritePortVal+0x44>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	61 f0       	breq	.+24     	; 0x2368 <DIO_enumWritePortVal+0x5a>
    2350:	1f c0       	rjmp	.+62     	; 0x2390 <DIO_enumWritePortVal+0x82>
    2352:	2c 81       	ldd	r18, Y+4	; 0x04
    2354:	3d 81       	ldd	r19, Y+5	; 0x05
    2356:	22 30       	cpi	r18, 0x02	; 2
    2358:	31 05       	cpc	r19, r1
    235a:	81 f0       	breq	.+32     	; 0x237c <DIO_enumWritePortVal+0x6e>
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	9d 81       	ldd	r25, Y+5	; 0x05
    2360:	83 30       	cpi	r24, 0x03	; 3
    2362:	91 05       	cpc	r25, r1
    2364:	81 f0       	breq	.+32     	; 0x2386 <DIO_enumWritePortVal+0x78>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    2368:	eb e3       	ldi	r30, 0x3B	; 59
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	80 83       	st	Z, r24
    2370:	12 c0       	rjmp	.+36     	; 0x2396 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    2372:	e8 e3       	ldi	r30, 0x38	; 56
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	80 83       	st	Z, r24
    237a:	0d c0       	rjmp	.+26     	; 0x2396 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    237c:	e5 e3       	ldi	r30, 0x35	; 53
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	80 83       	st	Z, r24
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    2386:	e2 e3       	ldi	r30, 0x32	; 50
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	80 83       	st	Z, r24
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2390:	19 82       	std	Y+1, r1	; 0x01
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2394:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	27 97       	sbiw	r28, 0x07	; 7
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	7c 83       	std	Y+4, r23	; 0x04
    23c0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	84 30       	cpi	r24, 0x04	; 4
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <DIO_enumReadPorVal+0x26>
    23cc:	3f c0       	rjmp	.+126    	; 0x244c <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3f 83       	std	Y+7, r19	; 0x07
    23d6:	2e 83       	std	Y+6, r18	; 0x06
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	e1 f0       	breq	.+56     	; 0x241a <DIO_enumReadPorVal+0x72>
    23e2:	2e 81       	ldd	r18, Y+6	; 0x06
    23e4:	3f 81       	ldd	r19, Y+7	; 0x07
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <DIO_enumReadPorVal+0x4e>
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	61 f0       	breq	.+24     	; 0x240c <DIO_enumReadPorVal+0x64>
    23f4:	27 c0       	rjmp	.+78     	; 0x2444 <DIO_enumReadPorVal+0x9c>
    23f6:	2e 81       	ldd	r18, Y+6	; 0x06
    23f8:	3f 81       	ldd	r19, Y+7	; 0x07
    23fa:	22 30       	cpi	r18, 0x02	; 2
    23fc:	31 05       	cpc	r19, r1
    23fe:	a1 f0       	breq	.+40     	; 0x2428 <DIO_enumReadPorVal+0x80>
    2400:	8e 81       	ldd	r24, Y+6	; 0x06
    2402:	9f 81       	ldd	r25, Y+7	; 0x07
    2404:	83 30       	cpi	r24, 0x03	; 3
    2406:	91 05       	cpc	r25, r1
    2408:	b1 f0       	breq	.+44     	; 0x2436 <DIO_enumReadPorVal+0x8e>
    240a:	1c c0       	rjmp	.+56     	; 0x2444 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    240c:	e9 e3       	ldi	r30, 0x39	; 57
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	eb 81       	ldd	r30, Y+3	; 0x03
    2414:	fc 81       	ldd	r31, Y+4	; 0x04
    2416:	80 83       	st	Z, r24
    2418:	16 c0       	rjmp	.+44     	; 0x2446 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    241a:	e6 e3       	ldi	r30, 0x36	; 54
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	eb 81       	ldd	r30, Y+3	; 0x03
    2422:	fc 81       	ldd	r31, Y+4	; 0x04
    2424:	80 83       	st	Z, r24
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    2428:	e3 e3       	ldi	r30, 0x33	; 51
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	eb 81       	ldd	r30, Y+3	; 0x03
    2430:	fc 81       	ldd	r31, Y+4	; 0x04
    2432:	80 83       	st	Z, r24
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    2436:	e0 e3       	ldi	r30, 0x30	; 48
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	eb 81       	ldd	r30, Y+3	; 0x03
    243e:	fc 81       	ldd	r31, Y+4	; 0x04
    2440:	80 83       	st	Z, r24
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2444:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    2446:	99 81       	ldd	r25, Y+1	; 0x01
    2448:	9d 83       	std	Y+5, r25	; 0x05
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    244c:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    244e:	29 81       	ldd	r18, Y+1	; 0x01
    2450:	2d 83       	std	Y+5, r18	; 0x05
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2454:	27 96       	adiw	r28, 0x07	; 7
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <DIO_enumTogglePortValue+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <DIO_enumTogglePortValue+0x8>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	08 f0       	brcs	.+2      	; 0x2480 <DIO_enumTogglePortValue+0x1a>
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3c 83       	std	Y+4, r19	; 0x04
    2488:	2b 83       	std	Y+3, r18	; 0x03
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	e9 f0       	breq	.+58     	; 0x24ce <DIO_enumTogglePortValue+0x68>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <DIO_enumTogglePortValue+0x42>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	61 f0       	breq	.+24     	; 0x24be <DIO_enumTogglePortValue+0x58>
    24a6:	2c c0       	rjmp	.+88     	; 0x2500 <DIO_enumTogglePortValue+0x9a>
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	3c 81       	ldd	r19, Y+4	; 0x04
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	b1 f0       	breq	.+44     	; 0x24de <DIO_enumTogglePortValue+0x78>
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	91 05       	cpc	r25, r1
    24ba:	c9 f0       	breq	.+50     	; 0x24ee <DIO_enumTogglePortValue+0x88>
    24bc:	21 c0       	rjmp	.+66     	; 0x2500 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    24be:	ab e3       	ldi	r26, 0x3B	; 59
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	eb e3       	ldi	r30, 0x3B	; 59
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 95       	com	r24
    24ca:	8c 93       	st	X, r24
    24cc:	19 c0       	rjmp	.+50     	; 0x2500 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    24ce:	a8 e3       	ldi	r26, 0x38	; 56
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e8 e3       	ldi	r30, 0x38	; 56
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	80 95       	com	r24
    24da:	8c 93       	st	X, r24
    24dc:	11 c0       	rjmp	.+34     	; 0x2500 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    24de:	a5 e3       	ldi	r26, 0x35	; 53
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e3       	ldi	r30, 0x35	; 53
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	80 95       	com	r24
    24ea:	8c 93       	st	X, r24
    24ec:	09 c0       	rjmp	.+18     	; 0x2500 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    24ee:	a2 e3       	ldi	r26, 0x32	; 50
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e2 e3       	ldi	r30, 0x32	; 50
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	80 95       	com	r24
    24fa:	8c 93       	st	X, r24
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    24fe:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <DIO_vWriteLowNibble+0x6>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <DIO_vWriteLowNibble+0x8>
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	08 f0       	brcs	.+2      	; 0x252e <DIO_vWriteLowNibble+0x1e>
    252c:	62 c0       	rjmp	.+196    	; 0x25f2 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	8f 70       	andi	r24, 0x0F	; 15
    2532:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	3d 83       	std	Y+5, r19	; 0x05
    253c:	2c 83       	std	Y+4, r18	; 0x04
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	91 05       	cpc	r25, r1
    2546:	29 f1       	breq	.+74     	; 0x2592 <DIO_vWriteLowNibble+0x82>
    2548:	2c 81       	ldd	r18, Y+4	; 0x04
    254a:	3d 81       	ldd	r19, Y+5	; 0x05
    254c:	22 30       	cpi	r18, 0x02	; 2
    254e:	31 05       	cpc	r19, r1
    2550:	2c f4       	brge	.+10     	; 0x255c <DIO_vWriteLowNibble+0x4c>
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	61 f0       	breq	.+24     	; 0x2572 <DIO_vWriteLowNibble+0x62>
    255a:	4c c0       	rjmp	.+152    	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
    255c:	2c 81       	ldd	r18, Y+4	; 0x04
    255e:	3d 81       	ldd	r19, Y+5	; 0x05
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	31 f1       	breq	.+76     	; 0x25b2 <DIO_vWriteLowNibble+0xa2>
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	9d 81       	ldd	r25, Y+5	; 0x05
    256a:	83 30       	cpi	r24, 0x03	; 3
    256c:	91 05       	cpc	r25, r1
    256e:	89 f1       	breq	.+98     	; 0x25d2 <DIO_vWriteLowNibble+0xc2>
    2570:	41 c0       	rjmp	.+130    	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2572:	ab e3       	ldi	r26, 0x3B	; 59
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb e3       	ldi	r30, 0x3B	; 59
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 7f       	andi	r24, 0xF0	; 240
    257e:	8c 93       	st	X, r24
      PORTA_REG |= value;
    2580:	ab e3       	ldi	r26, 0x3B	; 59
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	eb e3       	ldi	r30, 0x3B	; 59
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	90 81       	ld	r25, Z
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	89 2b       	or	r24, r25
    258e:	8c 93       	st	X, r24
    2590:	31 c0       	rjmp	.+98     	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2592:	a8 e3       	ldi	r26, 0x38	; 56
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e8 e3       	ldi	r30, 0x38	; 56
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 7f       	andi	r24, 0xF0	; 240
    259e:	8c 93       	st	X, r24
      PORTB_REG |= value;
    25a0:	a8 e3       	ldi	r26, 0x38	; 56
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e8 e3       	ldi	r30, 0x38	; 56
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	90 81       	ld	r25, Z
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	89 2b       	or	r24, r25
    25ae:	8c 93       	st	X, r24
    25b0:	21 c0       	rjmp	.+66     	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    25b2:	a5 e3       	ldi	r26, 0x35	; 53
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e3       	ldi	r30, 0x35	; 53
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 7f       	andi	r24, 0xF0	; 240
    25be:	8c 93       	st	X, r24
      PORTC_REG |= value;
    25c0:	a5 e3       	ldi	r26, 0x35	; 53
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e3       	ldi	r30, 0x35	; 53
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	90 81       	ld	r25, Z
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	89 2b       	or	r24, r25
    25ce:	8c 93       	st	X, r24
    25d0:	11 c0       	rjmp	.+34     	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    25d2:	a2 e3       	ldi	r26, 0x32	; 50
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e2 e3       	ldi	r30, 0x32	; 50
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	80 7f       	andi	r24, 0xF0	; 240
    25de:	8c 93       	st	X, r24
      PORTD_REG |= value;
    25e0:	a2 e3       	ldi	r26, 0x32	; 50
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e2 e3       	ldi	r30, 0x32	; 50
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	90 81       	ld	r25, Z
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	89 2b       	or	r24, r25
    25ee:	8c 93       	st	X, r24
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    25f2:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <DIO_vWriteHighNibble+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <DIO_vWriteHighNibble+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	08 f0       	brcs	.+2      	; 0x2624 <DIO_vWriteHighNibble+0x1e>
    2622:	63 c0       	rjmp	.+198    	; 0x26ea <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	82 95       	swap	r24
    2628:	80 7f       	andi	r24, 0xF0	; 240
    262a:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	3d 83       	std	Y+5, r19	; 0x05
    2634:	2c 83       	std	Y+4, r18	; 0x04
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	91 05       	cpc	r25, r1
    263e:	29 f1       	breq	.+74     	; 0x268a <DIO_vWriteHighNibble+0x84>
    2640:	2c 81       	ldd	r18, Y+4	; 0x04
    2642:	3d 81       	ldd	r19, Y+5	; 0x05
    2644:	22 30       	cpi	r18, 0x02	; 2
    2646:	31 05       	cpc	r19, r1
    2648:	2c f4       	brge	.+10     	; 0x2654 <DIO_vWriteHighNibble+0x4e>
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	61 f0       	breq	.+24     	; 0x266a <DIO_vWriteHighNibble+0x64>
    2652:	4c c0       	rjmp	.+152    	; 0x26ec <DIO_vWriteHighNibble+0xe6>
    2654:	2c 81       	ldd	r18, Y+4	; 0x04
    2656:	3d 81       	ldd	r19, Y+5	; 0x05
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	31 f1       	breq	.+76     	; 0x26aa <DIO_vWriteHighNibble+0xa4>
    265e:	8c 81       	ldd	r24, Y+4	; 0x04
    2660:	9d 81       	ldd	r25, Y+5	; 0x05
    2662:	83 30       	cpi	r24, 0x03	; 3
    2664:	91 05       	cpc	r25, r1
    2666:	89 f1       	breq	.+98     	; 0x26ca <DIO_vWriteHighNibble+0xc4>
    2668:	41 c0       	rjmp	.+130    	; 0x26ec <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    266a:	ab e3       	ldi	r26, 0x3B	; 59
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	eb e3       	ldi	r30, 0x3B	; 59
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	8f 70       	andi	r24, 0x0F	; 15
    2676:	8c 93       	st	X, r24
      PORTA_REG|= value;
    2678:	ab e3       	ldi	r26, 0x3B	; 59
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	eb e3       	ldi	r30, 0x3B	; 59
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	90 81       	ld	r25, Z
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	89 2b       	or	r24, r25
    2686:	8c 93       	st	X, r24
    2688:	31 c0       	rjmp	.+98     	; 0x26ec <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    268a:	a8 e3       	ldi	r26, 0x38	; 56
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e8 e3       	ldi	r30, 0x38	; 56
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8f 70       	andi	r24, 0x0F	; 15
    2696:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2698:	a8 e3       	ldi	r26, 0x38	; 56
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e8 e3       	ldi	r30, 0x38	; 56
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	90 81       	ld	r25, Z
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	89 2b       	or	r24, r25
    26a6:	8c 93       	st	X, r24
    26a8:	21 c0       	rjmp	.+66     	; 0x26ec <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    26aa:	a5 e3       	ldi	r26, 0x35	; 53
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e5 e3       	ldi	r30, 0x35	; 53
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	8c 93       	st	X, r24
      PORTC_REG |= value;
    26b8:	a5 e3       	ldi	r26, 0x35	; 53
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e3       	ldi	r30, 0x35	; 53
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	90 81       	ld	r25, Z
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	89 2b       	or	r24, r25
    26c6:	8c 93       	st	X, r24
    26c8:	11 c0       	rjmp	.+34     	; 0x26ec <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    26ca:	a2 e3       	ldi	r26, 0x32	; 50
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e2 e3       	ldi	r30, 0x32	; 50
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8f 70       	andi	r24, 0x0F	; 15
    26d6:	8c 93       	st	X, r24
      PORTD_REG |= value;
    26d8:	a2 e3       	ldi	r26, 0x32	; 50
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e2 e3       	ldi	r30, 0x32	; 50
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	90 81       	ld	r25, Z
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	89 2b       	or	r24, r25
    26e6:	8c 93       	st	X, r24
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    26ea:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <DIO_vSetLowNibbleDir+0x6>
    2704:	00 d0       	rcall	.+0      	; 0x2706 <DIO_vSetLowNibbleDir+0x8>
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	08 f0       	brcs	.+2      	; 0x271c <DIO_vSetLowNibbleDir+0x1e>
    271a:	62 c0       	rjmp	.+196    	; 0x27e0 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	8f 70       	andi	r24, 0x0F	; 15
    2720:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	29 f1       	breq	.+74     	; 0x2780 <DIO_vSetLowNibbleDir+0x82>
    2736:	2c 81       	ldd	r18, Y+4	; 0x04
    2738:	3d 81       	ldd	r19, Y+5	; 0x05
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	2c f4       	brge	.+10     	; 0x274a <DIO_vSetLowNibbleDir+0x4c>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <DIO_vSetLowNibbleDir+0x62>
    2748:	4c c0       	rjmp	.+152    	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	31 f1       	breq	.+76     	; 0x27a0 <DIO_vSetLowNibbleDir+0xa2>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	91 05       	cpc	r25, r1
    275c:	89 f1       	breq	.+98     	; 0x27c0 <DIO_vSetLowNibbleDir+0xc2>
    275e:	41 c0       	rjmp	.+130    	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2760:	aa e3       	ldi	r26, 0x3A	; 58
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ea e3       	ldi	r30, 0x3A	; 58
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 7f       	andi	r24, 0xF0	; 240
    276c:	8c 93       	st	X, r24
      DDRA_REG |= value;
    276e:	aa e3       	ldi	r26, 0x3A	; 58
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ea e3       	ldi	r30, 0x3A	; 58
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	90 81       	ld	r25, Z
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	89 2b       	or	r24, r25
    277c:	8c 93       	st	X, r24
    277e:	31 c0       	rjmp	.+98     	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2780:	a7 e3       	ldi	r26, 0x37	; 55
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e7 e3       	ldi	r30, 0x37	; 55
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 7f       	andi	r24, 0xF0	; 240
    278c:	8c 93       	st	X, r24
      DDRB_REG |= value;
    278e:	a7 e3       	ldi	r26, 0x37	; 55
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e7 e3       	ldi	r30, 0x37	; 55
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	90 81       	ld	r25, Z
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	89 2b       	or	r24, r25
    279c:	8c 93       	st	X, r24
    279e:	21 c0       	rjmp	.+66     	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    27a0:	a4 e3       	ldi	r26, 0x34	; 52
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e4 e3       	ldi	r30, 0x34	; 52
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 7f       	andi	r24, 0xF0	; 240
    27ac:	8c 93       	st	X, r24
      DDRC_REG |= value;
    27ae:	a4 e3       	ldi	r26, 0x34	; 52
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e4 e3       	ldi	r30, 0x34	; 52
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	90 81       	ld	r25, Z
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	89 2b       	or	r24, r25
    27bc:	8c 93       	st	X, r24
    27be:	11 c0       	rjmp	.+34     	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    27c0:	a1 e3       	ldi	r26, 0x31	; 49
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e1 e3       	ldi	r30, 0x31	; 49
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	80 7f       	andi	r24, 0xF0	; 240
    27cc:	8c 93       	st	X, r24
      DDRD_REG|= value;
    27ce:	a1 e3       	ldi	r26, 0x31	; 49
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e1 e3       	ldi	r30, 0x31	; 49
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	90 81       	ld	r25, Z
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	89 2b       	or	r24, r25
    27dc:	8c 93       	st	X, r24
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    27e0:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <DIO_vSetHighNibbleDir+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <DIO_vSetHighNibbleDir+0x8>
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	08 f0       	brcs	.+2      	; 0x2812 <DIO_vSetHighNibbleDir+0x1e>
    2810:	63 c0       	rjmp	.+198    	; 0x28d8 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	82 95       	swap	r24
    2816:	80 7f       	andi	r24, 0xF0	; 240
    2818:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	3d 83       	std	Y+5, r19	; 0x05
    2822:	2c 83       	std	Y+4, r18	; 0x04
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	9d 81       	ldd	r25, Y+5	; 0x05
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	91 05       	cpc	r25, r1
    282c:	29 f1       	breq	.+74     	; 0x2878 <DIO_vSetHighNibbleDir+0x84>
    282e:	2c 81       	ldd	r18, Y+4	; 0x04
    2830:	3d 81       	ldd	r19, Y+5	; 0x05
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	2c f4       	brge	.+10     	; 0x2842 <DIO_vSetHighNibbleDir+0x4e>
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	9d 81       	ldd	r25, Y+5	; 0x05
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	61 f0       	breq	.+24     	; 0x2858 <DIO_vSetHighNibbleDir+0x64>
    2840:	4c c0       	rjmp	.+152    	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	31 05       	cpc	r19, r1
    284a:	31 f1       	breq	.+76     	; 0x2898 <DIO_vSetHighNibbleDir+0xa4>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	91 05       	cpc	r25, r1
    2854:	89 f1       	breq	.+98     	; 0x28b8 <DIO_vSetHighNibbleDir+0xc4>
    2856:	41 c0       	rjmp	.+130    	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    2858:	aa e3       	ldi	r26, 0x3A	; 58
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ea e3       	ldi	r30, 0x3A	; 58
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8f 70       	andi	r24, 0x0F	; 15
    2864:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2866:	aa e3       	ldi	r26, 0x3A	; 58
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	ea e3       	ldi	r30, 0x3A	; 58
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	90 81       	ld	r25, Z
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	89 2b       	or	r24, r25
    2874:	8c 93       	st	X, r24
    2876:	31 c0       	rjmp	.+98     	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    2878:	a7 e3       	ldi	r26, 0x37	; 55
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e7 e3       	ldi	r30, 0x37	; 55
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	8f 70       	andi	r24, 0x0F	; 15
    2884:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2886:	a7 e3       	ldi	r26, 0x37	; 55
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e7 e3       	ldi	r30, 0x37	; 55
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	90 81       	ld	r25, Z
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	89 2b       	or	r24, r25
    2894:	8c 93       	st	X, r24
    2896:	21 c0       	rjmp	.+66     	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    2898:	a4 e3       	ldi	r26, 0x34	; 52
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e4 e3       	ldi	r30, 0x34	; 52
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8f 70       	andi	r24, 0x0F	; 15
    28a4:	8c 93       	st	X, r24
      DDRC_REG |= value;
    28a6:	a4 e3       	ldi	r26, 0x34	; 52
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e4 e3       	ldi	r30, 0x34	; 52
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	90 81       	ld	r25, Z
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	89 2b       	or	r24, r25
    28b4:	8c 93       	st	X, r24
    28b6:	11 c0       	rjmp	.+34     	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    28b8:	a1 e3       	ldi	r26, 0x31	; 49
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e1 e3       	ldi	r30, 0x31	; 49
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 70       	andi	r24, 0x0F	; 15
    28c4:	8c 93       	st	X, r24
      DDRD_REG |= value;
    28c6:	a1 e3       	ldi	r26, 0x31	; 49
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e1 e3       	ldi	r30, 0x31	; 49
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	90 81       	ld	r25, Z
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	89 2b       	or	r24, r25
    28d4:	8c 93       	st	X, r24
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    28d8:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    28f4:	af e5       	ldi	r26, 0x5F	; 95
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ef e5       	ldi	r30, 0x5F	; 95
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	80 68       	ori	r24, 0x80	; 128
    2900:	8c 93       	st	X, r24
}
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    2910:	af e5       	ldi	r26, 0x5F	; 95
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ef e5       	ldi	r30, 0x5F	; 95
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 77       	andi	r24, 0x7F	; 127
    291c:	8c 93       	st	X, r24
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <TIMER0_vInit>:

/*Global Pointer to array of Function to Hold the Call Back Function Address for Timer*/
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */

void TIMER0_vInit(void)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    292c:	a3 e5       	ldi	r26, 0x53	; 83
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e3 e5       	ldi	r30, 0x53	; 83
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8f 7b       	andi	r24, 0xBF	; 191
    2938:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    293a:	a3 e5       	ldi	r26, 0x53	; 83
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 e5       	ldi	r30, 0x53	; 83
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	87 7f       	andi	r24, 0xF7	; 247
    2946:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    2948:	e2 e5       	ldi	r30, 0x52	; 82
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 ec       	ldi	r24, 0xC0	; 192
    294e:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    2950:	a9 e5       	ldi	r26, 0x59	; 89
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e9 e5       	ldi	r30, 0x59	; 89
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    295e:	a3 e5       	ldi	r26, 0x53	; 83
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e3 e5       	ldi	r30, 0x53	; 83
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 7f       	andi	r24, 0xF8	; 248
    296a:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    296c:	a3 e5       	ldi	r26, 0x53	; 83
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e3 e5       	ldi	r30, 0x53	; 83
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	82 60       	ori	r24, 0x02	; 2
    2978:	8c 93       	st	X, r24
}
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2988:	af e4       	ldi	r26, 0x4F	; 79
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	ef e4       	ldi	r30, 0x4F	; 79
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8e 7f       	andi	r24, 0xFE	; 254
    2994:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    2996:	af e4       	ldi	r26, 0x4F	; 79
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	ef e4       	ldi	r30, 0x4F	; 79
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	82 60       	ori	r24, 0x02	; 2
    29a2:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    29a4:	ae e4       	ldi	r26, 0x4E	; 78
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	ee e4       	ldi	r30, 0x4E	; 78
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	88 60       	ori	r24, 0x08	; 8
    29b0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    29b2:	ae e4       	ldi	r26, 0x4E	; 78
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	ee e4       	ldi	r30, 0x4E	; 78
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	80 61       	ori	r24, 0x10	; 16
    29be:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    29c0:	ea e4       	ldi	r30, 0x4A	; 74
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	84 ef       	ldi	r24, 0xF4	; 244
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    29cc:	e8 e4       	ldi	r30, 0x48	; 72
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	11 82       	std	Z+1, r1	; 0x01
    29d2:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    29d4:	e6 e4       	ldi	r30, 0x46	; 70
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 e2       	ldi	r24, 0x20	; 32
    29da:	9e e4       	ldi	r25, 0x4E	; 78
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    29e0:	ae e4       	ldi	r26, 0x4E	; 78
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	ee e4       	ldi	r30, 0x4E	; 78
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	80 64       	ori	r24, 0x40	; 64
    29ec:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    29ee:	af e4       	ldi	r26, 0x4F	; 79
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ef e4       	ldi	r30, 0x4F	; 79
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 7b       	andi	r24, 0xBF	; 191
    29fa:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    29fc:	af e4       	ldi	r26, 0x4F	; 79
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ef e4       	ldi	r30, 0x4F	; 79
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    2a0a:	af e4       	ldi	r26, 0x4F	; 79
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ef e4       	ldi	r30, 0x4F	; 79
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 7e       	andi	r24, 0xEF	; 239
    2a16:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    2a18:	af e4       	ldi	r26, 0x4F	; 79
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	ef e4       	ldi	r30, 0x4F	; 79
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	80 62       	ori	r24, 0x20	; 32
    2a24:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    2a26:	a9 e5       	ldi	r26, 0x59	; 89
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e9 e5       	ldi	r30, 0x59	; 89
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8b 7f       	andi	r24, 0xFB	; 251
    2a32:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    2a34:	a9 e5       	ldi	r26, 0x59	; 89
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e9 e5       	ldi	r30, 0x59	; 89
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8f 7e       	andi	r24, 0xEF	; 239
    2a40:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    2a42:	a9 e5       	ldi	r26, 0x59	; 89
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e9 e5       	ldi	r30, 0x59	; 89
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	87 7f       	andi	r24, 0xF7	; 247
    2a4e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    2a50:	a9 e5       	ldi	r26, 0x59	; 89
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e9 e5       	ldi	r30, 0x59	; 89
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8f 7d       	andi	r24, 0xDF	; 223
    2a5c:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    2a5e:	ae e4       	ldi	r26, 0x4E	; 78
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	ee e4       	ldi	r30, 0x4E	; 78
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	88 7f       	andi	r24, 0xF8	; 248
    2a6a:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    2a6c:	ae e4       	ldi	r26, 0x4E	; 78
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	ee e4       	ldi	r30, 0x4E	; 78
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	82 60       	ori	r24, 0x02	; 2
    2a78:	8c 93       	st	X, r24


}
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    2a88:	a2 e4       	ldi	r26, 0x42	; 66
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e2 e4       	ldi	r30, 0x42	; 66
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	88 60       	ori	r24, 0x08	; 8
    2a94:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    2a96:	a5 e4       	ldi	r26, 0x45	; 69
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e5 e4       	ldi	r30, 0x45	; 69
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7b       	andi	r24, 0xBF	; 191
    2aa2:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    2aa4:	a5 e4       	ldi	r26, 0x45	; 69
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e5 e4       	ldi	r30, 0x45	; 69
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	87 7f       	andi	r24, 0xF7	; 247
    2ab0:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    2ab2:	e4 e4       	ldi	r30, 0x44	; 68
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    2ab8:	a9 e5       	ldi	r26, 0x59	; 89
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e9 e5       	ldi	r30, 0x59	; 89
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	80 64       	ori	r24, 0x40	; 64
    2ac4:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    2ac6:	a5 e4       	ldi	r26, 0x45	; 69
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e5 e4       	ldi	r30, 0x45	; 69
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 7f       	andi	r24, 0xF8	; 248
    2ad2:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    2ad4:	a5 e4       	ldi	r26, 0x45	; 69
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e5 e4       	ldi	r30, 0x45	; 69
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	85 60       	ori	r24, 0x05	; 5
    2ae0:	8c 93       	st	X, r24
}
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	0f 92       	push	r0
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    2af4:	e2 e5       	ldi	r30, 0x52	; 82
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	80 83       	st	Z, r24
}
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <TIMER1_vSetPreload+0x6>
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    2b12:	ec e4       	ldi	r30, 0x4C	; 76
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    2b34:	e4 e4       	ldi	r30, 0x44	; 68
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	80 83       	st	Z, r24
}
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	0f 92       	push	r0
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    2b50:	ec e5       	ldi	r30, 0x5C	; 92
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	80 83       	st	Z, r24
}
    2b58:	0f 90       	pop	r0
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <TIMER1_vSetCTCA+0x6>
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    2b6e:	ea e4       	ldi	r30, 0x4A	; 74
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <TIMER1_vSetCTCB+0x6>
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    2b92:	e8 e4       	ldi	r30, 0x48	; 72
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	0f 92       	push	r0
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    2bb4:	e3 e4       	ldi	r30, 0x43	; 67
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	80 83       	st	Z, r24
}
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <TIMER1_vSetICR1+0x6>
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    2bd2:	e6 e4       	ldi	r30, 0x46	; 70
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    2bf0:	e2 e5       	ldi	r30, 0x52	; 82
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
}
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    2c04:	ec e4       	ldi	r30, 0x4C	; 76
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    2c1a:	e4 e4       	ldi	r30, 0x44	; 68
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <TIMER_vSetPWM+0x6>
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    2c34:	ea e4       	ldi	r30, 0x4A	; 74
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c52:	ae e4       	ldi	r26, 0x4E	; 78
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	ee e4       	ldi	r30, 0x4E	; 78
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	80 64       	ori	r24, 0x40	; 64
    2c5e:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2c60:	a9 e5       	ldi	r26, 0x59	; 89
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e9 e5       	ldi	r30, 0x59	; 89
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	80 62       	ori	r24, 0x20	; 32
    2c6c:	8c 93       	st	X, r24
}
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <TIMER_vICUSetTriggerEdge+0x6>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    2c80:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c88:	ae e4       	ldi	r26, 0x4E	; 78
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ee e4       	ldi	r30, 0x4E	; 78
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 64       	ori	r24, 0x40	; 64
    2c94:	8c 93       	st	X, r24
    2c96:	0d c0       	rjmp	.+26     	; 0x2cb2 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	88 23       	and	r24, r24
    2c9c:	41 f4       	brne	.+16     	; 0x2cae <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2c9e:	ae e4       	ldi	r26, 0x4E	; 78
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	ee e4       	ldi	r30, 0x4E	; 78
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	8f 7b       	andi	r24, 0xBF	; 191
    2caa:	8c 93       	st	X, r24
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2cc6:	a9 e5       	ldi	r26, 0x59	; 89
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e9 e5       	ldi	r30, 0x59	; 89
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	80 62       	ori	r24, 0x20	; 32
    2cd2:	8c 93       	st	X, r24
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2ce2:	a9 e5       	ldi	r26, 0x59	; 89
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e9 e5       	ldi	r30, 0x59	; 89
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8f 7d       	andi	r24, 0xDF	; 223
    2cee:	8c 93       	st	X, r24
}
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2cfe:	e6 e4       	ldi	r30, 0x46	; 70
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    2d14:	a1 e4       	ldi	r26, 0x41	; 65
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e1 e4       	ldi	r30, 0x41	; 65
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 7f       	andi	r24, 0xF8	; 248
    2d20:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    2d22:	a1 e4       	ldi	r26, 0x41	; 65
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e1 e4       	ldi	r30, 0x41	; 65
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	86 60       	ori	r24, 0x06	; 6
    2d2e:	8c 93       	st	X, r24
}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    2d3e:	a1 e4       	ldi	r26, 0x41	; 65
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e1 e4       	ldi	r30, 0x41	; 65
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 60       	ori	r24, 0x08	; 8
    2d4a:	8c 93       	st	X, r24
}
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    2d5a:	a1 e4       	ldi	r26, 0x41	; 65
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e1 e4       	ldi	r30, 0x41	; 65
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	88 61       	ori	r24, 0x18	; 24
    2d66:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    2d68:	e1 e4       	ldi	r30, 0x41	; 65
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	10 82       	st	Z, r1
}
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <TIMER_u8SetCallBack>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <TIMER_u8SetCallBack+0x6>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <TIMER_u8SetCallBack+0x8>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	9b 83       	std	Y+3, r25	; 0x03
    2d82:	8a 83       	std	Y+2, r24	; 0x02
    2d84:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    2d86:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f0       	breq	.+26     	; 0x2daa <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e0 5c       	subi	r30, 0xC0	; 192
    2d9e:	fc 4f       	sbci	r31, 0xFC	; 252
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	2f 93       	push	r18
    2dca:	3f 93       	push	r19
    2dcc:	4f 93       	push	r20
    2dce:	5f 93       	push	r21
    2dd0:	6f 93       	push	r22
    2dd2:	7f 93       	push	r23
    2dd4:	8f 93       	push	r24
    2dd6:	9f 93       	push	r25
    2dd8:	af 93       	push	r26
    2dda:	bf 93       	push	r27
    2ddc:	ef 93       	push	r30
    2dde:	ff 93       	push	r31
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    2de8:	80 91 56 03 	lds	r24, 0x0356
    2dec:	90 91 57 03 	lds	r25, 0x0357
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	29 f0       	breq	.+10     	; 0x2dfe <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    2df4:	e0 91 56 03 	lds	r30, 0x0356
    2df8:	f0 91 57 03 	lds	r31, 0x0357
    2dfc:	09 95       	icall
	}
}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	ff 91       	pop	r31
    2e04:	ef 91       	pop	r30
    2e06:	bf 91       	pop	r27
    2e08:	af 91       	pop	r26
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	7f 91       	pop	r23
    2e10:	6f 91       	pop	r22
    2e12:	5f 91       	pop	r21
    2e14:	4f 91       	pop	r20
    2e16:	3f 91       	pop	r19
    2e18:	2f 91       	pop	r18
    2e1a:	0f 90       	pop	r0
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	0f 90       	pop	r0
    2e20:	1f 90       	pop	r1
    2e22:	18 95       	reti

00002e24 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    2e24:	1f 92       	push	r1
    2e26:	0f 92       	push	r0
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	0f 92       	push	r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	2f 93       	push	r18
    2e30:	3f 93       	push	r19
    2e32:	4f 93       	push	r20
    2e34:	5f 93       	push	r21
    2e36:	6f 93       	push	r22
    2e38:	7f 93       	push	r23
    2e3a:	8f 93       	push	r24
    2e3c:	9f 93       	push	r25
    2e3e:	af 93       	push	r26
    2e40:	bf 93       	push	r27
    2e42:	ef 93       	push	r30
    2e44:	ff 93       	push	r31
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    2e4e:	80 91 54 03 	lds	r24, 0x0354
    2e52:	90 91 55 03 	lds	r25, 0x0355
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	29 f0       	breq	.+10     	; 0x2e64 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    2e5a:	e0 91 54 03 	lds	r30, 0x0354
    2e5e:	f0 91 55 03 	lds	r31, 0x0355
    2e62:	09 95       	icall
	}
}
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	ff 91       	pop	r31
    2e6a:	ef 91       	pop	r30
    2e6c:	bf 91       	pop	r27
    2e6e:	af 91       	pop	r26
    2e70:	9f 91       	pop	r25
    2e72:	8f 91       	pop	r24
    2e74:	7f 91       	pop	r23
    2e76:	6f 91       	pop	r22
    2e78:	5f 91       	pop	r21
    2e7a:	4f 91       	pop	r20
    2e7c:	3f 91       	pop	r19
    2e7e:	2f 91       	pop	r18
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	0f 90       	pop	r0
    2e86:	1f 90       	pop	r1
    2e88:	18 95       	reti

00002e8a <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	0f 92       	push	r0
    2e92:	11 24       	eor	r1, r1
    2e94:	2f 93       	push	r18
    2e96:	3f 93       	push	r19
    2e98:	4f 93       	push	r20
    2e9a:	5f 93       	push	r21
    2e9c:	6f 93       	push	r22
    2e9e:	7f 93       	push	r23
    2ea0:	8f 93       	push	r24
    2ea2:	9f 93       	push	r25
    2ea4:	af 93       	push	r26
    2ea6:	bf 93       	push	r27
    2ea8:	ef 93       	push	r30
    2eaa:	ff 93       	push	r31
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    2eb4:	80 91 52 03 	lds	r24, 0x0352
    2eb8:	90 91 53 03 	lds	r25, 0x0353
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	29 f0       	breq	.+10     	; 0x2eca <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    2ec0:	e0 91 52 03 	lds	r30, 0x0352
    2ec4:	f0 91 53 03 	lds	r31, 0x0353
    2ec8:	09 95       	icall
	}
}
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	0f 90       	pop	r0
    2eec:	1f 90       	pop	r1
    2eee:	18 95       	reti

00002ef0 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    2ef0:	1f 92       	push	r1
    2ef2:	0f 92       	push	r0
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	0f 92       	push	r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	2f 93       	push	r18
    2efc:	3f 93       	push	r19
    2efe:	4f 93       	push	r20
    2f00:	5f 93       	push	r21
    2f02:	6f 93       	push	r22
    2f04:	7f 93       	push	r23
    2f06:	8f 93       	push	r24
    2f08:	9f 93       	push	r25
    2f0a:	af 93       	push	r26
    2f0c:	bf 93       	push	r27
    2f0e:	ef 93       	push	r30
    2f10:	ff 93       	push	r31
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    2f1a:	80 91 50 03 	lds	r24, 0x0350
    2f1e:	90 91 51 03 	lds	r25, 0x0351
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	29 f0       	breq	.+10     	; 0x2f30 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    2f26:	e0 91 50 03 	lds	r30, 0x0350
    2f2a:	f0 91 51 03 	lds	r31, 0x0351
    2f2e:	09 95       	icall
	}
}
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	ff 91       	pop	r31
    2f36:	ef 91       	pop	r30
    2f38:	bf 91       	pop	r27
    2f3a:	af 91       	pop	r26
    2f3c:	9f 91       	pop	r25
    2f3e:	8f 91       	pop	r24
    2f40:	7f 91       	pop	r23
    2f42:	6f 91       	pop	r22
    2f44:	5f 91       	pop	r21
    2f46:	4f 91       	pop	r20
    2f48:	3f 91       	pop	r19
    2f4a:	2f 91       	pop	r18
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    2f56:	1f 92       	push	r1
    2f58:	0f 92       	push	r0
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	0f 92       	push	r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	2f 93       	push	r18
    2f62:	3f 93       	push	r19
    2f64:	4f 93       	push	r20
    2f66:	5f 93       	push	r21
    2f68:	6f 93       	push	r22
    2f6a:	7f 93       	push	r23
    2f6c:	8f 93       	push	r24
    2f6e:	9f 93       	push	r25
    2f70:	af 93       	push	r26
    2f72:	bf 93       	push	r27
    2f74:	ef 93       	push	r30
    2f76:	ff 93       	push	r31
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    2f80:	80 91 4e 03 	lds	r24, 0x034E
    2f84:	90 91 4f 03 	lds	r25, 0x034F
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	29 f0       	breq	.+10     	; 0x2f96 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    2f8c:	e0 91 4e 03 	lds	r30, 0x034E
    2f90:	f0 91 4f 03 	lds	r31, 0x034F
    2f94:	09 95       	icall
	}
}
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	ff 91       	pop	r31
    2f9c:	ef 91       	pop	r30
    2f9e:	bf 91       	pop	r27
    2fa0:	af 91       	pop	r26
    2fa2:	9f 91       	pop	r25
    2fa4:	8f 91       	pop	r24
    2fa6:	7f 91       	pop	r23
    2fa8:	6f 91       	pop	r22
    2faa:	5f 91       	pop	r21
    2fac:	4f 91       	pop	r20
    2fae:	3f 91       	pop	r19
    2fb0:	2f 91       	pop	r18
    2fb2:	0f 90       	pop	r0
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	0f 90       	pop	r0
    2fb8:	1f 90       	pop	r1
    2fba:	18 95       	reti

00002fbc <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    2fbc:	1f 92       	push	r1
    2fbe:	0f 92       	push	r0
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	0f 92       	push	r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	2f 93       	push	r18
    2fc8:	3f 93       	push	r19
    2fca:	4f 93       	push	r20
    2fcc:	5f 93       	push	r21
    2fce:	6f 93       	push	r22
    2fd0:	7f 93       	push	r23
    2fd2:	8f 93       	push	r24
    2fd4:	9f 93       	push	r25
    2fd6:	af 93       	push	r26
    2fd8:	bf 93       	push	r27
    2fda:	ef 93       	push	r30
    2fdc:	ff 93       	push	r31
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    2fe6:	80 91 4c 03 	lds	r24, 0x034C
    2fea:	90 91 4d 03 	lds	r25, 0x034D
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	29 f0       	breq	.+10     	; 0x2ffc <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    2ff2:	e0 91 4c 03 	lds	r30, 0x034C
    2ff6:	f0 91 4d 03 	lds	r31, 0x034D
    2ffa:	09 95       	icall
	}
}
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	0f 90       	pop	r0
    301e:	1f 90       	pop	r1
    3020:	18 95       	reti

00003022 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    3022:	1f 92       	push	r1
    3024:	0f 92       	push	r0
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	0f 92       	push	r0
    302a:	11 24       	eor	r1, r1
    302c:	2f 93       	push	r18
    302e:	3f 93       	push	r19
    3030:	4f 93       	push	r20
    3032:	5f 93       	push	r21
    3034:	6f 93       	push	r22
    3036:	7f 93       	push	r23
    3038:	8f 93       	push	r24
    303a:	9f 93       	push	r25
    303c:	af 93       	push	r26
    303e:	bf 93       	push	r27
    3040:	ef 93       	push	r30
    3042:	ff 93       	push	r31
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    304c:	80 91 4a 03 	lds	r24, 0x034A
    3050:	90 91 4b 03 	lds	r25, 0x034B
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	29 f0       	breq	.+10     	; 0x3062 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    3058:	e0 91 4a 03 	lds	r30, 0x034A
    305c:	f0 91 4b 03 	lds	r31, 0x034B
    3060:	09 95       	icall
	}
}
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	ff 91       	pop	r31
    3068:	ef 91       	pop	r30
    306a:	bf 91       	pop	r27
    306c:	af 91       	pop	r26
    306e:	9f 91       	pop	r25
    3070:	8f 91       	pop	r24
    3072:	7f 91       	pop	r23
    3074:	6f 91       	pop	r22
    3076:	5f 91       	pop	r21
    3078:	4f 91       	pop	r20
    307a:	3f 91       	pop	r19
    307c:	2f 91       	pop	r18
    307e:	0f 90       	pop	r0
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	0f 90       	pop	r0
    3084:	1f 90       	pop	r1
    3086:	18 95       	reti

00003088 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    3088:	1f 92       	push	r1
    308a:	0f 92       	push	r0
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	0f 92       	push	r0
    3090:	11 24       	eor	r1, r1
    3092:	2f 93       	push	r18
    3094:	3f 93       	push	r19
    3096:	4f 93       	push	r20
    3098:	5f 93       	push	r21
    309a:	6f 93       	push	r22
    309c:	7f 93       	push	r23
    309e:	8f 93       	push	r24
    30a0:	9f 93       	push	r25
    30a2:	af 93       	push	r26
    30a4:	bf 93       	push	r27
    30a6:	ef 93       	push	r30
    30a8:	ff 93       	push	r31
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    30b2:	80 91 48 03 	lds	r24, 0x0348
    30b6:	90 91 49 03 	lds	r25, 0x0349
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    30be:	e0 91 48 03 	lds	r30, 0x0348
    30c2:	f0 91 49 03 	lds	r31, 0x0349
    30c6:	09 95       	icall
	}
}
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	ff 91       	pop	r31
    30ce:	ef 91       	pop	r30
    30d0:	bf 91       	pop	r27
    30d2:	af 91       	pop	r26
    30d4:	9f 91       	pop	r25
    30d6:	8f 91       	pop	r24
    30d8:	7f 91       	pop	r23
    30da:	6f 91       	pop	r22
    30dc:	5f 91       	pop	r21
    30de:	4f 91       	pop	r20
    30e0:	3f 91       	pop	r19
    30e2:	2f 91       	pop	r18
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <SSD_vInitDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_vInitDataPort(SSD_config Configuration)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <SSD_vInitDataPort+0x6>
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <SSD_vInitDataPort+0x8>
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	49 83       	std	Y+1, r20	; 0x01
    30fe:	5a 83       	std	Y+2, r21	; 0x02
    3100:	6b 83       	std	Y+3, r22	; 0x03
    3102:	7c 83       	std	Y+4, r23	; 0x04
    3104:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    3106:	8d 81       	ldd	r24, Y+5	; 0x05
    3108:	88 23       	and	r24, r24
    310a:	29 f4       	brne	.+10     	; 0x3116 <SSD_vInitDataPort+0x28>
  {
    DIO_vSetLowNibbleDir(Configuration.DataPort, 0x0F);
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	6f e0       	ldi	r22, 0x0F	; 15
    3110:	0e 94 7f 13 	call	0x26fe	; 0x26fe <DIO_vSetLowNibbleDir>
    3114:	07 c0       	rjmp	.+14     	; 0x3124 <SSD_vInitDataPort+0x36>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	81 30       	cpi	r24, 0x01	; 1
    311a:	21 f4       	brne	.+8      	; 0x3124 <SSD_vInitDataPort+0x36>
  {
    DIO_vSetHighNibbleDir(Configuration.DataPort, 0xF0);
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	60 ef       	ldi	r22, 0xF0	; 240
    3120:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <DIO_vSetHighNibbleDir>
  }
}
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <SSD_vSendNumber>:
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vSendNumber(SSD_config Configuration, u8 Copy_u8Number)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <SSD_vSendNumber+0x6>
    313a:	00 d0       	rcall	.+0      	; 0x313c <SSD_vSendNumber+0x8>
    313c:	00 d0       	rcall	.+0      	; 0x313e <SSD_vSendNumber+0xa>
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	49 83       	std	Y+1, r20	; 0x01
    3144:	5a 83       	std	Y+2, r21	; 0x02
    3146:	6b 83       	std	Y+3, r22	; 0x03
    3148:	7c 83       	std	Y+4, r23	; 0x04
    314a:	8d 83       	std	Y+5, r24	; 0x05
    314c:	2e 83       	std	Y+6, r18	; 0x06
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	88 23       	and	r24, r24
    3152:	29 f4       	brne	.+10     	; 0x315e <SSD_vSendNumber+0x2a>
  {
    DIO_vWriteLowNibble(Configuration.DataPort, Copy_u8Number);
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	6e 81       	ldd	r22, Y+6	; 0x06
    3158:	0e 94 88 12 	call	0x2510	; 0x2510 <DIO_vWriteLowNibble>
    315c:	07 c0       	rjmp	.+14     	; 0x316c <SSD_vSendNumber+0x38>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	21 f4       	brne	.+8      	; 0x316c <SSD_vSendNumber+0x38>
  {
    DIO_vWriteHighNibble(Configuration.DataPort, Copy_u8Number);
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	6e 81       	ldd	r22, Y+6	; 0x06
    3168:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
  }
}
    316c:	26 96       	adiw	r28, 0x06	; 6
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <SSD_vEnable>:
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vEnable(SSD_config Configuration)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	00 d0       	rcall	.+0      	; 0x3184 <SSD_vEnable+0x6>
    3184:	00 d0       	rcall	.+0      	; 0x3186 <SSD_vEnable+0x8>
    3186:	0f 92       	push	r0
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	49 83       	std	Y+1, r20	; 0x01
    318e:	5a 83       	std	Y+2, r21	; 0x02
    3190:	6b 83       	std	Y+3, r22	; 0x03
    3192:	7c 83       	std	Y+4, r23	; 0x04
    3194:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	88 23       	and	r24, r24
    319a:	69 f4       	brne	.+26     	; 0x31b6 <SSD_vEnable+0x38>
  {
    DIO_enumSetPinDir   (Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	69 2f       	mov	r22, r25
    31a2:	41 e0       	ldi	r20, 0x01	; 1
    31a4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
    DIO_enumWritePinVal (Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	69 2f       	mov	r22, r25
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <SSD_vEnable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	61 f4       	brne	.+24     	; 0x31d4 <SSD_vEnable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	69 2f       	mov	r22, r25
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	69 2f       	mov	r22, r25
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  }
}
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <SSD_vDisable>:
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vDisable(SSD_config Configuration)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <SSD_vDisable+0x6>
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <SSD_vDisable+0x8>
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	49 83       	std	Y+1, r20	; 0x01
    31f4:	5a 83       	std	Y+2, r21	; 0x02
    31f6:	6b 83       	std	Y+3, r22	; 0x03
    31f8:	7c 83       	std	Y+4, r23	; 0x04
    31fa:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	88 23       	and	r24, r24
    3200:	69 f4       	brne	.+26     	; 0x321c <SSD_vDisable+0x38>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	9c 81       	ldd	r25, Y+4	; 0x04
    3206:	69 2f       	mov	r22, r25
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	69 2f       	mov	r22, r25
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    321a:	0f c0       	rjmp	.+30     	; 0x323a <SSD_vDisable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	61 f4       	brne	.+24     	; 0x323a <SSD_vDisable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    3222:	8b 81       	ldd	r24, Y+3	; 0x03
    3224:	9c 81       	ldd	r25, Y+4	; 0x04
    3226:	69 2f       	mov	r22, r25
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	69 2f       	mov	r22, r25
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  }
}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	00 d0       	rcall	.+0      	; 0x3250 <BUZ_vInit+0x6>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	69 83       	std	Y+1, r22	; 0x01
    3258:	7a 83       	std	Y+2, r23	; 0x02
    325a:	8b 83       	std	Y+3, r24	; 0x03

  DIO_enumSetPinDir(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	69 2f       	mov	r22, r25
    3262:	41 e0       	ldi	r20, 0x01	; 1
    3264:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <BUZ_vOn+0x6>
    327a:	0f 92       	push	r0
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	69 83       	std	Y+1, r22	; 0x01
    3282:	7a 83       	std	Y+2, r23	; 0x02
    3284:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	39 f4       	brne	.+14     	; 0x329a <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	69 2f       	mov	r22, r25
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	88 23       	and	r24, r24
    329e:	31 f4       	brne	.+12     	; 0x32ac <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	69 2f       	mov	r22, r25
    32a6:	41 e0       	ldi	r20, 0x01	; 1
    32a8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  }
}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <BUZ_vOff>:
* Parameters :
             => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	00 d0       	rcall	.+0      	; 0x32be <BUZ_vOff+0x6>
    32be:	0f 92       	push	r0
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	69 83       	std	Y+1, r22	; 0x01
    32c6:	7a 83       	std	Y+2, r23	; 0x02
    32c8:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	39 f4       	brne	.+14     	; 0x32de <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_LOW);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	69 2f       	mov	r22, r25
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    32dc:	09 c0       	rjmp	.+18     	; 0x32f0 <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	88 23       	and	r24, r24
    32e2:	31 f4       	brne	.+12     	; 0x32f0 <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_HIGH);
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	9a 81       	ldd	r25, Y+2	; 0x02
    32e8:	69 2f       	mov	r22, r25
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  }
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	00 d0       	rcall	.+0      	; 0x3302 <BUZ_vTog+0x6>
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	69 83       	std	Y+1, r22	; 0x01
    330a:	7a 83       	std	Y+2, r23	; 0x02
    330c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	69 2f       	mov	r22, r25
    3314:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_enumTogglePinVal>
}
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	c6 54       	subi	r28, 0x46	; 70
    3332:	d0 40       	sbci	r29, 0x00	; 0
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	fe 01       	movw	r30, r28
    3340:	ed 5b       	subi	r30, 0xBD	; 189
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	a8 e4       	ldi	r26, 0x48	; 72
    334a:	b2 e4       	ldi	r27, 0x42	; 66
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3354:	8e 01       	movw	r16, r28
    3356:	01 5c       	subi	r16, 0xC1	; 193
    3358:	1f 4f       	sbci	r17, 0xFF	; 255
    335a:	fe 01       	movw	r30, r28
    335c:	ed 5b       	subi	r30, 0xBD	; 189
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4a ef       	ldi	r20, 0xFA	; 250
    336e:	54 e4       	ldi	r21, 0x44	; 68
    3370:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	f8 01       	movw	r30, r16
    337a:	80 83       	st	Z, r24
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	a2 83       	std	Z+2, r26	; 0x02
    3380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3382:	fe 01       	movw	r30, r28
    3384:	ff 96       	adiw	r30, 0x3f	; 63
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <CLCD_vInit+0x84>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9e af       	std	Y+62, r25	; 0x3e
    33a4:	8d af       	std	Y+61, r24	; 0x3d
    33a6:	46 c0       	rjmp	.+140    	; 0x3434 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    33a8:	fe 01       	movw	r30, r28
    33aa:	ff 96       	adiw	r30, 0x3f	; 63
    33ac:	60 81       	ld	r22, Z
    33ae:	71 81       	ldd	r23, Z+1	; 0x01
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	3f ef       	ldi	r19, 0xFF	; 255
    33b8:	4f e7       	ldi	r20, 0x7F	; 127
    33ba:	57 e4       	ldi	r21, 0x47	; 71
    33bc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    33c0:	18 16       	cp	r1, r24
    33c2:	64 f5       	brge	.+88     	; 0x341c <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c4:	fe 01       	movw	r30, r28
    33c6:	ed 5b       	subi	r30, 0xBD	; 189
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e2       	ldi	r20, 0x20	; 32
    33d8:	51 e4       	ldi	r21, 0x41	; 65
    33da:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	bc 01       	movw	r22, r24
    33e4:	cd 01       	movw	r24, r26
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9e af       	std	Y+62, r25	; 0x3e
    33f0:	8d af       	std	Y+61, r24	; 0x3d
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <CLCD_vInit+0xee>
    33f4:	88 ec       	ldi	r24, 0xC8	; 200
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9c af       	std	Y+60, r25	; 0x3c
    33fa:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    33fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <CLCD_vInit+0xdc>
    3404:	9c af       	std	Y+60, r25	; 0x3c
    3406:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3408:	8d ad       	ldd	r24, Y+61	; 0x3d
    340a:	9e ad       	ldd	r25, Y+62	; 0x3e
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	9e af       	std	Y+62, r25	; 0x3e
    3410:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3412:	8d ad       	ldd	r24, Y+61	; 0x3d
    3414:	9e ad       	ldd	r25, Y+62	; 0x3e
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	69 f7       	brne	.-38     	; 0x33f4 <CLCD_vInit+0xd0>
    341a:	16 c0       	rjmp	.+44     	; 0x3448 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341c:	fe 01       	movw	r30, r28
    341e:	ff 96       	adiw	r30, 0x3f	; 63
    3420:	60 81       	ld	r22, Z
    3422:	71 81       	ldd	r23, Z+1	; 0x01
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e af       	std	Y+62, r25	; 0x3e
    3432:	8d af       	std	Y+61, r24	; 0x3d
    3434:	8d ad       	ldd	r24, Y+61	; 0x3d
    3436:	9e ad       	ldd	r25, Y+62	; 0x3e
    3438:	9a af       	std	Y+58, r25	; 0x3a
    343a:	89 af       	std	Y+57, r24	; 0x39
    343c:	89 ad       	ldd	r24, Y+57	; 0x39
    343e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <CLCD_vInit+0x11c>
    3444:	9a af       	std	Y+58, r25	; 0x3a
    3446:	89 af       	std	Y+57, r24	; 0x39

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	64 e0       	ldi	r22, 0x04	; 4
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	65 e0       	ldi	r22, 0x05	; 5
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	66 e0       	ldi	r22, 0x06	; 6
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	67 e0       	ldi	r22, 0x07	; 7
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	66 e0       	ldi	r22, 0x06	; 6
    347e:	41 e0       	ldi	r20, 0x01	; 1
    3480:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	65 e0       	ldi	r22, 0x05	; 5
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	a0 e2       	ldi	r26, 0x20	; 32
    349a:	b1 e4       	ldi	r27, 0x41	; 65
    349c:	8d ab       	std	Y+53, r24	; 0x35
    349e:	9e ab       	std	Y+54, r25	; 0x36
    34a0:	af ab       	std	Y+55, r26	; 0x37
    34a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a4:	6d a9       	ldd	r22, Y+53	; 0x35
    34a6:	7e a9       	ldd	r23, Y+54	; 0x36
    34a8:	8f a9       	ldd	r24, Y+55	; 0x37
    34aa:	98 ad       	ldd	r25, Y+56	; 0x38
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	4a ef       	ldi	r20, 0xFA	; 250
    34b2:	54 e4       	ldi	r21, 0x44	; 68
    34b4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	89 ab       	std	Y+49, r24	; 0x31
    34be:	9a ab       	std	Y+50, r25	; 0x32
    34c0:	ab ab       	std	Y+51, r26	; 0x33
    34c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34c4:	69 a9       	ldd	r22, Y+49	; 0x31
    34c6:	7a a9       	ldd	r23, Y+50	; 0x32
    34c8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ca:	9c a9       	ldd	r25, Y+52	; 0x34
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    34d8:	88 23       	and	r24, r24
    34da:	2c f4       	brge	.+10     	; 0x34e6 <CLCD_vInit+0x1c2>
		__ticks = 1;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	98 ab       	std	Y+48, r25	; 0x30
    34e2:	8f a7       	std	Y+47, r24	; 0x2f
    34e4:	3f c0       	rjmp	.+126    	; 0x3564 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    34e6:	69 a9       	ldd	r22, Y+49	; 0x31
    34e8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ea:	8b a9       	ldd	r24, Y+51	; 0x33
    34ec:	9c a9       	ldd	r25, Y+52	; 0x34
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	3f ef       	ldi	r19, 0xFF	; 255
    34f2:	4f e7       	ldi	r20, 0x7F	; 127
    34f4:	57 e4       	ldi	r21, 0x47	; 71
    34f6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    34fa:	18 16       	cp	r1, r24
    34fc:	4c f5       	brge	.+82     	; 0x3550 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3500:	7e a9       	ldd	r23, Y+54	; 0x36
    3502:	8f a9       	ldd	r24, Y+55	; 0x37
    3504:	98 ad       	ldd	r25, Y+56	; 0x38
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e2       	ldi	r20, 0x20	; 32
    350c:	51 e4       	ldi	r21, 0x41	; 65
    350e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	98 ab       	std	Y+48, r25	; 0x30
    3524:	8f a7       	std	Y+47, r24	; 0x2f
    3526:	0f c0       	rjmp	.+30     	; 0x3546 <CLCD_vInit+0x222>
    3528:	88 ec       	ldi	r24, 0xC8	; 200
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9e a7       	std	Y+46, r25	; 0x2e
    352e:	8d a7       	std	Y+45, r24	; 0x2d
    3530:	8d a5       	ldd	r24, Y+45	; 0x2d
    3532:	9e a5       	ldd	r25, Y+46	; 0x2e
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <CLCD_vInit+0x210>
    3538:	9e a7       	std	Y+46, r25	; 0x2e
    353a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353c:	8f a5       	ldd	r24, Y+47	; 0x2f
    353e:	98 a9       	ldd	r25, Y+48	; 0x30
    3540:	01 97       	sbiw	r24, 0x01	; 1
    3542:	98 ab       	std	Y+48, r25	; 0x30
    3544:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3546:	8f a5       	ldd	r24, Y+47	; 0x2f
    3548:	98 a9       	ldd	r25, Y+48	; 0x30
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	69 f7       	brne	.-38     	; 0x3528 <CLCD_vInit+0x204>
    354e:	14 c0       	rjmp	.+40     	; 0x3578 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3550:	69 a9       	ldd	r22, Y+49	; 0x31
    3552:	7a a9       	ldd	r23, Y+50	; 0x32
    3554:	8b a9       	ldd	r24, Y+51	; 0x33
    3556:	9c a9       	ldd	r25, Y+52	; 0x34
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	98 ab       	std	Y+48, r25	; 0x30
    3562:	8f a7       	std	Y+47, r24	; 0x2f
    3564:	8f a5       	ldd	r24, Y+47	; 0x2f
    3566:	98 a9       	ldd	r25, Y+48	; 0x30
    3568:	9c a7       	std	Y+44, r25	; 0x2c
    356a:	8b a7       	std	Y+43, r24	; 0x2b
    356c:	8b a5       	ldd	r24, Y+43	; 0x2b
    356e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <CLCD_vInit+0x24c>
    3574:	9c a7       	std	Y+44, r25	; 0x2c
    3576:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    3578:	88 e2       	ldi	r24, 0x28	; 40
    357a:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	a0 e8       	ldi	r26, 0x80	; 128
    3584:	bf e3       	ldi	r27, 0x3F	; 63
    3586:	8f a3       	std	Y+39, r24	; 0x27
    3588:	98 a7       	std	Y+40, r25	; 0x28
    358a:	a9 a7       	std	Y+41, r26	; 0x29
    358c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358e:	6f a1       	ldd	r22, Y+39	; 0x27
    3590:	78 a5       	ldd	r23, Y+40	; 0x28
    3592:	89 a5       	ldd	r24, Y+41	; 0x29
    3594:	9a a5       	ldd	r25, Y+42	; 0x2a
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	4a ef       	ldi	r20, 0xFA	; 250
    359c:	54 e4       	ldi	r21, 0x44	; 68
    359e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	8b a3       	std	Y+35, r24	; 0x23
    35a8:	9c a3       	std	Y+36, r25	; 0x24
    35aa:	ad a3       	std	Y+37, r26	; 0x25
    35ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35ae:	6b a1       	ldd	r22, Y+35	; 0x23
    35b0:	7c a1       	ldd	r23, Y+36	; 0x24
    35b2:	8d a1       	ldd	r24, Y+37	; 0x25
    35b4:	9e a1       	ldd	r25, Y+38	; 0x26
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e8       	ldi	r20, 0x80	; 128
    35bc:	5f e3       	ldi	r21, 0x3F	; 63
    35be:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    35c2:	88 23       	and	r24, r24
    35c4:	2c f4       	brge	.+10     	; 0x35d0 <CLCD_vInit+0x2ac>
		__ticks = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	9a a3       	std	Y+34, r25	; 0x22
    35cc:	89 a3       	std	Y+33, r24	; 0x21
    35ce:	3f c0       	rjmp	.+126    	; 0x364e <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    35d0:	6b a1       	ldd	r22, Y+35	; 0x23
    35d2:	7c a1       	ldd	r23, Y+36	; 0x24
    35d4:	8d a1       	ldd	r24, Y+37	; 0x25
    35d6:	9e a1       	ldd	r25, Y+38	; 0x26
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	3f ef       	ldi	r19, 0xFF	; 255
    35dc:	4f e7       	ldi	r20, 0x7F	; 127
    35de:	57 e4       	ldi	r21, 0x47	; 71
    35e0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    35e4:	18 16       	cp	r1, r24
    35e6:	4c f5       	brge	.+82     	; 0x363a <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e8:	6f a1       	ldd	r22, Y+39	; 0x27
    35ea:	78 a5       	ldd	r23, Y+40	; 0x28
    35ec:	89 a5       	ldd	r24, Y+41	; 0x29
    35ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e2       	ldi	r20, 0x20	; 32
    35f6:	51 e4       	ldi	r21, 0x41	; 65
    35f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9a a3       	std	Y+34, r25	; 0x22
    360e:	89 a3       	std	Y+33, r24	; 0x21
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <CLCD_vInit+0x30c>
    3612:	88 ec       	ldi	r24, 0xC8	; 200
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	98 a3       	std	Y+32, r25	; 0x20
    3618:	8f 8f       	std	Y+31, r24	; 0x1f
    361a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    361c:	98 a1       	ldd	r25, Y+32	; 0x20
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <CLCD_vInit+0x2fa>
    3622:	98 a3       	std	Y+32, r25	; 0x20
    3624:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3626:	89 a1       	ldd	r24, Y+33	; 0x21
    3628:	9a a1       	ldd	r25, Y+34	; 0x22
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	9a a3       	std	Y+34, r25	; 0x22
    362e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3630:	89 a1       	ldd	r24, Y+33	; 0x21
    3632:	9a a1       	ldd	r25, Y+34	; 0x22
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	69 f7       	brne	.-38     	; 0x3612 <CLCD_vInit+0x2ee>
    3638:	14 c0       	rjmp	.+40     	; 0x3662 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363a:	6b a1       	ldd	r22, Y+35	; 0x23
    363c:	7c a1       	ldd	r23, Y+36	; 0x24
    363e:	8d a1       	ldd	r24, Y+37	; 0x25
    3640:	9e a1       	ldd	r25, Y+38	; 0x26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9a a3       	std	Y+34, r25	; 0x22
    364c:	89 a3       	std	Y+33, r24	; 0x21
    364e:	89 a1       	ldd	r24, Y+33	; 0x21
    3650:	9a a1       	ldd	r25, Y+34	; 0x22
    3652:	9e 8f       	std	Y+30, r25	; 0x1e
    3654:	8d 8f       	std	Y+29, r24	; 0x1d
    3656:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3658:	9e 8d       	ldd	r25, Y+30	; 0x1e
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <CLCD_vInit+0x336>
    365e:	9e 8f       	std	Y+30, r25	; 0x1e
    3660:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    3662:	8c e0       	ldi	r24, 0x0C	; 12
    3664:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	a0 e8       	ldi	r26, 0x80	; 128
    366e:	bf e3       	ldi	r27, 0x3F	; 63
    3670:	89 8f       	std	Y+25, r24	; 0x19
    3672:	9a 8f       	std	Y+26, r25	; 0x1a
    3674:	ab 8f       	std	Y+27, r26	; 0x1b
    3676:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3678:	69 8d       	ldd	r22, Y+25	; 0x19
    367a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    367c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    367e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	4a ef       	ldi	r20, 0xFA	; 250
    3686:	54 e4       	ldi	r21, 0x44	; 68
    3688:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	8d 8b       	std	Y+21, r24	; 0x15
    3692:	9e 8b       	std	Y+22, r25	; 0x16
    3694:	af 8b       	std	Y+23, r26	; 0x17
    3696:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3698:	6d 89       	ldd	r22, Y+21	; 0x15
    369a:	7e 89       	ldd	r23, Y+22	; 0x16
    369c:	8f 89       	ldd	r24, Y+23	; 0x17
    369e:	98 8d       	ldd	r25, Y+24	; 0x18
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e8       	ldi	r20, 0x80	; 128
    36a6:	5f e3       	ldi	r21, 0x3F	; 63
    36a8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    36ac:	88 23       	and	r24, r24
    36ae:	2c f4       	brge	.+10     	; 0x36ba <CLCD_vInit+0x396>
		__ticks = 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	9c 8b       	std	Y+20, r25	; 0x14
    36b6:	8b 8b       	std	Y+19, r24	; 0x13
    36b8:	3f c0       	rjmp	.+126    	; 0x3738 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    36ba:	6d 89       	ldd	r22, Y+21	; 0x15
    36bc:	7e 89       	ldd	r23, Y+22	; 0x16
    36be:	8f 89       	ldd	r24, Y+23	; 0x17
    36c0:	98 8d       	ldd	r25, Y+24	; 0x18
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	3f ef       	ldi	r19, 0xFF	; 255
    36c6:	4f e7       	ldi	r20, 0x7F	; 127
    36c8:	57 e4       	ldi	r21, 0x47	; 71
    36ca:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    36ce:	18 16       	cp	r1, r24
    36d0:	4c f5       	brge	.+82     	; 0x3724 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d2:	69 8d       	ldd	r22, Y+25	; 0x19
    36d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e2       	ldi	r20, 0x20	; 32
    36e0:	51 e4       	ldi	r21, 0x41	; 65
    36e2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	bc 01       	movw	r22, r24
    36ec:	cd 01       	movw	r24, r26
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	9c 8b       	std	Y+20, r25	; 0x14
    36f8:	8b 8b       	std	Y+19, r24	; 0x13
    36fa:	0f c0       	rjmp	.+30     	; 0x371a <CLCD_vInit+0x3f6>
    36fc:	88 ec       	ldi	r24, 0xC8	; 200
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9a 8b       	std	Y+18, r25	; 0x12
    3702:	89 8b       	std	Y+17, r24	; 0x11
    3704:	89 89       	ldd	r24, Y+17	; 0x11
    3706:	9a 89       	ldd	r25, Y+18	; 0x12
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	f1 f7       	brne	.-4      	; 0x3708 <CLCD_vInit+0x3e4>
    370c:	9a 8b       	std	Y+18, r25	; 0x12
    370e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3710:	8b 89       	ldd	r24, Y+19	; 0x13
    3712:	9c 89       	ldd	r25, Y+20	; 0x14
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	9c 8b       	std	Y+20, r25	; 0x14
    3718:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371a:	8b 89       	ldd	r24, Y+19	; 0x13
    371c:	9c 89       	ldd	r25, Y+20	; 0x14
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	69 f7       	brne	.-38     	; 0x36fc <CLCD_vInit+0x3d8>
    3722:	14 c0       	rjmp	.+40     	; 0x374c <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3724:	6d 89       	ldd	r22, Y+21	; 0x15
    3726:	7e 89       	ldd	r23, Y+22	; 0x16
    3728:	8f 89       	ldd	r24, Y+23	; 0x17
    372a:	98 8d       	ldd	r25, Y+24	; 0x18
    372c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	9c 8b       	std	Y+20, r25	; 0x14
    3736:	8b 8b       	std	Y+19, r24	; 0x13
    3738:	8b 89       	ldd	r24, Y+19	; 0x13
    373a:	9c 89       	ldd	r25, Y+20	; 0x14
    373c:	98 8b       	std	Y+16, r25	; 0x10
    373e:	8f 87       	std	Y+15, r24	; 0x0f
    3740:	8f 85       	ldd	r24, Y+15	; 0x0f
    3742:	98 89       	ldd	r25, Y+16	; 0x10
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <CLCD_vInit+0x420>
    3748:	98 8b       	std	Y+16, r25	; 0x10
    374a:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    374c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    3750:	86 e0       	ldi	r24, 0x06	; 6
    3752:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	a0 e8       	ldi	r26, 0x80	; 128
    375c:	bf e3       	ldi	r27, 0x3F	; 63
    375e:	8b 87       	std	Y+11, r24	; 0x0b
    3760:	9c 87       	std	Y+12, r25	; 0x0c
    3762:	ad 87       	std	Y+13, r26	; 0x0d
    3764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3766:	6b 85       	ldd	r22, Y+11	; 0x0b
    3768:	7c 85       	ldd	r23, Y+12	; 0x0c
    376a:	8d 85       	ldd	r24, Y+13	; 0x0d
    376c:	9e 85       	ldd	r25, Y+14	; 0x0e
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	4a ef       	ldi	r20, 0xFA	; 250
    3774:	54 e4       	ldi	r21, 0x44	; 68
    3776:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	8f 83       	std	Y+7, r24	; 0x07
    3780:	98 87       	std	Y+8, r25	; 0x08
    3782:	a9 87       	std	Y+9, r26	; 0x09
    3784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e8       	ldi	r20, 0x80	; 128
    3794:	5f e3       	ldi	r21, 0x3F	; 63
    3796:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    379a:	88 23       	and	r24, r24
    379c:	2c f4       	brge	.+10     	; 0x37a8 <CLCD_vInit+0x484>
		__ticks = 1;
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	9e 83       	std	Y+6, r25	; 0x06
    37a4:	8d 83       	std	Y+5, r24	; 0x05
    37a6:	3f c0       	rjmp	.+126    	; 0x3826 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	3f ef       	ldi	r19, 0xFF	; 255
    37b4:	4f e7       	ldi	r20, 0x7F	; 127
    37b6:	57 e4       	ldi	r21, 0x47	; 71
    37b8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    37bc:	18 16       	cp	r1, r24
    37be:	4c f5       	brge	.+82     	; 0x3812 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e2       	ldi	r20, 0x20	; 32
    37ce:	51 e4       	ldi	r21, 0x41	; 65
    37d0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	bc 01       	movw	r22, r24
    37da:	cd 01       	movw	r24, r26
    37dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	9e 83       	std	Y+6, r25	; 0x06
    37e6:	8d 83       	std	Y+5, r24	; 0x05
    37e8:	0f c0       	rjmp	.+30     	; 0x3808 <CLCD_vInit+0x4e4>
    37ea:	88 ec       	ldi	r24, 0xC8	; 200
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	8b 83       	std	Y+3, r24	; 0x03
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <CLCD_vInit+0x4d2>
    37fa:	9c 83       	std	Y+4, r25	; 0x04
    37fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	9e 83       	std	Y+6, r25	; 0x06
    3806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	9e 81       	ldd	r25, Y+6	; 0x06
    380c:	00 97       	sbiw	r24, 0x00	; 0
    380e:	69 f7       	brne	.-38     	; 0x37ea <CLCD_vInit+0x4c6>
    3810:	14 c0       	rjmp	.+40     	; 0x383a <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3812:	6f 81       	ldd	r22, Y+7	; 0x07
    3814:	78 85       	ldd	r23, Y+8	; 0x08
    3816:	89 85       	ldd	r24, Y+9	; 0x09
    3818:	9a 85       	ldd	r25, Y+10	; 0x0a
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	8d 83       	std	Y+5, r24	; 0x05
    3826:	8d 81       	ldd	r24, Y+5	; 0x05
    3828:	9e 81       	ldd	r25, Y+6	; 0x06
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	89 83       	std	Y+1, r24	; 0x01
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	9a 81       	ldd	r25, Y+2	; 0x02
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <CLCD_vInit+0x50e>
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    383a:	ca 5b       	subi	r28, 0xBA	; 186
    383c:	df 4f       	sbci	r29, 0xFF	; 255
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	08 95       	ret

00003852 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	0f 92       	push	r0
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	67 e0       	ldi	r22, 0x07	; 7
    3862:	41 e0       	ldi	r20, 0x01	; 1
    3864:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	66 e0       	ldi	r22, 0x06	; 6
    386c:	40 e0       	ldi	r20, 0x00	; 0
    386e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  
#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to high nibbles
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	98 2f       	mov	r25, r24
    3876:	92 95       	swap	r25
    3878:	9f 70       	andi	r25, 0x0F	; 15
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	69 2f       	mov	r22, r25
    387e:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3882:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	69 81       	ldd	r22, Y+1	; 0x01
    388a:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    388e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	0f 92       	push	r0
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	67 e0       	ldi	r22, 0x07	; 7
    38aa:	40 e0       	ldi	r20, 0x00	; 0
    38ac:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	66 e0       	ldi	r22, 0x06	; 6
    38b4:	40 e0       	ldi	r20, 0x00	; 0
    38b6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to high nibbles
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	98 2f       	mov	r25, r24
    38be:	92 95       	swap	r25
    38c0:	9f 70       	andi	r25, 0x0F	; 15
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	69 2f       	mov	r22, r25
    38c6:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    38ca:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	69 81       	ldd	r22, Y+1	; 0x01
    38d2:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    38d6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    38da:	0f 90       	pop	r0
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	6c 97       	sbiw	r28, 0x1c	; 28
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	65 e0       	ldi	r22, 0x05	; 5
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 e8       	ldi	r26, 0x80	; 128
    3906:	bf e3       	ldi	r27, 0x3F	; 63
    3908:	89 8f       	std	Y+25, r24	; 0x19
    390a:	9a 8f       	std	Y+26, r25	; 0x1a
    390c:	ab 8f       	std	Y+27, r26	; 0x1b
    390e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	69 8d       	ldd	r22, Y+25	; 0x19
    3912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8d 8b       	std	Y+21, r24	; 0x15
    392a:	9e 8b       	std	Y+22, r25	; 0x16
    392c:	af 8b       	std	Y+23, r26	; 0x17
    392e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3930:	6d 89       	ldd	r22, Y+21	; 0x15
    3932:	7e 89       	ldd	r23, Y+22	; 0x16
    3934:	8f 89       	ldd	r24, Y+23	; 0x17
    3936:	98 8d       	ldd	r25, Y+24	; 0x18
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9c 8b       	std	Y+20, r25	; 0x14
    394e:	8b 8b       	std	Y+19, r24	; 0x13
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3952:	6d 89       	ldd	r22, Y+21	; 0x15
    3954:	7e 89       	ldd	r23, Y+22	; 0x16
    3956:	8f 89       	ldd	r24, Y+23	; 0x17
    3958:	98 8d       	ldd	r25, Y+24	; 0x18
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	69 8d       	ldd	r22, Y+25	; 0x19
    396c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    396e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9c 8b       	std	Y+20, r25	; 0x14
    3990:	8b 8b       	std	Y+19, r24	; 0x13
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <CLCD_vSendFallingEdge+0xd0>
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9a 8b       	std	Y+18, r25	; 0x12
    399a:	89 8b       	std	Y+17, r24	; 0x11
    399c:	89 89       	ldd	r24, Y+17	; 0x11
    399e:	9a 89       	ldd	r25, Y+18	; 0x12
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <CLCD_vSendFallingEdge+0xbe>
    39a4:	9a 8b       	std	Y+18, r25	; 0x12
    39a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8b 89       	ldd	r24, Y+19	; 0x13
    39aa:	9c 89       	ldd	r25, Y+20	; 0x14
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9c 8b       	std	Y+20, r25	; 0x14
    39b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <CLCD_vSendFallingEdge+0xb2>
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	6d 89       	ldd	r22, Y+21	; 0x15
    39be:	7e 89       	ldd	r23, Y+22	; 0x16
    39c0:	8f 89       	ldd	r24, Y+23	; 0x17
    39c2:	98 8d       	ldd	r25, Y+24	; 0x18
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9c 8b       	std	Y+20, r25	; 0x14
    39ce:	8b 8b       	std	Y+19, r24	; 0x13
    39d0:	8b 89       	ldd	r24, Y+19	; 0x13
    39d2:	9c 89       	ldd	r25, Y+20	; 0x14
    39d4:	98 8b       	std	Y+16, r25	; 0x10
    39d6:	8f 87       	std	Y+15, r24	; 0x0f
    39d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39da:	98 89       	ldd	r25, Y+16	; 0x10
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <CLCD_vSendFallingEdge+0xfa>
    39e0:	98 8b       	std	Y+16, r25	; 0x10
    39e2:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	65 e0       	ldi	r22, 0x05	; 5
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	a0 e8       	ldi	r26, 0x80	; 128
    39f4:	bf e3       	ldi	r27, 0x3F	; 63
    39f6:	8b 87       	std	Y+11, r24	; 0x0b
    39f8:	9c 87       	std	Y+12, r25	; 0x0c
    39fa:	ad 87       	std	Y+13, r26	; 0x0d
    39fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	4a ef       	ldi	r20, 0xFA	; 250
    3a0c:	54 e4       	ldi	r21, 0x44	; 68
    3a0e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	8f 83       	std	Y+7, r24	; 0x07
    3a18:	98 87       	std	Y+8, r25	; 0x08
    3a1a:	a9 87       	std	Y+9, r26	; 0x09
    3a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a20:	78 85       	ldd	r23, Y+8	; 0x08
    3a22:	89 85       	ldd	r24, Y+9	; 0x09
    3a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e8       	ldi	r20, 0x80	; 128
    3a2c:	5f e3       	ldi	r21, 0x3F	; 63
    3a2e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3a32:	88 23       	and	r24, r24
    3a34:	2c f4       	brge	.+10     	; 0x3a40 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9e 83       	std	Y+6, r25	; 0x06
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
    3a3e:	3f c0       	rjmp	.+126    	; 0x3abe <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	3f ef       	ldi	r19, 0xFF	; 255
    3a4c:	4f e7       	ldi	r20, 0x7F	; 127
    3a4e:	57 e4       	ldi	r21, 0x47	; 71
    3a50:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3a54:	18 16       	cp	r1, r24
    3a56:	4c f5       	brge	.+82     	; 0x3aaa <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e2       	ldi	r20, 0x20	; 32
    3a66:	51 e4       	ldi	r21, 0x41	; 65
    3a68:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	bc 01       	movw	r22, r24
    3a72:	cd 01       	movw	r24, r26
    3a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	9e 83       	std	Y+6, r25	; 0x06
    3a7e:	8d 83       	std	Y+5, r24	; 0x05
    3a80:	0f c0       	rjmp	.+30     	; 0x3aa0 <CLCD_vSendFallingEdge+0x1be>
    3a82:	88 ec       	ldi	r24, 0xC8	; 200
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	9c 83       	std	Y+4, r25	; 0x04
    3a88:	8b 83       	std	Y+3, r24	; 0x03
    3a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <CLCD_vSendFallingEdge+0x1ac>
    3a92:	9c 83       	std	Y+4, r25	; 0x04
    3a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	69 f7       	brne	.-38     	; 0x3a82 <CLCD_vSendFallingEdge+0x1a0>
    3aa8:	14 c0       	rjmp	.+40     	; 0x3ad2 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    3aac:	78 85       	ldd	r23, Y+8	; 0x08
    3aae:	89 85       	ldd	r24, Y+9	; 0x09
    3ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	9e 83       	std	Y+6, r25	; 0x06
    3abc:	8d 83       	std	Y+5, r24	; 0x05
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	9a 83       	std	Y+2, r25	; 0x02
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <CLCD_vSendFallingEdge+0x1e8>
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3ad2:	6c 96       	adiw	r28, 0x1c	; 28
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	2e 97       	sbiw	r28, 0x0e	; 14
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 e2       	ldi	r26, 0x20	; 32
    3b04:	b1 e4       	ldi	r27, 0x41	; 65
    3b06:	8b 87       	std	Y+11, r24	; 0x0b
    3b08:	9c 87       	std	Y+12, r25	; 0x0c
    3b0a:	ad 87       	std	Y+13, r26	; 0x0d
    3b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	4a ef       	ldi	r20, 0xFA	; 250
    3b1c:	54 e4       	ldi	r21, 0x44	; 68
    3b1e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	8f 83       	std	Y+7, r24	; 0x07
    3b28:	98 87       	std	Y+8, r25	; 0x08
    3b2a:	a9 87       	std	Y+9, r26	; 0x09
    3b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b30:	78 85       	ldd	r23, Y+8	; 0x08
    3b32:	89 85       	ldd	r24, Y+9	; 0x09
    3b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e8       	ldi	r20, 0x80	; 128
    3b3c:	5f e3       	ldi	r21, 0x3F	; 63
    3b3e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3b42:	88 23       	and	r24, r24
    3b44:	2c f4       	brge	.+10     	; 0x3b50 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9e 83       	std	Y+6, r25	; 0x06
    3b4c:	8d 83       	std	Y+5, r24	; 0x05
    3b4e:	3f c0       	rjmp	.+126    	; 0x3bce <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    3b50:	6f 81       	ldd	r22, Y+7	; 0x07
    3b52:	78 85       	ldd	r23, Y+8	; 0x08
    3b54:	89 85       	ldd	r24, Y+9	; 0x09
    3b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	3f ef       	ldi	r19, 0xFF	; 255
    3b5c:	4f e7       	ldi	r20, 0x7F	; 127
    3b5e:	57 e4       	ldi	r21, 0x47	; 71
    3b60:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3b64:	18 16       	cp	r1, r24
    3b66:	4c f5       	brge	.+82     	; 0x3bba <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 e2       	ldi	r20, 0x20	; 32
    3b76:	51 e4       	ldi	r21, 0x41	; 65
    3b78:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
    3b90:	0f c0       	rjmp	.+30     	; 0x3bb0 <CLCD_vClearScreen+0xcc>
    3b92:	88 ec       	ldi	r24, 0xC8	; 200
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	9c 83       	std	Y+4, r25	; 0x04
    3b98:	8b 83       	std	Y+3, r24	; 0x03
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <CLCD_vClearScreen+0xba>
    3ba2:	9c 83       	std	Y+4, r25	; 0x04
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	9e 83       	std	Y+6, r25	; 0x06
    3bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	69 f7       	brne	.-38     	; 0x3b92 <CLCD_vClearScreen+0xae>
    3bb8:	14 c0       	rjmp	.+40     	; 0x3be2 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bba:	6f 81       	ldd	r22, Y+7	; 0x07
    3bbc:	78 85       	ldd	r23, Y+8	; 0x08
    3bbe:	89 85       	ldd	r24, Y+9	; 0x09
    3bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	9e 83       	std	Y+6, r25	; 0x06
    3bcc:	8d 83       	std	Y+5, r24	; 0x05
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	9a 83       	std	Y+2, r25	; 0x02
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	f1 f7       	brne	.-4      	; 0x3bda <CLCD_vClearScreen+0xf6>
    3bde:	9a 83       	std	Y+2, r25	; 0x02
    3be0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    3be2:	2e 96       	adiw	r28, 0x0e	; 14
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	00 d0       	rcall	.+0      	; 0x3bfa <CLCD_vSendString+0x6>
    3bfa:	0f 92       	push	r0
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	9b 83       	std	Y+3, r25	; 0x03
    3c02:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    3c04:	19 82       	std	Y+1, r1	; 0x01
    3c06:	0e c0       	rjmp	.+28     	; 0x3c24 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	28 2f       	mov	r18, r24
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	9b 81       	ldd	r25, Y+3	; 0x03
    3c12:	fc 01       	movw	r30, r24
    3c14:	e2 0f       	add	r30, r18
    3c16:	f3 1f       	adc	r31, r19
    3c18:	80 81       	ld	r24, Z
    3c1a:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    LOC_u8Iterator++;
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	8f 5f       	subi	r24, 0xFF	; 255
    3c22:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	28 2f       	mov	r18, r24
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2e:	fc 01       	movw	r30, r24
    3c30:	e2 0f       	add	r30, r18
    3c32:	f3 1f       	adc	r31, r19
    3c34:	80 81       	ld	r24, Z
    3c36:	88 23       	and	r24, r24
    3c38:	39 f7       	brne	.-50     	; 0x3c08 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	cf 91       	pop	r28
    3c42:	df 91       	pop	r29
    3c44:	08 95       	ret

00003c46 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3c46:	ef 92       	push	r14
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	28 97       	sbiw	r28, 0x08	; 8
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	6d 83       	std	Y+5, r22	; 0x05
    3c64:	7e 83       	std	Y+6, r23	; 0x06
    3c66:	8f 83       	std	Y+7, r24	; 0x07
    3c68:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	a0 e0       	ldi	r26, 0x00	; 0
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	9a 83       	std	Y+2, r25	; 0x02
    3c76:	ab 83       	std	Y+3, r26	; 0x03
    3c78:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	af 81       	ldd	r26, Y+7	; 0x07
    3c80:	b8 85       	ldd	r27, Y+8	; 0x08
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	a1 05       	cpc	r26, r1
    3c86:	b1 05       	cpc	r27, r1
    3c88:	21 f4       	brne	.+8      	; 0x3c92 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    3c8a:	80 e3       	ldi	r24, 0x30	; 48
    3c8c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    3c90:	85 c0       	rjmp	.+266    	; 0x3d9c <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	af 81       	ldd	r26, Y+7	; 0x07
    3c98:	b8 85       	ldd	r27, Y+8	; 0x08
    3c9a:	bb 23       	and	r27, r27
    3c9c:	0c f0       	brlt	.+2      	; 0x3ca0 <CLCD_vSendIntNumber+0x5a>
    3c9e:	49 c0       	rjmp	.+146    	; 0x3d32 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    3ca0:	8d e2       	ldi	r24, 0x2D	; 45
    3ca2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    3caa:	af 81       	ldd	r26, Y+7	; 0x07
    3cac:	b8 85       	ldd	r27, Y+8	; 0x08
    3cae:	b0 95       	com	r27
    3cb0:	a0 95       	com	r26
    3cb2:	90 95       	com	r25
    3cb4:	81 95       	neg	r24
    3cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb8:	af 4f       	sbci	r26, 0xFF	; 255
    3cba:	bf 4f       	sbci	r27, 0xFF	; 255
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	9e 83       	std	Y+6, r25	; 0x06
    3cc0:	af 83       	std	Y+7, r26	; 0x07
    3cc2:	b8 87       	std	Y+8, r27	; 0x08
    3cc4:	36 c0       	rjmp	.+108    	; 0x3d32 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cca:	ab 81       	ldd	r26, Y+3	; 0x03
    3ccc:	bc 81       	ldd	r27, Y+4	; 0x04
    3cce:	2a e0       	ldi	r18, 0x0A	; 10
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	40 e0       	ldi	r20, 0x00	; 0
    3cd4:	50 e0       	ldi	r21, 0x00	; 0
    3cd6:	bc 01       	movw	r22, r24
    3cd8:	cd 01       	movw	r24, r26
    3cda:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsi3>
    3cde:	7b 01       	movw	r14, r22
    3ce0:	8c 01       	movw	r16, r24
    3ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce6:	af 81       	ldd	r26, Y+7	; 0x07
    3ce8:	b8 85       	ldd	r27, Y+8	; 0x08
    3cea:	2a e0       	ldi	r18, 0x0A	; 10
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	0e 94 23 39 	call	0x7246	; 0x7246 <__divmodsi4>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	8e 0d       	add	r24, r14
    3d00:	9f 1d       	adc	r25, r15
    3d02:	a0 1f       	adc	r26, r16
    3d04:	b1 1f       	adc	r27, r17
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	ab 83       	std	Y+3, r26	; 0x03
    3d0c:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	af 81       	ldd	r26, Y+7	; 0x07
    3d14:	b8 85       	ldd	r27, Y+8	; 0x08
    3d16:	2a e0       	ldi	r18, 0x0A	; 10
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 23 39 	call	0x7246	; 0x7246 <__divmodsi4>
    3d26:	da 01       	movw	r26, r20
    3d28:	c9 01       	movw	r24, r18
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	9e 83       	std	Y+6, r25	; 0x06
    3d2e:	af 83       	std	Y+7, r26	; 0x07
    3d30:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    3d32:	8d 81       	ldd	r24, Y+5	; 0x05
    3d34:	9e 81       	ldd	r25, Y+6	; 0x06
    3d36:	af 81       	ldd	r26, Y+7	; 0x07
    3d38:	b8 85       	ldd	r27, Y+8	; 0x08
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	a1 05       	cpc	r26, r1
    3d3e:	b1 05       	cpc	r27, r1
    3d40:	11 f6       	brne	.-124    	; 0x3cc6 <CLCD_vSendIntNumber+0x80>
    3d42:	23 c0       	rjmp	.+70     	; 0x3d8a <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	ab 81       	ldd	r26, Y+3	; 0x03
    3d4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3d4c:	2a e0       	ldi	r18, 0x0A	; 10
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 01 39 	call	0x7202	; 0x7202 <__udivmodsi4>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	80 5d       	subi	r24, 0xD0	; 208
    3d62:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	ab 81       	ldd	r26, Y+3	; 0x03
    3d6c:	bc 81       	ldd	r27, Y+4	; 0x04
    3d6e:	2a e0       	ldi	r18, 0x0A	; 10
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e0       	ldi	r20, 0x00	; 0
    3d74:	50 e0       	ldi	r21, 0x00	; 0
    3d76:	bc 01       	movw	r22, r24
    3d78:	cd 01       	movw	r24, r26
    3d7a:	0e 94 01 39 	call	0x7202	; 0x7202 <__udivmodsi4>
    3d7e:	da 01       	movw	r26, r20
    3d80:	c9 01       	movw	r24, r18
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	ab 83       	std	Y+3, r26	; 0x03
    3d88:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d90:	bc 81       	ldd	r27, Y+4	; 0x04
    3d92:	81 30       	cpi	r24, 0x01	; 1
    3d94:	91 05       	cpc	r25, r1
    3d96:	a1 05       	cpc	r26, r1
    3d98:	b1 05       	cpc	r27, r1
    3d9a:	a1 f6       	brne	.-88     	; 0x3d44 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    3d9c:	28 96       	adiw	r28, 0x08	; 8
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	1f 91       	pop	r17
    3dae:	0f 91       	pop	r16
    3db0:	ff 90       	pop	r15
    3db2:	ef 90       	pop	r14
    3db4:	08 95       	ret

00003db6 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3db6:	af 92       	push	r10
    3db8:	bf 92       	push	r11
    3dba:	cf 92       	push	r12
    3dbc:	df 92       	push	r13
    3dbe:	ef 92       	push	r14
    3dc0:	ff 92       	push	r15
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	00 d0       	rcall	.+0      	; 0x3dcc <CLCD_vSendFloatNumber+0x16>
    3dcc:	00 d0       	rcall	.+0      	; 0x3dce <CLCD_vSendFloatNumber+0x18>
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	69 83       	std	Y+1, r22	; 0x01
    3dd4:	7a 83       	std	Y+2, r23	; 0x02
    3dd6:	8b 83       	std	Y+3, r24	; 0x03
    3dd8:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    3dda:	69 81       	ldd	r22, Y+1	; 0x01
    3ddc:	7a 81       	ldd	r23, Y+2	; 0x02
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	9c 81       	ldd	r25, Y+4	; 0x04
    3de2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    3df2:	69 81       	ldd	r22, Y+1	; 0x01
    3df4:	7a 81       	ldd	r23, Y+2	; 0x02
    3df6:	8b 81       	ldd	r24, Y+3	; 0x03
    3df8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	4c f4       	brge	.+18     	; 0x3e1c <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e10:	bc 81       	ldd	r27, Y+4	; 0x04
    3e12:	b0 58       	subi	r27, 0x80	; 128
    3e14:	89 83       	std	Y+1, r24	; 0x01
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	ab 83       	std	Y+3, r26	; 0x03
    3e1a:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    3e1c:	69 81       	ldd	r22, Y+1	; 0x01
    3e1e:	7a 81       	ldd	r23, Y+2	; 0x02
    3e20:	8b 81       	ldd	r24, Y+3	; 0x03
    3e22:	9c 81       	ldd	r25, Y+4	; 0x04
    3e24:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    3e34:	9b 01       	movw	r18, r22
    3e36:	ac 01       	movw	r20, r24
    3e38:	69 81       	ldd	r22, Y+1	; 0x01
    3e3a:	7a 81       	ldd	r23, Y+2	; 0x02
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e40:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	ab 83       	std	Y+3, r26	; 0x03
    3e4e:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    3e50:	69 81       	ldd	r22, Y+1	; 0x01
    3e52:	7a 81       	ldd	r23, Y+2	; 0x02
    3e54:	8b 81       	ldd	r24, Y+3	; 0x03
    3e56:	9c 81       	ldd	r25, Y+4	; 0x04
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e4       	ldi	r19, 0x40	; 64
    3e5c:	4c e1       	ldi	r20, 0x1C	; 28
    3e5e:	56 e4       	ldi	r21, 0x46	; 70
    3e60:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	ab 83       	std	Y+3, r26	; 0x03
    3e6e:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    3e70:	69 81       	ldd	r22, Y+1	; 0x01
    3e72:	7a 81       	ldd	r23, Y+2	; 0x02
    3e74:	8b 81       	ldd	r24, Y+3	; 0x03
    3e76:	9c 81       	ldd	r25, Y+4	; 0x04
    3e78:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    3e7c:	a2 2e       	mov	r10, r18
    3e7e:	b3 2e       	mov	r11, r19
    3e80:	c4 2e       	mov	r12, r20
    3e82:	d5 2e       	mov	r13, r21
    3e84:	e6 2e       	mov	r14, r22
    3e86:	f7 2e       	mov	r15, r23
    3e88:	08 2f       	mov	r16, r24
    3e8a:	19 2f       	mov	r17, r25
    3e8c:	8a 2d       	mov	r24, r10
    3e8e:	8b 29       	or	r24, r11
    3e90:	8c 29       	or	r24, r12
    3e92:	8d 29       	or	r24, r13
    3e94:	8e 29       	or	r24, r14
    3e96:	8f 29       	or	r24, r15
    3e98:	80 2b       	or	r24, r16
    3e9a:	81 2b       	or	r24, r17
    3e9c:	88 23       	and	r24, r24
    3e9e:	79 f0       	breq	.+30     	; 0x3ebe <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    3ea0:	8e e2       	ldi	r24, 0x2E	; 46
    3ea2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    3ea6:	69 81       	ldd	r22, Y+1	; 0x01
    3ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	9c 81       	ldd	r25, Y+4	; 0x04
    3eae:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	cd 01       	movw	r24, r26
    3eba:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <CLCD_vSendIntNumber>
  }
}
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ff 90       	pop	r15
    3ed0:	ef 90       	pop	r14
    3ed2:	df 90       	pop	r13
    3ed4:	cf 90       	pop	r12
    3ed6:	bf 90       	pop	r11
    3ed8:	af 90       	pop	r10
    3eda:	08 95       	ret

00003edc <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    3edc:	df 93       	push	r29
    3ede:	cf 93       	push	r28
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	61 97       	sbiw	r28, 0x11	; 17
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	88 8b       	std	Y+16, r24	; 0x10
    3ef2:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    3ef4:	88 89       	ldd	r24, Y+16	; 0x10
    3ef6:	88 23       	and	r24, r24
    3ef8:	49 f0       	breq	.+18     	; 0x3f0c <CLCD_vSetPosition+0x30>
    3efa:	88 89       	ldd	r24, Y+16	; 0x10
    3efc:	85 30       	cpi	r24, 0x05	; 5
    3efe:	30 f4       	brcc	.+12     	; 0x3f0c <CLCD_vSetPosition+0x30>
    3f00:	89 89       	ldd	r24, Y+17	; 0x11
    3f02:	88 23       	and	r24, r24
    3f04:	19 f0       	breq	.+6      	; 0x3f0c <CLCD_vSetPosition+0x30>
    3f06:	89 89       	ldd	r24, Y+17	; 0x11
    3f08:	85 31       	cpi	r24, 0x15	; 21
    3f0a:	18 f0       	brcs	.+6      	; 0x3f12 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    3f0c:	80 e8       	ldi	r24, 0x80	; 128
    3f0e:	8f 87       	std	Y+15, r24	; 0x0f
    3f10:	1b c0       	rjmp	.+54     	; 0x3f48 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    3f12:	88 89       	ldd	r24, Y+16	; 0x10
    3f14:	81 30       	cpi	r24, 0x01	; 1
    3f16:	21 f4       	brne	.+8      	; 0x3f20 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    3f18:	89 89       	ldd	r24, Y+17	; 0x11
    3f1a:	81 58       	subi	r24, 0x81	; 129
    3f1c:	8f 87       	std	Y+15, r24	; 0x0f
    3f1e:	14 c0       	rjmp	.+40     	; 0x3f48 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    3f20:	88 89       	ldd	r24, Y+16	; 0x10
    3f22:	82 30       	cpi	r24, 0x02	; 2
    3f24:	21 f4       	brne	.+8      	; 0x3f2e <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    3f26:	89 89       	ldd	r24, Y+17	; 0x11
    3f28:	81 54       	subi	r24, 0x41	; 65
    3f2a:	8f 87       	std	Y+15, r24	; 0x0f
    3f2c:	0d c0       	rjmp	.+26     	; 0x3f48 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    3f2e:	88 89       	ldd	r24, Y+16	; 0x10
    3f30:	83 30       	cpi	r24, 0x03	; 3
    3f32:	21 f4       	brne	.+8      	; 0x3f3c <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    3f34:	89 89       	ldd	r24, Y+17	; 0x11
    3f36:	8d 56       	subi	r24, 0x6D	; 109
    3f38:	8f 87       	std	Y+15, r24	; 0x0f
    3f3a:	06 c0       	rjmp	.+12     	; 0x3f48 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    3f3c:	88 89       	ldd	r24, Y+16	; 0x10
    3f3e:	84 30       	cpi	r24, 0x04	; 4
    3f40:	19 f4       	brne	.+6      	; 0x3f48 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    3f42:	89 89       	ldd	r24, Y+17	; 0x11
    3f44:	8d 52       	subi	r24, 0x2D	; 45
    3f46:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    3f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f4a:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	a0 e8       	ldi	r26, 0x80	; 128
    3f54:	bf e3       	ldi	r27, 0x3F	; 63
    3f56:	8b 87       	std	Y+11, r24	; 0x0b
    3f58:	9c 87       	std	Y+12, r25	; 0x0c
    3f5a:	ad 87       	std	Y+13, r26	; 0x0d
    3f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	4a ef       	ldi	r20, 0xFA	; 250
    3f6c:	54 e4       	ldi	r21, 0x44	; 68
    3f6e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8f 83       	std	Y+7, r24	; 0x07
    3f78:	98 87       	std	Y+8, r25	; 0x08
    3f7a:	a9 87       	std	Y+9, r26	; 0x09
    3f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f80:	78 85       	ldd	r23, Y+8	; 0x08
    3f82:	89 85       	ldd	r24, Y+9	; 0x09
    3f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e8       	ldi	r20, 0x80	; 128
    3f8c:	5f e3       	ldi	r21, 0x3F	; 63
    3f8e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3f92:	88 23       	and	r24, r24
    3f94:	2c f4       	brge	.+10     	; 0x3fa0 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	9e 83       	std	Y+6, r25	; 0x06
    3f9c:	8d 83       	std	Y+5, r24	; 0x05
    3f9e:	3f c0       	rjmp	.+126    	; 0x401e <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    3fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa2:	78 85       	ldd	r23, Y+8	; 0x08
    3fa4:	89 85       	ldd	r24, Y+9	; 0x09
    3fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	4f e7       	ldi	r20, 0x7F	; 127
    3fae:	57 e4       	ldi	r21, 0x47	; 71
    3fb0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3fb4:	18 16       	cp	r1, r24
    3fb6:	4c f5       	brge	.+82     	; 0x400a <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e2       	ldi	r20, 0x20	; 32
    3fc6:	51 e4       	ldi	r21, 0x41	; 65
    3fc8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9e 83       	std	Y+6, r25	; 0x06
    3fde:	8d 83       	std	Y+5, r24	; 0x05
    3fe0:	0f c0       	rjmp	.+30     	; 0x4000 <CLCD_vSetPosition+0x124>
    3fe2:	88 ec       	ldi	r24, 0xC8	; 200
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	9c 83       	std	Y+4, r25	; 0x04
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	9c 81       	ldd	r25, Y+4	; 0x04
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	f1 f7       	brne	.-4      	; 0x3fee <CLCD_vSetPosition+0x112>
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	9e 83       	std	Y+6, r25	; 0x06
    3ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	00 97       	sbiw	r24, 0x00	; 0
    4006:	69 f7       	brne	.-38     	; 0x3fe2 <CLCD_vSetPosition+0x106>
    4008:	14 c0       	rjmp	.+40     	; 0x4032 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	9e 83       	std	Y+6, r25	; 0x06
    401c:	8d 83       	std	Y+5, r24	; 0x05
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	9a 83       	std	Y+2, r25	; 0x02
    4024:	89 83       	std	Y+1, r24	; 0x01
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	9a 81       	ldd	r25, Y+2	; 0x02
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <CLCD_vSetPosition+0x14e>
    402e:	9a 83       	std	Y+2, r25	; 0x02
    4030:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4032:	61 96       	adiw	r28, 0x11	; 17
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <CLCD_vSendExtraChar+0x6>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	8a 83       	std	Y+2, r24	; 0x02
    4052:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    4054:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    4056:	80 e4       	ldi	r24, 0x40	; 64
    4058:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    405c:	19 82       	std	Y+1, r1	; 0x01
    405e:	0c c0       	rjmp	.+24     	; 0x4078 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	88 2f       	mov	r24, r24
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	fc 01       	movw	r30, r24
    4068:	e1 54       	subi	r30, 0x41	; 65
    406a:	fd 4f       	sbci	r31, 0xFD	; 253
    406c:	80 81       	ld	r24, Z
    406e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	8f 5f       	subi	r24, 0xFF	; 255
    4076:	89 83       	std	Y+1, r24	; 0x01
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	80 34       	cpi	r24, 0x40	; 64
    407c:	88 f3       	brcs	.-30     	; 0x4060 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	6b 81       	ldd	r22, Y+3	; 0x03
    4082:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    4086:	19 82       	std	Y+1, r1	; 0x01
    4088:	06 c0       	rjmp	.+12     	; 0x4096 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	8f 5f       	subi	r24, 0xFF	; 255
    4094:	89 83       	std	Y+1, r24	; 0x01
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	88 30       	cpi	r24, 0x08	; 8
    409a:	b8 f3       	brcs	.-18     	; 0x408a <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    409c:	0f 90       	pop	r0
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	cf 91       	pop	r28
    40a4:	df 91       	pop	r29
    40a6:	08 95       	ret

000040a8 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    40b0:	2e 97       	sbiw	r28, 0x0e	; 14
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    40bc:	8c e1       	ldi	r24, 0x1C	; 28
    40be:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	a0 e8       	ldi	r26, 0x80	; 128
    40c8:	bf e3       	ldi	r27, 0x3F	; 63
    40ca:	8b 87       	std	Y+11, r24	; 0x0b
    40cc:	9c 87       	std	Y+12, r25	; 0x0c
    40ce:	ad 87       	std	Y+13, r26	; 0x0d
    40d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	4a ef       	ldi	r20, 0xFA	; 250
    40e0:	54 e4       	ldi	r21, 0x44	; 68
    40e2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	8f 83       	std	Y+7, r24	; 0x07
    40ec:	98 87       	std	Y+8, r25	; 0x08
    40ee:	a9 87       	std	Y+9, r26	; 0x09
    40f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40f2:	6f 81       	ldd	r22, Y+7	; 0x07
    40f4:	78 85       	ldd	r23, Y+8	; 0x08
    40f6:	89 85       	ldd	r24, Y+9	; 0x09
    40f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e8       	ldi	r20, 0x80	; 128
    4100:	5f e3       	ldi	r21, 0x3F	; 63
    4102:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4106:	88 23       	and	r24, r24
    4108:	2c f4       	brge	.+10     	; 0x4114 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	9e 83       	std	Y+6, r25	; 0x06
    4110:	8d 83       	std	Y+5, r24	; 0x05
    4112:	3f c0       	rjmp	.+126    	; 0x4192 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    4114:	6f 81       	ldd	r22, Y+7	; 0x07
    4116:	78 85       	ldd	r23, Y+8	; 0x08
    4118:	89 85       	ldd	r24, Y+9	; 0x09
    411a:	9a 85       	ldd	r25, Y+10	; 0x0a
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	3f ef       	ldi	r19, 0xFF	; 255
    4120:	4f e7       	ldi	r20, 0x7F	; 127
    4122:	57 e4       	ldi	r21, 0x47	; 71
    4124:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4128:	18 16       	cp	r1, r24
    412a:	4c f5       	brge	.+82     	; 0x417e <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412c:	6b 85       	ldd	r22, Y+11	; 0x0b
    412e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4130:	8d 85       	ldd	r24, Y+13	; 0x0d
    4132:	9e 85       	ldd	r25, Y+14	; 0x0e
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e2       	ldi	r20, 0x20	; 32
    413a:	51 e4       	ldi	r21, 0x41	; 65
    413c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	9e 83       	std	Y+6, r25	; 0x06
    4152:	8d 83       	std	Y+5, r24	; 0x05
    4154:	0f c0       	rjmp	.+30     	; 0x4174 <CLCD_voidShiftDisplayRight+0xcc>
    4156:	88 ec       	ldi	r24, 0xC8	; 200
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	9c 83       	std	Y+4, r25	; 0x04
    415c:	8b 83       	std	Y+3, r24	; 0x03
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	f1 f7       	brne	.-4      	; 0x4162 <CLCD_voidShiftDisplayRight+0xba>
    4166:	9c 83       	std	Y+4, r25	; 0x04
    4168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416a:	8d 81       	ldd	r24, Y+5	; 0x05
    416c:	9e 81       	ldd	r25, Y+6	; 0x06
    416e:	01 97       	sbiw	r24, 0x01	; 1
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4174:	8d 81       	ldd	r24, Y+5	; 0x05
    4176:	9e 81       	ldd	r25, Y+6	; 0x06
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	69 f7       	brne	.-38     	; 0x4156 <CLCD_voidShiftDisplayRight+0xae>
    417c:	14 c0       	rjmp	.+40     	; 0x41a6 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    417e:	6f 81       	ldd	r22, Y+7	; 0x07
    4180:	78 85       	ldd	r23, Y+8	; 0x08
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	9e 83       	std	Y+6, r25	; 0x06
    4190:	8d 83       	std	Y+5, r24	; 0x05
    4192:	8d 81       	ldd	r24, Y+5	; 0x05
    4194:	9e 81       	ldd	r25, Y+6	; 0x06
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	89 83       	std	Y+1, r24	; 0x01
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <CLCD_voidShiftDisplayRight+0xf6>
    41a2:	9a 83       	std	Y+2, r25	; 0x02
    41a4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    41a6:	2e 96       	adiw	r28, 0x0e	; 14
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    41b8:	df 93       	push	r29
    41ba:	cf 93       	push	r28
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	2e 97       	sbiw	r28, 0x0e	; 14
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    41cc:	88 e1       	ldi	r24, 0x18	; 24
    41ce:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a0 e8       	ldi	r26, 0x80	; 128
    41d8:	bf e3       	ldi	r27, 0x3F	; 63
    41da:	8b 87       	std	Y+11, r24	; 0x0b
    41dc:	9c 87       	std	Y+12, r25	; 0x0c
    41de:	ad 87       	std	Y+13, r26	; 0x0d
    41e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	4a ef       	ldi	r20, 0xFA	; 250
    41f0:	54 e4       	ldi	r21, 0x44	; 68
    41f2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	8f 83       	std	Y+7, r24	; 0x07
    41fc:	98 87       	std	Y+8, r25	; 0x08
    41fe:	a9 87       	std	Y+9, r26	; 0x09
    4200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4202:	6f 81       	ldd	r22, Y+7	; 0x07
    4204:	78 85       	ldd	r23, Y+8	; 0x08
    4206:	89 85       	ldd	r24, Y+9	; 0x09
    4208:	9a 85       	ldd	r25, Y+10	; 0x0a
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	40 e8       	ldi	r20, 0x80	; 128
    4210:	5f e3       	ldi	r21, 0x3F	; 63
    4212:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4216:	88 23       	and	r24, r24
    4218:	2c f4       	brge	.+10     	; 0x4224 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
    4222:	3f c0       	rjmp	.+126    	; 0x42a2 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    4224:	6f 81       	ldd	r22, Y+7	; 0x07
    4226:	78 85       	ldd	r23, Y+8	; 0x08
    4228:	89 85       	ldd	r24, Y+9	; 0x09
    422a:	9a 85       	ldd	r25, Y+10	; 0x0a
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	3f ef       	ldi	r19, 0xFF	; 255
    4230:	4f e7       	ldi	r20, 0x7F	; 127
    4232:	57 e4       	ldi	r21, 0x47	; 71
    4234:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4238:	18 16       	cp	r1, r24
    423a:	4c f5       	brge	.+82     	; 0x428e <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    423c:	6b 85       	ldd	r22, Y+11	; 0x0b
    423e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4240:	8d 85       	ldd	r24, Y+13	; 0x0d
    4242:	9e 85       	ldd	r25, Y+14	; 0x0e
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e2       	ldi	r20, 0x20	; 32
    424a:	51 e4       	ldi	r21, 0x41	; 65
    424c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	bc 01       	movw	r22, r24
    4256:	cd 01       	movw	r24, r26
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	8d 83       	std	Y+5, r24	; 0x05
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <CLCD_voidShiftDisplayLeft+0xcc>
    4266:	88 ec       	ldi	r24, 0xC8	; 200
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	9c 83       	std	Y+4, r25	; 0x04
    426c:	8b 83       	std	Y+3, r24	; 0x03
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	9c 81       	ldd	r25, Y+4	; 0x04
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <CLCD_voidShiftDisplayLeft+0xba>
    4276:	9c 83       	std	Y+4, r25	; 0x04
    4278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	9e 81       	ldd	r25, Y+6	; 0x06
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	9e 83       	std	Y+6, r25	; 0x06
    4282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4284:	8d 81       	ldd	r24, Y+5	; 0x05
    4286:	9e 81       	ldd	r25, Y+6	; 0x06
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	69 f7       	brne	.-38     	; 0x4266 <CLCD_voidShiftDisplayLeft+0xae>
    428c:	14 c0       	rjmp	.+40     	; 0x42b6 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    428e:	6f 81       	ldd	r22, Y+7	; 0x07
    4290:	78 85       	ldd	r23, Y+8	; 0x08
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	9a 85       	ldd	r25, Y+10	; 0x0a
    4296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	9e 83       	std	Y+6, r25	; 0x06
    42a0:	8d 83       	std	Y+5, r24	; 0x05
    42a2:	8d 81       	ldd	r24, Y+5	; 0x05
    42a4:	9e 81       	ldd	r25, Y+6	; 0x06
    42a6:	9a 83       	std	Y+2, r25	; 0x02
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	9a 81       	ldd	r25, Y+2	; 0x02
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <CLCD_voidShiftDisplayLeft+0xf6>
    42b2:	9a 83       	std	Y+2, r25	; 0x02
    42b4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    42b6:	2e 96       	adiw	r28, 0x0e	; 14
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	08 95       	ret

000042c8 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    42c8:	df 93       	push	r29
    42ca:	cf 93       	push	r28
    42cc:	cd b7       	in	r28, 0x3d	; 61
    42ce:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	41 e0       	ldi	r20, 0x01	; 1
    42d6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    42da:	83 e0       	ldi	r24, 0x03	; 3
    42dc:	61 e0       	ldi	r22, 0x01	; 1
    42de:	41 e0       	ldi	r20, 0x01	; 1
    42e0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    42e4:	83 e0       	ldi	r24, 0x03	; 3
    42e6:	62 e0       	ldi	r22, 0x02	; 2
    42e8:	41 e0       	ldi	r20, 0x01	; 1
    42ea:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    42ee:	83 e0       	ldi	r24, 0x03	; 3
    42f0:	63 e0       	ldi	r22, 0x03	; 3
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    42f8:	83 e0       	ldi	r24, 0x03	; 3
    42fa:	6f e0       	ldi	r22, 0x0F	; 15
    42fc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    4300:	83 e0       	ldi	r24, 0x03	; 3
    4302:	6f e0       	ldi	r22, 0x0F	; 15
    4304:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	08 95       	ret

0000430e <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    430e:	df 93       	push	r29
    4310:	cf 93       	push	r28
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	62 97       	sbiw	r28, 0x12	; 18
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    4322:	8f ef       	ldi	r24, 0xFF	; 255
    4324:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    4326:	84 e0       	ldi	r24, 0x04	; 4
    4328:	8f 87       	std	Y+15, r24	; 0x0f
    432a:	c9 c0       	rjmp	.+402    	; 0x44be <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    432c:	83 e0       	ldi	r24, 0x03	; 3
    432e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4330:	40 e0       	ldi	r20, 0x00	; 0
    4332:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    4336:	18 8a       	std	Y+16, r1	; 0x10
    4338:	b6 c0       	rjmp	.+364    	; 0x44a6 <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    433a:	9e 01       	movw	r18, r28
    433c:	2e 5e       	subi	r18, 0xEE	; 238
    433e:	3f 4f       	sbci	r19, 0xFF	; 255
    4340:	83 e0       	ldi	r24, 0x03	; 3
    4342:	68 89       	ldd	r22, Y+16	; 0x10
    4344:	a9 01       	movw	r20, r18
    4346:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    434a:	8a 89       	ldd	r24, Y+18	; 0x12
    434c:	88 23       	and	r24, r24
    434e:	09 f0       	breq	.+2      	; 0x4352 <KPD_u8GetPressed+0x44>
    4350:	a7 c0       	rjmp	.+334    	; 0x44a0 <KPD_u8GetPressed+0x192>
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	a8 e4       	ldi	r26, 0x48	; 72
    4358:	b2 e4       	ldi	r27, 0x42	; 66
    435a:	8b 87       	std	Y+11, r24	; 0x0b
    435c:	9c 87       	std	Y+12, r25	; 0x0c
    435e:	ad 87       	std	Y+13, r26	; 0x0d
    4360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4362:	6b 85       	ldd	r22, Y+11	; 0x0b
    4364:	7c 85       	ldd	r23, Y+12	; 0x0c
    4366:	8d 85       	ldd	r24, Y+13	; 0x0d
    4368:	9e 85       	ldd	r25, Y+14	; 0x0e
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	4a ef       	ldi	r20, 0xFA	; 250
    4370:	54 e4       	ldi	r21, 0x44	; 68
    4372:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	8f 83       	std	Y+7, r24	; 0x07
    437c:	98 87       	std	Y+8, r25	; 0x08
    437e:	a9 87       	std	Y+9, r26	; 0x09
    4380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4382:	6f 81       	ldd	r22, Y+7	; 0x07
    4384:	78 85       	ldd	r23, Y+8	; 0x08
    4386:	89 85       	ldd	r24, Y+9	; 0x09
    4388:	9a 85       	ldd	r25, Y+10	; 0x0a
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	40 e8       	ldi	r20, 0x80	; 128
    4390:	5f e3       	ldi	r21, 0x3F	; 63
    4392:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4396:	88 23       	and	r24, r24
    4398:	2c f4       	brge	.+10     	; 0x43a4 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	8d 83       	std	Y+5, r24	; 0x05
    43a2:	3f c0       	rjmp	.+126    	; 0x4422 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    43a4:	6f 81       	ldd	r22, Y+7	; 0x07
    43a6:	78 85       	ldd	r23, Y+8	; 0x08
    43a8:	89 85       	ldd	r24, Y+9	; 0x09
    43aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	3f ef       	ldi	r19, 0xFF	; 255
    43b0:	4f e7       	ldi	r20, 0x7F	; 127
    43b2:	57 e4       	ldi	r21, 0x47	; 71
    43b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    43b8:	18 16       	cp	r1, r24
    43ba:	4c f5       	brge	.+82     	; 0x440e <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43be:	7c 85       	ldd	r23, Y+12	; 0x0c
    43c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e2       	ldi	r20, 0x20	; 32
    43ca:	51 e4       	ldi	r21, 0x41	; 65
    43cc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	bc 01       	movw	r22, r24
    43d6:	cd 01       	movw	r24, r26
    43d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	9e 83       	std	Y+6, r25	; 0x06
    43e2:	8d 83       	std	Y+5, r24	; 0x05
    43e4:	0f c0       	rjmp	.+30     	; 0x4404 <KPD_u8GetPressed+0xf6>
    43e6:	88 ec       	ldi	r24, 0xC8	; 200
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	9c 83       	std	Y+4, r25	; 0x04
    43ec:	8b 83       	std	Y+3, r24	; 0x03
    43ee:	8b 81       	ldd	r24, Y+3	; 0x03
    43f0:	9c 81       	ldd	r25, Y+4	; 0x04
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	f1 f7       	brne	.-4      	; 0x43f2 <KPD_u8GetPressed+0xe4>
    43f6:	9c 83       	std	Y+4, r25	; 0x04
    43f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43fa:	8d 81       	ldd	r24, Y+5	; 0x05
    43fc:	9e 81       	ldd	r25, Y+6	; 0x06
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	9e 83       	std	Y+6, r25	; 0x06
    4402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	00 97       	sbiw	r24, 0x00	; 0
    440a:	69 f7       	brne	.-38     	; 0x43e6 <KPD_u8GetPressed+0xd8>
    440c:	14 c0       	rjmp	.+40     	; 0x4436 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    440e:	6f 81       	ldd	r22, Y+7	; 0x07
    4410:	78 85       	ldd	r23, Y+8	; 0x08
    4412:	89 85       	ldd	r24, Y+9	; 0x09
    4414:	9a 85       	ldd	r25, Y+10	; 0x0a
    4416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	9e 83       	std	Y+6, r25	; 0x06
    4420:	8d 83       	std	Y+5, r24	; 0x05
    4422:	8d 81       	ldd	r24, Y+5	; 0x05
    4424:	9e 81       	ldd	r25, Y+6	; 0x06
    4426:	9a 83       	std	Y+2, r25	; 0x02
    4428:	89 83       	std	Y+1, r24	; 0x01
    442a:	89 81       	ldd	r24, Y+1	; 0x01
    442c:	9a 81       	ldd	r25, Y+2	; 0x02
    442e:	01 97       	sbiw	r24, 0x01	; 1
    4430:	f1 f7       	brne	.-4      	; 0x442e <KPD_u8GetPressed+0x120>
    4432:	9a 83       	std	Y+2, r25	; 0x02
    4434:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    4436:	9e 01       	movw	r18, r28
    4438:	2e 5e       	subi	r18, 0xEE	; 238
    443a:	3f 4f       	sbci	r19, 0xFF	; 255
    443c:	83 e0       	ldi	r24, 0x03	; 3
    443e:	68 89       	ldd	r22, Y+16	; 0x10
    4440:	a9 01       	movw	r20, r18
    4442:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    4446:	8a 89       	ldd	r24, Y+18	; 0x12
    4448:	88 23       	and	r24, r24
    444a:	a9 f4       	brne	.+42     	; 0x4476 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    444c:	88 89       	ldd	r24, Y+16	; 0x10
    444e:	48 2f       	mov	r20, r24
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	8f 85       	ldd	r24, Y+15	; 0x0f
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	9c 01       	movw	r18, r24
    445a:	24 50       	subi	r18, 0x04	; 4
    445c:	30 40       	sbci	r19, 0x00	; 0
    445e:	ca 01       	movw	r24, r20
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	88 0f       	add	r24, r24
    4466:	99 1f       	adc	r25, r25
    4468:	82 0f       	add	r24, r18
    446a:	93 1f       	adc	r25, r19
    446c:	fc 01       	movw	r30, r24
    446e:	e1 50       	subi	r30, 0x01	; 1
    4470:	fd 4f       	sbci	r31, 0xFD	; 253
    4472:	80 81       	ld	r24, Z
    4474:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    4476:	9e 01       	movw	r18, r28
    4478:	2e 5e       	subi	r18, 0xEE	; 238
    447a:	3f 4f       	sbci	r19, 0xFF	; 255
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	68 89       	ldd	r22, Y+16	; 0x10
    4480:	a9 01       	movw	r20, r18
    4482:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_enumReadPinVal>
    4486:	08 c0       	rjmp	.+16     	; 0x4498 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    4488:	9e 01       	movw	r18, r28
    448a:	2e 5e       	subi	r18, 0xEE	; 238
    448c:	3f 4f       	sbci	r19, 0xFF	; 255
    448e:	83 e0       	ldi	r24, 0x03	; 3
    4490:	68 89       	ldd	r22, Y+16	; 0x10
    4492:	a9 01       	movw	r20, r18
    4494:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    4498:	8a 89       	ldd	r24, Y+18	; 0x12
    449a:	88 23       	and	r24, r24
    449c:	a9 f3       	breq	.-22     	; 0x4488 <KPD_u8GetPressed+0x17a>
    449e:	07 c0       	rjmp	.+14     	; 0x44ae <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    44a0:	88 89       	ldd	r24, Y+16	; 0x10
    44a2:	8f 5f       	subi	r24, 0xFF	; 255
    44a4:	88 8b       	std	Y+16, r24	; 0x10
    44a6:	88 89       	ldd	r24, Y+16	; 0x10
    44a8:	84 30       	cpi	r24, 0x04	; 4
    44aa:	08 f4       	brcc	.+2      	; 0x44ae <KPD_u8GetPressed+0x1a0>
    44ac:	46 cf       	rjmp	.-372    	; 0x433a <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    44b2:	41 e0       	ldi	r20, 0x01	; 1
    44b4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    44b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ba:	8f 5f       	subi	r24, 0xFF	; 255
    44bc:	8f 87       	std	Y+15, r24	; 0x0f
    44be:	8f 85       	ldd	r24, Y+15	; 0x0f
    44c0:	88 30       	cpi	r24, 0x08	; 8
    44c2:	08 f4       	brcc	.+2      	; 0x44c6 <KPD_u8GetPressed+0x1b8>
    44c4:	33 cf       	rjmp	.-410    	; 0x432c <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    44c6:	89 89       	ldd	r24, Y+17	; 0x11
}
    44c8:	62 96       	adiw	r28, 0x12	; 18
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	cf 91       	pop	r28
    44d6:	df 91       	pop	r29
    44d8:	08 95       	ret

000044da <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    44da:	ef 92       	push	r14
    44dc:	ff 92       	push	r15
    44de:	0f 93       	push	r16
    44e0:	1f 93       	push	r17
    44e2:	df 93       	push	r29
    44e4:	cf 93       	push	r28
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	2b 97       	sbiw	r28, 0x0b	; 11
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	99 87       	std	Y+9, r25	; 0x09
    44f8:	88 87       	std	Y+8, r24	; 0x08
    44fa:	7b 87       	std	Y+11, r23	; 0x0b
    44fc:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    44fe:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    4500:	e8 85       	ldd	r30, Y+8	; 0x08
    4502:	f9 85       	ldd	r31, Y+9	; 0x09
    4504:	81 81       	ldd	r24, Z+1	; 0x01
    4506:	28 2f       	mov	r18, r24
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	88 ee       	ldi	r24, 0xE8	; 232
    450c:	93 e0       	ldi	r25, 0x03	; 3
    450e:	ac 01       	movw	r20, r24
    4510:	24 9f       	mul	r18, r20
    4512:	c0 01       	movw	r24, r0
    4514:	25 9f       	mul	r18, r21
    4516:	90 0d       	add	r25, r0
    4518:	34 9f       	mul	r19, r20
    451a:	90 0d       	add	r25, r0
    451c:	11 24       	eor	r1, r1
    451e:	9a 83       	std	Y+2, r25	; 0x02
    4520:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    4522:	e8 85       	ldd	r30, Y+8	; 0x08
    4524:	f9 85       	ldd	r31, Y+9	; 0x09
    4526:	80 81       	ld	r24, Z
    4528:	9e 01       	movw	r18, r28
    452a:	2a 5f       	subi	r18, 0xFA	; 250
    452c:	3f 4f       	sbci	r19, 0xFF	; 255
    452e:	b9 01       	movw	r22, r18
    4530:	0e 94 32 0a 	call	0x1464	; 0x1464 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    4534:	e8 85       	ldd	r30, Y+8	; 0x08
    4536:	f9 85       	ldd	r31, Y+9	; 0x09
    4538:	82 81       	ldd	r24, Z+2	; 0x02
    453a:	88 23       	and	r24, r24
    453c:	e1 f4       	brne	.+56     	; 0x4576 <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    453e:	8e 81       	ldd	r24, Y+6	; 0x06
    4540:	9f 81       	ldd	r25, Y+7	; 0x07
    4542:	7c 01       	movw	r14, r24
    4544:	00 e0       	ldi	r16, 0x00	; 0
    4546:	10 e0       	ldi	r17, 0x00	; 0
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	9c 01       	movw	r18, r24
    454e:	40 e0       	ldi	r20, 0x00	; 0
    4550:	50 e0       	ldi	r21, 0x00	; 0
    4552:	c8 01       	movw	r24, r16
    4554:	b7 01       	movw	r22, r14
    4556:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsi3>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	07 2e       	mov	r0, r23
    4560:	7a e0       	ldi	r23, 0x0A	; 10
    4562:	b6 95       	lsr	r27
    4564:	a7 95       	ror	r26
    4566:	97 95       	ror	r25
    4568:	87 95       	ror	r24
    456a:	7a 95       	dec	r23
    456c:	d1 f7       	brne	.-12     	; 0x4562 <LM35_u8GetTemp+0x88>
    456e:	70 2d       	mov	r23, r0
    4570:	9c 83       	std	Y+4, r25	; 0x04
    4572:	8b 83       	std	Y+3, r24	; 0x03
    4574:	1b c0       	rjmp	.+54     	; 0x45ac <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    4576:	e8 85       	ldd	r30, Y+8	; 0x08
    4578:	f9 85       	ldd	r31, Y+9	; 0x09
    457a:	82 81       	ldd	r24, Z+2	; 0x02
    457c:	81 30       	cpi	r24, 0x01	; 1
    457e:	b1 f4       	brne	.+44     	; 0x45ac <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    4580:	8e 81       	ldd	r24, Y+6	; 0x06
    4582:	9f 81       	ldd	r25, Y+7	; 0x07
    4584:	7c 01       	movw	r14, r24
    4586:	00 e0       	ldi	r16, 0x00	; 0
    4588:	10 e0       	ldi	r17, 0x00	; 0
    458a:	89 81       	ldd	r24, Y+1	; 0x01
    458c:	9a 81       	ldd	r25, Y+2	; 0x02
    458e:	9c 01       	movw	r18, r24
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	c8 01       	movw	r24, r16
    4596:	b7 01       	movw	r22, r14
    4598:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsi3>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	89 2f       	mov	r24, r25
    45a2:	9a 2f       	mov	r25, r26
    45a4:	ab 2f       	mov	r26, r27
    45a6:	bb 27       	eor	r27, r27
    45a8:	9c 83       	std	Y+4, r25	; 0x04
    45aa:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    45ac:	8b 81       	ldd	r24, Y+3	; 0x03
    45ae:	9c 81       	ldd	r25, Y+4	; 0x04
    45b0:	2a e0       	ldi	r18, 0x0A	; 10
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	b9 01       	movw	r22, r18
    45b6:	0e 94 ed 38 	call	0x71da	; 0x71da <__udivmodhi4>
    45ba:	cb 01       	movw	r24, r22
    45bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    45be:	fb 85       	ldd	r31, Y+11	; 0x0b
    45c0:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    45c2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    45c4:	2b 96       	adiw	r28, 0x0b	; 11
    45c6:	0f b6       	in	r0, 0x3f	; 63
    45c8:	f8 94       	cli
    45ca:	de bf       	out	0x3e, r29	; 62
    45cc:	0f be       	out	0x3f, r0	; 63
    45ce:	cd bf       	out	0x3d, r28	; 61
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	1f 91       	pop	r17
    45d6:	0f 91       	pop	r16
    45d8:	ff 90       	pop	r15
    45da:	ef 90       	pop	r14
    45dc:	08 95       	ret

000045de <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    45de:	ef 92       	push	r14
    45e0:	ff 92       	push	r15
    45e2:	0f 93       	push	r16
    45e4:	1f 93       	push	r17
    45e6:	df 93       	push	r29
    45e8:	cf 93       	push	r28
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	29 97       	sbiw	r28, 0x09	; 9
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	9f 83       	std	Y+7, r25	; 0x07
    45fc:	8e 83       	std	Y+6, r24	; 0x06
    45fe:	79 87       	std	Y+9, r23	; 0x09
    4600:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    4602:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    4604:	ee 81       	ldd	r30, Y+6	; 0x06
    4606:	ff 81       	ldd	r31, Y+7	; 0x07
    4608:	81 81       	ldd	r24, Z+1	; 0x01
    460a:	28 2f       	mov	r18, r24
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	88 ee       	ldi	r24, 0xE8	; 232
    4610:	93 e0       	ldi	r25, 0x03	; 3
    4612:	ac 01       	movw	r20, r24
    4614:	24 9f       	mul	r18, r20
    4616:	c0 01       	movw	r24, r0
    4618:	25 9f       	mul	r18, r21
    461a:	90 0d       	add	r25, r0
    461c:	34 9f       	mul	r19, r20
    461e:	90 0d       	add	r25, r0
    4620:	11 24       	eor	r1, r1
    4622:	9a 83       	std	Y+2, r25	; 0x02
    4624:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    4626:	ee 81       	ldd	r30, Y+6	; 0x06
    4628:	ff 81       	ldd	r31, Y+7	; 0x07
    462a:	80 81       	ld	r24, Z
    462c:	9e 01       	movw	r18, r28
    462e:	2c 5f       	subi	r18, 0xFC	; 252
    4630:	3f 4f       	sbci	r19, 0xFF	; 255
    4632:	b9 01       	movw	r22, r18
    4634:	0e 94 32 0a 	call	0x1464	; 0x1464 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    4638:	ee 81       	ldd	r30, Y+6	; 0x06
    463a:	ff 81       	ldd	r31, Y+7	; 0x07
    463c:	82 81       	ldd	r24, Z+2	; 0x02
    463e:	88 23       	and	r24, r24
    4640:	f1 f4       	brne	.+60     	; 0x467e <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    4642:	8c 81       	ldd	r24, Y+4	; 0x04
    4644:	9d 81       	ldd	r25, Y+5	; 0x05
    4646:	7c 01       	movw	r14, r24
    4648:	00 e0       	ldi	r16, 0x00	; 0
    464a:	10 e0       	ldi	r17, 0x00	; 0
    464c:	89 81       	ldd	r24, Y+1	; 0x01
    464e:	9a 81       	ldd	r25, Y+2	; 0x02
    4650:	9c 01       	movw	r18, r24
    4652:	40 e0       	ldi	r20, 0x00	; 0
    4654:	50 e0       	ldi	r21, 0x00	; 0
    4656:	c8 01       	movw	r24, r16
    4658:	b7 01       	movw	r22, r14
    465a:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsi3>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	07 2e       	mov	r0, r23
    4664:	7a e0       	ldi	r23, 0x0A	; 10
    4666:	b6 95       	lsr	r27
    4668:	a7 95       	ror	r26
    466a:	97 95       	ror	r25
    466c:	87 95       	ror	r24
    466e:	7a 95       	dec	r23
    4670:	d1 f7       	brne	.-12     	; 0x4666 <LM35_u8GetAnalogSignal+0x88>
    4672:	70 2d       	mov	r23, r0
    4674:	e8 85       	ldd	r30, Y+8	; 0x08
    4676:	f9 85       	ldd	r31, Y+9	; 0x09
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	80 83       	st	Z, r24
    467c:	1d c0       	rjmp	.+58     	; 0x46b8 <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    467e:	ee 81       	ldd	r30, Y+6	; 0x06
    4680:	ff 81       	ldd	r31, Y+7	; 0x07
    4682:	82 81       	ldd	r24, Z+2	; 0x02
    4684:	81 30       	cpi	r24, 0x01	; 1
    4686:	c1 f4       	brne	.+48     	; 0x46b8 <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    4688:	8c 81       	ldd	r24, Y+4	; 0x04
    468a:	9d 81       	ldd	r25, Y+5	; 0x05
    468c:	7c 01       	movw	r14, r24
    468e:	00 e0       	ldi	r16, 0x00	; 0
    4690:	10 e0       	ldi	r17, 0x00	; 0
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	9a 81       	ldd	r25, Y+2	; 0x02
    4696:	9c 01       	movw	r18, r24
    4698:	40 e0       	ldi	r20, 0x00	; 0
    469a:	50 e0       	ldi	r21, 0x00	; 0
    469c:	c8 01       	movw	r24, r16
    469e:	b7 01       	movw	r22, r14
    46a0:	0e 94 c2 38 	call	0x7184	; 0x7184 <__mulsi3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	89 2f       	mov	r24, r25
    46aa:	9a 2f       	mov	r25, r26
    46ac:	ab 2f       	mov	r26, r27
    46ae:	bb 27       	eor	r27, r27
    46b0:	e8 85       	ldd	r30, Y+8	; 0x08
    46b2:	f9 85       	ldd	r31, Y+9	; 0x09
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    46b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    46ba:	29 96       	adiw	r28, 0x09	; 9
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	ef 90       	pop	r14
    46d2:	08 95       	ret

000046d4 <main>:
void ISR_TIMER2_OVF_MODE(void);

//===================================================================/

int main(void)
{
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	c7 5c       	subi	r28, 0xC7	; 199
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
	/* Configure AM/PM indicator pin as output */
	DIO_enumSetPinDir(DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT);
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	63 e0       	ldi	r22, 0x03	; 3
    46f2:	41 e0       	ldi	r20, 0x01	; 1
    46f4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_enumSetPinDir>
	DIO_enumWritePinVal(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	63 e0       	ldi	r22, 0x03	; 3
    46fc:	41 e0       	ldi	r20, 0x01	; 1
    46fe:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_enumWritePinVal>

	// Set callback function for TIMER2 overflow interrup
	TIMER_u8SetCallBack(ISR_TIMER2_OVF_MODE, TIMER2_OVF_VECTOR_ID);
    4702:	8c e4       	ldi	r24, 0x4C	; 76
    4704:	98 e3       	ldi	r25, 0x38	; 56
    4706:	65 e0       	ldi	r22, 0x05	; 5
    4708:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <TIMER_u8SetCallBack>

	/* Initialize Keypad on PORTD */
	KPD_vInit();
    470c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <KPD_vInit>

	/* Initialize CLCD on High Nibble for PORTA */
	CLCD_vInit();
    4710:	0e 94 92 19 	call	0x3324	; 0x3324 <CLCD_vInit>

	/* Enable Global Interrupts */
	GIE_vEnable();
    4714:	0e 94 76 14 	call	0x28ec	; 0x28ec <GIE_vEnable>

	/* Initialize BUZ on PIN4 for PORTB */
	BUZ_vInit(BUZ0);
    4718:	60 91 33 03 	lds	r22, 0x0333
    471c:	70 91 34 03 	lds	r23, 0x0334
    4720:	80 91 35 03 	lds	r24, 0x0335
    4724:	0e 94 25 19 	call	0x324a	; 0x324a <BUZ_vInit>

	/* Initialize seven-segment displays */
	SSD_vInitDataPort(seven_seg0);
    4728:	40 91 12 03 	lds	r20, 0x0312
    472c:	50 91 13 03 	lds	r21, 0x0313
    4730:	60 91 14 03 	lds	r22, 0x0314
    4734:	70 91 15 03 	lds	r23, 0x0315
    4738:	80 91 16 03 	lds	r24, 0x0316
    473c:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg1);
    4740:	40 91 17 03 	lds	r20, 0x0317
    4744:	50 91 18 03 	lds	r21, 0x0318
    4748:	60 91 19 03 	lds	r22, 0x0319
    474c:	70 91 1a 03 	lds	r23, 0x031A
    4750:	80 91 1b 03 	lds	r24, 0x031B
    4754:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg2);
    4758:	40 91 1c 03 	lds	r20, 0x031C
    475c:	50 91 1d 03 	lds	r21, 0x031D
    4760:	60 91 1e 03 	lds	r22, 0x031E
    4764:	70 91 1f 03 	lds	r23, 0x031F
    4768:	80 91 20 03 	lds	r24, 0x0320
    476c:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg3);
    4770:	40 91 21 03 	lds	r20, 0x0321
    4774:	50 91 22 03 	lds	r21, 0x0322
    4778:	60 91 23 03 	lds	r22, 0x0323
    477c:	70 91 24 03 	lds	r23, 0x0324
    4780:	80 91 25 03 	lds	r24, 0x0325
    4784:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg4);
    4788:	40 91 26 03 	lds	r20, 0x0326
    478c:	50 91 27 03 	lds	r21, 0x0327
    4790:	60 91 28 03 	lds	r22, 0x0328
    4794:	70 91 29 03 	lds	r23, 0x0329
    4798:	80 91 2a 03 	lds	r24, 0x032A
    479c:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg5);
    47a0:	40 91 2b 03 	lds	r20, 0x032B
    47a4:	50 91 2c 03 	lds	r21, 0x032C
    47a8:	60 91 2d 03 	lds	r22, 0x032D
    47ac:	70 91 2e 03 	lds	r23, 0x032E
    47b0:	80 91 2f 03 	lds	r24, 0x032F
    47b4:	0e 94 77 18 	call	0x30ee	; 0x30ee <SSD_vInitDataPort>

	/*
	 * Initialize TIMER2 with external clock at 32.768 KHz
	 * Using division factor 128 to achieve 1 second intervals
	 */
	TIMER2_vInit();
    47b8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <TIMER2_vInit>

	/* Initialize ADC for temperature sensor */
	ADC_vInit();
    47bc:	0e 94 10 09 	call	0x1220	; 0x1220 <ADC_vInit>

	CLCD_vSendString("Press ON to");
    47c0:	80 e6       	ldi	r24, 0x60	; 96
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	61 e0       	ldi	r22, 0x01	; 1
    47cc:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    47d0:	8c e6       	ldi	r24, 0x6C	; 108
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	while(1)
	{
		press = KPD_u8GetPressed();
    47d8:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    47dc:	80 93 56 03 	sts	0x0356, r24
		if (press == 'A')
    47e0:	80 91 56 03 	lds	r24, 0x0356
    47e4:	81 34       	cpi	r24, 0x41	; 65
    47e6:	09 f0       	breq	.+2      	; 0x47ea <main+0x116>
    47e8:	74 c1       	rjmp	.+744    	; 0x4ad2 <main+0x3fe>
		{
			// Display menu options on CLCD
			CLCD_vClearScreen();
    47ea:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("1 - Set time");
    47ee:	88 e7       	ldi	r24, 0x78	; 120
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	61 e0       	ldi	r22, 0x01	; 1
    47fa:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("2 - Select mode");
    47fe:	85 e8       	ldi	r24, 0x85	; 133
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    4806:	83 e0       	ldi	r24, 0x03	; 3
    4808:	61 e0       	ldi	r22, 0x01	; 1
    480a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    480e:	85 e9       	ldi	r24, 0x95	; 149
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    4816:	84 e0       	ldi	r24, 0x04	; 4
    4818:	61 e0       	ldi	r22, 0x01	; 1
    481a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    481e:	83 ea       	ldi	r24, 0xA3	; 163
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    4826:	84 e0       	ldi	r24, 0x04	; 4
    4828:	6f e0       	ldi	r22, 0x0F	; 15
    482a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    482e:	8f ea       	ldi	r24, 0xAF	; 175
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>

			do
			{
				press = KPD_u8GetPressed();
    4836:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    483a:	80 93 56 03 	sts	0x0356, r24
				if (press != NOTPRESSED)
    483e:	80 91 56 03 	lds	r24, 0x0356
    4842:	8f 3f       	cpi	r24, 0xFF	; 255
    4844:	09 f4       	brne	.+2      	; 0x4848 <main+0x174>
    4846:	3c c1       	rjmp	.+632    	; 0x4ac0 <main+0x3ec>
				{
					// Perform actions based on the pressed key
					switch(press)
    4848:	80 91 56 03 	lds	r24, 0x0356
    484c:	28 2f       	mov	r18, r24
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	ca 53       	subi	r28, 0x3A	; 58
    4852:	df 4f       	sbci	r29, 0xFF	; 255
    4854:	39 83       	std	Y+1, r19	; 0x01
    4856:	28 83       	st	Y, r18
    4858:	c6 5c       	subi	r28, 0xC6	; 198
    485a:	d0 40       	sbci	r29, 0x00	; 0
    485c:	ca 53       	subi	r28, 0x3A	; 58
    485e:	df 4f       	sbci	r29, 0xFF	; 255
    4860:	88 81       	ld	r24, Y
    4862:	99 81       	ldd	r25, Y+1	; 0x01
    4864:	c6 5c       	subi	r28, 0xC6	; 198
    4866:	d0 40       	sbci	r29, 0x00	; 0
    4868:	82 33       	cpi	r24, 0x32	; 50
    486a:	91 05       	cpc	r25, r1
    486c:	91 f1       	breq	.+100    	; 0x48d2 <main+0x1fe>
    486e:	ca 53       	subi	r28, 0x3A	; 58
    4870:	df 4f       	sbci	r29, 0xFF	; 255
    4872:	e8 81       	ld	r30, Y
    4874:	f9 81       	ldd	r31, Y+1	; 0x01
    4876:	c6 5c       	subi	r28, 0xC6	; 198
    4878:	d0 40       	sbci	r29, 0x00	; 0
    487a:	e3 33       	cpi	r30, 0x33	; 51
    487c:	f1 05       	cpc	r31, r1
    487e:	9c f4       	brge	.+38     	; 0x48a6 <main+0x1d2>
    4880:	ca 53       	subi	r28, 0x3A	; 58
    4882:	df 4f       	sbci	r29, 0xFF	; 255
    4884:	28 81       	ld	r18, Y
    4886:	39 81       	ldd	r19, Y+1	; 0x01
    4888:	c6 5c       	subi	r28, 0xC6	; 198
    488a:	d0 40       	sbci	r29, 0x00	; 0
    488c:	2a 32       	cpi	r18, 0x2A	; 42
    488e:	31 05       	cpc	r19, r1
    4890:	49 f1       	breq	.+82     	; 0x48e4 <main+0x210>
    4892:	ca 53       	subi	r28, 0x3A	; 58
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	88 81       	ld	r24, Y
    4898:	99 81       	ldd	r25, Y+1	; 0x01
    489a:	c6 5c       	subi	r28, 0xC6	; 198
    489c:	d0 40       	sbci	r29, 0x00	; 0
    489e:	81 33       	cpi	r24, 0x31	; 49
    48a0:	91 05       	cpc	r25, r1
    48a2:	a1 f0       	breq	.+40     	; 0x48cc <main+0x1f8>
    48a4:	2e c0       	rjmp	.+92     	; 0x4902 <main+0x22e>
    48a6:	ca 53       	subi	r28, 0x3A	; 58
    48a8:	df 4f       	sbci	r29, 0xFF	; 255
    48aa:	e8 81       	ld	r30, Y
    48ac:	f9 81       	ldd	r31, Y+1	; 0x01
    48ae:	c6 5c       	subi	r28, 0xC6	; 198
    48b0:	d0 40       	sbci	r29, 0x00	; 0
    48b2:	e3 33       	cpi	r30, 0x33	; 51
    48b4:	f1 05       	cpc	r31, r1
    48b6:	81 f0       	breq	.+32     	; 0x48d8 <main+0x204>
    48b8:	ca 53       	subi	r28, 0x3A	; 58
    48ba:	df 4f       	sbci	r29, 0xFF	; 255
    48bc:	28 81       	ld	r18, Y
    48be:	39 81       	ldd	r19, Y+1	; 0x01
    48c0:	c6 5c       	subi	r28, 0xC6	; 198
    48c2:	d0 40       	sbci	r29, 0x00	; 0
    48c4:	24 33       	cpi	r18, 0x34	; 52
    48c6:	31 05       	cpc	r19, r1
    48c8:	51 f0       	breq	.+20     	; 0x48de <main+0x20a>
    48ca:	1b c0       	rjmp	.+54     	; 0x4902 <main+0x22e>
					{
					case '1':
						Set_Time();
    48cc:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <Set_Time>
    48d0:	f7 c0       	rjmp	.+494    	; 0x4ac0 <main+0x3ec>
						break;

					case '2':
						Select_Mode();
    48d2:	0e 94 55 33 	call	0x66aa	; 0x66aa <Select_Mode>
    48d6:	f4 c0       	rjmp	.+488    	; 0x4ac0 <main+0x3ec>
						break;

					case '3' :
						Set_Alarm();
    48d8:	0e 94 8a 34 	call	0x6914	; 0x6914 <Set_Alarm>
    48dc:	f1 c0       	rjmp	.+482    	; 0x4ac0 <main+0x3ec>
						break;

					case '4':
						Get_Temp();
    48de:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <Get_Temp>
    48e2:	ee c0       	rjmp	.+476    	; 0x4ac0 <main+0x3ec>
						break;

					case '*' :
						CLCD_vClearScreen();
    48e4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
						CLCD_vSendString("Press ON to");
    48e8:	80 e6       	ldi	r24, 0x60	; 96
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						CLCD_vSetPosition(2, 1);
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	61 e0       	ldi	r22, 0x01	; 1
    48f4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
						CLCD_vSendString("Show Option");
    48f8:	8c e6       	ldi	r24, 0x6C	; 108
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    4900:	df c0       	rjmp	.+446    	; 0x4ac0 <main+0x3ec>
						break;

					default:
						// Invalid choice handling
						CLCD_vClearScreen();
    4902:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
						CLCD_vSendString("wrong choice");
    4906:	86 eb       	ldi	r24, 0xB6	; 182
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    490e:	fe 01       	movw	r30, r28
    4910:	ef 53       	subi	r30, 0x3F	; 63
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	aa ef       	ldi	r26, 0xFA	; 250
    491a:	b3 e4       	ldi	r27, 0x43	; 67
    491c:	80 83       	st	Z, r24
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	a2 83       	std	Z+2, r26	; 0x02
    4922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4924:	8e 01       	movw	r16, r28
    4926:	03 54       	subi	r16, 0x43	; 67
    4928:	1f 4f       	sbci	r17, 0xFF	; 255
    492a:	fe 01       	movw	r30, r28
    492c:	ef 53       	subi	r30, 0x3F	; 63
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	60 81       	ld	r22, Z
    4932:	71 81       	ldd	r23, Z+1	; 0x01
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	4a ef       	ldi	r20, 0xFA	; 250
    493e:	54 e4       	ldi	r21, 0x44	; 68
    4940:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	f8 01       	movw	r30, r16
    494a:	80 83       	st	Z, r24
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	a2 83       	std	Z+2, r26	; 0x02
    4950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4952:	fe 01       	movw	r30, r28
    4954:	e3 54       	subi	r30, 0x43	; 67
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	82 81       	ldd	r24, Z+2	; 0x02
    495e:	93 81       	ldd	r25, Z+3	; 0x03
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e8       	ldi	r20, 0x80	; 128
    4966:	5f e3       	ldi	r21, 0x3F	; 63
    4968:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    496c:	88 23       	and	r24, r24
    496e:	44 f4       	brge	.+16     	; 0x4980 <main+0x2ac>
		__ticks = 1;
    4970:	fe 01       	movw	r30, r28
    4972:	e5 54       	subi	r30, 0x45	; 69
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	64 c0       	rjmp	.+200    	; 0x4a48 <main+0x374>
	else if (__tmp > 65535)
    4980:	fe 01       	movw	r30, r28
    4982:	e3 54       	subi	r30, 0x43	; 67
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	60 81       	ld	r22, Z
    4988:	71 81       	ldd	r23, Z+1	; 0x01
    498a:	82 81       	ldd	r24, Z+2	; 0x02
    498c:	93 81       	ldd	r25, Z+3	; 0x03
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	3f ef       	ldi	r19, 0xFF	; 255
    4992:	4f e7       	ldi	r20, 0x7F	; 127
    4994:	57 e4       	ldi	r21, 0x47	; 71
    4996:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    499a:	18 16       	cp	r1, r24
    499c:	0c f0       	brlt	.+2      	; 0x49a0 <main+0x2cc>
    499e:	43 c0       	rjmp	.+134    	; 0x4a26 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a0:	fe 01       	movw	r30, r28
    49a2:	ef 53       	subi	r30, 0x3F	; 63
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	60 81       	ld	r22, Z
    49a8:	71 81       	ldd	r23, Z+1	; 0x01
    49aa:	82 81       	ldd	r24, Z+2	; 0x02
    49ac:	93 81       	ldd	r25, Z+3	; 0x03
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	40 e2       	ldi	r20, 0x20	; 32
    49b4:	51 e4       	ldi	r21, 0x41	; 65
    49b6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	8e 01       	movw	r16, r28
    49c0:	05 54       	subi	r16, 0x45	; 69
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	bc 01       	movw	r22, r24
    49c6:	cd 01       	movw	r24, r26
    49c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	f8 01       	movw	r30, r16
    49d2:	91 83       	std	Z+1, r25	; 0x01
    49d4:	80 83       	st	Z, r24
    49d6:	1f c0       	rjmp	.+62     	; 0x4a16 <main+0x342>
    49d8:	fe 01       	movw	r30, r28
    49da:	e7 54       	subi	r30, 0x47	; 71
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	88 ec       	ldi	r24, 0xC8	; 200
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	91 83       	std	Z+1, r25	; 0x01
    49e4:	80 83       	st	Z, r24
    49e6:	fe 01       	movw	r30, r28
    49e8:	e7 54       	subi	r30, 0x47	; 71
    49ea:	ff 4f       	sbci	r31, 0xFF	; 255
    49ec:	80 81       	ld	r24, Z
    49ee:	91 81       	ldd	r25, Z+1	; 0x01
    49f0:	01 97       	sbiw	r24, 0x01	; 1
    49f2:	f1 f7       	brne	.-4      	; 0x49f0 <main+0x31c>
    49f4:	fe 01       	movw	r30, r28
    49f6:	e7 54       	subi	r30, 0x47	; 71
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fe:	de 01       	movw	r26, r28
    4a00:	a5 54       	subi	r26, 0x45	; 69
    4a02:	bf 4f       	sbci	r27, 0xFF	; 255
    4a04:	fe 01       	movw	r30, r28
    4a06:	e5 54       	subi	r30, 0x45	; 69
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	80 81       	ld	r24, Z
    4a0c:	91 81       	ldd	r25, Z+1	; 0x01
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	11 96       	adiw	r26, 0x01	; 1
    4a12:	9c 93       	st	X, r25
    4a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a16:	fe 01       	movw	r30, r28
    4a18:	e5 54       	subi	r30, 0x45	; 69
    4a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1c:	80 81       	ld	r24, Z
    4a1e:	91 81       	ldd	r25, Z+1	; 0x01
    4a20:	00 97       	sbiw	r24, 0x00	; 0
    4a22:	d1 f6       	brne	.-76     	; 0x49d8 <main+0x304>
    4a24:	27 c0       	rjmp	.+78     	; 0x4a74 <main+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a26:	8e 01       	movw	r16, r28
    4a28:	05 54       	subi	r16, 0x45	; 69
    4a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e3 54       	subi	r30, 0x43	; 67
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	93 81       	ldd	r25, Z+3	; 0x03
    4a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	f8 01       	movw	r30, r16
    4a44:	91 83       	std	Z+1, r25	; 0x01
    4a46:	80 83       	st	Z, r24
    4a48:	de 01       	movw	r26, r28
    4a4a:	a9 54       	subi	r26, 0x49	; 73
    4a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a4e:	fe 01       	movw	r30, r28
    4a50:	e5 54       	subi	r30, 0x45	; 69
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	80 81       	ld	r24, Z
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	8d 93       	st	X+, r24
    4a5a:	9c 93       	st	X, r25
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e9 54       	subi	r30, 0x49	; 73
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	80 81       	ld	r24, Z
    4a64:	91 81       	ldd	r25, Z+1	; 0x01
    4a66:	01 97       	sbiw	r24, 0x01	; 1
    4a68:	f1 f7       	brne	.-4      	; 0x4a66 <main+0x392>
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	e9 54       	subi	r30, 0x49	; 73
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_vClearScreen();
    4a74:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
						CLCD_vSendString("1 - set time");
    4a78:	83 ec       	ldi	r24, 0xC3	; 195
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						CLCD_vSetPosition(2,1);
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	61 e0       	ldi	r22, 0x01	; 1
    4a84:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
						CLCD_vSendString("2 - select mode");
    4a88:	80 ed       	ldi	r24, 0xD0	; 208
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						CLCD_vSetPosition(3, 1);
    4a90:	83 e0       	ldi	r24, 0x03	; 3
    4a92:	61 e0       	ldi	r22, 0x01	; 1
    4a94:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
						CLCD_vSendString("3 - Set Alarm");
    4a98:	85 e9       	ldi	r24, 0x95	; 149
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						CLCD_vSetPosition(4, 1);
    4aa0:	84 e0       	ldi	r24, 0x04	; 4
    4aa2:	61 e0       	ldi	r22, 0x01	; 1
    4aa4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
						CLCD_vSendString("4 - Weather");
    4aa8:	83 ea       	ldi	r24, 0xA3	; 163
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						CLCD_vSetPosition(4, 15);
    4ab0:	84 e0       	ldi	r24, 0x04	; 4
    4ab2:	6f e0       	ldi	r22, 0x0F	; 15
    4ab4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
						CLCD_vSendString("X:EXIT");
    4ab8:	8f ea       	ldi	r24, 0xAF	; 175
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
						break;
					}
				}
			}while (press == NOTPRESSED && press != '*' );
    4ac0:	80 91 56 03 	lds	r24, 0x0356
    4ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ac6:	29 f4       	brne	.+10     	; 0x4ad2 <main+0x3fe>
    4ac8:	80 91 56 03 	lds	r24, 0x0356
    4acc:	8a 32       	cpi	r24, 0x2A	; 42
    4ace:	09 f0       	breq	.+2      	; 0x4ad2 <main+0x3fe>
    4ad0:	b2 ce       	rjmp	.-668    	; 0x4836 <main+0x162>

		}
		/* Display time on seven-segment displays using POV theorem */

		// Display seconds (units)
		SSD_vDisable(seven_seg5);
    4ad2:	40 91 2b 03 	lds	r20, 0x032B
    4ad6:	50 91 2c 03 	lds	r21, 0x032C
    4ada:	60 91 2d 03 	lds	r22, 0x032D
    4ade:	70 91 2e 03 	lds	r23, 0x032E
    4ae2:	80 91 2f 03 	lds	r24, 0x032F
    4ae6:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg0);
    4aea:	40 91 12 03 	lds	r20, 0x0312
    4aee:	50 91 13 03 	lds	r21, 0x0313
    4af2:	60 91 14 03 	lds	r22, 0x0314
    4af6:	70 91 15 03 	lds	r23, 0x0315
    4afa:	80 91 16 03 	lds	r24, 0x0316
    4afe:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg0, Second%10);
    4b02:	80 91 53 03 	lds	r24, 0x0353
    4b06:	9a e0       	ldi	r25, 0x0A	; 10
    4b08:	69 2f       	mov	r22, r25
    4b0a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    4b0e:	89 2f       	mov	r24, r25
    4b10:	98 2f       	mov	r25, r24
    4b12:	40 91 12 03 	lds	r20, 0x0312
    4b16:	50 91 13 03 	lds	r21, 0x0313
    4b1a:	60 91 14 03 	lds	r22, 0x0314
    4b1e:	70 91 15 03 	lds	r23, 0x0315
    4b22:	80 91 16 03 	lds	r24, 0x0316
    4b26:	29 2f       	mov	r18, r25
    4b28:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	ed 54       	subi	r30, 0x4D	; 77
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	a0 ea       	ldi	r26, 0xA0	; 160
    4b38:	b0 e4       	ldi	r27, 0x40	; 64
    4b3a:	80 83       	st	Z, r24
    4b3c:	91 83       	std	Z+1, r25	; 0x01
    4b3e:	a2 83       	std	Z+2, r26	; 0x02
    4b40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b42:	8e 01       	movw	r16, r28
    4b44:	01 55       	subi	r16, 0x51	; 81
    4b46:	1f 4f       	sbci	r17, 0xFF	; 255
    4b48:	fe 01       	movw	r30, r28
    4b4a:	ed 54       	subi	r30, 0x4D	; 77
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	4a ef       	ldi	r20, 0xFA	; 250
    4b5c:	54 e4       	ldi	r21, 0x44	; 68
    4b5e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	f8 01       	movw	r30, r16
    4b68:	80 83       	st	Z, r24
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	a2 83       	std	Z+2, r26	; 0x02
    4b6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b70:	fe 01       	movw	r30, r28
    4b72:	e1 55       	subi	r30, 0x51	; 81
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	60 81       	ld	r22, Z
    4b78:	71 81       	ldd	r23, Z+1	; 0x01
    4b7a:	82 81       	ldd	r24, Z+2	; 0x02
    4b7c:	93 81       	ldd	r25, Z+3	; 0x03
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	40 e8       	ldi	r20, 0x80	; 128
    4b84:	5f e3       	ldi	r21, 0x3F	; 63
    4b86:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4b8a:	88 23       	and	r24, r24
    4b8c:	44 f4       	brge	.+16     	; 0x4b9e <main+0x4ca>
		__ticks = 1;
    4b8e:	fe 01       	movw	r30, r28
    4b90:	e3 55       	subi	r30, 0x53	; 83
    4b92:	ff 4f       	sbci	r31, 0xFF	; 255
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	80 83       	st	Z, r24
    4b9c:	64 c0       	rjmp	.+200    	; 0x4c66 <main+0x592>
	else if (__tmp > 65535)
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	e1 55       	subi	r30, 0x51	; 81
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	82 81       	ldd	r24, Z+2	; 0x02
    4baa:	93 81       	ldd	r25, Z+3	; 0x03
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	3f ef       	ldi	r19, 0xFF	; 255
    4bb0:	4f e7       	ldi	r20, 0x7F	; 127
    4bb2:	57 e4       	ldi	r21, 0x47	; 71
    4bb4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4bb8:	18 16       	cp	r1, r24
    4bba:	0c f0       	brlt	.+2      	; 0x4bbe <main+0x4ea>
    4bbc:	43 c0       	rjmp	.+134    	; 0x4c44 <main+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ed 54       	subi	r30, 0x4D	; 77
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	60 81       	ld	r22, Z
    4bc6:	71 81       	ldd	r23, Z+1	; 0x01
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e2       	ldi	r20, 0x20	; 32
    4bd2:	51 e4       	ldi	r21, 0x41	; 65
    4bd4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	8e 01       	movw	r16, r28
    4bde:	03 55       	subi	r16, 0x53	; 83
    4be0:	1f 4f       	sbci	r17, 0xFF	; 255
    4be2:	bc 01       	movw	r22, r24
    4be4:	cd 01       	movw	r24, r26
    4be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	f8 01       	movw	r30, r16
    4bf0:	91 83       	std	Z+1, r25	; 0x01
    4bf2:	80 83       	st	Z, r24
    4bf4:	1f c0       	rjmp	.+62     	; 0x4c34 <main+0x560>
    4bf6:	fe 01       	movw	r30, r28
    4bf8:	e5 55       	subi	r30, 0x55	; 85
    4bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfc:	88 ec       	ldi	r24, 0xC8	; 200
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	91 83       	std	Z+1, r25	; 0x01
    4c02:	80 83       	st	Z, r24
    4c04:	fe 01       	movw	r30, r28
    4c06:	e5 55       	subi	r30, 0x55	; 85
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	80 81       	ld	r24, Z
    4c0c:	91 81       	ldd	r25, Z+1	; 0x01
    4c0e:	01 97       	sbiw	r24, 0x01	; 1
    4c10:	f1 f7       	brne	.-4      	; 0x4c0e <main+0x53a>
    4c12:	fe 01       	movw	r30, r28
    4c14:	e5 55       	subi	r30, 0x55	; 85
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	91 83       	std	Z+1, r25	; 0x01
    4c1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1c:	de 01       	movw	r26, r28
    4c1e:	a3 55       	subi	r26, 0x53	; 83
    4c20:	bf 4f       	sbci	r27, 0xFF	; 255
    4c22:	fe 01       	movw	r30, r28
    4c24:	e3 55       	subi	r30, 0x53	; 83
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	11 96       	adiw	r26, 0x01	; 1
    4c30:	9c 93       	st	X, r25
    4c32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c34:	fe 01       	movw	r30, r28
    4c36:	e3 55       	subi	r30, 0x53	; 83
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	80 81       	ld	r24, Z
    4c3c:	91 81       	ldd	r25, Z+1	; 0x01
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	d1 f6       	brne	.-76     	; 0x4bf6 <main+0x522>
    4c42:	27 c0       	rjmp	.+78     	; 0x4c92 <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c44:	8e 01       	movw	r16, r28
    4c46:	03 55       	subi	r16, 0x53	; 83
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	fe 01       	movw	r30, r28
    4c4c:	e1 55       	subi	r30, 0x51	; 81
    4c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c50:	60 81       	ld	r22, Z
    4c52:	71 81       	ldd	r23, Z+1	; 0x01
    4c54:	82 81       	ldd	r24, Z+2	; 0x02
    4c56:	93 81       	ldd	r25, Z+3	; 0x03
    4c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	f8 01       	movw	r30, r16
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	80 83       	st	Z, r24
    4c66:	de 01       	movw	r26, r28
    4c68:	a7 55       	subi	r26, 0x57	; 87
    4c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	e3 55       	subi	r30, 0x53	; 83
    4c70:	ff 4f       	sbci	r31, 0xFF	; 255
    4c72:	80 81       	ld	r24, Z
    4c74:	91 81       	ldd	r25, Z+1	; 0x01
    4c76:	8d 93       	st	X+, r24
    4c78:	9c 93       	st	X, r25
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	e7 55       	subi	r30, 0x57	; 87
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	f1 f7       	brne	.-4      	; 0x4c84 <main+0x5b0>
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e7 55       	subi	r30, 0x57	; 87
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	91 83       	std	Z+1, r25	; 0x01
    4c90:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display seconds (tens)
		SSD_vDisable(seven_seg0);
    4c92:	40 91 12 03 	lds	r20, 0x0312
    4c96:	50 91 13 03 	lds	r21, 0x0313
    4c9a:	60 91 14 03 	lds	r22, 0x0314
    4c9e:	70 91 15 03 	lds	r23, 0x0315
    4ca2:	80 91 16 03 	lds	r24, 0x0316
    4ca6:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg1);
    4caa:	40 91 17 03 	lds	r20, 0x0317
    4cae:	50 91 18 03 	lds	r21, 0x0318
    4cb2:	60 91 19 03 	lds	r22, 0x0319
    4cb6:	70 91 1a 03 	lds	r23, 0x031A
    4cba:	80 91 1b 03 	lds	r24, 0x031B
    4cbe:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg1, Second/10);
    4cc2:	80 91 53 03 	lds	r24, 0x0353
    4cc6:	9a e0       	ldi	r25, 0x0A	; 10
    4cc8:	69 2f       	mov	r22, r25
    4cca:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    4cce:	98 2f       	mov	r25, r24
    4cd0:	40 91 17 03 	lds	r20, 0x0317
    4cd4:	50 91 18 03 	lds	r21, 0x0318
    4cd8:	60 91 19 03 	lds	r22, 0x0319
    4cdc:	70 91 1a 03 	lds	r23, 0x031A
    4ce0:	80 91 1b 03 	lds	r24, 0x031B
    4ce4:	29 2f       	mov	r18, r25
    4ce6:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    4cea:	fe 01       	movw	r30, r28
    4cec:	eb 55       	subi	r30, 0x5B	; 91
    4cee:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf0:	80 e0       	ldi	r24, 0x00	; 0
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	a0 ea       	ldi	r26, 0xA0	; 160
    4cf6:	b0 e4       	ldi	r27, 0x40	; 64
    4cf8:	80 83       	st	Z, r24
    4cfa:	91 83       	std	Z+1, r25	; 0x01
    4cfc:	a2 83       	std	Z+2, r26	; 0x02
    4cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d00:	8e 01       	movw	r16, r28
    4d02:	0f 55       	subi	r16, 0x5F	; 95
    4d04:	1f 4f       	sbci	r17, 0xFF	; 255
    4d06:	fe 01       	movw	r30, r28
    4d08:	eb 55       	subi	r30, 0x5B	; 91
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	60 81       	ld	r22, Z
    4d0e:	71 81       	ldd	r23, Z+1	; 0x01
    4d10:	82 81       	ldd	r24, Z+2	; 0x02
    4d12:	93 81       	ldd	r25, Z+3	; 0x03
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	4a ef       	ldi	r20, 0xFA	; 250
    4d1a:	54 e4       	ldi	r21, 0x44	; 68
    4d1c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	f8 01       	movw	r30, r16
    4d26:	80 83       	st	Z, r24
    4d28:	91 83       	std	Z+1, r25	; 0x01
    4d2a:	a2 83       	std	Z+2, r26	; 0x02
    4d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d2e:	fe 01       	movw	r30, r28
    4d30:	ef 55       	subi	r30, 0x5F	; 95
    4d32:	ff 4f       	sbci	r31, 0xFF	; 255
    4d34:	60 81       	ld	r22, Z
    4d36:	71 81       	ldd	r23, Z+1	; 0x01
    4d38:	82 81       	ldd	r24, Z+2	; 0x02
    4d3a:	93 81       	ldd	r25, Z+3	; 0x03
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e8       	ldi	r20, 0x80	; 128
    4d42:	5f e3       	ldi	r21, 0x3F	; 63
    4d44:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4d48:	88 23       	and	r24, r24
    4d4a:	44 f4       	brge	.+16     	; 0x4d5c <main+0x688>
		__ticks = 1;
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e1 56       	subi	r30, 0x61	; 97
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	91 83       	std	Z+1, r25	; 0x01
    4d58:	80 83       	st	Z, r24
    4d5a:	64 c0       	rjmp	.+200    	; 0x4e24 <main+0x750>
	else if (__tmp > 65535)
    4d5c:	fe 01       	movw	r30, r28
    4d5e:	ef 55       	subi	r30, 0x5F	; 95
    4d60:	ff 4f       	sbci	r31, 0xFF	; 255
    4d62:	60 81       	ld	r22, Z
    4d64:	71 81       	ldd	r23, Z+1	; 0x01
    4d66:	82 81       	ldd	r24, Z+2	; 0x02
    4d68:	93 81       	ldd	r25, Z+3	; 0x03
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	3f ef       	ldi	r19, 0xFF	; 255
    4d6e:	4f e7       	ldi	r20, 0x7F	; 127
    4d70:	57 e4       	ldi	r21, 0x47	; 71
    4d72:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4d76:	18 16       	cp	r1, r24
    4d78:	0c f0       	brlt	.+2      	; 0x4d7c <main+0x6a8>
    4d7a:	43 c0       	rjmp	.+134    	; 0x4e02 <main+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	eb 55       	subi	r30, 0x5B	; 91
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	60 81       	ld	r22, Z
    4d84:	71 81       	ldd	r23, Z+1	; 0x01
    4d86:	82 81       	ldd	r24, Z+2	; 0x02
    4d88:	93 81       	ldd	r25, Z+3	; 0x03
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	40 e2       	ldi	r20, 0x20	; 32
    4d90:	51 e4       	ldi	r21, 0x41	; 65
    4d92:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	8e 01       	movw	r16, r28
    4d9c:	01 56       	subi	r16, 0x61	; 97
    4d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4da0:	bc 01       	movw	r22, r24
    4da2:	cd 01       	movw	r24, r26
    4da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	f8 01       	movw	r30, r16
    4dae:	91 83       	std	Z+1, r25	; 0x01
    4db0:	80 83       	st	Z, r24
    4db2:	1f c0       	rjmp	.+62     	; 0x4df2 <main+0x71e>
    4db4:	fe 01       	movw	r30, r28
    4db6:	e3 56       	subi	r30, 0x63	; 99
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	88 ec       	ldi	r24, 0xC8	; 200
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	91 83       	std	Z+1, r25	; 0x01
    4dc0:	80 83       	st	Z, r24
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	e3 56       	subi	r30, 0x63	; 99
    4dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc8:	80 81       	ld	r24, Z
    4dca:	91 81       	ldd	r25, Z+1	; 0x01
    4dcc:	01 97       	sbiw	r24, 0x01	; 1
    4dce:	f1 f7       	brne	.-4      	; 0x4dcc <main+0x6f8>
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	e3 56       	subi	r30, 0x63	; 99
    4dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd6:	91 83       	std	Z+1, r25	; 0x01
    4dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dda:	de 01       	movw	r26, r28
    4ddc:	a1 56       	subi	r26, 0x61	; 97
    4dde:	bf 4f       	sbci	r27, 0xFF	; 255
    4de0:	fe 01       	movw	r30, r28
    4de2:	e1 56       	subi	r30, 0x61	; 97
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 81       	ld	r24, Z
    4de8:	91 81       	ldd	r25, Z+1	; 0x01
    4dea:	01 97       	sbiw	r24, 0x01	; 1
    4dec:	11 96       	adiw	r26, 0x01	; 1
    4dee:	9c 93       	st	X, r25
    4df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df2:	fe 01       	movw	r30, r28
    4df4:	e1 56       	subi	r30, 0x61	; 97
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	91 81       	ldd	r25, Z+1	; 0x01
    4dfc:	00 97       	sbiw	r24, 0x00	; 0
    4dfe:	d1 f6       	brne	.-76     	; 0x4db4 <main+0x6e0>
    4e00:	27 c0       	rjmp	.+78     	; 0x4e50 <main+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e02:	8e 01       	movw	r16, r28
    4e04:	01 56       	subi	r16, 0x61	; 97
    4e06:	1f 4f       	sbci	r17, 0xFF	; 255
    4e08:	fe 01       	movw	r30, r28
    4e0a:	ef 55       	subi	r30, 0x5F	; 95
    4e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0e:	60 81       	ld	r22, Z
    4e10:	71 81       	ldd	r23, Z+1	; 0x01
    4e12:	82 81       	ldd	r24, Z+2	; 0x02
    4e14:	93 81       	ldd	r25, Z+3	; 0x03
    4e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	f8 01       	movw	r30, r16
    4e20:	91 83       	std	Z+1, r25	; 0x01
    4e22:	80 83       	st	Z, r24
    4e24:	de 01       	movw	r26, r28
    4e26:	a5 56       	subi	r26, 0x65	; 101
    4e28:	bf 4f       	sbci	r27, 0xFF	; 255
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e1 56       	subi	r30, 0x61	; 97
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	80 81       	ld	r24, Z
    4e32:	91 81       	ldd	r25, Z+1	; 0x01
    4e34:	8d 93       	st	X+, r24
    4e36:	9c 93       	st	X, r25
    4e38:	fe 01       	movw	r30, r28
    4e3a:	e5 56       	subi	r30, 0x65	; 101
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	80 81       	ld	r24, Z
    4e40:	91 81       	ldd	r25, Z+1	; 0x01
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	f1 f7       	brne	.-4      	; 0x4e42 <main+0x76e>
    4e46:	fe 01       	movw	r30, r28
    4e48:	e5 56       	subi	r30, 0x65	; 101
    4e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (units)
		SSD_vDisable(seven_seg1);
    4e50:	40 91 17 03 	lds	r20, 0x0317
    4e54:	50 91 18 03 	lds	r21, 0x0318
    4e58:	60 91 19 03 	lds	r22, 0x0319
    4e5c:	70 91 1a 03 	lds	r23, 0x031A
    4e60:	80 91 1b 03 	lds	r24, 0x031B
    4e64:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg2);
    4e68:	40 91 1c 03 	lds	r20, 0x031C
    4e6c:	50 91 1d 03 	lds	r21, 0x031D
    4e70:	60 91 1e 03 	lds	r22, 0x031E
    4e74:	70 91 1f 03 	lds	r23, 0x031F
    4e78:	80 91 20 03 	lds	r24, 0x0320
    4e7c:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg2, Minute%10);
    4e80:	80 91 52 03 	lds	r24, 0x0352
    4e84:	9a e0       	ldi	r25, 0x0A	; 10
    4e86:	69 2f       	mov	r22, r25
    4e88:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    4e8c:	89 2f       	mov	r24, r25
    4e8e:	98 2f       	mov	r25, r24
    4e90:	40 91 1c 03 	lds	r20, 0x031C
    4e94:	50 91 1d 03 	lds	r21, 0x031D
    4e98:	60 91 1e 03 	lds	r22, 0x031E
    4e9c:	70 91 1f 03 	lds	r23, 0x031F
    4ea0:	80 91 20 03 	lds	r24, 0x0320
    4ea4:	29 2f       	mov	r18, r25
    4ea6:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e9 56       	subi	r30, 0x69	; 105
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    4eb6:	b0 e4       	ldi	r27, 0x40	; 64
    4eb8:	80 83       	st	Z, r24
    4eba:	91 83       	std	Z+1, r25	; 0x01
    4ebc:	a2 83       	std	Z+2, r26	; 0x02
    4ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ec0:	8e 01       	movw	r16, r28
    4ec2:	0d 56       	subi	r16, 0x6D	; 109
    4ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	e9 56       	subi	r30, 0x69	; 105
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	60 81       	ld	r22, Z
    4ece:	71 81       	ldd	r23, Z+1	; 0x01
    4ed0:	82 81       	ldd	r24, Z+2	; 0x02
    4ed2:	93 81       	ldd	r25, Z+3	; 0x03
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	4a ef       	ldi	r20, 0xFA	; 250
    4eda:	54 e4       	ldi	r21, 0x44	; 68
    4edc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	f8 01       	movw	r30, r16
    4ee6:	80 83       	st	Z, r24
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	a2 83       	std	Z+2, r26	; 0x02
    4eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4eee:	fe 01       	movw	r30, r28
    4ef0:	ed 56       	subi	r30, 0x6D	; 109
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	60 81       	ld	r22, Z
    4ef6:	71 81       	ldd	r23, Z+1	; 0x01
    4ef8:	82 81       	ldd	r24, Z+2	; 0x02
    4efa:	93 81       	ldd	r25, Z+3	; 0x03
    4efc:	20 e0       	ldi	r18, 0x00	; 0
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	40 e8       	ldi	r20, 0x80	; 128
    4f02:	5f e3       	ldi	r21, 0x3F	; 63
    4f04:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4f08:	88 23       	and	r24, r24
    4f0a:	44 f4       	brge	.+16     	; 0x4f1c <main+0x848>
		__ticks = 1;
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	ef 56       	subi	r30, 0x6F	; 111
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	91 83       	std	Z+1, r25	; 0x01
    4f18:	80 83       	st	Z, r24
    4f1a:	64 c0       	rjmp	.+200    	; 0x4fe4 <main+0x910>
	else if (__tmp > 65535)
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	ed 56       	subi	r30, 0x6D	; 109
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	60 81       	ld	r22, Z
    4f24:	71 81       	ldd	r23, Z+1	; 0x01
    4f26:	82 81       	ldd	r24, Z+2	; 0x02
    4f28:	93 81       	ldd	r25, Z+3	; 0x03
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	3f ef       	ldi	r19, 0xFF	; 255
    4f2e:	4f e7       	ldi	r20, 0x7F	; 127
    4f30:	57 e4       	ldi	r21, 0x47	; 71
    4f32:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4f36:	18 16       	cp	r1, r24
    4f38:	0c f0       	brlt	.+2      	; 0x4f3c <main+0x868>
    4f3a:	43 c0       	rjmp	.+134    	; 0x4fc2 <main+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	e9 56       	subi	r30, 0x69	; 105
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	60 81       	ld	r22, Z
    4f44:	71 81       	ldd	r23, Z+1	; 0x01
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	40 e2       	ldi	r20, 0x20	; 32
    4f50:	51 e4       	ldi	r21, 0x41	; 65
    4f52:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	8e 01       	movw	r16, r28
    4f5c:	0f 56       	subi	r16, 0x6F	; 111
    4f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f60:	bc 01       	movw	r22, r24
    4f62:	cd 01       	movw	r24, r26
    4f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	f8 01       	movw	r30, r16
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	80 83       	st	Z, r24
    4f72:	1f c0       	rjmp	.+62     	; 0x4fb2 <main+0x8de>
    4f74:	fe 01       	movw	r30, r28
    4f76:	e1 57       	subi	r30, 0x71	; 113
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	88 ec       	ldi	r24, 0xC8	; 200
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	91 83       	std	Z+1, r25	; 0x01
    4f80:	80 83       	st	Z, r24
    4f82:	fe 01       	movw	r30, r28
    4f84:	e1 57       	subi	r30, 0x71	; 113
    4f86:	ff 4f       	sbci	r31, 0xFF	; 255
    4f88:	80 81       	ld	r24, Z
    4f8a:	91 81       	ldd	r25, Z+1	; 0x01
    4f8c:	01 97       	sbiw	r24, 0x01	; 1
    4f8e:	f1 f7       	brne	.-4      	; 0x4f8c <main+0x8b8>
    4f90:	fe 01       	movw	r30, r28
    4f92:	e1 57       	subi	r30, 0x71	; 113
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	91 83       	std	Z+1, r25	; 0x01
    4f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f9a:	de 01       	movw	r26, r28
    4f9c:	af 56       	subi	r26, 0x6F	; 111
    4f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	ef 56       	subi	r30, 0x6F	; 111
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	80 81       	ld	r24, Z
    4fa8:	91 81       	ldd	r25, Z+1	; 0x01
    4faa:	01 97       	sbiw	r24, 0x01	; 1
    4fac:	11 96       	adiw	r26, 0x01	; 1
    4fae:	9c 93       	st	X, r25
    4fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	ef 56       	subi	r30, 0x6F	; 111
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	80 81       	ld	r24, Z
    4fba:	91 81       	ldd	r25, Z+1	; 0x01
    4fbc:	00 97       	sbiw	r24, 0x00	; 0
    4fbe:	d1 f6       	brne	.-76     	; 0x4f74 <main+0x8a0>
    4fc0:	27 c0       	rjmp	.+78     	; 0x5010 <main+0x93c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc2:	8e 01       	movw	r16, r28
    4fc4:	0f 56       	subi	r16, 0x6F	; 111
    4fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc8:	fe 01       	movw	r30, r28
    4fca:	ed 56       	subi	r30, 0x6D	; 109
    4fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fce:	60 81       	ld	r22, Z
    4fd0:	71 81       	ldd	r23, Z+1	; 0x01
    4fd2:	82 81       	ldd	r24, Z+2	; 0x02
    4fd4:	93 81       	ldd	r25, Z+3	; 0x03
    4fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	cb 01       	movw	r24, r22
    4fde:	f8 01       	movw	r30, r16
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	80 83       	st	Z, r24
    4fe4:	de 01       	movw	r26, r28
    4fe6:	a3 57       	subi	r26, 0x73	; 115
    4fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    4fea:	fe 01       	movw	r30, r28
    4fec:	ef 56       	subi	r30, 0x6F	; 111
    4fee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	8d 93       	st	X+, r24
    4ff6:	9c 93       	st	X, r25
    4ff8:	fe 01       	movw	r30, r28
    4ffa:	e3 57       	subi	r30, 0x73	; 115
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	80 81       	ld	r24, Z
    5000:	91 81       	ldd	r25, Z+1	; 0x01
    5002:	01 97       	sbiw	r24, 0x01	; 1
    5004:	f1 f7       	brne	.-4      	; 0x5002 <main+0x92e>
    5006:	fe 01       	movw	r30, r28
    5008:	e3 57       	subi	r30, 0x73	; 115
    500a:	ff 4f       	sbci	r31, 0xFF	; 255
    500c:	91 83       	std	Z+1, r25	; 0x01
    500e:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (tens)
		SSD_vDisable(seven_seg2);
    5010:	40 91 1c 03 	lds	r20, 0x031C
    5014:	50 91 1d 03 	lds	r21, 0x031D
    5018:	60 91 1e 03 	lds	r22, 0x031E
    501c:	70 91 1f 03 	lds	r23, 0x031F
    5020:	80 91 20 03 	lds	r24, 0x0320
    5024:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg3);
    5028:	40 91 21 03 	lds	r20, 0x0321
    502c:	50 91 22 03 	lds	r21, 0x0322
    5030:	60 91 23 03 	lds	r22, 0x0323
    5034:	70 91 24 03 	lds	r23, 0x0324
    5038:	80 91 25 03 	lds	r24, 0x0325
    503c:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg3, Minute/10);
    5040:	80 91 52 03 	lds	r24, 0x0352
    5044:	9a e0       	ldi	r25, 0x0A	; 10
    5046:	69 2f       	mov	r22, r25
    5048:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    504c:	98 2f       	mov	r25, r24
    504e:	40 91 21 03 	lds	r20, 0x0321
    5052:	50 91 22 03 	lds	r21, 0x0322
    5056:	60 91 23 03 	lds	r22, 0x0323
    505a:	70 91 24 03 	lds	r23, 0x0324
    505e:	80 91 25 03 	lds	r24, 0x0325
    5062:	29 2f       	mov	r18, r25
    5064:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5068:	fe 01       	movw	r30, r28
    506a:	e7 57       	subi	r30, 0x77	; 119
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	a0 ea       	ldi	r26, 0xA0	; 160
    5074:	b0 e4       	ldi	r27, 0x40	; 64
    5076:	80 83       	st	Z, r24
    5078:	91 83       	std	Z+1, r25	; 0x01
    507a:	a2 83       	std	Z+2, r26	; 0x02
    507c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    507e:	8e 01       	movw	r16, r28
    5080:	0b 57       	subi	r16, 0x7B	; 123
    5082:	1f 4f       	sbci	r17, 0xFF	; 255
    5084:	fe 01       	movw	r30, r28
    5086:	e7 57       	subi	r30, 0x77	; 119
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	60 81       	ld	r22, Z
    508c:	71 81       	ldd	r23, Z+1	; 0x01
    508e:	82 81       	ldd	r24, Z+2	; 0x02
    5090:	93 81       	ldd	r25, Z+3	; 0x03
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	4a ef       	ldi	r20, 0xFA	; 250
    5098:	54 e4       	ldi	r21, 0x44	; 68
    509a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	f8 01       	movw	r30, r16
    50a4:	80 83       	st	Z, r24
    50a6:	91 83       	std	Z+1, r25	; 0x01
    50a8:	a2 83       	std	Z+2, r26	; 0x02
    50aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ac:	fe 01       	movw	r30, r28
    50ae:	eb 57       	subi	r30, 0x7B	; 123
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	60 81       	ld	r22, Z
    50b4:	71 81       	ldd	r23, Z+1	; 0x01
    50b6:	82 81       	ldd	r24, Z+2	; 0x02
    50b8:	93 81       	ldd	r25, Z+3	; 0x03
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	40 e8       	ldi	r20, 0x80	; 128
    50c0:	5f e3       	ldi	r21, 0x3F	; 63
    50c2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    50c6:	88 23       	and	r24, r24
    50c8:	44 f4       	brge	.+16     	; 0x50da <main+0xa06>
		__ticks = 1;
    50ca:	fe 01       	movw	r30, r28
    50cc:	ed 57       	subi	r30, 0x7D	; 125
    50ce:	ff 4f       	sbci	r31, 0xFF	; 255
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
    50d8:	64 c0       	rjmp	.+200    	; 0x51a2 <main+0xace>
	else if (__tmp > 65535)
    50da:	fe 01       	movw	r30, r28
    50dc:	eb 57       	subi	r30, 0x7B	; 123
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	60 81       	ld	r22, Z
    50e2:	71 81       	ldd	r23, Z+1	; 0x01
    50e4:	82 81       	ldd	r24, Z+2	; 0x02
    50e6:	93 81       	ldd	r25, Z+3	; 0x03
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	3f ef       	ldi	r19, 0xFF	; 255
    50ec:	4f e7       	ldi	r20, 0x7F	; 127
    50ee:	57 e4       	ldi	r21, 0x47	; 71
    50f0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    50f4:	18 16       	cp	r1, r24
    50f6:	0c f0       	brlt	.+2      	; 0x50fa <main+0xa26>
    50f8:	43 c0       	rjmp	.+134    	; 0x5180 <main+0xaac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fa:	fe 01       	movw	r30, r28
    50fc:	e7 57       	subi	r30, 0x77	; 119
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	60 81       	ld	r22, Z
    5102:	71 81       	ldd	r23, Z+1	; 0x01
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	93 81       	ldd	r25, Z+3	; 0x03
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e2       	ldi	r20, 0x20	; 32
    510e:	51 e4       	ldi	r21, 0x41	; 65
    5110:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	8e 01       	movw	r16, r28
    511a:	0d 57       	subi	r16, 0x7D	; 125
    511c:	1f 4f       	sbci	r17, 0xFF	; 255
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	f8 01       	movw	r30, r16
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	80 83       	st	Z, r24
    5130:	1f c0       	rjmp	.+62     	; 0x5170 <main+0xa9c>
    5132:	fe 01       	movw	r30, r28
    5134:	ef 57       	subi	r30, 0x7F	; 127
    5136:	ff 4f       	sbci	r31, 0xFF	; 255
    5138:	88 ec       	ldi	r24, 0xC8	; 200
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	91 83       	std	Z+1, r25	; 0x01
    513e:	80 83       	st	Z, r24
    5140:	fe 01       	movw	r30, r28
    5142:	ef 57       	subi	r30, 0x7F	; 127
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	80 81       	ld	r24, Z
    5148:	91 81       	ldd	r25, Z+1	; 0x01
    514a:	01 97       	sbiw	r24, 0x01	; 1
    514c:	f1 f7       	brne	.-4      	; 0x514a <main+0xa76>
    514e:	fe 01       	movw	r30, r28
    5150:	ef 57       	subi	r30, 0x7F	; 127
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	91 83       	std	Z+1, r25	; 0x01
    5156:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5158:	de 01       	movw	r26, r28
    515a:	ad 57       	subi	r26, 0x7D	; 125
    515c:	bf 4f       	sbci	r27, 0xFF	; 255
    515e:	fe 01       	movw	r30, r28
    5160:	ed 57       	subi	r30, 0x7D	; 125
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 81       	ld	r24, Z
    5166:	91 81       	ldd	r25, Z+1	; 0x01
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	11 96       	adiw	r26, 0x01	; 1
    516c:	9c 93       	st	X, r25
    516e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5170:	fe 01       	movw	r30, r28
    5172:	ed 57       	subi	r30, 0x7D	; 125
    5174:	ff 4f       	sbci	r31, 0xFF	; 255
    5176:	80 81       	ld	r24, Z
    5178:	91 81       	ldd	r25, Z+1	; 0x01
    517a:	00 97       	sbiw	r24, 0x00	; 0
    517c:	d1 f6       	brne	.-76     	; 0x5132 <main+0xa5e>
    517e:	27 c0       	rjmp	.+78     	; 0x51ce <main+0xafa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5180:	8e 01       	movw	r16, r28
    5182:	0d 57       	subi	r16, 0x7D	; 125
    5184:	1f 4f       	sbci	r17, 0xFF	; 255
    5186:	fe 01       	movw	r30, r28
    5188:	eb 57       	subi	r30, 0x7B	; 123
    518a:	ff 4f       	sbci	r31, 0xFF	; 255
    518c:	60 81       	ld	r22, Z
    518e:	71 81       	ldd	r23, Z+1	; 0x01
    5190:	82 81       	ldd	r24, Z+2	; 0x02
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	f8 01       	movw	r30, r16
    519e:	91 83       	std	Z+1, r25	; 0x01
    51a0:	80 83       	st	Z, r24
    51a2:	de 01       	movw	r26, r28
    51a4:	a1 58       	subi	r26, 0x81	; 129
    51a6:	bf 4f       	sbci	r27, 0xFF	; 255
    51a8:	fe 01       	movw	r30, r28
    51aa:	ed 57       	subi	r30, 0x7D	; 125
    51ac:	ff 4f       	sbci	r31, 0xFF	; 255
    51ae:	80 81       	ld	r24, Z
    51b0:	91 81       	ldd	r25, Z+1	; 0x01
    51b2:	8d 93       	st	X+, r24
    51b4:	9c 93       	st	X, r25
    51b6:	fe 01       	movw	r30, r28
    51b8:	e1 58       	subi	r30, 0x81	; 129
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <main+0xaec>
    51c4:	fe 01       	movw	r30, r28
    51c6:	e1 58       	subi	r30, 0x81	; 129
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (units)
		SSD_vDisable(seven_seg3);
    51ce:	40 91 21 03 	lds	r20, 0x0321
    51d2:	50 91 22 03 	lds	r21, 0x0322
    51d6:	60 91 23 03 	lds	r22, 0x0323
    51da:	70 91 24 03 	lds	r23, 0x0324
    51de:	80 91 25 03 	lds	r24, 0x0325
    51e2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg4);
    51e6:	40 91 26 03 	lds	r20, 0x0326
    51ea:	50 91 27 03 	lds	r21, 0x0327
    51ee:	60 91 28 03 	lds	r22, 0x0328
    51f2:	70 91 29 03 	lds	r23, 0x0329
    51f6:	80 91 2a 03 	lds	r24, 0x032A
    51fa:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg4, Hour %10);
    51fe:	80 91 10 03 	lds	r24, 0x0310
    5202:	9a e0       	ldi	r25, 0x0A	; 10
    5204:	69 2f       	mov	r22, r25
    5206:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    520a:	89 2f       	mov	r24, r25
    520c:	98 2f       	mov	r25, r24
    520e:	40 91 26 03 	lds	r20, 0x0326
    5212:	50 91 27 03 	lds	r21, 0x0327
    5216:	60 91 28 03 	lds	r22, 0x0328
    521a:	70 91 29 03 	lds	r23, 0x0329
    521e:	80 91 2a 03 	lds	r24, 0x032A
    5222:	29 2f       	mov	r18, r25
    5224:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5228:	fe 01       	movw	r30, r28
    522a:	e5 58       	subi	r30, 0x85	; 133
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	a0 ea       	ldi	r26, 0xA0	; 160
    5234:	b0 e4       	ldi	r27, 0x40	; 64
    5236:	80 83       	st	Z, r24
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	a2 83       	std	Z+2, r26	; 0x02
    523c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    523e:	8e 01       	movw	r16, r28
    5240:	09 58       	subi	r16, 0x89	; 137
    5242:	1f 4f       	sbci	r17, 0xFF	; 255
    5244:	fe 01       	movw	r30, r28
    5246:	e5 58       	subi	r30, 0x85	; 133
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	60 81       	ld	r22, Z
    524c:	71 81       	ldd	r23, Z+1	; 0x01
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	93 81       	ldd	r25, Z+3	; 0x03
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	4a ef       	ldi	r20, 0xFA	; 250
    5258:	54 e4       	ldi	r21, 0x44	; 68
    525a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	f8 01       	movw	r30, r16
    5264:	80 83       	st	Z, r24
    5266:	91 83       	std	Z+1, r25	; 0x01
    5268:	a2 83       	std	Z+2, r26	; 0x02
    526a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    526c:	fe 01       	movw	r30, r28
    526e:	e9 58       	subi	r30, 0x89	; 137
    5270:	ff 4f       	sbci	r31, 0xFF	; 255
    5272:	60 81       	ld	r22, Z
    5274:	71 81       	ldd	r23, Z+1	; 0x01
    5276:	82 81       	ldd	r24, Z+2	; 0x02
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	40 e8       	ldi	r20, 0x80	; 128
    5280:	5f e3       	ldi	r21, 0x3F	; 63
    5282:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5286:	88 23       	and	r24, r24
    5288:	44 f4       	brge	.+16     	; 0x529a <main+0xbc6>
		__ticks = 1;
    528a:	fe 01       	movw	r30, r28
    528c:	eb 58       	subi	r30, 0x8B	; 139
    528e:	ff 4f       	sbci	r31, 0xFF	; 255
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	91 83       	std	Z+1, r25	; 0x01
    5296:	80 83       	st	Z, r24
    5298:	64 c0       	rjmp	.+200    	; 0x5362 <main+0xc8e>
	else if (__tmp > 65535)
    529a:	fe 01       	movw	r30, r28
    529c:	e9 58       	subi	r30, 0x89	; 137
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	60 81       	ld	r22, Z
    52a2:	71 81       	ldd	r23, Z+1	; 0x01
    52a4:	82 81       	ldd	r24, Z+2	; 0x02
    52a6:	93 81       	ldd	r25, Z+3	; 0x03
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	3f ef       	ldi	r19, 0xFF	; 255
    52ac:	4f e7       	ldi	r20, 0x7F	; 127
    52ae:	57 e4       	ldi	r21, 0x47	; 71
    52b0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    52b4:	18 16       	cp	r1, r24
    52b6:	0c f0       	brlt	.+2      	; 0x52ba <main+0xbe6>
    52b8:	43 c0       	rjmp	.+134    	; 0x5340 <main+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ba:	fe 01       	movw	r30, r28
    52bc:	e5 58       	subi	r30, 0x85	; 133
    52be:	ff 4f       	sbci	r31, 0xFF	; 255
    52c0:	60 81       	ld	r22, Z
    52c2:	71 81       	ldd	r23, Z+1	; 0x01
    52c4:	82 81       	ldd	r24, Z+2	; 0x02
    52c6:	93 81       	ldd	r25, Z+3	; 0x03
    52c8:	20 e0       	ldi	r18, 0x00	; 0
    52ca:	30 e0       	ldi	r19, 0x00	; 0
    52cc:	40 e2       	ldi	r20, 0x20	; 32
    52ce:	51 e4       	ldi	r21, 0x41	; 65
    52d0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52d4:	dc 01       	movw	r26, r24
    52d6:	cb 01       	movw	r24, r22
    52d8:	8e 01       	movw	r16, r28
    52da:	0b 58       	subi	r16, 0x8B	; 139
    52dc:	1f 4f       	sbci	r17, 0xFF	; 255
    52de:	bc 01       	movw	r22, r24
    52e0:	cd 01       	movw	r24, r26
    52e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	f8 01       	movw	r30, r16
    52ec:	91 83       	std	Z+1, r25	; 0x01
    52ee:	80 83       	st	Z, r24
    52f0:	1f c0       	rjmp	.+62     	; 0x5330 <main+0xc5c>
    52f2:	fe 01       	movw	r30, r28
    52f4:	ed 58       	subi	r30, 0x8D	; 141
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	88 ec       	ldi	r24, 0xC8	; 200
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	91 83       	std	Z+1, r25	; 0x01
    52fe:	80 83       	st	Z, r24
    5300:	fe 01       	movw	r30, r28
    5302:	ed 58       	subi	r30, 0x8D	; 141
    5304:	ff 4f       	sbci	r31, 0xFF	; 255
    5306:	80 81       	ld	r24, Z
    5308:	91 81       	ldd	r25, Z+1	; 0x01
    530a:	01 97       	sbiw	r24, 0x01	; 1
    530c:	f1 f7       	brne	.-4      	; 0x530a <main+0xc36>
    530e:	fe 01       	movw	r30, r28
    5310:	ed 58       	subi	r30, 0x8D	; 141
    5312:	ff 4f       	sbci	r31, 0xFF	; 255
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5318:	de 01       	movw	r26, r28
    531a:	ab 58       	subi	r26, 0x8B	; 139
    531c:	bf 4f       	sbci	r27, 0xFF	; 255
    531e:	fe 01       	movw	r30, r28
    5320:	eb 58       	subi	r30, 0x8B	; 139
    5322:	ff 4f       	sbci	r31, 0xFF	; 255
    5324:	80 81       	ld	r24, Z
    5326:	91 81       	ldd	r25, Z+1	; 0x01
    5328:	01 97       	sbiw	r24, 0x01	; 1
    532a:	11 96       	adiw	r26, 0x01	; 1
    532c:	9c 93       	st	X, r25
    532e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5330:	fe 01       	movw	r30, r28
    5332:	eb 58       	subi	r30, 0x8B	; 139
    5334:	ff 4f       	sbci	r31, 0xFF	; 255
    5336:	80 81       	ld	r24, Z
    5338:	91 81       	ldd	r25, Z+1	; 0x01
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	d1 f6       	brne	.-76     	; 0x52f2 <main+0xc1e>
    533e:	27 c0       	rjmp	.+78     	; 0x538e <main+0xcba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5340:	8e 01       	movw	r16, r28
    5342:	0b 58       	subi	r16, 0x8B	; 139
    5344:	1f 4f       	sbci	r17, 0xFF	; 255
    5346:	fe 01       	movw	r30, r28
    5348:	e9 58       	subi	r30, 0x89	; 137
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	60 81       	ld	r22, Z
    534e:	71 81       	ldd	r23, Z+1	; 0x01
    5350:	82 81       	ldd	r24, Z+2	; 0x02
    5352:	93 81       	ldd	r25, Z+3	; 0x03
    5354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	f8 01       	movw	r30, r16
    535e:	91 83       	std	Z+1, r25	; 0x01
    5360:	80 83       	st	Z, r24
    5362:	de 01       	movw	r26, r28
    5364:	af 58       	subi	r26, 0x8F	; 143
    5366:	bf 4f       	sbci	r27, 0xFF	; 255
    5368:	fe 01       	movw	r30, r28
    536a:	eb 58       	subi	r30, 0x8B	; 139
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	80 81       	ld	r24, Z
    5370:	91 81       	ldd	r25, Z+1	; 0x01
    5372:	8d 93       	st	X+, r24
    5374:	9c 93       	st	X, r25
    5376:	fe 01       	movw	r30, r28
    5378:	ef 58       	subi	r30, 0x8F	; 143
    537a:	ff 4f       	sbci	r31, 0xFF	; 255
    537c:	80 81       	ld	r24, Z
    537e:	91 81       	ldd	r25, Z+1	; 0x01
    5380:	01 97       	sbiw	r24, 0x01	; 1
    5382:	f1 f7       	brne	.-4      	; 0x5380 <main+0xcac>
    5384:	fe 01       	movw	r30, r28
    5386:	ef 58       	subi	r30, 0x8F	; 143
    5388:	ff 4f       	sbci	r31, 0xFF	; 255
    538a:	91 83       	std	Z+1, r25	; 0x01
    538c:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (tens)
		SSD_vDisable(seven_seg4);
    538e:	40 91 26 03 	lds	r20, 0x0326
    5392:	50 91 27 03 	lds	r21, 0x0327
    5396:	60 91 28 03 	lds	r22, 0x0328
    539a:	70 91 29 03 	lds	r23, 0x0329
    539e:	80 91 2a 03 	lds	r24, 0x032A
    53a2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
		SSD_vEnable(seven_seg5);
    53a6:	40 91 2b 03 	lds	r20, 0x032B
    53aa:	50 91 2c 03 	lds	r21, 0x032C
    53ae:	60 91 2d 03 	lds	r22, 0x032D
    53b2:	70 91 2e 03 	lds	r23, 0x032E
    53b6:	80 91 2f 03 	lds	r24, 0x032F
    53ba:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
		SSD_vSendNumber(seven_seg5, Hour /10);
    53be:	80 91 10 03 	lds	r24, 0x0310
    53c2:	9a e0       	ldi	r25, 0x0A	; 10
    53c4:	69 2f       	mov	r22, r25
    53c6:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    53ca:	98 2f       	mov	r25, r24
    53cc:	40 91 2b 03 	lds	r20, 0x032B
    53d0:	50 91 2c 03 	lds	r21, 0x032C
    53d4:	60 91 2d 03 	lds	r22, 0x032D
    53d8:	70 91 2e 03 	lds	r23, 0x032E
    53dc:	80 91 2f 03 	lds	r24, 0x032F
    53e0:	29 2f       	mov	r18, r25
    53e2:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    53e6:	fe 01       	movw	r30, r28
    53e8:	e3 59       	subi	r30, 0x93	; 147
    53ea:	ff 4f       	sbci	r31, 0xFF	; 255
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	a0 ea       	ldi	r26, 0xA0	; 160
    53f2:	b0 e4       	ldi	r27, 0x40	; 64
    53f4:	80 83       	st	Z, r24
    53f6:	91 83       	std	Z+1, r25	; 0x01
    53f8:	a2 83       	std	Z+2, r26	; 0x02
    53fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fc:	8e 01       	movw	r16, r28
    53fe:	07 59       	subi	r16, 0x97	; 151
    5400:	1f 4f       	sbci	r17, 0xFF	; 255
    5402:	fe 01       	movw	r30, r28
    5404:	e3 59       	subi	r30, 0x93	; 147
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	60 81       	ld	r22, Z
    540a:	71 81       	ldd	r23, Z+1	; 0x01
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	4a ef       	ldi	r20, 0xFA	; 250
    5416:	54 e4       	ldi	r21, 0x44	; 68
    5418:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    541c:	dc 01       	movw	r26, r24
    541e:	cb 01       	movw	r24, r22
    5420:	f8 01       	movw	r30, r16
    5422:	80 83       	st	Z, r24
    5424:	91 83       	std	Z+1, r25	; 0x01
    5426:	a2 83       	std	Z+2, r26	; 0x02
    5428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    542a:	fe 01       	movw	r30, r28
    542c:	e7 59       	subi	r30, 0x97	; 151
    542e:	ff 4f       	sbci	r31, 0xFF	; 255
    5430:	60 81       	ld	r22, Z
    5432:	71 81       	ldd	r23, Z+1	; 0x01
    5434:	82 81       	ldd	r24, Z+2	; 0x02
    5436:	93 81       	ldd	r25, Z+3	; 0x03
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e8       	ldi	r20, 0x80	; 128
    543e:	5f e3       	ldi	r21, 0x3F	; 63
    5440:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5444:	88 23       	and	r24, r24
    5446:	44 f4       	brge	.+16     	; 0x5458 <main+0xd84>
		__ticks = 1;
    5448:	fe 01       	movw	r30, r28
    544a:	e9 59       	subi	r30, 0x99	; 153
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	81 e0       	ldi	r24, 0x01	; 1
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	91 83       	std	Z+1, r25	; 0x01
    5454:	80 83       	st	Z, r24
    5456:	64 c0       	rjmp	.+200    	; 0x5520 <main+0xe4c>
	else if (__tmp > 65535)
    5458:	fe 01       	movw	r30, r28
    545a:	e7 59       	subi	r30, 0x97	; 151
    545c:	ff 4f       	sbci	r31, 0xFF	; 255
    545e:	60 81       	ld	r22, Z
    5460:	71 81       	ldd	r23, Z+1	; 0x01
    5462:	82 81       	ldd	r24, Z+2	; 0x02
    5464:	93 81       	ldd	r25, Z+3	; 0x03
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	3f ef       	ldi	r19, 0xFF	; 255
    546a:	4f e7       	ldi	r20, 0x7F	; 127
    546c:	57 e4       	ldi	r21, 0x47	; 71
    546e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5472:	18 16       	cp	r1, r24
    5474:	0c f0       	brlt	.+2      	; 0x5478 <main+0xda4>
    5476:	43 c0       	rjmp	.+134    	; 0x54fe <main+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5478:	fe 01       	movw	r30, r28
    547a:	e3 59       	subi	r30, 0x93	; 147
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	60 81       	ld	r22, Z
    5480:	71 81       	ldd	r23, Z+1	; 0x01
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	40 e2       	ldi	r20, 0x20	; 32
    548c:	51 e4       	ldi	r21, 0x41	; 65
    548e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5492:	dc 01       	movw	r26, r24
    5494:	cb 01       	movw	r24, r22
    5496:	8e 01       	movw	r16, r28
    5498:	09 59       	subi	r16, 0x99	; 153
    549a:	1f 4f       	sbci	r17, 0xFF	; 255
    549c:	bc 01       	movw	r22, r24
    549e:	cd 01       	movw	r24, r26
    54a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a4:	dc 01       	movw	r26, r24
    54a6:	cb 01       	movw	r24, r22
    54a8:	f8 01       	movw	r30, r16
    54aa:	91 83       	std	Z+1, r25	; 0x01
    54ac:	80 83       	st	Z, r24
    54ae:	1f c0       	rjmp	.+62     	; 0x54ee <main+0xe1a>
    54b0:	fe 01       	movw	r30, r28
    54b2:	eb 59       	subi	r30, 0x9B	; 155
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	88 ec       	ldi	r24, 0xC8	; 200
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	91 83       	std	Z+1, r25	; 0x01
    54bc:	80 83       	st	Z, r24
    54be:	fe 01       	movw	r30, r28
    54c0:	eb 59       	subi	r30, 0x9B	; 155
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	80 81       	ld	r24, Z
    54c6:	91 81       	ldd	r25, Z+1	; 0x01
    54c8:	01 97       	sbiw	r24, 0x01	; 1
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <main+0xdf4>
    54cc:	fe 01       	movw	r30, r28
    54ce:	eb 59       	subi	r30, 0x9B	; 155
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	91 83       	std	Z+1, r25	; 0x01
    54d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54d6:	de 01       	movw	r26, r28
    54d8:	a9 59       	subi	r26, 0x99	; 153
    54da:	bf 4f       	sbci	r27, 0xFF	; 255
    54dc:	fe 01       	movw	r30, r28
    54de:	e9 59       	subi	r30, 0x99	; 153
    54e0:	ff 4f       	sbci	r31, 0xFF	; 255
    54e2:	80 81       	ld	r24, Z
    54e4:	91 81       	ldd	r25, Z+1	; 0x01
    54e6:	01 97       	sbiw	r24, 0x01	; 1
    54e8:	11 96       	adiw	r26, 0x01	; 1
    54ea:	9c 93       	st	X, r25
    54ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ee:	fe 01       	movw	r30, r28
    54f0:	e9 59       	subi	r30, 0x99	; 153
    54f2:	ff 4f       	sbci	r31, 0xFF	; 255
    54f4:	80 81       	ld	r24, Z
    54f6:	91 81       	ldd	r25, Z+1	; 0x01
    54f8:	00 97       	sbiw	r24, 0x00	; 0
    54fa:	d1 f6       	brne	.-76     	; 0x54b0 <main+0xddc>
    54fc:	28 c0       	rjmp	.+80     	; 0x554e <main+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54fe:	8e 01       	movw	r16, r28
    5500:	09 59       	subi	r16, 0x99	; 153
    5502:	1f 4f       	sbci	r17, 0xFF	; 255
    5504:	fe 01       	movw	r30, r28
    5506:	e7 59       	subi	r30, 0x97	; 151
    5508:	ff 4f       	sbci	r31, 0xFF	; 255
    550a:	60 81       	ld	r22, Z
    550c:	71 81       	ldd	r23, Z+1	; 0x01
    550e:	82 81       	ldd	r24, Z+2	; 0x02
    5510:	93 81       	ldd	r25, Z+3	; 0x03
    5512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5516:	dc 01       	movw	r26, r24
    5518:	cb 01       	movw	r24, r22
    551a:	f8 01       	movw	r30, r16
    551c:	91 83       	std	Z+1, r25	; 0x01
    551e:	80 83       	st	Z, r24
    5520:	de 01       	movw	r26, r28
    5522:	ad 59       	subi	r26, 0x9D	; 157
    5524:	bf 4f       	sbci	r27, 0xFF	; 255
    5526:	fe 01       	movw	r30, r28
    5528:	e9 59       	subi	r30, 0x99	; 153
    552a:	ff 4f       	sbci	r31, 0xFF	; 255
    552c:	80 81       	ld	r24, Z
    552e:	91 81       	ldd	r25, Z+1	; 0x01
    5530:	11 96       	adiw	r26, 0x01	; 1
    5532:	9c 93       	st	X, r25
    5534:	8e 93       	st	-X, r24
    5536:	fe 01       	movw	r30, r28
    5538:	ed 59       	subi	r30, 0x9D	; 157
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <main+0xe6c>
    5544:	fe 01       	movw	r30, r28
    5546:	ed 59       	subi	r30, 0x9D	; 157
    5548:	ff 4f       	sbci	r31, 0xFF	; 255
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
		_delay_ms(5);

		if (Hour == Hours_Alarm && Minute == Minutes_Alarm && Second == 0)
    554e:	90 91 10 03 	lds	r25, 0x0310
    5552:	80 91 55 03 	lds	r24, 0x0355
    5556:	98 17       	cp	r25, r24
    5558:	09 f0       	breq	.+2      	; 0x555c <main+0xe88>
    555a:	3e c9       	rjmp	.-3460   	; 0x47d8 <main+0x104>
    555c:	90 91 52 03 	lds	r25, 0x0352
    5560:	80 91 54 03 	lds	r24, 0x0354
    5564:	98 17       	cp	r25, r24
    5566:	09 f0       	breq	.+2      	; 0x556a <main+0xe96>
    5568:	37 c9       	rjmp	.-3474   	; 0x47d8 <main+0x104>
    556a:	80 91 53 03 	lds	r24, 0x0353
    556e:	88 23       	and	r24, r24
    5570:	09 f0       	breq	.+2      	; 0x5574 <main+0xea0>
    5572:	32 c9       	rjmp	.-3484   	; 0x47d8 <main+0x104>
		{
			CLCD_vClearScreen();
    5574:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSetPosition(1, 8);
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	68 e0       	ldi	r22, 0x08	; 8
    557c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("Alarm");
    5580:	80 ee       	ldi	r24, 0xE0	; 224
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    5588:	82 e0       	ldi	r24, 0x02	; 2
    558a:	61 e0       	ldi	r22, 0x01	; 1
    558c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("Press any key");
    5590:	86 ee       	ldi	r24, 0xE6	; 230
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    5598:	83 e0       	ldi	r24, 0x03	; 3
    559a:	61 e0       	ldi	r22, 0x01	; 1
    559c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("to close");
    55a0:	84 ef       	ldi	r24, 0xF4	; 244
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>

			u8 press = NOTPRESSED;
    55a8:	fe 01       	movw	r30, r28
    55aa:	eb 53       	subi	r30, 0x3B	; 59
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	8f ef       	ldi	r24, 0xFF	; 255
    55b0:	80 83       	st	Z, r24
			while(1)
			{
				press = KPD_u8GetPressed();
    55b2:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    55b6:	fe 01       	movw	r30, r28
    55b8:	eb 53       	subi	r30, 0x3B	; 59
    55ba:	ff 4f       	sbci	r31, 0xFF	; 255
    55bc:	80 83       	st	Z, r24
				if (press != NOTPRESSED)
    55be:	fe 01       	movw	r30, r28
    55c0:	eb 53       	subi	r30, 0x3B	; 59
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	80 81       	ld	r24, Z
    55c6:	8f 3f       	cpi	r24, 0xFF	; 255
    55c8:	09 f0       	breq	.+2      	; 0x55cc <main+0xef8>
    55ca:	c7 c4       	rjmp	.+2446   	; 0x5f5a <main+0x1886>
					break;
				}
				/* Display time on seven-segment displays using POV theorem */

				// Display seconds (units)
				SSD_vDisable(seven_seg5);
    55cc:	40 91 2b 03 	lds	r20, 0x032B
    55d0:	50 91 2c 03 	lds	r21, 0x032C
    55d4:	60 91 2d 03 	lds	r22, 0x032D
    55d8:	70 91 2e 03 	lds	r23, 0x032E
    55dc:	80 91 2f 03 	lds	r24, 0x032F
    55e0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg0);
    55e4:	40 91 12 03 	lds	r20, 0x0312
    55e8:	50 91 13 03 	lds	r21, 0x0313
    55ec:	60 91 14 03 	lds	r22, 0x0314
    55f0:	70 91 15 03 	lds	r23, 0x0315
    55f4:	80 91 16 03 	lds	r24, 0x0316
    55f8:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg0, Second%10);
    55fc:	80 91 53 03 	lds	r24, 0x0353
    5600:	9a e0       	ldi	r25, 0x0A	; 10
    5602:	69 2f       	mov	r22, r25
    5604:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    5608:	89 2f       	mov	r24, r25
    560a:	98 2f       	mov	r25, r24
    560c:	40 91 12 03 	lds	r20, 0x0312
    5610:	50 91 13 03 	lds	r21, 0x0313
    5614:	60 91 14 03 	lds	r22, 0x0314
    5618:	70 91 15 03 	lds	r23, 0x0315
    561c:	80 91 16 03 	lds	r24, 0x0316
    5620:	29 2f       	mov	r18, r25
    5622:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5626:	fe 01       	movw	r30, r28
    5628:	e1 5a       	subi	r30, 0xA1	; 161
    562a:	ff 4f       	sbci	r31, 0xFF	; 255
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	a0 ea       	ldi	r26, 0xA0	; 160
    5632:	b0 e4       	ldi	r27, 0x40	; 64
    5634:	80 83       	st	Z, r24
    5636:	91 83       	std	Z+1, r25	; 0x01
    5638:	a2 83       	std	Z+2, r26	; 0x02
    563a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    563c:	8e 01       	movw	r16, r28
    563e:	05 5a       	subi	r16, 0xA5	; 165
    5640:	1f 4f       	sbci	r17, 0xFF	; 255
    5642:	fe 01       	movw	r30, r28
    5644:	e1 5a       	subi	r30, 0xA1	; 161
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	60 81       	ld	r22, Z
    564a:	71 81       	ldd	r23, Z+1	; 0x01
    564c:	82 81       	ldd	r24, Z+2	; 0x02
    564e:	93 81       	ldd	r25, Z+3	; 0x03
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	4a ef       	ldi	r20, 0xFA	; 250
    5656:	54 e4       	ldi	r21, 0x44	; 68
    5658:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	f8 01       	movw	r30, r16
    5662:	80 83       	st	Z, r24
    5664:	91 83       	std	Z+1, r25	; 0x01
    5666:	a2 83       	std	Z+2, r26	; 0x02
    5668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    566a:	fe 01       	movw	r30, r28
    566c:	e5 5a       	subi	r30, 0xA5	; 165
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	60 81       	ld	r22, Z
    5672:	71 81       	ldd	r23, Z+1	; 0x01
    5674:	82 81       	ldd	r24, Z+2	; 0x02
    5676:	93 81       	ldd	r25, Z+3	; 0x03
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	40 e8       	ldi	r20, 0x80	; 128
    567e:	5f e3       	ldi	r21, 0x3F	; 63
    5680:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5684:	88 23       	and	r24, r24
    5686:	44 f4       	brge	.+16     	; 0x5698 <main+0xfc4>
		__ticks = 1;
    5688:	fe 01       	movw	r30, r28
    568a:	e7 5a       	subi	r30, 0xA7	; 167
    568c:	ff 4f       	sbci	r31, 0xFF	; 255
    568e:	81 e0       	ldi	r24, 0x01	; 1
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	91 83       	std	Z+1, r25	; 0x01
    5694:	80 83       	st	Z, r24
    5696:	64 c0       	rjmp	.+200    	; 0x5760 <main+0x108c>
	else if (__tmp > 65535)
    5698:	fe 01       	movw	r30, r28
    569a:	e5 5a       	subi	r30, 0xA5	; 165
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	60 81       	ld	r22, Z
    56a0:	71 81       	ldd	r23, Z+1	; 0x01
    56a2:	82 81       	ldd	r24, Z+2	; 0x02
    56a4:	93 81       	ldd	r25, Z+3	; 0x03
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	3f ef       	ldi	r19, 0xFF	; 255
    56aa:	4f e7       	ldi	r20, 0x7F	; 127
    56ac:	57 e4       	ldi	r21, 0x47	; 71
    56ae:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    56b2:	18 16       	cp	r1, r24
    56b4:	0c f0       	brlt	.+2      	; 0x56b8 <main+0xfe4>
    56b6:	43 c0       	rjmp	.+134    	; 0x573e <main+0x106a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56b8:	fe 01       	movw	r30, r28
    56ba:	e1 5a       	subi	r30, 0xA1	; 161
    56bc:	ff 4f       	sbci	r31, 0xFF	; 255
    56be:	60 81       	ld	r22, Z
    56c0:	71 81       	ldd	r23, Z+1	; 0x01
    56c2:	82 81       	ldd	r24, Z+2	; 0x02
    56c4:	93 81       	ldd	r25, Z+3	; 0x03
    56c6:	20 e0       	ldi	r18, 0x00	; 0
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	40 e2       	ldi	r20, 0x20	; 32
    56cc:	51 e4       	ldi	r21, 0x41	; 65
    56ce:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    56d2:	dc 01       	movw	r26, r24
    56d4:	cb 01       	movw	r24, r22
    56d6:	8e 01       	movw	r16, r28
    56d8:	07 5a       	subi	r16, 0xA7	; 167
    56da:	1f 4f       	sbci	r17, 0xFF	; 255
    56dc:	bc 01       	movw	r22, r24
    56de:	cd 01       	movw	r24, r26
    56e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e4:	dc 01       	movw	r26, r24
    56e6:	cb 01       	movw	r24, r22
    56e8:	f8 01       	movw	r30, r16
    56ea:	91 83       	std	Z+1, r25	; 0x01
    56ec:	80 83       	st	Z, r24
    56ee:	1f c0       	rjmp	.+62     	; 0x572e <main+0x105a>
    56f0:	fe 01       	movw	r30, r28
    56f2:	e9 5a       	subi	r30, 0xA9	; 169
    56f4:	ff 4f       	sbci	r31, 0xFF	; 255
    56f6:	88 ec       	ldi	r24, 0xC8	; 200
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	91 83       	std	Z+1, r25	; 0x01
    56fc:	80 83       	st	Z, r24
    56fe:	fe 01       	movw	r30, r28
    5700:	e9 5a       	subi	r30, 0xA9	; 169
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	80 81       	ld	r24, Z
    5706:	91 81       	ldd	r25, Z+1	; 0x01
    5708:	01 97       	sbiw	r24, 0x01	; 1
    570a:	f1 f7       	brne	.-4      	; 0x5708 <main+0x1034>
    570c:	fe 01       	movw	r30, r28
    570e:	e9 5a       	subi	r30, 0xA9	; 169
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	91 83       	std	Z+1, r25	; 0x01
    5714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5716:	de 01       	movw	r26, r28
    5718:	a7 5a       	subi	r26, 0xA7	; 167
    571a:	bf 4f       	sbci	r27, 0xFF	; 255
    571c:	fe 01       	movw	r30, r28
    571e:	e7 5a       	subi	r30, 0xA7	; 167
    5720:	ff 4f       	sbci	r31, 0xFF	; 255
    5722:	80 81       	ld	r24, Z
    5724:	91 81       	ldd	r25, Z+1	; 0x01
    5726:	01 97       	sbiw	r24, 0x01	; 1
    5728:	11 96       	adiw	r26, 0x01	; 1
    572a:	9c 93       	st	X, r25
    572c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    572e:	fe 01       	movw	r30, r28
    5730:	e7 5a       	subi	r30, 0xA7	; 167
    5732:	ff 4f       	sbci	r31, 0xFF	; 255
    5734:	80 81       	ld	r24, Z
    5736:	91 81       	ldd	r25, Z+1	; 0x01
    5738:	00 97       	sbiw	r24, 0x00	; 0
    573a:	d1 f6       	brne	.-76     	; 0x56f0 <main+0x101c>
    573c:	27 c0       	rjmp	.+78     	; 0x578c <main+0x10b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573e:	8e 01       	movw	r16, r28
    5740:	07 5a       	subi	r16, 0xA7	; 167
    5742:	1f 4f       	sbci	r17, 0xFF	; 255
    5744:	fe 01       	movw	r30, r28
    5746:	e5 5a       	subi	r30, 0xA5	; 165
    5748:	ff 4f       	sbci	r31, 0xFF	; 255
    574a:	60 81       	ld	r22, Z
    574c:	71 81       	ldd	r23, Z+1	; 0x01
    574e:	82 81       	ldd	r24, Z+2	; 0x02
    5750:	93 81       	ldd	r25, Z+3	; 0x03
    5752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5756:	dc 01       	movw	r26, r24
    5758:	cb 01       	movw	r24, r22
    575a:	f8 01       	movw	r30, r16
    575c:	91 83       	std	Z+1, r25	; 0x01
    575e:	80 83       	st	Z, r24
    5760:	de 01       	movw	r26, r28
    5762:	ab 5a       	subi	r26, 0xAB	; 171
    5764:	bf 4f       	sbci	r27, 0xFF	; 255
    5766:	fe 01       	movw	r30, r28
    5768:	e7 5a       	subi	r30, 0xA7	; 167
    576a:	ff 4f       	sbci	r31, 0xFF	; 255
    576c:	80 81       	ld	r24, Z
    576e:	91 81       	ldd	r25, Z+1	; 0x01
    5770:	8d 93       	st	X+, r24
    5772:	9c 93       	st	X, r25
    5774:	fe 01       	movw	r30, r28
    5776:	eb 5a       	subi	r30, 0xAB	; 171
    5778:	ff 4f       	sbci	r31, 0xFF	; 255
    577a:	80 81       	ld	r24, Z
    577c:	91 81       	ldd	r25, Z+1	; 0x01
    577e:	01 97       	sbiw	r24, 0x01	; 1
    5780:	f1 f7       	brne	.-4      	; 0x577e <main+0x10aa>
    5782:	fe 01       	movw	r30, r28
    5784:	eb 5a       	subi	r30, 0xAB	; 171
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	91 83       	std	Z+1, r25	; 0x01
    578a:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display seconds (tens)
				SSD_vDisable(seven_seg0);
    578c:	40 91 12 03 	lds	r20, 0x0312
    5790:	50 91 13 03 	lds	r21, 0x0313
    5794:	60 91 14 03 	lds	r22, 0x0314
    5798:	70 91 15 03 	lds	r23, 0x0315
    579c:	80 91 16 03 	lds	r24, 0x0316
    57a0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg1);
    57a4:	40 91 17 03 	lds	r20, 0x0317
    57a8:	50 91 18 03 	lds	r21, 0x0318
    57ac:	60 91 19 03 	lds	r22, 0x0319
    57b0:	70 91 1a 03 	lds	r23, 0x031A
    57b4:	80 91 1b 03 	lds	r24, 0x031B
    57b8:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg1, Second/10);
    57bc:	80 91 53 03 	lds	r24, 0x0353
    57c0:	9a e0       	ldi	r25, 0x0A	; 10
    57c2:	69 2f       	mov	r22, r25
    57c4:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    57c8:	98 2f       	mov	r25, r24
    57ca:	40 91 17 03 	lds	r20, 0x0317
    57ce:	50 91 18 03 	lds	r21, 0x0318
    57d2:	60 91 19 03 	lds	r22, 0x0319
    57d6:	70 91 1a 03 	lds	r23, 0x031A
    57da:	80 91 1b 03 	lds	r24, 0x031B
    57de:	29 2f       	mov	r18, r25
    57e0:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    57e4:	fe 01       	movw	r30, r28
    57e6:	ef 5a       	subi	r30, 0xAF	; 175
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	a0 ea       	ldi	r26, 0xA0	; 160
    57f0:	b0 e4       	ldi	r27, 0x40	; 64
    57f2:	80 83       	st	Z, r24
    57f4:	91 83       	std	Z+1, r25	; 0x01
    57f6:	a2 83       	std	Z+2, r26	; 0x02
    57f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fa:	8e 01       	movw	r16, r28
    57fc:	03 5b       	subi	r16, 0xB3	; 179
    57fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5800:	fe 01       	movw	r30, r28
    5802:	ef 5a       	subi	r30, 0xAF	; 175
    5804:	ff 4f       	sbci	r31, 0xFF	; 255
    5806:	60 81       	ld	r22, Z
    5808:	71 81       	ldd	r23, Z+1	; 0x01
    580a:	82 81       	ldd	r24, Z+2	; 0x02
    580c:	93 81       	ldd	r25, Z+3	; 0x03
    580e:	20 e0       	ldi	r18, 0x00	; 0
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	4a ef       	ldi	r20, 0xFA	; 250
    5814:	54 e4       	ldi	r21, 0x44	; 68
    5816:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    581a:	dc 01       	movw	r26, r24
    581c:	cb 01       	movw	r24, r22
    581e:	f8 01       	movw	r30, r16
    5820:	80 83       	st	Z, r24
    5822:	91 83       	std	Z+1, r25	; 0x01
    5824:	a2 83       	std	Z+2, r26	; 0x02
    5826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5828:	fe 01       	movw	r30, r28
    582a:	e3 5b       	subi	r30, 0xB3	; 179
    582c:	ff 4f       	sbci	r31, 0xFF	; 255
    582e:	60 81       	ld	r22, Z
    5830:	71 81       	ldd	r23, Z+1	; 0x01
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	93 81       	ldd	r25, Z+3	; 0x03
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e8       	ldi	r20, 0x80	; 128
    583c:	5f e3       	ldi	r21, 0x3F	; 63
    583e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5842:	88 23       	and	r24, r24
    5844:	44 f4       	brge	.+16     	; 0x5856 <main+0x1182>
		__ticks = 1;
    5846:	fe 01       	movw	r30, r28
    5848:	e5 5b       	subi	r30, 0xB5	; 181
    584a:	ff 4f       	sbci	r31, 0xFF	; 255
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	91 83       	std	Z+1, r25	; 0x01
    5852:	80 83       	st	Z, r24
    5854:	64 c0       	rjmp	.+200    	; 0x591e <main+0x124a>
	else if (__tmp > 65535)
    5856:	fe 01       	movw	r30, r28
    5858:	e3 5b       	subi	r30, 0xB3	; 179
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
    585c:	60 81       	ld	r22, Z
    585e:	71 81       	ldd	r23, Z+1	; 0x01
    5860:	82 81       	ldd	r24, Z+2	; 0x02
    5862:	93 81       	ldd	r25, Z+3	; 0x03
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	3f ef       	ldi	r19, 0xFF	; 255
    5868:	4f e7       	ldi	r20, 0x7F	; 127
    586a:	57 e4       	ldi	r21, 0x47	; 71
    586c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5870:	18 16       	cp	r1, r24
    5872:	0c f0       	brlt	.+2      	; 0x5876 <main+0x11a2>
    5874:	43 c0       	rjmp	.+134    	; 0x58fc <main+0x1228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5876:	fe 01       	movw	r30, r28
    5878:	ef 5a       	subi	r30, 0xAF	; 175
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	60 81       	ld	r22, Z
    587e:	71 81       	ldd	r23, Z+1	; 0x01
    5880:	82 81       	ldd	r24, Z+2	; 0x02
    5882:	93 81       	ldd	r25, Z+3	; 0x03
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	40 e2       	ldi	r20, 0x20	; 32
    588a:	51 e4       	ldi	r21, 0x41	; 65
    588c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	8e 01       	movw	r16, r28
    5896:	05 5b       	subi	r16, 0xB5	; 181
    5898:	1f 4f       	sbci	r17, 0xFF	; 255
    589a:	bc 01       	movw	r22, r24
    589c:	cd 01       	movw	r24, r26
    589e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	f8 01       	movw	r30, r16
    58a8:	91 83       	std	Z+1, r25	; 0x01
    58aa:	80 83       	st	Z, r24
    58ac:	1f c0       	rjmp	.+62     	; 0x58ec <main+0x1218>
    58ae:	fe 01       	movw	r30, r28
    58b0:	e7 5b       	subi	r30, 0xB7	; 183
    58b2:	ff 4f       	sbci	r31, 0xFF	; 255
    58b4:	88 ec       	ldi	r24, 0xC8	; 200
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	91 83       	std	Z+1, r25	; 0x01
    58ba:	80 83       	st	Z, r24
    58bc:	fe 01       	movw	r30, r28
    58be:	e7 5b       	subi	r30, 0xB7	; 183
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	80 81       	ld	r24, Z
    58c4:	91 81       	ldd	r25, Z+1	; 0x01
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	f1 f7       	brne	.-4      	; 0x58c6 <main+0x11f2>
    58ca:	fe 01       	movw	r30, r28
    58cc:	e7 5b       	subi	r30, 0xB7	; 183
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	91 83       	std	Z+1, r25	; 0x01
    58d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d4:	de 01       	movw	r26, r28
    58d6:	a5 5b       	subi	r26, 0xB5	; 181
    58d8:	bf 4f       	sbci	r27, 0xFF	; 255
    58da:	fe 01       	movw	r30, r28
    58dc:	e5 5b       	subi	r30, 0xB5	; 181
    58de:	ff 4f       	sbci	r31, 0xFF	; 255
    58e0:	80 81       	ld	r24, Z
    58e2:	91 81       	ldd	r25, Z+1	; 0x01
    58e4:	01 97       	sbiw	r24, 0x01	; 1
    58e6:	11 96       	adiw	r26, 0x01	; 1
    58e8:	9c 93       	st	X, r25
    58ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ec:	fe 01       	movw	r30, r28
    58ee:	e5 5b       	subi	r30, 0xB5	; 181
    58f0:	ff 4f       	sbci	r31, 0xFF	; 255
    58f2:	80 81       	ld	r24, Z
    58f4:	91 81       	ldd	r25, Z+1	; 0x01
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	d1 f6       	brne	.-76     	; 0x58ae <main+0x11da>
    58fa:	27 c0       	rjmp	.+78     	; 0x594a <main+0x1276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fc:	8e 01       	movw	r16, r28
    58fe:	05 5b       	subi	r16, 0xB5	; 181
    5900:	1f 4f       	sbci	r17, 0xFF	; 255
    5902:	fe 01       	movw	r30, r28
    5904:	e3 5b       	subi	r30, 0xB3	; 179
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	60 81       	ld	r22, Z
    590a:	71 81       	ldd	r23, Z+1	; 0x01
    590c:	82 81       	ldd	r24, Z+2	; 0x02
    590e:	93 81       	ldd	r25, Z+3	; 0x03
    5910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	f8 01       	movw	r30, r16
    591a:	91 83       	std	Z+1, r25	; 0x01
    591c:	80 83       	st	Z, r24
    591e:	de 01       	movw	r26, r28
    5920:	a9 5b       	subi	r26, 0xB9	; 185
    5922:	bf 4f       	sbci	r27, 0xFF	; 255
    5924:	fe 01       	movw	r30, r28
    5926:	e5 5b       	subi	r30, 0xB5	; 181
    5928:	ff 4f       	sbci	r31, 0xFF	; 255
    592a:	80 81       	ld	r24, Z
    592c:	91 81       	ldd	r25, Z+1	; 0x01
    592e:	8d 93       	st	X+, r24
    5930:	9c 93       	st	X, r25
    5932:	fe 01       	movw	r30, r28
    5934:	e9 5b       	subi	r30, 0xB9	; 185
    5936:	ff 4f       	sbci	r31, 0xFF	; 255
    5938:	80 81       	ld	r24, Z
    593a:	91 81       	ldd	r25, Z+1	; 0x01
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	f1 f7       	brne	.-4      	; 0x593c <main+0x1268>
    5940:	fe 01       	movw	r30, r28
    5942:	e9 5b       	subi	r30, 0xB9	; 185
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	91 83       	std	Z+1, r25	; 0x01
    5948:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display minutes (units)
				SSD_vDisable(seven_seg1);
    594a:	40 91 17 03 	lds	r20, 0x0317
    594e:	50 91 18 03 	lds	r21, 0x0318
    5952:	60 91 19 03 	lds	r22, 0x0319
    5956:	70 91 1a 03 	lds	r23, 0x031A
    595a:	80 91 1b 03 	lds	r24, 0x031B
    595e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg2);
    5962:	40 91 1c 03 	lds	r20, 0x031C
    5966:	50 91 1d 03 	lds	r21, 0x031D
    596a:	60 91 1e 03 	lds	r22, 0x031E
    596e:	70 91 1f 03 	lds	r23, 0x031F
    5972:	80 91 20 03 	lds	r24, 0x0320
    5976:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg2, Minute%10);
    597a:	80 91 52 03 	lds	r24, 0x0352
    597e:	9a e0       	ldi	r25, 0x0A	; 10
    5980:	69 2f       	mov	r22, r25
    5982:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    5986:	89 2f       	mov	r24, r25
    5988:	98 2f       	mov	r25, r24
    598a:	40 91 1c 03 	lds	r20, 0x031C
    598e:	50 91 1d 03 	lds	r21, 0x031D
    5992:	60 91 1e 03 	lds	r22, 0x031E
    5996:	70 91 1f 03 	lds	r23, 0x031F
    599a:	80 91 20 03 	lds	r24, 0x0320
    599e:	29 2f       	mov	r18, r25
    59a0:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    59a4:	fe 01       	movw	r30, r28
    59a6:	ed 5b       	subi	r30, 0xBD	; 189
    59a8:	ff 4f       	sbci	r31, 0xFF	; 255
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	a0 ea       	ldi	r26, 0xA0	; 160
    59b0:	b0 e4       	ldi	r27, 0x40	; 64
    59b2:	80 83       	st	Z, r24
    59b4:	91 83       	std	Z+1, r25	; 0x01
    59b6:	a2 83       	std	Z+2, r26	; 0x02
    59b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ba:	8e 01       	movw	r16, r28
    59bc:	01 5c       	subi	r16, 0xC1	; 193
    59be:	1f 4f       	sbci	r17, 0xFF	; 255
    59c0:	fe 01       	movw	r30, r28
    59c2:	ed 5b       	subi	r30, 0xBD	; 189
    59c4:	ff 4f       	sbci	r31, 0xFF	; 255
    59c6:	60 81       	ld	r22, Z
    59c8:	71 81       	ldd	r23, Z+1	; 0x01
    59ca:	82 81       	ldd	r24, Z+2	; 0x02
    59cc:	93 81       	ldd	r25, Z+3	; 0x03
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	4a ef       	ldi	r20, 0xFA	; 250
    59d4:	54 e4       	ldi	r21, 0x44	; 68
    59d6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	f8 01       	movw	r30, r16
    59e0:	80 83       	st	Z, r24
    59e2:	91 83       	std	Z+1, r25	; 0x01
    59e4:	a2 83       	std	Z+2, r26	; 0x02
    59e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59e8:	fe 01       	movw	r30, r28
    59ea:	ff 96       	adiw	r30, 0x3f	; 63
    59ec:	60 81       	ld	r22, Z
    59ee:	71 81       	ldd	r23, Z+1	; 0x01
    59f0:	82 81       	ldd	r24, Z+2	; 0x02
    59f2:	93 81       	ldd	r25, Z+3	; 0x03
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	40 e8       	ldi	r20, 0x80	; 128
    59fa:	5f e3       	ldi	r21, 0x3F	; 63
    59fc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5a00:	88 23       	and	r24, r24
    5a02:	2c f4       	brge	.+10     	; 0x5a0e <main+0x133a>
		__ticks = 1;
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	9e af       	std	Y+62, r25	; 0x3e
    5a0a:	8d af       	std	Y+61, r24	; 0x3d
    5a0c:	46 c0       	rjmp	.+140    	; 0x5a9a <main+0x13c6>
	else if (__tmp > 65535)
    5a0e:	fe 01       	movw	r30, r28
    5a10:	ff 96       	adiw	r30, 0x3f	; 63
    5a12:	60 81       	ld	r22, Z
    5a14:	71 81       	ldd	r23, Z+1	; 0x01
    5a16:	82 81       	ldd	r24, Z+2	; 0x02
    5a18:	93 81       	ldd	r25, Z+3	; 0x03
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	3f ef       	ldi	r19, 0xFF	; 255
    5a1e:	4f e7       	ldi	r20, 0x7F	; 127
    5a20:	57 e4       	ldi	r21, 0x47	; 71
    5a22:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5a26:	18 16       	cp	r1, r24
    5a28:	64 f5       	brge	.+88     	; 0x5a82 <main+0x13ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a2a:	fe 01       	movw	r30, r28
    5a2c:	ed 5b       	subi	r30, 0xBD	; 189
    5a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a30:	60 81       	ld	r22, Z
    5a32:	71 81       	ldd	r23, Z+1	; 0x01
    5a34:	82 81       	ldd	r24, Z+2	; 0x02
    5a36:	93 81       	ldd	r25, Z+3	; 0x03
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	40 e2       	ldi	r20, 0x20	; 32
    5a3e:	51 e4       	ldi	r21, 0x41	; 65
    5a40:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	bc 01       	movw	r22, r24
    5a4a:	cd 01       	movw	r24, r26
    5a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a50:	dc 01       	movw	r26, r24
    5a52:	cb 01       	movw	r24, r22
    5a54:	9e af       	std	Y+62, r25	; 0x3e
    5a56:	8d af       	std	Y+61, r24	; 0x3d
    5a58:	0f c0       	rjmp	.+30     	; 0x5a78 <main+0x13a4>
    5a5a:	88 ec       	ldi	r24, 0xC8	; 200
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	9c af       	std	Y+60, r25	; 0x3c
    5a60:	8b af       	std	Y+59, r24	; 0x3b
    5a62:	8b ad       	ldd	r24, Y+59	; 0x3b
    5a64:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a66:	01 97       	sbiw	r24, 0x01	; 1
    5a68:	f1 f7       	brne	.-4      	; 0x5a66 <main+0x1392>
    5a6a:	9c af       	std	Y+60, r25	; 0x3c
    5a6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a70:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	9e af       	std	Y+62, r25	; 0x3e
    5a76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a78:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a7c:	00 97       	sbiw	r24, 0x00	; 0
    5a7e:	69 f7       	brne	.-38     	; 0x5a5a <main+0x1386>
    5a80:	16 c0       	rjmp	.+44     	; 0x5aae <main+0x13da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a82:	fe 01       	movw	r30, r28
    5a84:	ff 96       	adiw	r30, 0x3f	; 63
    5a86:	60 81       	ld	r22, Z
    5a88:	71 81       	ldd	r23, Z+1	; 0x01
    5a8a:	82 81       	ldd	r24, Z+2	; 0x02
    5a8c:	93 81       	ldd	r25, Z+3	; 0x03
    5a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a92:	dc 01       	movw	r26, r24
    5a94:	cb 01       	movw	r24, r22
    5a96:	9e af       	std	Y+62, r25	; 0x3e
    5a98:	8d af       	std	Y+61, r24	; 0x3d
    5a9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a9e:	9a af       	std	Y+58, r25	; 0x3a
    5aa0:	89 af       	std	Y+57, r24	; 0x39
    5aa2:	89 ad       	ldd	r24, Y+57	; 0x39
    5aa4:	9a ad       	ldd	r25, Y+58	; 0x3a
    5aa6:	01 97       	sbiw	r24, 0x01	; 1
    5aa8:	f1 f7       	brne	.-4      	; 0x5aa6 <main+0x13d2>
    5aaa:	9a af       	std	Y+58, r25	; 0x3a
    5aac:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5);

				// Display minutes (tens)
				SSD_vDisable(seven_seg2);
    5aae:	40 91 1c 03 	lds	r20, 0x031C
    5ab2:	50 91 1d 03 	lds	r21, 0x031D
    5ab6:	60 91 1e 03 	lds	r22, 0x031E
    5aba:	70 91 1f 03 	lds	r23, 0x031F
    5abe:	80 91 20 03 	lds	r24, 0x0320
    5ac2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg3);
    5ac6:	40 91 21 03 	lds	r20, 0x0321
    5aca:	50 91 22 03 	lds	r21, 0x0322
    5ace:	60 91 23 03 	lds	r22, 0x0323
    5ad2:	70 91 24 03 	lds	r23, 0x0324
    5ad6:	80 91 25 03 	lds	r24, 0x0325
    5ada:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg3, Minute/10);
    5ade:	80 91 52 03 	lds	r24, 0x0352
    5ae2:	9a e0       	ldi	r25, 0x0A	; 10
    5ae4:	69 2f       	mov	r22, r25
    5ae6:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    5aea:	98 2f       	mov	r25, r24
    5aec:	40 91 21 03 	lds	r20, 0x0321
    5af0:	50 91 22 03 	lds	r21, 0x0322
    5af4:	60 91 23 03 	lds	r22, 0x0323
    5af8:	70 91 24 03 	lds	r23, 0x0324
    5afc:	80 91 25 03 	lds	r24, 0x0325
    5b00:	29 2f       	mov	r18, r25
    5b02:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5b06:	80 e0       	ldi	r24, 0x00	; 0
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	a0 ea       	ldi	r26, 0xA0	; 160
    5b0c:	b0 e4       	ldi	r27, 0x40	; 64
    5b0e:	8d ab       	std	Y+53, r24	; 0x35
    5b10:	9e ab       	std	Y+54, r25	; 0x36
    5b12:	af ab       	std	Y+55, r26	; 0x37
    5b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b16:	6d a9       	ldd	r22, Y+53	; 0x35
    5b18:	7e a9       	ldd	r23, Y+54	; 0x36
    5b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    5b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    5b1e:	20 e0       	ldi	r18, 0x00	; 0
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	4a ef       	ldi	r20, 0xFA	; 250
    5b24:	54 e4       	ldi	r21, 0x44	; 68
    5b26:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b2a:	dc 01       	movw	r26, r24
    5b2c:	cb 01       	movw	r24, r22
    5b2e:	89 ab       	std	Y+49, r24	; 0x31
    5b30:	9a ab       	std	Y+50, r25	; 0x32
    5b32:	ab ab       	std	Y+51, r26	; 0x33
    5b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b36:	69 a9       	ldd	r22, Y+49	; 0x31
    5b38:	7a a9       	ldd	r23, Y+50	; 0x32
    5b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    5b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    5b3e:	20 e0       	ldi	r18, 0x00	; 0
    5b40:	30 e0       	ldi	r19, 0x00	; 0
    5b42:	40 e8       	ldi	r20, 0x80	; 128
    5b44:	5f e3       	ldi	r21, 0x3F	; 63
    5b46:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5b4a:	88 23       	and	r24, r24
    5b4c:	2c f4       	brge	.+10     	; 0x5b58 <main+0x1484>
		__ticks = 1;
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	98 ab       	std	Y+48, r25	; 0x30
    5b54:	8f a7       	std	Y+47, r24	; 0x2f
    5b56:	3f c0       	rjmp	.+126    	; 0x5bd6 <main+0x1502>
	else if (__tmp > 65535)
    5b58:	69 a9       	ldd	r22, Y+49	; 0x31
    5b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    5b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    5b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	3f ef       	ldi	r19, 0xFF	; 255
    5b64:	4f e7       	ldi	r20, 0x7F	; 127
    5b66:	57 e4       	ldi	r21, 0x47	; 71
    5b68:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5b6c:	18 16       	cp	r1, r24
    5b6e:	4c f5       	brge	.+82     	; 0x5bc2 <main+0x14ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b70:	6d a9       	ldd	r22, Y+53	; 0x35
    5b72:	7e a9       	ldd	r23, Y+54	; 0x36
    5b74:	8f a9       	ldd	r24, Y+55	; 0x37
    5b76:	98 ad       	ldd	r25, Y+56	; 0x38
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	40 e2       	ldi	r20, 0x20	; 32
    5b7e:	51 e4       	ldi	r21, 0x41	; 65
    5b80:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	bc 01       	movw	r22, r24
    5b8a:	cd 01       	movw	r24, r26
    5b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	98 ab       	std	Y+48, r25	; 0x30
    5b96:	8f a7       	std	Y+47, r24	; 0x2f
    5b98:	0f c0       	rjmp	.+30     	; 0x5bb8 <main+0x14e4>
    5b9a:	88 ec       	ldi	r24, 0xC8	; 200
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	9e a7       	std	Y+46, r25	; 0x2e
    5ba0:	8d a7       	std	Y+45, r24	; 0x2d
    5ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ba6:	01 97       	sbiw	r24, 0x01	; 1
    5ba8:	f1 f7       	brne	.-4      	; 0x5ba6 <main+0x14d2>
    5baa:	9e a7       	std	Y+46, r25	; 0x2e
    5bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    5bb2:	01 97       	sbiw	r24, 0x01	; 1
    5bb4:	98 ab       	std	Y+48, r25	; 0x30
    5bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bba:	98 a9       	ldd	r25, Y+48	; 0x30
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	69 f7       	brne	.-38     	; 0x5b9a <main+0x14c6>
    5bc0:	14 c0       	rjmp	.+40     	; 0x5bea <main+0x1516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    5bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    5bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    5bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    5bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bce:	dc 01       	movw	r26, r24
    5bd0:	cb 01       	movw	r24, r22
    5bd2:	98 ab       	std	Y+48, r25	; 0x30
    5bd4:	8f a7       	std	Y+47, r24	; 0x2f
    5bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    5bda:	9c a7       	std	Y+44, r25	; 0x2c
    5bdc:	8b a7       	std	Y+43, r24	; 0x2b
    5bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    5be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    5be2:	01 97       	sbiw	r24, 0x01	; 1
    5be4:	f1 f7       	brne	.-4      	; 0x5be2 <main+0x150e>
    5be6:	9c a7       	std	Y+44, r25	; 0x2c
    5be8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5);

				// Display hours (units)
				SSD_vDisable(seven_seg3);
    5bea:	40 91 21 03 	lds	r20, 0x0321
    5bee:	50 91 22 03 	lds	r21, 0x0322
    5bf2:	60 91 23 03 	lds	r22, 0x0323
    5bf6:	70 91 24 03 	lds	r23, 0x0324
    5bfa:	80 91 25 03 	lds	r24, 0x0325
    5bfe:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg4);
    5c02:	40 91 26 03 	lds	r20, 0x0326
    5c06:	50 91 27 03 	lds	r21, 0x0327
    5c0a:	60 91 28 03 	lds	r22, 0x0328
    5c0e:	70 91 29 03 	lds	r23, 0x0329
    5c12:	80 91 2a 03 	lds	r24, 0x032A
    5c16:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg4, Hour %10);
    5c1a:	80 91 10 03 	lds	r24, 0x0310
    5c1e:	9a e0       	ldi	r25, 0x0A	; 10
    5c20:	69 2f       	mov	r22, r25
    5c22:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    5c26:	89 2f       	mov	r24, r25
    5c28:	98 2f       	mov	r25, r24
    5c2a:	40 91 26 03 	lds	r20, 0x0326
    5c2e:	50 91 27 03 	lds	r21, 0x0327
    5c32:	60 91 28 03 	lds	r22, 0x0328
    5c36:	70 91 29 03 	lds	r23, 0x0329
    5c3a:	80 91 2a 03 	lds	r24, 0x032A
    5c3e:	29 2f       	mov	r18, r25
    5c40:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5c44:	80 e0       	ldi	r24, 0x00	; 0
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	a0 ea       	ldi	r26, 0xA0	; 160
    5c4a:	b0 e4       	ldi	r27, 0x40	; 64
    5c4c:	8f a3       	std	Y+39, r24	; 0x27
    5c4e:	98 a7       	std	Y+40, r25	; 0x28
    5c50:	a9 a7       	std	Y+41, r26	; 0x29
    5c52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c54:	6f a1       	ldd	r22, Y+39	; 0x27
    5c56:	78 a5       	ldd	r23, Y+40	; 0x28
    5c58:	89 a5       	ldd	r24, Y+41	; 0x29
    5c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	4a ef       	ldi	r20, 0xFA	; 250
    5c62:	54 e4       	ldi	r21, 0x44	; 68
    5c64:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c68:	dc 01       	movw	r26, r24
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	8b a3       	std	Y+35, r24	; 0x23
    5c6e:	9c a3       	std	Y+36, r25	; 0x24
    5c70:	ad a3       	std	Y+37, r26	; 0x25
    5c72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c74:	6b a1       	ldd	r22, Y+35	; 0x23
    5c76:	7c a1       	ldd	r23, Y+36	; 0x24
    5c78:	8d a1       	ldd	r24, Y+37	; 0x25
    5c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    5c7c:	20 e0       	ldi	r18, 0x00	; 0
    5c7e:	30 e0       	ldi	r19, 0x00	; 0
    5c80:	40 e8       	ldi	r20, 0x80	; 128
    5c82:	5f e3       	ldi	r21, 0x3F	; 63
    5c84:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5c88:	88 23       	and	r24, r24
    5c8a:	2c f4       	brge	.+10     	; 0x5c96 <main+0x15c2>
		__ticks = 1;
    5c8c:	81 e0       	ldi	r24, 0x01	; 1
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	9a a3       	std	Y+34, r25	; 0x22
    5c92:	89 a3       	std	Y+33, r24	; 0x21
    5c94:	3f c0       	rjmp	.+126    	; 0x5d14 <main+0x1640>
	else if (__tmp > 65535)
    5c96:	6b a1       	ldd	r22, Y+35	; 0x23
    5c98:	7c a1       	ldd	r23, Y+36	; 0x24
    5c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    5c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	3f ef       	ldi	r19, 0xFF	; 255
    5ca2:	4f e7       	ldi	r20, 0x7F	; 127
    5ca4:	57 e4       	ldi	r21, 0x47	; 71
    5ca6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5caa:	18 16       	cp	r1, r24
    5cac:	4c f5       	brge	.+82     	; 0x5d00 <main+0x162c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cae:	6f a1       	ldd	r22, Y+39	; 0x27
    5cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    5cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    5cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	40 e2       	ldi	r20, 0x20	; 32
    5cbc:	51 e4       	ldi	r21, 0x41	; 65
    5cbe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	bc 01       	movw	r22, r24
    5cc8:	cd 01       	movw	r24, r26
    5cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	9a a3       	std	Y+34, r25	; 0x22
    5cd4:	89 a3       	std	Y+33, r24	; 0x21
    5cd6:	0f c0       	rjmp	.+30     	; 0x5cf6 <main+0x1622>
    5cd8:	88 ec       	ldi	r24, 0xC8	; 200
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	98 a3       	std	Y+32, r25	; 0x20
    5cde:	8f 8f       	std	Y+31, r24	; 0x1f
    5ce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ce2:	98 a1       	ldd	r25, Y+32	; 0x20
    5ce4:	01 97       	sbiw	r24, 0x01	; 1
    5ce6:	f1 f7       	brne	.-4      	; 0x5ce4 <main+0x1610>
    5ce8:	98 a3       	std	Y+32, r25	; 0x20
    5cea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cec:	89 a1       	ldd	r24, Y+33	; 0x21
    5cee:	9a a1       	ldd	r25, Y+34	; 0x22
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	9a a3       	std	Y+34, r25	; 0x22
    5cf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    5cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    5cfa:	00 97       	sbiw	r24, 0x00	; 0
    5cfc:	69 f7       	brne	.-38     	; 0x5cd8 <main+0x1604>
    5cfe:	14 c0       	rjmp	.+40     	; 0x5d28 <main+0x1654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d00:	6b a1       	ldd	r22, Y+35	; 0x23
    5d02:	7c a1       	ldd	r23, Y+36	; 0x24
    5d04:	8d a1       	ldd	r24, Y+37	; 0x25
    5d06:	9e a1       	ldd	r25, Y+38	; 0x26
    5d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	9a a3       	std	Y+34, r25	; 0x22
    5d12:	89 a3       	std	Y+33, r24	; 0x21
    5d14:	89 a1       	ldd	r24, Y+33	; 0x21
    5d16:	9a a1       	ldd	r25, Y+34	; 0x22
    5d18:	9e 8f       	std	Y+30, r25	; 0x1e
    5d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    5d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d20:	01 97       	sbiw	r24, 0x01	; 1
    5d22:	f1 f7       	brne	.-4      	; 0x5d20 <main+0x164c>
    5d24:	9e 8f       	std	Y+30, r25	; 0x1e
    5d26:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5);

				// Display hours (tens)
				SSD_vDisable(seven_seg4);
    5d28:	40 91 26 03 	lds	r20, 0x0326
    5d2c:	50 91 27 03 	lds	r21, 0x0327
    5d30:	60 91 28 03 	lds	r22, 0x0328
    5d34:	70 91 29 03 	lds	r23, 0x0329
    5d38:	80 91 2a 03 	lds	r24, 0x032A
    5d3c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <SSD_vDisable>
				SSD_vEnable(seven_seg5);
    5d40:	40 91 2b 03 	lds	r20, 0x032B
    5d44:	50 91 2c 03 	lds	r21, 0x032C
    5d48:	60 91 2d 03 	lds	r22, 0x032D
    5d4c:	70 91 2e 03 	lds	r23, 0x032E
    5d50:	80 91 2f 03 	lds	r24, 0x032F
    5d54:	0e 94 bf 18 	call	0x317e	; 0x317e <SSD_vEnable>
				SSD_vSendNumber(seven_seg5, Hour /10);
    5d58:	80 91 10 03 	lds	r24, 0x0310
    5d5c:	9a e0       	ldi	r25, 0x0A	; 10
    5d5e:	69 2f       	mov	r22, r25
    5d60:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    5d64:	98 2f       	mov	r25, r24
    5d66:	40 91 2b 03 	lds	r20, 0x032B
    5d6a:	50 91 2c 03 	lds	r21, 0x032C
    5d6e:	60 91 2d 03 	lds	r22, 0x032D
    5d72:	70 91 2e 03 	lds	r23, 0x032E
    5d76:	80 91 2f 03 	lds	r24, 0x032F
    5d7a:	29 2f       	mov	r18, r25
    5d7c:	0e 94 9a 18 	call	0x3134	; 0x3134 <SSD_vSendNumber>
    5d80:	80 e0       	ldi	r24, 0x00	; 0
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	a0 ea       	ldi	r26, 0xA0	; 160
    5d86:	b0 e4       	ldi	r27, 0x40	; 64
    5d88:	89 8f       	std	Y+25, r24	; 0x19
    5d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    5d8c:	ab 8f       	std	Y+27, r26	; 0x1b
    5d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d90:	69 8d       	ldd	r22, Y+25	; 0x19
    5d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d98:	20 e0       	ldi	r18, 0x00	; 0
    5d9a:	30 e0       	ldi	r19, 0x00	; 0
    5d9c:	4a ef       	ldi	r20, 0xFA	; 250
    5d9e:	54 e4       	ldi	r21, 0x44	; 68
    5da0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5da4:	dc 01       	movw	r26, r24
    5da6:	cb 01       	movw	r24, r22
    5da8:	8d 8b       	std	Y+21, r24	; 0x15
    5daa:	9e 8b       	std	Y+22, r25	; 0x16
    5dac:	af 8b       	std	Y+23, r26	; 0x17
    5dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5db0:	6d 89       	ldd	r22, Y+21	; 0x15
    5db2:	7e 89       	ldd	r23, Y+22	; 0x16
    5db4:	8f 89       	ldd	r24, Y+23	; 0x17
    5db6:	98 8d       	ldd	r25, Y+24	; 0x18
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	40 e8       	ldi	r20, 0x80	; 128
    5dbe:	5f e3       	ldi	r21, 0x3F	; 63
    5dc0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5dc4:	88 23       	and	r24, r24
    5dc6:	2c f4       	brge	.+10     	; 0x5dd2 <main+0x16fe>
		__ticks = 1;
    5dc8:	81 e0       	ldi	r24, 0x01	; 1
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	9c 8b       	std	Y+20, r25	; 0x14
    5dce:	8b 8b       	std	Y+19, r24	; 0x13
    5dd0:	3f c0       	rjmp	.+126    	; 0x5e50 <main+0x177c>
	else if (__tmp > 65535)
    5dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    5dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    5dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    5dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    5dda:	20 e0       	ldi	r18, 0x00	; 0
    5ddc:	3f ef       	ldi	r19, 0xFF	; 255
    5dde:	4f e7       	ldi	r20, 0x7F	; 127
    5de0:	57 e4       	ldi	r21, 0x47	; 71
    5de2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5de6:	18 16       	cp	r1, r24
    5de8:	4c f5       	brge	.+82     	; 0x5e3c <main+0x1768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dea:	69 8d       	ldd	r22, Y+25	; 0x19
    5dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	40 e2       	ldi	r20, 0x20	; 32
    5df8:	51 e4       	ldi	r21, 0x41	; 65
    5dfa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5dfe:	dc 01       	movw	r26, r24
    5e00:	cb 01       	movw	r24, r22
    5e02:	bc 01       	movw	r22, r24
    5e04:	cd 01       	movw	r24, r26
    5e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	cb 01       	movw	r24, r22
    5e0e:	9c 8b       	std	Y+20, r25	; 0x14
    5e10:	8b 8b       	std	Y+19, r24	; 0x13
    5e12:	0f c0       	rjmp	.+30     	; 0x5e32 <main+0x175e>
    5e14:	88 ec       	ldi	r24, 0xC8	; 200
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	9a 8b       	std	Y+18, r25	; 0x12
    5e1a:	89 8b       	std	Y+17, r24	; 0x11
    5e1c:	89 89       	ldd	r24, Y+17	; 0x11
    5e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    5e20:	01 97       	sbiw	r24, 0x01	; 1
    5e22:	f1 f7       	brne	.-4      	; 0x5e20 <main+0x174c>
    5e24:	9a 8b       	std	Y+18, r25	; 0x12
    5e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e28:	8b 89       	ldd	r24, Y+19	; 0x13
    5e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e2c:	01 97       	sbiw	r24, 0x01	; 1
    5e2e:	9c 8b       	std	Y+20, r25	; 0x14
    5e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e32:	8b 89       	ldd	r24, Y+19	; 0x13
    5e34:	9c 89       	ldd	r25, Y+20	; 0x14
    5e36:	00 97       	sbiw	r24, 0x00	; 0
    5e38:	69 f7       	brne	.-38     	; 0x5e14 <main+0x1740>
    5e3a:	14 c0       	rjmp	.+40     	; 0x5e64 <main+0x1790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    5e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    5e40:	8f 89       	ldd	r24, Y+23	; 0x17
    5e42:	98 8d       	ldd	r25, Y+24	; 0x18
    5e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e48:	dc 01       	movw	r26, r24
    5e4a:	cb 01       	movw	r24, r22
    5e4c:	9c 8b       	std	Y+20, r25	; 0x14
    5e4e:	8b 8b       	std	Y+19, r24	; 0x13
    5e50:	8b 89       	ldd	r24, Y+19	; 0x13
    5e52:	9c 89       	ldd	r25, Y+20	; 0x14
    5e54:	98 8b       	std	Y+16, r25	; 0x10
    5e56:	8f 87       	std	Y+15, r24	; 0x0f
    5e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e5a:	98 89       	ldd	r25, Y+16	; 0x10
    5e5c:	01 97       	sbiw	r24, 0x01	; 1
    5e5e:	f1 f7       	brne	.-4      	; 0x5e5c <main+0x1788>
    5e60:	98 8b       	std	Y+16, r25	; 0x10
    5e62:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5);

				BUZ_vTog(BUZ0);
    5e64:	60 91 33 03 	lds	r22, 0x0333
    5e68:	70 91 34 03 	lds	r23, 0x0334
    5e6c:	80 91 35 03 	lds	r24, 0x0335
    5e70:	0e 94 7e 19 	call	0x32fc	; 0x32fc <BUZ_vTog>
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	a0 e2       	ldi	r26, 0x20	; 32
    5e7a:	b1 e4       	ldi	r27, 0x41	; 65
    5e7c:	8b 87       	std	Y+11, r24	; 0x0b
    5e7e:	9c 87       	std	Y+12, r25	; 0x0c
    5e80:	ad 87       	std	Y+13, r26	; 0x0d
    5e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e8c:	20 e0       	ldi	r18, 0x00	; 0
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	4a ef       	ldi	r20, 0xFA	; 250
    5e92:	54 e4       	ldi	r21, 0x44	; 68
    5e94:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5e98:	dc 01       	movw	r26, r24
    5e9a:	cb 01       	movw	r24, r22
    5e9c:	8f 83       	std	Y+7, r24	; 0x07
    5e9e:	98 87       	std	Y+8, r25	; 0x08
    5ea0:	a9 87       	std	Y+9, r26	; 0x09
    5ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ea6:	78 85       	ldd	r23, Y+8	; 0x08
    5ea8:	89 85       	ldd	r24, Y+9	; 0x09
    5eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	40 e8       	ldi	r20, 0x80	; 128
    5eb2:	5f e3       	ldi	r21, 0x3F	; 63
    5eb4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5eb8:	88 23       	and	r24, r24
    5eba:	2c f4       	brge	.+10     	; 0x5ec6 <main+0x17f2>
		__ticks = 1;
    5ebc:	81 e0       	ldi	r24, 0x01	; 1
    5ebe:	90 e0       	ldi	r25, 0x00	; 0
    5ec0:	9e 83       	std	Y+6, r25	; 0x06
    5ec2:	8d 83       	std	Y+5, r24	; 0x05
    5ec4:	3f c0       	rjmp	.+126    	; 0x5f44 <main+0x1870>
	else if (__tmp > 65535)
    5ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ec8:	78 85       	ldd	r23, Y+8	; 0x08
    5eca:	89 85       	ldd	r24, Y+9	; 0x09
    5ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ece:	20 e0       	ldi	r18, 0x00	; 0
    5ed0:	3f ef       	ldi	r19, 0xFF	; 255
    5ed2:	4f e7       	ldi	r20, 0x7F	; 127
    5ed4:	57 e4       	ldi	r21, 0x47	; 71
    5ed6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5eda:	18 16       	cp	r1, r24
    5edc:	4c f5       	brge	.+82     	; 0x5f30 <main+0x185c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ee6:	20 e0       	ldi	r18, 0x00	; 0
    5ee8:	30 e0       	ldi	r19, 0x00	; 0
    5eea:	40 e2       	ldi	r20, 0x20	; 32
    5eec:	51 e4       	ldi	r21, 0x41	; 65
    5eee:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5ef2:	dc 01       	movw	r26, r24
    5ef4:	cb 01       	movw	r24, r22
    5ef6:	bc 01       	movw	r22, r24
    5ef8:	cd 01       	movw	r24, r26
    5efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5efe:	dc 01       	movw	r26, r24
    5f00:	cb 01       	movw	r24, r22
    5f02:	9e 83       	std	Y+6, r25	; 0x06
    5f04:	8d 83       	std	Y+5, r24	; 0x05
    5f06:	0f c0       	rjmp	.+30     	; 0x5f26 <main+0x1852>
    5f08:	88 ec       	ldi	r24, 0xC8	; 200
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	9c 83       	std	Y+4, r25	; 0x04
    5f0e:	8b 83       	std	Y+3, r24	; 0x03
    5f10:	8b 81       	ldd	r24, Y+3	; 0x03
    5f12:	9c 81       	ldd	r25, Y+4	; 0x04
    5f14:	01 97       	sbiw	r24, 0x01	; 1
    5f16:	f1 f7       	brne	.-4      	; 0x5f14 <main+0x1840>
    5f18:	9c 83       	std	Y+4, r25	; 0x04
    5f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f20:	01 97       	sbiw	r24, 0x01	; 1
    5f22:	9e 83       	std	Y+6, r25	; 0x06
    5f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f26:	8d 81       	ldd	r24, Y+5	; 0x05
    5f28:	9e 81       	ldd	r25, Y+6	; 0x06
    5f2a:	00 97       	sbiw	r24, 0x00	; 0
    5f2c:	69 f7       	brne	.-38     	; 0x5f08 <main+0x1834>
    5f2e:	41 cb       	rjmp	.-2430   	; 0x55b2 <main+0xede>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f30:	6f 81       	ldd	r22, Y+7	; 0x07
    5f32:	78 85       	ldd	r23, Y+8	; 0x08
    5f34:	89 85       	ldd	r24, Y+9	; 0x09
    5f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3c:	dc 01       	movw	r26, r24
    5f3e:	cb 01       	movw	r24, r22
    5f40:	9e 83       	std	Y+6, r25	; 0x06
    5f42:	8d 83       	std	Y+5, r24	; 0x05
    5f44:	8d 81       	ldd	r24, Y+5	; 0x05
    5f46:	9e 81       	ldd	r25, Y+6	; 0x06
    5f48:	9a 83       	std	Y+2, r25	; 0x02
    5f4a:	89 83       	std	Y+1, r24	; 0x01
    5f4c:	89 81       	ldd	r24, Y+1	; 0x01
    5f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	f1 f7       	brne	.-4      	; 0x5f50 <main+0x187c>
    5f54:	9a 83       	std	Y+2, r25	; 0x02
    5f56:	89 83       	std	Y+1, r24	; 0x01
    5f58:	2c cb       	rjmp	.-2472   	; 0x55b2 <main+0xede>
				_delay_ms(10);
			}
			BUZ_vOff(BUZ0);
    5f5a:	60 91 33 03 	lds	r22, 0x0333
    5f5e:	70 91 34 03 	lds	r23, 0x0334
    5f62:	80 91 35 03 	lds	r24, 0x0335
    5f66:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <BUZ_vOff>
			CLCD_vClearScreen();
    5f6a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("1 - set time");
    5f6e:	83 ec       	ldi	r24, 0xC3	; 195
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2,1);
    5f76:	82 e0       	ldi	r24, 0x02	; 2
    5f78:	61 e0       	ldi	r22, 0x01	; 1
    5f7a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("2 - select mode");
    5f7e:	80 ed       	ldi	r24, 0xD0	; 208
    5f80:	90 e0       	ldi	r25, 0x00	; 0
    5f82:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    5f86:	83 e0       	ldi	r24, 0x03	; 3
    5f88:	61 e0       	ldi	r22, 0x01	; 1
    5f8a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    5f8e:	85 e9       	ldi	r24, 0x95	; 149
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    5f96:	84 e0       	ldi	r24, 0x04	; 4
    5f98:	61 e0       	ldi	r22, 0x01	; 1
    5f9a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("4 - Get Temp");
    5f9e:	8d ef       	ldi	r24, 0xFD	; 253
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    5fa6:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <main+0x104>

00005faa <Set_Time>:

//===================================================================/

// Function to set time
void Set_Time()
{
    5faa:	df 93       	push	r29
    5fac:	cf 93       	push	r28
    5fae:	cd b7       	in	r28, 0x3d	; 61
    5fb0:	de b7       	in	r29, 0x3e	; 62
    5fb2:	6c 97       	sbiw	r28, 0x1c	; 28
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    5fbe:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    5fc2:	8a e0       	ldi	r24, 0x0A	; 10
    5fc4:	91 e0       	ldi	r25, 0x01	; 1
    5fc6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    5fca:	82 e0       	ldi	r24, 0x02	; 2
    5fcc:	61 e0       	ldi	r22, 0x01	; 1
    5fce:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    5fd2:	8b e1       	ldi	r24, 0x1B	; 27
    5fd4:	91 e0       	ldi	r25, 0x01	; 1
    5fd6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	/* Select time mode: 12 Hours or 24 Hours */
	do
	{
		mode = KPD_u8GetPressed();
    5fda:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    5fde:	80 93 11 03 	sts	0x0311, r24

		if (mode != NOTPRESSED && (mode != mode_12Hours && mode != mode_24Hours))
    5fe2:	80 91 11 03 	lds	r24, 0x0311
    5fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    5fe8:	09 f4       	brne	.+2      	; 0x5fec <Set_Time+0x42>
    5fea:	90 c0       	rjmp	.+288    	; 0x610c <Set_Time+0x162>
    5fec:	80 91 11 03 	lds	r24, 0x0311
    5ff0:	81 33       	cpi	r24, 0x31	; 49
    5ff2:	09 f4       	brne	.+2      	; 0x5ff6 <Set_Time+0x4c>
    5ff4:	8b c0       	rjmp	.+278    	; 0x610c <Set_Time+0x162>
    5ff6:	80 91 11 03 	lds	r24, 0x0311
    5ffa:	82 33       	cpi	r24, 0x32	; 50
    5ffc:	09 f4       	brne	.+2      	; 0x6000 <Set_Time+0x56>
    5ffe:	86 c0       	rjmp	.+268    	; 0x610c <Set_Time+0x162>
		{
			// Handle wrong input
			CLCD_vClearScreen();
    6000:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("wrong choise");
    6004:	8c e2       	ldi	r24, 0x2C	; 44
    6006:	91 e0       	ldi	r25, 0x01	; 1
    6008:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	aa ef       	ldi	r26, 0xFA	; 250
    6012:	b3 e4       	ldi	r27, 0x43	; 67
    6014:	89 8f       	std	Y+25, r24	; 0x19
    6016:	9a 8f       	std	Y+26, r25	; 0x1a
    6018:	ab 8f       	std	Y+27, r26	; 0x1b
    601a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    601c:	69 8d       	ldd	r22, Y+25	; 0x19
    601e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6024:	20 e0       	ldi	r18, 0x00	; 0
    6026:	30 e0       	ldi	r19, 0x00	; 0
    6028:	4a ef       	ldi	r20, 0xFA	; 250
    602a:	54 e4       	ldi	r21, 0x44	; 68
    602c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6030:	dc 01       	movw	r26, r24
    6032:	cb 01       	movw	r24, r22
    6034:	8d 8b       	std	Y+21, r24	; 0x15
    6036:	9e 8b       	std	Y+22, r25	; 0x16
    6038:	af 8b       	std	Y+23, r26	; 0x17
    603a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    603c:	6d 89       	ldd	r22, Y+21	; 0x15
    603e:	7e 89       	ldd	r23, Y+22	; 0x16
    6040:	8f 89       	ldd	r24, Y+23	; 0x17
    6042:	98 8d       	ldd	r25, Y+24	; 0x18
    6044:	20 e0       	ldi	r18, 0x00	; 0
    6046:	30 e0       	ldi	r19, 0x00	; 0
    6048:	40 e8       	ldi	r20, 0x80	; 128
    604a:	5f e3       	ldi	r21, 0x3F	; 63
    604c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6050:	88 23       	and	r24, r24
    6052:	2c f4       	brge	.+10     	; 0x605e <Set_Time+0xb4>
		__ticks = 1;
    6054:	81 e0       	ldi	r24, 0x01	; 1
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	9c 8b       	std	Y+20, r25	; 0x14
    605a:	8b 8b       	std	Y+19, r24	; 0x13
    605c:	3f c0       	rjmp	.+126    	; 0x60dc <Set_Time+0x132>
	else if (__tmp > 65535)
    605e:	6d 89       	ldd	r22, Y+21	; 0x15
    6060:	7e 89       	ldd	r23, Y+22	; 0x16
    6062:	8f 89       	ldd	r24, Y+23	; 0x17
    6064:	98 8d       	ldd	r25, Y+24	; 0x18
    6066:	20 e0       	ldi	r18, 0x00	; 0
    6068:	3f ef       	ldi	r19, 0xFF	; 255
    606a:	4f e7       	ldi	r20, 0x7F	; 127
    606c:	57 e4       	ldi	r21, 0x47	; 71
    606e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6072:	18 16       	cp	r1, r24
    6074:	4c f5       	brge	.+82     	; 0x60c8 <Set_Time+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6076:	69 8d       	ldd	r22, Y+25	; 0x19
    6078:	7a 8d       	ldd	r23, Y+26	; 0x1a
    607a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    607c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	30 e0       	ldi	r19, 0x00	; 0
    6082:	40 e2       	ldi	r20, 0x20	; 32
    6084:	51 e4       	ldi	r21, 0x41	; 65
    6086:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    608a:	dc 01       	movw	r26, r24
    608c:	cb 01       	movw	r24, r22
    608e:	bc 01       	movw	r22, r24
    6090:	cd 01       	movw	r24, r26
    6092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6096:	dc 01       	movw	r26, r24
    6098:	cb 01       	movw	r24, r22
    609a:	9c 8b       	std	Y+20, r25	; 0x14
    609c:	8b 8b       	std	Y+19, r24	; 0x13
    609e:	0f c0       	rjmp	.+30     	; 0x60be <Set_Time+0x114>
    60a0:	88 ec       	ldi	r24, 0xC8	; 200
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	9a 8b       	std	Y+18, r25	; 0x12
    60a6:	89 8b       	std	Y+17, r24	; 0x11
    60a8:	89 89       	ldd	r24, Y+17	; 0x11
    60aa:	9a 89       	ldd	r25, Y+18	; 0x12
    60ac:	01 97       	sbiw	r24, 0x01	; 1
    60ae:	f1 f7       	brne	.-4      	; 0x60ac <Set_Time+0x102>
    60b0:	9a 8b       	std	Y+18, r25	; 0x12
    60b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60b4:	8b 89       	ldd	r24, Y+19	; 0x13
    60b6:	9c 89       	ldd	r25, Y+20	; 0x14
    60b8:	01 97       	sbiw	r24, 0x01	; 1
    60ba:	9c 8b       	std	Y+20, r25	; 0x14
    60bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60be:	8b 89       	ldd	r24, Y+19	; 0x13
    60c0:	9c 89       	ldd	r25, Y+20	; 0x14
    60c2:	00 97       	sbiw	r24, 0x00	; 0
    60c4:	69 f7       	brne	.-38     	; 0x60a0 <Set_Time+0xf6>
    60c6:	14 c0       	rjmp	.+40     	; 0x60f0 <Set_Time+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60c8:	6d 89       	ldd	r22, Y+21	; 0x15
    60ca:	7e 89       	ldd	r23, Y+22	; 0x16
    60cc:	8f 89       	ldd	r24, Y+23	; 0x17
    60ce:	98 8d       	ldd	r25, Y+24	; 0x18
    60d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60d4:	dc 01       	movw	r26, r24
    60d6:	cb 01       	movw	r24, r22
    60d8:	9c 8b       	std	Y+20, r25	; 0x14
    60da:	8b 8b       	std	Y+19, r24	; 0x13
    60dc:	8b 89       	ldd	r24, Y+19	; 0x13
    60de:	9c 89       	ldd	r25, Y+20	; 0x14
    60e0:	98 8b       	std	Y+16, r25	; 0x10
    60e2:	8f 87       	std	Y+15, r24	; 0x0f
    60e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    60e6:	98 89       	ldd	r25, Y+16	; 0x10
    60e8:	01 97       	sbiw	r24, 0x01	; 1
    60ea:	f1 f7       	brne	.-4      	; 0x60e8 <Set_Time+0x13e>
    60ec:	98 8b       	std	Y+16, r25	; 0x10
    60ee:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_vClearScreen();
    60f0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    60f4:	8a e0       	ldi	r24, 0x0A	; 10
    60f6:	91 e0       	ldi	r25, 0x01	; 1
    60f8:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    60fc:	82 e0       	ldi	r24, 0x02	; 2
    60fe:	61 e0       	ldi	r22, 0x01	; 1
    6100:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    6104:	8b e1       	ldi	r24, 0x1B	; 27
    6106:	91 e0       	ldi	r25, 0x01	; 1
    6108:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
		}
	}while (mode == NOTPRESSED || (mode != mode_12Hours && mode != mode_24Hours));
    610c:	80 91 11 03 	lds	r24, 0x0311
    6110:	8f 3f       	cpi	r24, 0xFF	; 255
    6112:	09 f4       	brne	.+2      	; 0x6116 <Set_Time+0x16c>
    6114:	62 cf       	rjmp	.-316    	; 0x5fda <Set_Time+0x30>
    6116:	80 91 11 03 	lds	r24, 0x0311
    611a:	81 33       	cpi	r24, 0x31	; 49
    611c:	29 f0       	breq	.+10     	; 0x6128 <Set_Time+0x17e>
    611e:	80 91 11 03 	lds	r24, 0x0311
    6122:	82 33       	cpi	r24, 0x32	; 50
    6124:	09 f0       	breq	.+2      	; 0x6128 <Set_Time+0x17e>
    6126:	59 cf       	rjmp	.-334    	; 0x5fda <Set_Time+0x30>

	// Set AM or PM flag based on selected mode
	if (mode ==  mode_12Hours)
    6128:	80 91 11 03 	lds	r24, 0x0311
    612c:	81 33       	cpi	r24, 0x31	; 49
    612e:	21 f4       	brne	.+8      	; 0x6138 <Set_Time+0x18e>
	{
		Mode_Flag = 1;
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	80 93 0f 03 	sts	0x030F, r24
    6136:	06 c0       	rjmp	.+12     	; 0x6144 <Set_Time+0x19a>
	}
	else if (mode == mode_24Hours)
    6138:	80 91 11 03 	lds	r24, 0x0311
    613c:	82 33       	cpi	r24, 0x32	; 50
    613e:	11 f4       	brne	.+4      	; 0x6144 <Set_Time+0x19a>
	{
		Mode_Flag = 0;
    6140:	10 92 0f 03 	sts	0x030F, r1
	else
	{

	}

	CLCD_vClearScreen();
    6144:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>

	// Display the current time on the CLCD
	CLCD_vSendData(Hour /10 +48);
    6148:	80 91 10 03 	lds	r24, 0x0310
    614c:	9a e0       	ldi	r25, 0x0A	; 10
    614e:	69 2f       	mov	r22, r25
    6150:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6154:	80 5d       	subi	r24, 0xD0	; 208
    6156:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendData(Hour %10 +48);
    615a:	80 91 10 03 	lds	r24, 0x0310
    615e:	9a e0       	ldi	r25, 0x0A	; 10
    6160:	69 2f       	mov	r22, r25
    6162:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6166:	89 2f       	mov	r24, r25
    6168:	80 5d       	subi	r24, 0xD0	; 208
    616a:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    616e:	89 e3       	ldi	r24, 0x39	; 57
    6170:	91 e0       	ldi	r25, 0x01	; 1
    6172:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSendData(Minute/10 + 48);
    6176:	80 91 52 03 	lds	r24, 0x0352
    617a:	9a e0       	ldi	r25, 0x0A	; 10
    617c:	69 2f       	mov	r22, r25
    617e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6182:	80 5d       	subi	r24, 0xD0	; 208
    6184:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendData(Minute%10 + 48);
    6188:	80 91 52 03 	lds	r24, 0x0352
    618c:	9a e0       	ldi	r25, 0x0A	; 10
    618e:	69 2f       	mov	r22, r25
    6190:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6194:	89 2f       	mov	r24, r25
    6196:	80 5d       	subi	r24, 0xD0	; 208
    6198:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    619c:	89 e3       	ldi	r24, 0x39	; 57
    619e:	91 e0       	ldi	r25, 0x01	; 1
    61a0:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSendData(Second/10 + 48);
    61a4:	80 91 53 03 	lds	r24, 0x0353
    61a8:	9a e0       	ldi	r25, 0x0A	; 10
    61aa:	69 2f       	mov	r22, r25
    61ac:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    61b0:	80 5d       	subi	r24, 0xD0	; 208
    61b2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendData(Second%10 + 48);
    61b6:	80 91 53 03 	lds	r24, 0x0353
    61ba:	9a e0       	ldi	r25, 0x0A	; 10
    61bc:	69 2f       	mov	r22, r25
    61be:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    61c2:	89 2f       	mov	r24, r25
    61c4:	80 5d       	subi	r24, 0xD0	; 208
    61c6:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	CLCD_vSendData(' ');
    61ca:	80 e2       	ldi	r24, 0x20	; 32
    61cc:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

	// Display AM/PM if in 12-hour mode
	if (mode == '1')
    61d0:	80 91 11 03 	lds	r24, 0x0311
    61d4:	81 33       	cpi	r24, 0x31	; 49
    61d6:	c9 f4       	brne	.+50     	; 0x620a <Set_Time+0x260>
	{
		if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    61d8:	eb e3       	ldi	r30, 0x3B	; 59
    61da:	f0 e0       	ldi	r31, 0x00	; 0
    61dc:	80 81       	ld	r24, Z
    61de:	88 2f       	mov	r24, r24
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	88 70       	andi	r24, 0x08	; 8
    61e4:	90 70       	andi	r25, 0x00	; 0
    61e6:	95 95       	asr	r25
    61e8:	87 95       	ror	r24
    61ea:	95 95       	asr	r25
    61ec:	87 95       	ror	r24
    61ee:	95 95       	asr	r25
    61f0:	87 95       	ror	r24
    61f2:	81 30       	cpi	r24, 0x01	; 1
    61f4:	91 05       	cpc	r25, r1
    61f6:	29 f4       	brne	.+10     	; 0x6202 <Set_Time+0x258>
		{
			CLCD_vSendString("AM");
    61f8:	8d e3       	ldi	r24, 0x3D	; 61
    61fa:	91 e0       	ldi	r25, 0x01	; 1
    61fc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    6200:	04 c0       	rjmp	.+8      	; 0x620a <Set_Time+0x260>
		}
		else
		{
			CLCD_vSendString("PM");
    6202:	80 e4       	ldi	r24, 0x40	; 64
    6204:	91 e0       	ldi	r25, 0x01	; 1
    6206:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
		}
	}

	/* Change Time */
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    620a:	8e e0       	ldi	r24, 0x0E	; 14
    620c:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
	CLCD_vSetPosition(1,1);
    6210:	81 e0       	ldi	r24, 0x01	; 1
    6212:	61 e0       	ldi	r22, 0x01	; 1
    6214:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>

	/* Set hours */
	// First Digit
	do
	{
		press = KPD_u8GetPressed();
    6218:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    621c:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6220:	80 91 56 03 	lds	r24, 0x0356
    6224:	8f 3f       	cpi	r24, 0xFF	; 255
    6226:	c1 f3       	breq	.-16     	; 0x6218 <Set_Time+0x26e>
	CLCD_vSetPosition(1,1);
    6228:	81 e0       	ldi	r24, 0x01	; 1
    622a:	61 e0       	ldi	r22, 0x01	; 1
    622c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendData( press );
    6230:	80 91 56 03 	lds	r24, 0x0356
    6234:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	Hour = (press - 48) * 10;
    6238:	80 91 56 03 	lds	r24, 0x0356
    623c:	88 2f       	mov	r24, r24
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	9c 01       	movw	r18, r24
    6242:	22 0f       	add	r18, r18
    6244:	33 1f       	adc	r19, r19
    6246:	c9 01       	movw	r24, r18
    6248:	88 0f       	add	r24, r24
    624a:	99 1f       	adc	r25, r25
    624c:	88 0f       	add	r24, r24
    624e:	99 1f       	adc	r25, r25
    6250:	82 0f       	add	r24, r18
    6252:	93 1f       	adc	r25, r19
    6254:	80 5e       	subi	r24, 0xE0	; 224
    6256:	80 93 10 03 	sts	0x0310, r24

	// Second Digit
	do
	{
		press = KPD_u8GetPressed();
    625a:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    625e:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6262:	80 91 56 03 	lds	r24, 0x0356
    6266:	8f 3f       	cpi	r24, 0xFF	; 255
    6268:	c1 f3       	breq	.-16     	; 0x625a <Set_Time+0x2b0>
	CLCD_vSendData(press);
    626a:	80 91 56 03 	lds	r24, 0x0356
    626e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

	// Calculate total hours
	Hour += (press - 48) ;
    6272:	90 91 56 03 	lds	r25, 0x0356
    6276:	80 91 10 03 	lds	r24, 0x0310
    627a:	89 0f       	add	r24, r25
    627c:	80 53       	subi	r24, 0x30	; 48
    627e:	80 93 10 03 	sts	0x0310, r24

	/* Check mode to change hour limit
	 * ==> if mode is 24 hours --> hour is less than 24
	 * ==> if mode is 12 hours --> hour is less than 12
	 */
	if (mode == mode_12Hours)
    6282:	80 91 11 03 	lds	r24, 0x0311
    6286:	81 33       	cpi	r24, 0x31	; 49
    6288:	19 f5       	brne	.+70     	; 0x62d0 <Set_Time+0x326>
	{
		if (Hour > 12 || Hour == 0)
    628a:	80 91 10 03 	lds	r24, 0x0310
    628e:	8d 30       	cpi	r24, 0x0D	; 13
    6290:	20 f4       	brcc	.+8      	; 0x629a <Set_Time+0x2f0>
    6292:	80 91 10 03 	lds	r24, 0x0310
    6296:	88 23       	and	r24, r24
    6298:	e1 f5       	brne	.+120    	; 0x6312 <Set_Time+0x368>
		{
			Hour = 12;
    629a:	8c e0       	ldi	r24, 0x0C	; 12
    629c:	80 93 10 03 	sts	0x0310, r24
			CLCD_vSetPosition(1, 1);
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	61 e0       	ldi	r22, 0x01	; 1
    62a4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendData(Hour /10 +48);
    62a8:	80 91 10 03 	lds	r24, 0x0310
    62ac:	9a e0       	ldi	r25, 0x0A	; 10
    62ae:	69 2f       	mov	r22, r25
    62b0:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    62b4:	80 5d       	subi	r24, 0xD0	; 208
    62b6:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendData(Hour %10 +48);
    62ba:	80 91 10 03 	lds	r24, 0x0310
    62be:	9a e0       	ldi	r25, 0x0A	; 10
    62c0:	69 2f       	mov	r22, r25
    62c2:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    62c6:	89 2f       	mov	r24, r25
    62c8:	80 5d       	subi	r24, 0xD0	; 208
    62ca:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    62ce:	21 c0       	rjmp	.+66     	; 0x6312 <Set_Time+0x368>
		else
		{

		}
	}
	else if (mode == mode_24Hours)
    62d0:	80 91 11 03 	lds	r24, 0x0311
    62d4:	82 33       	cpi	r24, 0x32	; 50
    62d6:	e9 f4       	brne	.+58     	; 0x6312 <Set_Time+0x368>
	{
		if (Hour  > 23)
    62d8:	80 91 10 03 	lds	r24, 0x0310
    62dc:	88 31       	cpi	r24, 0x18	; 24
    62de:	c8 f0       	brcs	.+50     	; 0x6312 <Set_Time+0x368>
		{
			Hour = 0;
    62e0:	10 92 10 03 	sts	0x0310, r1
			CLCD_vSetPosition(1, 1);
    62e4:	81 e0       	ldi	r24, 0x01	; 1
    62e6:	61 e0       	ldi	r22, 0x01	; 1
    62e8:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendData(Hour /10 +48);
    62ec:	80 91 10 03 	lds	r24, 0x0310
    62f0:	9a e0       	ldi	r25, 0x0A	; 10
    62f2:	69 2f       	mov	r22, r25
    62f4:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    62f8:	80 5d       	subi	r24, 0xD0	; 208
    62fa:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendData(Hour %10 +48);
    62fe:	80 91 10 03 	lds	r24, 0x0310
    6302:	9a e0       	ldi	r25, 0x0A	; 10
    6304:	69 2f       	mov	r22, r25
    6306:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    630a:	89 2f       	mov	r24, r25
    630c:	80 5d       	subi	r24, 0xD0	; 208
    630e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

	}
	/* Set minutes and seconds similar to hours */

	// Set minutes
	CLCD_vSetPosition(1,6);
    6312:	81 e0       	ldi	r24, 0x01	; 1
    6314:	66 e0       	ldi	r22, 0x06	; 6
    6316:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	do
	{
		press = KPD_u8GetPressed();
    631a:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    631e:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6322:	80 91 56 03 	lds	r24, 0x0356
    6326:	8f 3f       	cpi	r24, 0xFF	; 255
    6328:	c1 f3       	breq	.-16     	; 0x631a <Set_Time+0x370>
	CLCD_vSendData(press);
    632a:	80 91 56 03 	lds	r24, 0x0356
    632e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	Minute = (press - 48) * 10;
    6332:	80 91 56 03 	lds	r24, 0x0356
    6336:	88 2f       	mov	r24, r24
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	9c 01       	movw	r18, r24
    633c:	22 0f       	add	r18, r18
    633e:	33 1f       	adc	r19, r19
    6340:	c9 01       	movw	r24, r18
    6342:	88 0f       	add	r24, r24
    6344:	99 1f       	adc	r25, r25
    6346:	88 0f       	add	r24, r24
    6348:	99 1f       	adc	r25, r25
    634a:	82 0f       	add	r24, r18
    634c:	93 1f       	adc	r25, r19
    634e:	80 5e       	subi	r24, 0xE0	; 224
    6350:	80 93 52 03 	sts	0x0352, r24

	do
	{
		press = KPD_u8GetPressed();
    6354:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6358:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    635c:	80 91 56 03 	lds	r24, 0x0356
    6360:	8f 3f       	cpi	r24, 0xFF	; 255
    6362:	c1 f3       	breq	.-16     	; 0x6354 <Set_Time+0x3aa>
	CLCD_vSendData(press);
    6364:	80 91 56 03 	lds	r24, 0x0356
    6368:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

	Minute += (press - 48);
    636c:	90 91 56 03 	lds	r25, 0x0356
    6370:	80 91 52 03 	lds	r24, 0x0352
    6374:	89 0f       	add	r24, r25
    6376:	80 53       	subi	r24, 0x30	; 48
    6378:	80 93 52 03 	sts	0x0352, r24


	if (Minute > 59)
    637c:	80 91 52 03 	lds	r24, 0x0352
    6380:	8c 33       	cpi	r24, 0x3C	; 60
    6382:	c8 f0       	brcs	.+50     	; 0x63b6 <Set_Time+0x40c>
	{
		Minute = 0;
    6384:	10 92 52 03 	sts	0x0352, r1
		CLCD_vSetPosition(1,6);
    6388:	81 e0       	ldi	r24, 0x01	; 1
    638a:	66 e0       	ldi	r22, 0x06	; 6
    638c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
		CLCD_vSendData(Minute/10 + 48);
    6390:	80 91 52 03 	lds	r24, 0x0352
    6394:	9a e0       	ldi	r25, 0x0A	; 10
    6396:	69 2f       	mov	r22, r25
    6398:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    639c:	80 5d       	subi	r24, 0xD0	; 208
    639e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		CLCD_vSendData(Minute%10 + 48);
    63a2:	80 91 52 03 	lds	r24, 0x0352
    63a6:	9a e0       	ldi	r25, 0x0A	; 10
    63a8:	69 2f       	mov	r22, r25
    63aa:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    63ae:	89 2f       	mov	r24, r25
    63b0:	80 5d       	subi	r24, 0xD0	; 208
    63b2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	}

	// Set seconds
	CLCD_vSetPosition(1,11);
    63b6:	81 e0       	ldi	r24, 0x01	; 1
    63b8:	6b e0       	ldi	r22, 0x0B	; 11
    63ba:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	do
	{
		press = KPD_u8GetPressed();
    63be:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    63c2:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    63c6:	80 91 56 03 	lds	r24, 0x0356
    63ca:	8f 3f       	cpi	r24, 0xFF	; 255
    63cc:	c1 f3       	breq	.-16     	; 0x63be <Set_Time+0x414>
	CLCD_vSendData(press);
    63ce:	80 91 56 03 	lds	r24, 0x0356
    63d2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	Second = (press - 48) * 10;
    63d6:	80 91 56 03 	lds	r24, 0x0356
    63da:	88 2f       	mov	r24, r24
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	9c 01       	movw	r18, r24
    63e0:	22 0f       	add	r18, r18
    63e2:	33 1f       	adc	r19, r19
    63e4:	c9 01       	movw	r24, r18
    63e6:	88 0f       	add	r24, r24
    63e8:	99 1f       	adc	r25, r25
    63ea:	88 0f       	add	r24, r24
    63ec:	99 1f       	adc	r25, r25
    63ee:	82 0f       	add	r24, r18
    63f0:	93 1f       	adc	r25, r19
    63f2:	80 5e       	subi	r24, 0xE0	; 224
    63f4:	80 93 53 03 	sts	0x0353, r24

	do
	{
		press = KPD_u8GetPressed();
    63f8:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    63fc:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    6400:	80 91 56 03 	lds	r24, 0x0356
    6404:	8f 3f       	cpi	r24, 0xFF	; 255
    6406:	c1 f3       	breq	.-16     	; 0x63f8 <Set_Time+0x44e>
	CLCD_vSendData(press);
    6408:	80 91 56 03 	lds	r24, 0x0356
    640c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

	Second += (press - 48);
    6410:	90 91 56 03 	lds	r25, 0x0356
    6414:	80 91 53 03 	lds	r24, 0x0353
    6418:	89 0f       	add	r24, r25
    641a:	80 53       	subi	r24, 0x30	; 48
    641c:	80 93 53 03 	sts	0x0353, r24

	if (Second > 59)
    6420:	80 91 53 03 	lds	r24, 0x0353
    6424:	8c 33       	cpi	r24, 0x3C	; 60
    6426:	c8 f0       	brcs	.+50     	; 0x645a <Set_Time+0x4b0>
	{
		Second = 0;
    6428:	10 92 53 03 	sts	0x0353, r1
		CLCD_vSetPosition(1,11);
    642c:	81 e0       	ldi	r24, 0x01	; 1
    642e:	6b e0       	ldi	r22, 0x0B	; 11
    6430:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
		CLCD_vSendData(Second/10 + 48);
    6434:	80 91 53 03 	lds	r24, 0x0353
    6438:	9a e0       	ldi	r25, 0x0A	; 10
    643a:	69 2f       	mov	r22, r25
    643c:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6440:	80 5d       	subi	r24, 0xD0	; 208
    6442:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		CLCD_vSendData(Second%10 + 48);
    6446:	80 91 53 03 	lds	r24, 0x0353
    644a:	9a e0       	ldi	r25, 0x0A	; 10
    644c:	69 2f       	mov	r22, r25
    644e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6452:	89 2f       	mov	r24, r25
    6454:	80 5d       	subi	r24, 0xD0	; 208
    6456:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
	}

	/* Select AM or PM if mode is 12-hour */
	CLCD_vSetPosition(2, 1);
    645a:	82 e0       	ldi	r24, 0x02	; 2
    645c:	61 e0       	ldi	r22, 0x01	; 1
    645e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("1 : AM    2 : PM");
    6462:	83 e4       	ldi	r24, 0x43	; 67
    6464:	91 e0       	ldi	r25, 0x01	; 1
    6466:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>

	if (mode == mode_12Hours)
    646a:	80 91 11 03 	lds	r24, 0x0311
    646e:	81 33       	cpi	r24, 0x31	; 49
    6470:	09 f0       	breq	.+2      	; 0x6474 <Set_Time+0x4ca>
    6472:	01 c1       	rjmp	.+514    	; 0x6676 <Set_Time+0x6cc>
	{
		do
		{
			day_time = KPD_u8GetPressed();
    6474:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6478:	80 93 57 03 	sts	0x0357, r24

			if (day_time != NOTPRESSED && (day_time != '1' && day_time != '2'))
    647c:	80 91 57 03 	lds	r24, 0x0357
    6480:	8f 3f       	cpi	r24, 0xFF	; 255
    6482:	09 f4       	brne	.+2      	; 0x6486 <Set_Time+0x4dc>
    6484:	ea c0       	rjmp	.+468    	; 0x665a <Set_Time+0x6b0>
    6486:	80 91 57 03 	lds	r24, 0x0357
    648a:	81 33       	cpi	r24, 0x31	; 49
    648c:	09 f4       	brne	.+2      	; 0x6490 <Set_Time+0x4e6>
    648e:	e5 c0       	rjmp	.+458    	; 0x665a <Set_Time+0x6b0>
    6490:	80 91 57 03 	lds	r24, 0x0357
    6494:	82 33       	cpi	r24, 0x32	; 50
    6496:	09 f4       	brne	.+2      	; 0x649a <Set_Time+0x4f0>
    6498:	e0 c0       	rjmp	.+448    	; 0x665a <Set_Time+0x6b0>
			{
				CLCD_vClearScreen();
    649a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
				CLCD_vSendString("Wrong Choise");
    649e:	84 e5       	ldi	r24, 0x54	; 84
    64a0:	91 e0       	ldi	r25, 0x01	; 1
    64a2:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    64a6:	80 e0       	ldi	r24, 0x00	; 0
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	aa ef       	ldi	r26, 0xFA	; 250
    64ac:	b3 e4       	ldi	r27, 0x43	; 67
    64ae:	8b 87       	std	Y+11, r24	; 0x0b
    64b0:	9c 87       	std	Y+12, r25	; 0x0c
    64b2:	ad 87       	std	Y+13, r26	; 0x0d
    64b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    64b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    64ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    64bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    64be:	20 e0       	ldi	r18, 0x00	; 0
    64c0:	30 e0       	ldi	r19, 0x00	; 0
    64c2:	4a ef       	ldi	r20, 0xFA	; 250
    64c4:	54 e4       	ldi	r21, 0x44	; 68
    64c6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    64ca:	dc 01       	movw	r26, r24
    64cc:	cb 01       	movw	r24, r22
    64ce:	8f 83       	std	Y+7, r24	; 0x07
    64d0:	98 87       	std	Y+8, r25	; 0x08
    64d2:	a9 87       	std	Y+9, r26	; 0x09
    64d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    64d6:	6f 81       	ldd	r22, Y+7	; 0x07
    64d8:	78 85       	ldd	r23, Y+8	; 0x08
    64da:	89 85       	ldd	r24, Y+9	; 0x09
    64dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    64de:	20 e0       	ldi	r18, 0x00	; 0
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	40 e8       	ldi	r20, 0x80	; 128
    64e4:	5f e3       	ldi	r21, 0x3F	; 63
    64e6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    64ea:	88 23       	and	r24, r24
    64ec:	2c f4       	brge	.+10     	; 0x64f8 <Set_Time+0x54e>
		__ticks = 1;
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	9e 83       	std	Y+6, r25	; 0x06
    64f4:	8d 83       	std	Y+5, r24	; 0x05
    64f6:	3f c0       	rjmp	.+126    	; 0x6576 <Set_Time+0x5cc>
	else if (__tmp > 65535)
    64f8:	6f 81       	ldd	r22, Y+7	; 0x07
    64fa:	78 85       	ldd	r23, Y+8	; 0x08
    64fc:	89 85       	ldd	r24, Y+9	; 0x09
    64fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	3f ef       	ldi	r19, 0xFF	; 255
    6504:	4f e7       	ldi	r20, 0x7F	; 127
    6506:	57 e4       	ldi	r21, 0x47	; 71
    6508:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    650c:	18 16       	cp	r1, r24
    650e:	4c f5       	brge	.+82     	; 0x6562 <Set_Time+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6510:	6b 85       	ldd	r22, Y+11	; 0x0b
    6512:	7c 85       	ldd	r23, Y+12	; 0x0c
    6514:	8d 85       	ldd	r24, Y+13	; 0x0d
    6516:	9e 85       	ldd	r25, Y+14	; 0x0e
    6518:	20 e0       	ldi	r18, 0x00	; 0
    651a:	30 e0       	ldi	r19, 0x00	; 0
    651c:	40 e2       	ldi	r20, 0x20	; 32
    651e:	51 e4       	ldi	r21, 0x41	; 65
    6520:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6524:	dc 01       	movw	r26, r24
    6526:	cb 01       	movw	r24, r22
    6528:	bc 01       	movw	r22, r24
    652a:	cd 01       	movw	r24, r26
    652c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6530:	dc 01       	movw	r26, r24
    6532:	cb 01       	movw	r24, r22
    6534:	9e 83       	std	Y+6, r25	; 0x06
    6536:	8d 83       	std	Y+5, r24	; 0x05
    6538:	0f c0       	rjmp	.+30     	; 0x6558 <Set_Time+0x5ae>
    653a:	88 ec       	ldi	r24, 0xC8	; 200
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	9c 83       	std	Y+4, r25	; 0x04
    6540:	8b 83       	std	Y+3, r24	; 0x03
    6542:	8b 81       	ldd	r24, Y+3	; 0x03
    6544:	9c 81       	ldd	r25, Y+4	; 0x04
    6546:	01 97       	sbiw	r24, 0x01	; 1
    6548:	f1 f7       	brne	.-4      	; 0x6546 <Set_Time+0x59c>
    654a:	9c 83       	std	Y+4, r25	; 0x04
    654c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    654e:	8d 81       	ldd	r24, Y+5	; 0x05
    6550:	9e 81       	ldd	r25, Y+6	; 0x06
    6552:	01 97       	sbiw	r24, 0x01	; 1
    6554:	9e 83       	std	Y+6, r25	; 0x06
    6556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6558:	8d 81       	ldd	r24, Y+5	; 0x05
    655a:	9e 81       	ldd	r25, Y+6	; 0x06
    655c:	00 97       	sbiw	r24, 0x00	; 0
    655e:	69 f7       	brne	.-38     	; 0x653a <Set_Time+0x590>
    6560:	14 c0       	rjmp	.+40     	; 0x658a <Set_Time+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6562:	6f 81       	ldd	r22, Y+7	; 0x07
    6564:	78 85       	ldd	r23, Y+8	; 0x08
    6566:	89 85       	ldd	r24, Y+9	; 0x09
    6568:	9a 85       	ldd	r25, Y+10	; 0x0a
    656a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    656e:	dc 01       	movw	r26, r24
    6570:	cb 01       	movw	r24, r22
    6572:	9e 83       	std	Y+6, r25	; 0x06
    6574:	8d 83       	std	Y+5, r24	; 0x05
    6576:	8d 81       	ldd	r24, Y+5	; 0x05
    6578:	9e 81       	ldd	r25, Y+6	; 0x06
    657a:	9a 83       	std	Y+2, r25	; 0x02
    657c:	89 83       	std	Y+1, r24	; 0x01
    657e:	89 81       	ldd	r24, Y+1	; 0x01
    6580:	9a 81       	ldd	r25, Y+2	; 0x02
    6582:	01 97       	sbiw	r24, 0x01	; 1
    6584:	f1 f7       	brne	.-4      	; 0x6582 <Set_Time+0x5d8>
    6586:	9a 83       	std	Y+2, r25	; 0x02
    6588:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_vClearScreen();
    658a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
				CLCD_vSetPosition(1, 1);
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	61 e0       	ldi	r22, 0x01	; 1
    6592:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData(Hour /10 +48);
    6596:	80 91 10 03 	lds	r24, 0x0310
    659a:	9a e0       	ldi	r25, 0x0A	; 10
    659c:	69 2f       	mov	r22, r25
    659e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    65a2:	80 5d       	subi	r24, 0xD0	; 208
    65a4:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(Hour %10 +48);
    65a8:	80 91 10 03 	lds	r24, 0x0310
    65ac:	9a e0       	ldi	r25, 0x0A	; 10
    65ae:	69 2f       	mov	r22, r25
    65b0:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    65b4:	89 2f       	mov	r24, r25
    65b6:	80 5d       	subi	r24, 0xD0	; 208
    65b8:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    65bc:	89 e3       	ldi	r24, 0x39	; 57
    65be:	91 e0       	ldi	r25, 0x01	; 1
    65c0:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
				CLCD_vSendData(Minute/10 + 48);
    65c4:	80 91 52 03 	lds	r24, 0x0352
    65c8:	9a e0       	ldi	r25, 0x0A	; 10
    65ca:	69 2f       	mov	r22, r25
    65cc:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    65d0:	80 5d       	subi	r24, 0xD0	; 208
    65d2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(Minute%10 + 48);
    65d6:	80 91 52 03 	lds	r24, 0x0352
    65da:	9a e0       	ldi	r25, 0x0A	; 10
    65dc:	69 2f       	mov	r22, r25
    65de:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    65e2:	89 2f       	mov	r24, r25
    65e4:	80 5d       	subi	r24, 0xD0	; 208
    65e6:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    65ea:	89 e3       	ldi	r24, 0x39	; 57
    65ec:	91 e0       	ldi	r25, 0x01	; 1
    65ee:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
				CLCD_vSendData(Second/10 + 48);
    65f2:	80 91 53 03 	lds	r24, 0x0353
    65f6:	9a e0       	ldi	r25, 0x0A	; 10
    65f8:	69 2f       	mov	r22, r25
    65fa:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    65fe:	80 5d       	subi	r24, 0xD0	; 208
    6600:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(Second%10 + 48);
    6604:	80 91 53 03 	lds	r24, 0x0353
    6608:	9a e0       	ldi	r25, 0x0A	; 10
    660a:	69 2f       	mov	r22, r25
    660c:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6610:	89 2f       	mov	r24, r25
    6612:	80 5d       	subi	r24, 0xD0	; 208
    6614:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

				if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6618:	eb e3       	ldi	r30, 0x3B	; 59
    661a:	f0 e0       	ldi	r31, 0x00	; 0
    661c:	80 81       	ld	r24, Z
    661e:	88 2f       	mov	r24, r24
    6620:	90 e0       	ldi	r25, 0x00	; 0
    6622:	88 70       	andi	r24, 0x08	; 8
    6624:	90 70       	andi	r25, 0x00	; 0
    6626:	95 95       	asr	r25
    6628:	87 95       	ror	r24
    662a:	95 95       	asr	r25
    662c:	87 95       	ror	r24
    662e:	95 95       	asr	r25
    6630:	87 95       	ror	r24
    6632:	81 30       	cpi	r24, 0x01	; 1
    6634:	91 05       	cpc	r25, r1
    6636:	29 f4       	brne	.+10     	; 0x6642 <Set_Time+0x698>
				{
					CLCD_vSendString(" AM");
    6638:	81 e6       	ldi	r24, 0x61	; 97
    663a:	91 e0       	ldi	r25, 0x01	; 1
    663c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    6640:	04 c0       	rjmp	.+8      	; 0x664a <Set_Time+0x6a0>
				}
				else
				{
					CLCD_vSendString(" PM");
    6642:	85 e6       	ldi	r24, 0x65	; 101
    6644:	91 e0       	ldi	r25, 0x01	; 1
    6646:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
				}
				CLCD_vSetPosition(2, 1);
    664a:	82 e0       	ldi	r24, 0x02	; 2
    664c:	61 e0       	ldi	r22, 0x01	; 1
    664e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendString("1 : AM    2 : PM");
    6652:	83 e4       	ldi	r24, 0x43	; 67
    6654:	91 e0       	ldi	r25, 0x01	; 1
    6656:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			}
			else
			{

			}
		}while (day_time == NOTPRESSED || (day_time != '1' && day_time != '2'));
    665a:	80 91 57 03 	lds	r24, 0x0357
    665e:	8f 3f       	cpi	r24, 0xFF	; 255
    6660:	09 f4       	brne	.+2      	; 0x6664 <Set_Time+0x6ba>
    6662:	08 cf       	rjmp	.-496    	; 0x6474 <Set_Time+0x4ca>
    6664:	80 91 57 03 	lds	r24, 0x0357
    6668:	81 33       	cpi	r24, 0x31	; 49
    666a:	29 f0       	breq	.+10     	; 0x6676 <Set_Time+0x6cc>
    666c:	80 91 57 03 	lds	r24, 0x0357
    6670:	82 33       	cpi	r24, 0x32	; 50
    6672:	09 f0       	breq	.+2      	; 0x6676 <Set_Time+0x6cc>
    6674:	ff ce       	rjmp	.-514    	; 0x6474 <Set_Time+0x4ca>
	}
	else
	{

	}
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    6676:	8c e0       	ldi	r24, 0x0C	; 12
    6678:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
	CLCD_vClearScreen();
    667c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("Press ON to");
    6680:	80 e6       	ldi	r24, 0x60	; 96
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6688:	82 e0       	ldi	r24, 0x02	; 2
    668a:	61 e0       	ldi	r22, 0x01	; 1
    668c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    6690:	8c e6       	ldi	r24, 0x6C	; 108
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
}
    6698:	6c 96       	adiw	r28, 0x1c	; 28
    669a:	0f b6       	in	r0, 0x3f	; 63
    669c:	f8 94       	cli
    669e:	de bf       	out	0x3e, r29	; 62
    66a0:	0f be       	out	0x3f, r0	; 63
    66a2:	cd bf       	out	0x3d, r28	; 61
    66a4:	cf 91       	pop	r28
    66a6:	df 91       	pop	r29
    66a8:	08 95       	ret

000066aa <Select_Mode>:

//===================================================================/

// Function to select time mode (12-hour or 24-hour)
void Select_Mode()
{
    66aa:	df 93       	push	r29
    66ac:	cf 93       	push	r28
    66ae:	cd b7       	in	r28, 0x3d	; 61
    66b0:	de b7       	in	r29, 0x3e	; 62
    66b2:	2f 97       	sbiw	r28, 0x0f	; 15
    66b4:	0f b6       	in	r0, 0x3f	; 63
    66b6:	f8 94       	cli
    66b8:	de bf       	out	0x3e, r29	; 62
    66ba:	0f be       	out	0x3f, r0	; 63
    66bc:	cd bf       	out	0x3d, r28	; 61

	CLCD_vClearScreen();
    66be:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    66c2:	8a e0       	ldi	r24, 0x0A	; 10
    66c4:	91 e0       	ldi	r25, 0x01	; 1
    66c6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    66ca:	82 e0       	ldi	r24, 0x02	; 2
    66cc:	61 e0       	ldi	r22, 0x01	; 1
    66ce:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    66d2:	8b e1       	ldi	r24, 0x1B	; 27
    66d4:	91 e0       	ldi	r25, 0x01	; 1
    66d6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>

	do
	{

		mode = KPD_u8GetPressed();
    66da:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    66de:	80 93 11 03 	sts	0x0311, r24
		if (mode == '1')
    66e2:	80 91 11 03 	lds	r24, 0x0311
    66e6:	81 33       	cpi	r24, 0x31	; 49
    66e8:	e1 f4       	brne	.+56     	; 0x6722 <Select_Mode+0x78>
		{
			if (Mode_Flag == 0)
    66ea:	80 91 0f 03 	lds	r24, 0x030F
    66ee:	88 23       	and	r24, r24
    66f0:	09 f0       	breq	.+2      	; 0x66f4 <Select_Mode+0x4a>
    66f2:	eb c0       	rjmp	.+470    	; 0x68ca <Select_Mode+0x220>
			{
				if (Hour > 12 )
    66f4:	80 91 10 03 	lds	r24, 0x0310
    66f8:	8d 30       	cpi	r24, 0x0D	; 13
    66fa:	30 f0       	brcs	.+12     	; 0x6708 <Select_Mode+0x5e>
				{
					Hour -= 12;
    66fc:	80 91 10 03 	lds	r24, 0x0310
    6700:	8c 50       	subi	r24, 0x0C	; 12
    6702:	80 93 10 03 	sts	0x0310, r24
    6706:	09 c0       	rjmp	.+18     	; 0x671a <Select_Mode+0x70>
				}
				else if (Hour == 0)
    6708:	80 91 10 03 	lds	r24, 0x0310
    670c:	88 23       	and	r24, r24
    670e:	29 f4       	brne	.+10     	; 0x671a <Select_Mode+0x70>
				{
					Hour += 12;
    6710:	80 91 10 03 	lds	r24, 0x0310
    6714:	84 5f       	subi	r24, 0xF4	; 244
    6716:	80 93 10 03 	sts	0x0310, r24
				}
				else
				{

				}
				Mode_Flag = 1;
    671a:	81 e0       	ldi	r24, 0x01	; 1
    671c:	80 93 0f 03 	sts	0x030F, r24
    6720:	d4 c0       	rjmp	.+424    	; 0x68ca <Select_Mode+0x220>
			else
			{

			}
		}
		else if (mode == '2')
    6722:	80 91 11 03 	lds	r24, 0x0311
    6726:	82 33       	cpi	r24, 0x32	; 50
    6728:	d9 f5       	brne	.+118    	; 0x67a0 <Select_Mode+0xf6>
		{
			if (Mode_Flag == 1)
    672a:	80 91 0f 03 	lds	r24, 0x030F
    672e:	81 30       	cpi	r24, 0x01	; 1
    6730:	09 f0       	breq	.+2      	; 0x6734 <Select_Mode+0x8a>
    6732:	cb c0       	rjmp	.+406    	; 0x68ca <Select_Mode+0x220>
			{
				if (Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6734:	80 91 10 03 	lds	r24, 0x0310
    6738:	8c 30       	cpi	r24, 0x0C	; 12
    673a:	99 f4       	brne	.+38     	; 0x6762 <Select_Mode+0xb8>
    673c:	eb e3       	ldi	r30, 0x3B	; 59
    673e:	f0 e0       	ldi	r31, 0x00	; 0
    6740:	80 81       	ld	r24, Z
    6742:	88 2f       	mov	r24, r24
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	88 70       	andi	r24, 0x08	; 8
    6748:	90 70       	andi	r25, 0x00	; 0
    674a:	95 95       	asr	r25
    674c:	87 95       	ror	r24
    674e:	95 95       	asr	r25
    6750:	87 95       	ror	r24
    6752:	95 95       	asr	r25
    6754:	87 95       	ror	r24
    6756:	81 30       	cpi	r24, 0x01	; 1
    6758:	91 05       	cpc	r25, r1
    675a:	19 f4       	brne	.+6      	; 0x6762 <Select_Mode+0xb8>
				{
					Hour = 0;
    675c:	10 92 10 03 	sts	0x0310, r1
    6760:	1c c0       	rjmp	.+56     	; 0x679a <Select_Mode+0xf0>
				}
				else if(Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3 == 0))
    6762:	80 91 10 03 	lds	r24, 0x0310
    6766:	8c 30       	cpi	r24, 0x0C	; 12
    6768:	21 f4       	brne	.+8      	; 0x6772 <Select_Mode+0xc8>
    676a:	eb e3       	ldi	r30, 0x3B	; 59
    676c:	f0 e0       	ldi	r31, 0x00	; 0
    676e:	80 81       	ld	r24, Z
    6770:	14 c0       	rjmp	.+40     	; 0x679a <Select_Mode+0xf0>
				{

				}
				else if (READ_BIT(PORTA_REG, DIO_PIN3) == 0)
    6772:	eb e3       	ldi	r30, 0x3B	; 59
    6774:	f0 e0       	ldi	r31, 0x00	; 0
    6776:	80 81       	ld	r24, Z
    6778:	88 2f       	mov	r24, r24
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	88 70       	andi	r24, 0x08	; 8
    677e:	90 70       	andi	r25, 0x00	; 0
    6780:	95 95       	asr	r25
    6782:	87 95       	ror	r24
    6784:	95 95       	asr	r25
    6786:	87 95       	ror	r24
    6788:	95 95       	asr	r25
    678a:	87 95       	ror	r24
    678c:	00 97       	sbiw	r24, 0x00	; 0
    678e:	29 f4       	brne	.+10     	; 0x679a <Select_Mode+0xf0>
				{
					Hour += 12;
    6790:	80 91 10 03 	lds	r24, 0x0310
    6794:	84 5f       	subi	r24, 0xF4	; 244
    6796:	80 93 10 03 	sts	0x0310, r24
				}
				else
				{

				}
				Mode_Flag = 0;
    679a:	10 92 0f 03 	sts	0x030F, r1
    679e:	95 c0       	rjmp	.+298    	; 0x68ca <Select_Mode+0x220>
			else
			{

			}
		}
		else if (mode != NOTPRESSED && (mode != '1' && mode != '2'))
    67a0:	80 91 11 03 	lds	r24, 0x0311
    67a4:	8f 3f       	cpi	r24, 0xFF	; 255
    67a6:	09 f4       	brne	.+2      	; 0x67aa <Select_Mode+0x100>
    67a8:	90 c0       	rjmp	.+288    	; 0x68ca <Select_Mode+0x220>
    67aa:	80 91 11 03 	lds	r24, 0x0311
    67ae:	81 33       	cpi	r24, 0x31	; 49
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <Select_Mode+0x10a>
    67b2:	8b c0       	rjmp	.+278    	; 0x68ca <Select_Mode+0x220>
    67b4:	80 91 11 03 	lds	r24, 0x0311
    67b8:	82 33       	cpi	r24, 0x32	; 50
    67ba:	09 f4       	brne	.+2      	; 0x67be <Select_Mode+0x114>
    67bc:	86 c0       	rjmp	.+268    	; 0x68ca <Select_Mode+0x220>
		{
			CLCD_vClearScreen();
    67be:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("Wrong choise");
    67c2:	89 e6       	ldi	r24, 0x69	; 105
    67c4:	91 e0       	ldi	r25, 0x01	; 1
    67c6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    67ca:	80 e0       	ldi	r24, 0x00	; 0
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	aa ef       	ldi	r26, 0xFA	; 250
    67d0:	b3 e4       	ldi	r27, 0x43	; 67
    67d2:	8b 87       	std	Y+11, r24	; 0x0b
    67d4:	9c 87       	std	Y+12, r25	; 0x0c
    67d6:	ad 87       	std	Y+13, r26	; 0x0d
    67d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67da:	6b 85       	ldd	r22, Y+11	; 0x0b
    67dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    67de:	8d 85       	ldd	r24, Y+13	; 0x0d
    67e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    67e2:	20 e0       	ldi	r18, 0x00	; 0
    67e4:	30 e0       	ldi	r19, 0x00	; 0
    67e6:	4a ef       	ldi	r20, 0xFA	; 250
    67e8:	54 e4       	ldi	r21, 0x44	; 68
    67ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    67ee:	dc 01       	movw	r26, r24
    67f0:	cb 01       	movw	r24, r22
    67f2:	8f 83       	std	Y+7, r24	; 0x07
    67f4:	98 87       	std	Y+8, r25	; 0x08
    67f6:	a9 87       	std	Y+9, r26	; 0x09
    67f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67fa:	6f 81       	ldd	r22, Y+7	; 0x07
    67fc:	78 85       	ldd	r23, Y+8	; 0x08
    67fe:	89 85       	ldd	r24, Y+9	; 0x09
    6800:	9a 85       	ldd	r25, Y+10	; 0x0a
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	40 e8       	ldi	r20, 0x80	; 128
    6808:	5f e3       	ldi	r21, 0x3F	; 63
    680a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    680e:	88 23       	and	r24, r24
    6810:	2c f4       	brge	.+10     	; 0x681c <Select_Mode+0x172>
		__ticks = 1;
    6812:	81 e0       	ldi	r24, 0x01	; 1
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	9e 83       	std	Y+6, r25	; 0x06
    6818:	8d 83       	std	Y+5, r24	; 0x05
    681a:	3f c0       	rjmp	.+126    	; 0x689a <Select_Mode+0x1f0>
	else if (__tmp > 65535)
    681c:	6f 81       	ldd	r22, Y+7	; 0x07
    681e:	78 85       	ldd	r23, Y+8	; 0x08
    6820:	89 85       	ldd	r24, Y+9	; 0x09
    6822:	9a 85       	ldd	r25, Y+10	; 0x0a
    6824:	20 e0       	ldi	r18, 0x00	; 0
    6826:	3f ef       	ldi	r19, 0xFF	; 255
    6828:	4f e7       	ldi	r20, 0x7F	; 127
    682a:	57 e4       	ldi	r21, 0x47	; 71
    682c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6830:	18 16       	cp	r1, r24
    6832:	4c f5       	brge	.+82     	; 0x6886 <Select_Mode+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6834:	6b 85       	ldd	r22, Y+11	; 0x0b
    6836:	7c 85       	ldd	r23, Y+12	; 0x0c
    6838:	8d 85       	ldd	r24, Y+13	; 0x0d
    683a:	9e 85       	ldd	r25, Y+14	; 0x0e
    683c:	20 e0       	ldi	r18, 0x00	; 0
    683e:	30 e0       	ldi	r19, 0x00	; 0
    6840:	40 e2       	ldi	r20, 0x20	; 32
    6842:	51 e4       	ldi	r21, 0x41	; 65
    6844:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6848:	dc 01       	movw	r26, r24
    684a:	cb 01       	movw	r24, r22
    684c:	bc 01       	movw	r22, r24
    684e:	cd 01       	movw	r24, r26
    6850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6854:	dc 01       	movw	r26, r24
    6856:	cb 01       	movw	r24, r22
    6858:	9e 83       	std	Y+6, r25	; 0x06
    685a:	8d 83       	std	Y+5, r24	; 0x05
    685c:	0f c0       	rjmp	.+30     	; 0x687c <Select_Mode+0x1d2>
    685e:	88 ec       	ldi	r24, 0xC8	; 200
    6860:	90 e0       	ldi	r25, 0x00	; 0
    6862:	9c 83       	std	Y+4, r25	; 0x04
    6864:	8b 83       	std	Y+3, r24	; 0x03
    6866:	8b 81       	ldd	r24, Y+3	; 0x03
    6868:	9c 81       	ldd	r25, Y+4	; 0x04
    686a:	01 97       	sbiw	r24, 0x01	; 1
    686c:	f1 f7       	brne	.-4      	; 0x686a <Select_Mode+0x1c0>
    686e:	9c 83       	std	Y+4, r25	; 0x04
    6870:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6872:	8d 81       	ldd	r24, Y+5	; 0x05
    6874:	9e 81       	ldd	r25, Y+6	; 0x06
    6876:	01 97       	sbiw	r24, 0x01	; 1
    6878:	9e 83       	std	Y+6, r25	; 0x06
    687a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    687c:	8d 81       	ldd	r24, Y+5	; 0x05
    687e:	9e 81       	ldd	r25, Y+6	; 0x06
    6880:	00 97       	sbiw	r24, 0x00	; 0
    6882:	69 f7       	brne	.-38     	; 0x685e <Select_Mode+0x1b4>
    6884:	14 c0       	rjmp	.+40     	; 0x68ae <Select_Mode+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6886:	6f 81       	ldd	r22, Y+7	; 0x07
    6888:	78 85       	ldd	r23, Y+8	; 0x08
    688a:	89 85       	ldd	r24, Y+9	; 0x09
    688c:	9a 85       	ldd	r25, Y+10	; 0x0a
    688e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6892:	dc 01       	movw	r26, r24
    6894:	cb 01       	movw	r24, r22
    6896:	9e 83       	std	Y+6, r25	; 0x06
    6898:	8d 83       	std	Y+5, r24	; 0x05
    689a:	8d 81       	ldd	r24, Y+5	; 0x05
    689c:	9e 81       	ldd	r25, Y+6	; 0x06
    689e:	9a 83       	std	Y+2, r25	; 0x02
    68a0:	89 83       	std	Y+1, r24	; 0x01
    68a2:	89 81       	ldd	r24, Y+1	; 0x01
    68a4:	9a 81       	ldd	r25, Y+2	; 0x02
    68a6:	01 97       	sbiw	r24, 0x01	; 1
    68a8:	f1 f7       	brne	.-4      	; 0x68a6 <Select_Mode+0x1fc>
    68aa:	9a 83       	std	Y+2, r25	; 0x02
    68ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_vClearScreen();
    68ae:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    68b2:	8a e0       	ldi	r24, 0x0A	; 10
    68b4:	91 e0       	ldi	r25, 0x01	; 1
    68b6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    68ba:	82 e0       	ldi	r24, 0x02	; 2
    68bc:	61 e0       	ldi	r22, 0x01	; 1
    68be:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    68c2:	8b e1       	ldi	r24, 0x1B	; 27
    68c4:	91 e0       	ldi	r25, 0x01	; 1
    68c6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
		}

	}while (mode == NOTPRESSED || (mode != '1' && mode != '2'));
    68ca:	80 91 11 03 	lds	r24, 0x0311
    68ce:	8f 3f       	cpi	r24, 0xFF	; 255
    68d0:	09 f4       	brne	.+2      	; 0x68d4 <Select_Mode+0x22a>
    68d2:	03 cf       	rjmp	.-506    	; 0x66da <Select_Mode+0x30>
    68d4:	80 91 11 03 	lds	r24, 0x0311
    68d8:	81 33       	cpi	r24, 0x31	; 49
    68da:	29 f0       	breq	.+10     	; 0x68e6 <Select_Mode+0x23c>
    68dc:	80 91 11 03 	lds	r24, 0x0311
    68e0:	82 33       	cpi	r24, 0x32	; 50
    68e2:	09 f0       	breq	.+2      	; 0x68e6 <Select_Mode+0x23c>
    68e4:	fa ce       	rjmp	.-524    	; 0x66da <Select_Mode+0x30>

	CLCD_vClearScreen();
    68e6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("Press ON to");
    68ea:	80 e6       	ldi	r24, 0x60	; 96
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    68f2:	82 e0       	ldi	r24, 0x02	; 2
    68f4:	61 e0       	ldi	r22, 0x01	; 1
    68f6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    68fa:	8c e6       	ldi	r24, 0x6C	; 108
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
}
    6902:	2f 96       	adiw	r28, 0x0f	; 15
    6904:	0f b6       	in	r0, 0x3f	; 63
    6906:	f8 94       	cli
    6908:	de bf       	out	0x3e, r29	; 62
    690a:	0f be       	out	0x3f, r0	; 63
    690c:	cd bf       	out	0x3d, r28	; 61
    690e:	cf 91       	pop	r28
    6910:	df 91       	pop	r29
    6912:	08 95       	ret

00006914 <Set_Alarm>:

//===================================================================/

void Set_Alarm()
{
    6914:	df 93       	push	r29
    6916:	cf 93       	push	r28
    6918:	cd b7       	in	r28, 0x3d	; 61
    691a:	de b7       	in	r29, 0x3e	; 62
    691c:	a0 97       	sbiw	r28, 0x20	; 32
    691e:	0f b6       	in	r0, 0x3f	; 63
    6920:	f8 94       	cli
    6922:	de bf       	out	0x3e, r29	; 62
    6924:	0f be       	out	0x3f, r0	; 63
    6926:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    6928:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("ALARM");
    692c:	86 e7       	ldi	r24, 0x76	; 118
    692e:	91 e0       	ldi	r25, 0x01	; 1
    6930:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6934:	82 e0       	ldi	r24, 0x02	; 2
    6936:	61 e0       	ldi	r22, 0x01	; 1
    6938:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("1 - Enable");
    693c:	8c e7       	ldi	r24, 0x7C	; 124
    693e:	91 e0       	ldi	r25, 0x01	; 1
    6940:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6944:	83 e0       	ldi	r24, 0x03	; 3
    6946:	61 e0       	ldi	r22, 0x01	; 1
    6948:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("2 - Disable");
    694c:	87 e8       	ldi	r24, 0x87	; 135
    694e:	91 e0       	ldi	r25, 0x01	; 1
    6950:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>

	do
	{
		press = KPD_u8GetPressed();
    6954:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6958:	80 93 56 03 	sts	0x0356, r24
		if (press != NOTPRESSED &&press != '1' && press != '2')
    695c:	80 91 56 03 	lds	r24, 0x0356
    6960:	8f 3f       	cpi	r24, 0xFF	; 255
    6962:	09 f4       	brne	.+2      	; 0x6966 <Set_Alarm+0x52>
    6964:	98 c0       	rjmp	.+304    	; 0x6a96 <Set_Alarm+0x182>
    6966:	80 91 56 03 	lds	r24, 0x0356
    696a:	81 33       	cpi	r24, 0x31	; 49
    696c:	09 f4       	brne	.+2      	; 0x6970 <Set_Alarm+0x5c>
    696e:	93 c0       	rjmp	.+294    	; 0x6a96 <Set_Alarm+0x182>
    6970:	80 91 56 03 	lds	r24, 0x0356
    6974:	82 33       	cpi	r24, 0x32	; 50
    6976:	09 f4       	brne	.+2      	; 0x697a <Set_Alarm+0x66>
    6978:	8e c0       	rjmp	.+284    	; 0x6a96 <Set_Alarm+0x182>
		{
			CLCD_vClearScreen();
    697a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("Wrong Choise");
    697e:	84 e5       	ldi	r24, 0x54	; 84
    6980:	91 e0       	ldi	r25, 0x01	; 1
    6982:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	aa ef       	ldi	r26, 0xFA	; 250
    698c:	b3 e4       	ldi	r27, 0x43	; 67
    698e:	89 8f       	std	Y+25, r24	; 0x19
    6990:	9a 8f       	std	Y+26, r25	; 0x1a
    6992:	ab 8f       	std	Y+27, r26	; 0x1b
    6994:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6996:	69 8d       	ldd	r22, Y+25	; 0x19
    6998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    699a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    699c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	30 e0       	ldi	r19, 0x00	; 0
    69a2:	4a ef       	ldi	r20, 0xFA	; 250
    69a4:	54 e4       	ldi	r21, 0x44	; 68
    69a6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	8d 8b       	std	Y+21, r24	; 0x15
    69b0:	9e 8b       	std	Y+22, r25	; 0x16
    69b2:	af 8b       	std	Y+23, r26	; 0x17
    69b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    69b6:	6d 89       	ldd	r22, Y+21	; 0x15
    69b8:	7e 89       	ldd	r23, Y+22	; 0x16
    69ba:	8f 89       	ldd	r24, Y+23	; 0x17
    69bc:	98 8d       	ldd	r25, Y+24	; 0x18
    69be:	20 e0       	ldi	r18, 0x00	; 0
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	40 e8       	ldi	r20, 0x80	; 128
    69c4:	5f e3       	ldi	r21, 0x3F	; 63
    69c6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    69ca:	88 23       	and	r24, r24
    69cc:	2c f4       	brge	.+10     	; 0x69d8 <Set_Alarm+0xc4>
		__ticks = 1;
    69ce:	81 e0       	ldi	r24, 0x01	; 1
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	9c 8b       	std	Y+20, r25	; 0x14
    69d4:	8b 8b       	std	Y+19, r24	; 0x13
    69d6:	3f c0       	rjmp	.+126    	; 0x6a56 <Set_Alarm+0x142>
	else if (__tmp > 65535)
    69d8:	6d 89       	ldd	r22, Y+21	; 0x15
    69da:	7e 89       	ldd	r23, Y+22	; 0x16
    69dc:	8f 89       	ldd	r24, Y+23	; 0x17
    69de:	98 8d       	ldd	r25, Y+24	; 0x18
    69e0:	20 e0       	ldi	r18, 0x00	; 0
    69e2:	3f ef       	ldi	r19, 0xFF	; 255
    69e4:	4f e7       	ldi	r20, 0x7F	; 127
    69e6:	57 e4       	ldi	r21, 0x47	; 71
    69e8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    69ec:	18 16       	cp	r1, r24
    69ee:	4c f5       	brge	.+82     	; 0x6a42 <Set_Alarm+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69f0:	69 8d       	ldd	r22, Y+25	; 0x19
    69f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	40 e2       	ldi	r20, 0x20	; 32
    69fe:	51 e4       	ldi	r21, 0x41	; 65
    6a00:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a04:	dc 01       	movw	r26, r24
    6a06:	cb 01       	movw	r24, r22
    6a08:	bc 01       	movw	r22, r24
    6a0a:	cd 01       	movw	r24, r26
    6a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a10:	dc 01       	movw	r26, r24
    6a12:	cb 01       	movw	r24, r22
    6a14:	9c 8b       	std	Y+20, r25	; 0x14
    6a16:	8b 8b       	std	Y+19, r24	; 0x13
    6a18:	0f c0       	rjmp	.+30     	; 0x6a38 <Set_Alarm+0x124>
    6a1a:	88 ec       	ldi	r24, 0xC8	; 200
    6a1c:	90 e0       	ldi	r25, 0x00	; 0
    6a1e:	9a 8b       	std	Y+18, r25	; 0x12
    6a20:	89 8b       	std	Y+17, r24	; 0x11
    6a22:	89 89       	ldd	r24, Y+17	; 0x11
    6a24:	9a 89       	ldd	r25, Y+18	; 0x12
    6a26:	01 97       	sbiw	r24, 0x01	; 1
    6a28:	f1 f7       	brne	.-4      	; 0x6a26 <Set_Alarm+0x112>
    6a2a:	9a 8b       	std	Y+18, r25	; 0x12
    6a2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    6a30:	9c 89       	ldd	r25, Y+20	; 0x14
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	9c 8b       	std	Y+20, r25	; 0x14
    6a36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a38:	8b 89       	ldd	r24, Y+19	; 0x13
    6a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a3c:	00 97       	sbiw	r24, 0x00	; 0
    6a3e:	69 f7       	brne	.-38     	; 0x6a1a <Set_Alarm+0x106>
    6a40:	14 c0       	rjmp	.+40     	; 0x6a6a <Set_Alarm+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a42:	6d 89       	ldd	r22, Y+21	; 0x15
    6a44:	7e 89       	ldd	r23, Y+22	; 0x16
    6a46:	8f 89       	ldd	r24, Y+23	; 0x17
    6a48:	98 8d       	ldd	r25, Y+24	; 0x18
    6a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a4e:	dc 01       	movw	r26, r24
    6a50:	cb 01       	movw	r24, r22
    6a52:	9c 8b       	std	Y+20, r25	; 0x14
    6a54:	8b 8b       	std	Y+19, r24	; 0x13
    6a56:	8b 89       	ldd	r24, Y+19	; 0x13
    6a58:	9c 89       	ldd	r25, Y+20	; 0x14
    6a5a:	98 8b       	std	Y+16, r25	; 0x10
    6a5c:	8f 87       	std	Y+15, r24	; 0x0f
    6a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a60:	98 89       	ldd	r25, Y+16	; 0x10
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	f1 f7       	brne	.-4      	; 0x6a62 <Set_Alarm+0x14e>
    6a66:	98 8b       	std	Y+16, r25	; 0x10
    6a68:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_vClearScreen();
    6a6a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("ALARM");
    6a6e:	86 e7       	ldi	r24, 0x76	; 118
    6a70:	91 e0       	ldi	r25, 0x01	; 1
    6a72:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6a76:	82 e0       	ldi	r24, 0x02	; 2
    6a78:	61 e0       	ldi	r22, 0x01	; 1
    6a7a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("1 - Enable");
    6a7e:	8c e7       	ldi	r24, 0x7C	; 124
    6a80:	91 e0       	ldi	r25, 0x01	; 1
    6a82:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    6a86:	83 e0       	ldi	r24, 0x03	; 3
    6a88:	61 e0       	ldi	r22, 0x01	; 1
    6a8a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("2 - Disable");
    6a8e:	87 e8       	ldi	r24, 0x87	; 135
    6a90:	91 e0       	ldi	r25, 0x01	; 1
    6a92:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
		}
	}while(press == NOTPRESSED || (press != '1' && press != '2'));
    6a96:	80 91 56 03 	lds	r24, 0x0356
    6a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    6a9c:	09 f4       	brne	.+2      	; 0x6aa0 <Set_Alarm+0x18c>
    6a9e:	5a cf       	rjmp	.-332    	; 0x6954 <Set_Alarm+0x40>
    6aa0:	80 91 56 03 	lds	r24, 0x0356
    6aa4:	81 33       	cpi	r24, 0x31	; 49
    6aa6:	29 f0       	breq	.+10     	; 0x6ab2 <Set_Alarm+0x19e>
    6aa8:	80 91 56 03 	lds	r24, 0x0356
    6aac:	82 33       	cpi	r24, 0x32	; 50
    6aae:	09 f0       	breq	.+2      	; 0x6ab2 <Set_Alarm+0x19e>
    6ab0:	51 cf       	rjmp	.-350    	; 0x6954 <Set_Alarm+0x40>

	if (press == '1')
    6ab2:	80 91 56 03 	lds	r24, 0x0356
    6ab6:	81 33       	cpi	r24, 0x31	; 49
    6ab8:	09 f0       	breq	.+2      	; 0x6abc <Set_Alarm+0x1a8>
    6aba:	61 c1       	rjmp	.+706    	; 0x6d7e <Set_Alarm+0x46a>
	{
		switch(Alarm_EN)
    6abc:	80 91 51 03 	lds	r24, 0x0351
    6ac0:	28 2f       	mov	r18, r24
    6ac2:	30 e0       	ldi	r19, 0x00	; 0
    6ac4:	38 a3       	std	Y+32, r19	; 0x20
    6ac6:	2f 8f       	std	Y+31, r18	; 0x1f
    6ac8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6aca:	98 a1       	ldd	r25, Y+32	; 0x20
    6acc:	00 97       	sbiw	r24, 0x00	; 0
    6ace:	31 f0       	breq	.+12     	; 0x6adc <Set_Alarm+0x1c8>
    6ad0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6ad2:	38 a1       	ldd	r19, Y+32	; 0x20
    6ad4:	21 30       	cpi	r18, 0x01	; 1
    6ad6:	31 05       	cpc	r19, r1
    6ad8:	e1 f0       	breq	.+56     	; 0x6b12 <Set_Alarm+0x1fe>
    6ada:	4f c0       	rjmp	.+158    	; 0x6b7a <Set_Alarm+0x266>
		{
		case 0:
			CLCD_vClearScreen();
    6adc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6ae0:	83 e9       	ldi	r24, 0x93	; 147
    6ae2:	91 e0       	ldi	r25, 0x01	; 1
    6ae4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6ae8:	82 e0       	ldi	r24, 0x02	; 2
    6aea:	66 e0       	ldi	r22, 0x06	; 6
    6aec:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("12 : 00");
    6af0:	8f e9       	ldi	r24, 0x9F	; 159
    6af2:	91 e0       	ldi	r25, 0x01	; 1
    6af4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			if (mode == mode_12Hours)
    6af8:	80 91 11 03 	lds	r24, 0x0311
    6afc:	81 33       	cpi	r24, 0x31	; 49
    6afe:	e9 f5       	brne	.+122    	; 0x6b7a <Set_Alarm+0x266>
			{
				CLCD_vSetPosition(2, 14);
    6b00:	82 e0       	ldi	r24, 0x02	; 2
    6b02:	6e e0       	ldi	r22, 0x0E	; 14
    6b04:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendString("AM");
    6b08:	8d e3       	ldi	r24, 0x3D	; 61
    6b0a:	91 e0       	ldi	r25, 0x01	; 1
    6b0c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
    6b10:	34 c0       	rjmp	.+104    	; 0x6b7a <Set_Alarm+0x266>
			}
			break;
		case 1 :
			CLCD_vClearScreen();
    6b12:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6b16:	83 e9       	ldi	r24, 0x93	; 147
    6b18:	91 e0       	ldi	r25, 0x01	; 1
    6b1a:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6b1e:	82 e0       	ldi	r24, 0x02	; 2
    6b20:	66 e0       	ldi	r22, 0x06	; 6
    6b22:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendData((Hours_Alarm / 10 ) + 48);
    6b26:	80 91 55 03 	lds	r24, 0x0355
    6b2a:	9a e0       	ldi	r25, 0x0A	; 10
    6b2c:	69 2f       	mov	r22, r25
    6b2e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6b32:	80 5d       	subi	r24, 0xD0	; 208
    6b34:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendData((Hours_Alarm % 10 ) + 48);
    6b38:	80 91 55 03 	lds	r24, 0x0355
    6b3c:	9a e0       	ldi	r25, 0x0A	; 10
    6b3e:	69 2f       	mov	r22, r25
    6b40:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6b44:	89 2f       	mov	r24, r25
    6b46:	80 5d       	subi	r24, 0xD0	; 208
    6b48:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendString(" : ");
    6b4c:	89 e3       	ldi	r24, 0x39	; 57
    6b4e:	91 e0       	ldi	r25, 0x01	; 1
    6b50:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSendData((Minutes_Alarm / 10 ) + 48);
    6b54:	80 91 54 03 	lds	r24, 0x0354
    6b58:	9a e0       	ldi	r25, 0x0A	; 10
    6b5a:	69 2f       	mov	r22, r25
    6b5c:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6b60:	80 5d       	subi	r24, 0xD0	; 208
    6b62:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendData((Minutes_Alarm % 10 ) + 48);
    6b66:	80 91 54 03 	lds	r24, 0x0354
    6b6a:	9a e0       	ldi	r25, 0x0A	; 10
    6b6c:	69 2f       	mov	r22, r25
    6b6e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6b72:	89 2f       	mov	r24, r25
    6b74:	80 5d       	subi	r24, 0xD0	; 208
    6b76:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		}

		CLCD_vSetPosition(2, 6);
    6b7a:	82 e0       	ldi	r24, 0x02	; 2
    6b7c:	66 e0       	ldi	r22, 0x06	; 6
    6b7e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>

		CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    6b82:	8e e0       	ldi	r24, 0x0E	; 14
    6b84:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>

		/* Set Hour Alarm */
		do
		{
			press = KPD_u8GetPressed();
    6b88:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6b8c:	80 93 56 03 	sts	0x0356, r24
		}while (press == NOTPRESSED);
    6b90:	80 91 56 03 	lds	r24, 0x0356
    6b94:	8f 3f       	cpi	r24, 0xFF	; 255
    6b96:	c1 f3       	breq	.-16     	; 0x6b88 <Set_Alarm+0x274>

		CLCD_vSendData(press);
    6b98:	80 91 56 03 	lds	r24, 0x0356
    6b9c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

		Hours_Alarm = (press - 48) * 10;
    6ba0:	80 91 56 03 	lds	r24, 0x0356
    6ba4:	88 2f       	mov	r24, r24
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	9c 01       	movw	r18, r24
    6baa:	22 0f       	add	r18, r18
    6bac:	33 1f       	adc	r19, r19
    6bae:	c9 01       	movw	r24, r18
    6bb0:	88 0f       	add	r24, r24
    6bb2:	99 1f       	adc	r25, r25
    6bb4:	88 0f       	add	r24, r24
    6bb6:	99 1f       	adc	r25, r25
    6bb8:	82 0f       	add	r24, r18
    6bba:	93 1f       	adc	r25, r19
    6bbc:	80 5e       	subi	r24, 0xE0	; 224
    6bbe:	80 93 55 03 	sts	0x0355, r24
		do
		{
			press = KPD_u8GetPressed();
    6bc2:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6bc6:	80 93 56 03 	sts	0x0356, r24
		}while(press == NOTPRESSED);
    6bca:	80 91 56 03 	lds	r24, 0x0356
    6bce:	8f 3f       	cpi	r24, 0xFF	; 255
    6bd0:	c1 f3       	breq	.-16     	; 0x6bc2 <Set_Alarm+0x2ae>

		CLCD_vSendData(press);
    6bd2:	80 91 56 03 	lds	r24, 0x0356
    6bd6:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		Hours_Alarm += (press - 48);
    6bda:	90 91 56 03 	lds	r25, 0x0356
    6bde:	80 91 55 03 	lds	r24, 0x0355
    6be2:	89 0f       	add	r24, r25
    6be4:	80 53       	subi	r24, 0x30	; 48
    6be6:	80 93 55 03 	sts	0x0355, r24

		//Check if it valid or not
		switch(mode)
    6bea:	80 91 11 03 	lds	r24, 0x0311
    6bee:	28 2f       	mov	r18, r24
    6bf0:	30 e0       	ldi	r19, 0x00	; 0
    6bf2:	3e 8f       	std	Y+30, r19	; 0x1e
    6bf4:	2d 8f       	std	Y+29, r18	; 0x1d
    6bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bfa:	81 33       	cpi	r24, 0x31	; 49
    6bfc:	91 05       	cpc	r25, r1
    6bfe:	39 f0       	breq	.+14     	; 0x6c0e <Set_Alarm+0x2fa>
    6c00:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6c02:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6c04:	22 33       	cpi	r18, 0x32	; 50
    6c06:	31 05       	cpc	r19, r1
    6c08:	09 f4       	brne	.+2      	; 0x6c0c <Set_Alarm+0x2f8>
    6c0a:	45 c0       	rjmp	.+138    	; 0x6c96 <Set_Alarm+0x382>
    6c0c:	62 c0       	rjmp	.+196    	; 0x6cd2 <Set_Alarm+0x3be>
		{
		case mode_12Hours:
			if (Hours_Alarm > 12 && Hours_Alarm < 24 )
    6c0e:	80 91 55 03 	lds	r24, 0x0355
    6c12:	8d 30       	cpi	r24, 0x0D	; 13
    6c14:	08 f1       	brcs	.+66     	; 0x6c58 <Set_Alarm+0x344>
    6c16:	80 91 55 03 	lds	r24, 0x0355
    6c1a:	88 31       	cpi	r24, 0x18	; 24
    6c1c:	e8 f4       	brcc	.+58     	; 0x6c58 <Set_Alarm+0x344>
			{
				Hours_Alarm -= 12;
    6c1e:	80 91 55 03 	lds	r24, 0x0355
    6c22:	8c 50       	subi	r24, 0x0C	; 12
    6c24:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6c28:	82 e0       	ldi	r24, 0x02	; 2
    6c2a:	66 e0       	ldi	r22, 0x06	; 6
    6c2c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6c30:	80 91 55 03 	lds	r24, 0x0355
    6c34:	9a e0       	ldi	r25, 0x0A	; 10
    6c36:	69 2f       	mov	r22, r25
    6c38:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6c3c:	80 5d       	subi	r24, 0xD0	; 208
    6c3e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6c42:	80 91 55 03 	lds	r24, 0x0355
    6c46:	9a e0       	ldi	r25, 0x0A	; 10
    6c48:	69 2f       	mov	r22, r25
    6c4a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6c4e:	89 2f       	mov	r24, r25
    6c50:	80 5d       	subi	r24, 0xD0	; 208
    6c52:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    6c56:	3d c0       	rjmp	.+122    	; 0x6cd2 <Set_Alarm+0x3be>
			}
			else if (Hours_Alarm > 23)
    6c58:	80 91 55 03 	lds	r24, 0x0355
    6c5c:	88 31       	cpi	r24, 0x18	; 24
    6c5e:	c8 f1       	brcs	.+114    	; 0x6cd2 <Set_Alarm+0x3be>
			{
				Hours_Alarm = 12;
    6c60:	8c e0       	ldi	r24, 0x0C	; 12
    6c62:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6c66:	82 e0       	ldi	r24, 0x02	; 2
    6c68:	66 e0       	ldi	r22, 0x06	; 6
    6c6a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6c6e:	80 91 55 03 	lds	r24, 0x0355
    6c72:	9a e0       	ldi	r25, 0x0A	; 10
    6c74:	69 2f       	mov	r22, r25
    6c76:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6c7a:	80 5d       	subi	r24, 0xD0	; 208
    6c7c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6c80:	80 91 55 03 	lds	r24, 0x0355
    6c84:	9a e0       	ldi	r25, 0x0A	; 10
    6c86:	69 2f       	mov	r22, r25
    6c88:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6c8c:	89 2f       	mov	r24, r25
    6c8e:	80 5d       	subi	r24, 0xD0	; 208
    6c90:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    6c94:	1e c0       	rjmp	.+60     	; 0x6cd2 <Set_Alarm+0x3be>

			}
			break;

		case mode_24Hours:
			if (Hours_Alarm > 23)
    6c96:	80 91 55 03 	lds	r24, 0x0355
    6c9a:	88 31       	cpi	r24, 0x18	; 24
    6c9c:	d0 f0       	brcs	.+52     	; 0x6cd2 <Set_Alarm+0x3be>
			{
				Hours_Alarm = 12;
    6c9e:	8c e0       	ldi	r24, 0x0C	; 12
    6ca0:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6ca4:	82 e0       	ldi	r24, 0x02	; 2
    6ca6:	66 e0       	ldi	r22, 0x06	; 6
    6ca8:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6cac:	80 91 55 03 	lds	r24, 0x0355
    6cb0:	9a e0       	ldi	r25, 0x0A	; 10
    6cb2:	69 2f       	mov	r22, r25
    6cb4:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6cb8:	80 5d       	subi	r24, 0xD0	; 208
    6cba:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6cbe:	80 91 55 03 	lds	r24, 0x0355
    6cc2:	9a e0       	ldi	r25, 0x0A	; 10
    6cc4:	69 2f       	mov	r22, r25
    6cc6:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6cca:	89 2f       	mov	r24, r25
    6ccc:	80 5d       	subi	r24, 0xD0	; 208
    6cce:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

		default:
			break;
		}

		CLCD_vSetPosition(2, 11);
    6cd2:	82 e0       	ldi	r24, 0x02	; 2
    6cd4:	6b e0       	ldi	r22, 0x0B	; 11
    6cd6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
		/* Set Minute Alarm */
		do
		{
			press = KPD_u8GetPressed();
    6cda:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6cde:	80 93 56 03 	sts	0x0356, r24
		}while (press == NOTPRESSED);
    6ce2:	80 91 56 03 	lds	r24, 0x0356
    6ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    6ce8:	c1 f3       	breq	.-16     	; 0x6cda <Set_Alarm+0x3c6>

		CLCD_vSendData(press);
    6cea:	80 91 56 03 	lds	r24, 0x0356
    6cee:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>

		Minutes_Alarm = (press - 48) * 10;
    6cf2:	80 91 56 03 	lds	r24, 0x0356
    6cf6:	88 2f       	mov	r24, r24
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	9c 01       	movw	r18, r24
    6cfc:	22 0f       	add	r18, r18
    6cfe:	33 1f       	adc	r19, r19
    6d00:	c9 01       	movw	r24, r18
    6d02:	88 0f       	add	r24, r24
    6d04:	99 1f       	adc	r25, r25
    6d06:	88 0f       	add	r24, r24
    6d08:	99 1f       	adc	r25, r25
    6d0a:	82 0f       	add	r24, r18
    6d0c:	93 1f       	adc	r25, r19
    6d0e:	80 5e       	subi	r24, 0xE0	; 224
    6d10:	80 93 54 03 	sts	0x0354, r24
		do
		{
			press = KPD_u8GetPressed();
    6d14:	0e 94 87 21 	call	0x430e	; 0x430e <KPD_u8GetPressed>
    6d18:	80 93 56 03 	sts	0x0356, r24
		}while(press == NOTPRESSED);
    6d1c:	80 91 56 03 	lds	r24, 0x0356
    6d20:	8f 3f       	cpi	r24, 0xFF	; 255
    6d22:	c1 f3       	breq	.-16     	; 0x6d14 <Set_Alarm+0x400>

		CLCD_vSendData(press);
    6d24:	80 91 56 03 	lds	r24, 0x0356
    6d28:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		Minutes_Alarm += (press - 48);
    6d2c:	90 91 56 03 	lds	r25, 0x0356
    6d30:	80 91 54 03 	lds	r24, 0x0354
    6d34:	89 0f       	add	r24, r25
    6d36:	80 53       	subi	r24, 0x30	; 48
    6d38:	80 93 54 03 	sts	0x0354, r24

		if (Minutes_Alarm > 12)
    6d3c:	80 91 54 03 	lds	r24, 0x0354
    6d40:	8d 30       	cpi	r24, 0x0D	; 13
    6d42:	c8 f0       	brcs	.+50     	; 0x6d76 <Set_Alarm+0x462>
		{
			Minutes_Alarm = 0;
    6d44:	10 92 54 03 	sts	0x0354, r1
			CLCD_vSetPosition(2, 11);
    6d48:	82 e0       	ldi	r24, 0x02	; 2
    6d4a:	6b e0       	ldi	r22, 0x0B	; 11
    6d4c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendData((Minutes_Alarm / 10) + 48);
    6d50:	80 91 54 03 	lds	r24, 0x0354
    6d54:	9a e0       	ldi	r25, 0x0A	; 10
    6d56:	69 2f       	mov	r22, r25
    6d58:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6d5c:	80 5d       	subi	r24, 0xD0	; 208
    6d5e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
			CLCD_vSendData((Minutes_Alarm % 10) + 48);
    6d62:	80 91 54 03 	lds	r24, 0x0354
    6d66:	9a e0       	ldi	r25, 0x0A	; 10
    6d68:	69 2f       	mov	r22, r25
    6d6a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6d6e:	89 2f       	mov	r24, r25
    6d70:	80 5d       	subi	r24, 0xD0	; 208
    6d72:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
		}
		Alarm_EN = 1 ;
    6d76:	81 e0       	ldi	r24, 0x01	; 1
    6d78:	80 93 51 03 	sts	0x0351, r24
    6d7c:	09 c0       	rjmp	.+18     	; 0x6d90 <Set_Alarm+0x47c>
	}
	else if (press == '2')
    6d7e:	80 91 56 03 	lds	r24, 0x0356
    6d82:	82 33       	cpi	r24, 0x32	; 50
    6d84:	29 f4       	brne	.+10     	; 0x6d90 <Set_Alarm+0x47c>
	{
		Hours_Alarm = NOTPRESSED;
    6d86:	8f ef       	ldi	r24, 0xFF	; 255
    6d88:	80 93 55 03 	sts	0x0355, r24
		Alarm_EN = 0;
    6d8c:	10 92 51 03 	sts	0x0351, r1
    6d90:	80 e0       	ldi	r24, 0x00	; 0
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	a8 e4       	ldi	r26, 0x48	; 72
    6d96:	b3 e4       	ldi	r27, 0x43	; 67
    6d98:	8b 87       	std	Y+11, r24	; 0x0b
    6d9a:	9c 87       	std	Y+12, r25	; 0x0c
    6d9c:	ad 87       	std	Y+13, r26	; 0x0d
    6d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6da8:	20 e0       	ldi	r18, 0x00	; 0
    6daa:	30 e0       	ldi	r19, 0x00	; 0
    6dac:	4a ef       	ldi	r20, 0xFA	; 250
    6dae:	54 e4       	ldi	r21, 0x44	; 68
    6db0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6db4:	dc 01       	movw	r26, r24
    6db6:	cb 01       	movw	r24, r22
    6db8:	8f 83       	std	Y+7, r24	; 0x07
    6dba:	98 87       	std	Y+8, r25	; 0x08
    6dbc:	a9 87       	std	Y+9, r26	; 0x09
    6dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    6dc2:	78 85       	ldd	r23, Y+8	; 0x08
    6dc4:	89 85       	ldd	r24, Y+9	; 0x09
    6dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dc8:	20 e0       	ldi	r18, 0x00	; 0
    6dca:	30 e0       	ldi	r19, 0x00	; 0
    6dcc:	40 e8       	ldi	r20, 0x80	; 128
    6dce:	5f e3       	ldi	r21, 0x3F	; 63
    6dd0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6dd4:	88 23       	and	r24, r24
    6dd6:	2c f4       	brge	.+10     	; 0x6de2 <Set_Alarm+0x4ce>
		__ticks = 1;
    6dd8:	81 e0       	ldi	r24, 0x01	; 1
    6dda:	90 e0       	ldi	r25, 0x00	; 0
    6ddc:	9e 83       	std	Y+6, r25	; 0x06
    6dde:	8d 83       	std	Y+5, r24	; 0x05
    6de0:	3f c0       	rjmp	.+126    	; 0x6e60 <Set_Alarm+0x54c>
	else if (__tmp > 65535)
    6de2:	6f 81       	ldd	r22, Y+7	; 0x07
    6de4:	78 85       	ldd	r23, Y+8	; 0x08
    6de6:	89 85       	ldd	r24, Y+9	; 0x09
    6de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dea:	20 e0       	ldi	r18, 0x00	; 0
    6dec:	3f ef       	ldi	r19, 0xFF	; 255
    6dee:	4f e7       	ldi	r20, 0x7F	; 127
    6df0:	57 e4       	ldi	r21, 0x47	; 71
    6df2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6df6:	18 16       	cp	r1, r24
    6df8:	4c f5       	brge	.+82     	; 0x6e4c <Set_Alarm+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    6dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e02:	20 e0       	ldi	r18, 0x00	; 0
    6e04:	30 e0       	ldi	r19, 0x00	; 0
    6e06:	40 e2       	ldi	r20, 0x20	; 32
    6e08:	51 e4       	ldi	r21, 0x41	; 65
    6e0a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e0e:	dc 01       	movw	r26, r24
    6e10:	cb 01       	movw	r24, r22
    6e12:	bc 01       	movw	r22, r24
    6e14:	cd 01       	movw	r24, r26
    6e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e1a:	dc 01       	movw	r26, r24
    6e1c:	cb 01       	movw	r24, r22
    6e1e:	9e 83       	std	Y+6, r25	; 0x06
    6e20:	8d 83       	std	Y+5, r24	; 0x05
    6e22:	0f c0       	rjmp	.+30     	; 0x6e42 <Set_Alarm+0x52e>
    6e24:	88 ec       	ldi	r24, 0xC8	; 200
    6e26:	90 e0       	ldi	r25, 0x00	; 0
    6e28:	9c 83       	std	Y+4, r25	; 0x04
    6e2a:	8b 83       	std	Y+3, r24	; 0x03
    6e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    6e30:	01 97       	sbiw	r24, 0x01	; 1
    6e32:	f1 f7       	brne	.-4      	; 0x6e30 <Set_Alarm+0x51c>
    6e34:	9c 83       	std	Y+4, r25	; 0x04
    6e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e38:	8d 81       	ldd	r24, Y+5	; 0x05
    6e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e3c:	01 97       	sbiw	r24, 0x01	; 1
    6e3e:	9e 83       	std	Y+6, r25	; 0x06
    6e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e42:	8d 81       	ldd	r24, Y+5	; 0x05
    6e44:	9e 81       	ldd	r25, Y+6	; 0x06
    6e46:	00 97       	sbiw	r24, 0x00	; 0
    6e48:	69 f7       	brne	.-38     	; 0x6e24 <Set_Alarm+0x510>
    6e4a:	14 c0       	rjmp	.+40     	; 0x6e74 <Set_Alarm+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    6e4e:	78 85       	ldd	r23, Y+8	; 0x08
    6e50:	89 85       	ldd	r24, Y+9	; 0x09
    6e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e58:	dc 01       	movw	r26, r24
    6e5a:	cb 01       	movw	r24, r22
    6e5c:	9e 83       	std	Y+6, r25	; 0x06
    6e5e:	8d 83       	std	Y+5, r24	; 0x05
    6e60:	8d 81       	ldd	r24, Y+5	; 0x05
    6e62:	9e 81       	ldd	r25, Y+6	; 0x06
    6e64:	9a 83       	std	Y+2, r25	; 0x02
    6e66:	89 83       	std	Y+1, r24	; 0x01
    6e68:	89 81       	ldd	r24, Y+1	; 0x01
    6e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e6c:	01 97       	sbiw	r24, 0x01	; 1
    6e6e:	f1 f7       	brne	.-4      	; 0x6e6c <Set_Alarm+0x558>
    6e70:	9a 83       	std	Y+2, r25	; 0x02
    6e72:	89 83       	std	Y+1, r24	; 0x01
	{

	}

	_delay_ms(200);
	CLCD_vClearScreen();
    6e74:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("Press ON to");
    6e78:	80 e6       	ldi	r24, 0x60	; 96
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6e80:	82 e0       	ldi	r24, 0x02	; 2
    6e82:	61 e0       	ldi	r22, 0x01	; 1
    6e84:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    6e88:	8c e6       	ldi	r24, 0x6C	; 108
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    6e90:	8c e0       	ldi	r24, 0x0C	; 12
    6e92:	0e 94 4d 1c 	call	0x389a	; 0x389a <CLCD_vSendCommand>
}
    6e96:	a0 96       	adiw	r28, 0x20	; 32
    6e98:	0f b6       	in	r0, 0x3f	; 63
    6e9a:	f8 94       	cli
    6e9c:	de bf       	out	0x3e, r29	; 62
    6e9e:	0f be       	out	0x3f, r0	; 63
    6ea0:	cd bf       	out	0x3d, r28	; 61
    6ea2:	cf 91       	pop	r28
    6ea4:	df 91       	pop	r29
    6ea6:	08 95       	ret

00006ea8 <Get_Temp>:

//===================================================================/

void Get_Temp()
{
    6ea8:	df 93       	push	r29
    6eaa:	cf 93       	push	r28
    6eac:	00 d0       	rcall	.+0      	; 0x6eae <Get_Temp+0x6>
    6eae:	00 d0       	rcall	.+0      	; 0x6eb0 <Get_Temp+0x8>
    6eb0:	0f 92       	push	r0
    6eb2:	cd b7       	in	r28, 0x3d	; 61
    6eb4:	de b7       	in	r29, 0x3e	; 62
	volatile u8  TEMP_val, press_button = NOTPRESSED;
    6eb6:	8f ef       	ldi	r24, 0xFF	; 255
    6eb8:	8a 83       	std	Y+2, r24	; 0x02
	volatile u16 TEMP_volt ;
	CLCD_vClearScreen();
    6eba:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
	CLCD_vSendString("Press any key");
    6ebe:	86 ee       	ldi	r24, 0xE6	; 230
    6ec0:	90 e0       	ldi	r25, 0x00	; 0
    6ec2:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6ec6:	82 e0       	ldi	r24, 0x02	; 2
    6ec8:	61 e0       	ldi	r22, 0x01	; 1
    6eca:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
	CLCD_vSendString("To Exit");
    6ece:	87 ea       	ldi	r24, 0xA7	; 167
    6ed0:	91 e0       	ldi	r25, 0x01	; 1
    6ed2:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
	while (1)
	{
		if (press_button != NOTPRESSED)
    6ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    6eda:	b1 f0       	breq	.+44     	; 0x6f08 <Get_Temp+0x60>
		{
			CLCD_vClearScreen();
    6edc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <CLCD_vClearScreen>
			CLCD_vSendString("Press ON to");
    6ee0:	80 e6       	ldi	r24, 0x60	; 96
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6ee8:	82 e0       	ldi	r24, 0x02	; 2
    6eea:	61 e0       	ldi	r22, 0x01	; 1
    6eec:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
			CLCD_vSendString("Show Option");
    6ef0:	8c e6       	ldi	r24, 0x6C	; 108
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
				CLCD_vSendData(0xDF);
				CLCD_vSendData('C');
			}
		}
	}
}
    6ef8:	0f 90       	pop	r0
    6efa:	0f 90       	pop	r0
    6efc:	0f 90       	pop	r0
    6efe:	0f 90       	pop	r0
    6f00:	0f 90       	pop	r0
    6f02:	cf 91       	pop	r28
    6f04:	df 91       	pop	r29
    6f06:	08 95       	ret
			CLCD_vSendString("Press ON to");
			CLCD_vSetPosition(2, 1);
			CLCD_vSendString("Show Option");
			break;
		}
		LM35_u8GetAnalogSignal(&LM350, &TEMP_volt);
    6f08:	80 e3       	ldi	r24, 0x30	; 48
    6f0a:	93 e0       	ldi	r25, 0x03	; 3
    6f0c:	9e 01       	movw	r18, r28
    6f0e:	2d 5f       	subi	r18, 0xFD	; 253
    6f10:	3f 4f       	sbci	r19, 0xFF	; 255
    6f12:	b9 01       	movw	r22, r18
    6f14:	0e 94 ef 22 	call	0x45de	; 0x45de <LM35_u8GetAnalogSignal>
		CLCD_vSetPosition(4, 10);
    6f18:	84 e0       	ldi	r24, 0x04	; 4
    6f1a:	6a e0       	ldi	r22, 0x0A	; 10
    6f1c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
		CLCD_vSendString("TEMP : ");
    6f20:	8f ea       	ldi	r24, 0xAF	; 175
    6f22:	91 e0       	ldi	r25, 0x01	; 1
    6f24:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <CLCD_vSendString>
		if(TEMP_volt >= 1000)
    6f28:	8b 81       	ldd	r24, Y+3	; 0x03
    6f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    6f2c:	23 e0       	ldi	r18, 0x03	; 3
    6f2e:	88 3e       	cpi	r24, 0xE8	; 232
    6f30:	92 07       	cpc	r25, r18
    6f32:	08 f4       	brcc	.+2      	; 0x6f36 <Get_Temp+0x8e>
    6f34:	69 c0       	rjmp	.+210    	; 0x7008 <Get_Temp+0x160>
		{
			TEMP_val = (TEMP_volt - 1000) / 10;
    6f36:	8b 81       	ldd	r24, Y+3	; 0x03
    6f38:	9c 81       	ldd	r25, Y+4	; 0x04
    6f3a:	88 5e       	subi	r24, 0xE8	; 232
    6f3c:	93 40       	sbci	r25, 0x03	; 3
    6f3e:	2a e0       	ldi	r18, 0x0A	; 10
    6f40:	30 e0       	ldi	r19, 0x00	; 0
    6f42:	b9 01       	movw	r22, r18
    6f44:	0e 94 ed 38 	call	0x71da	; 0x71da <__udivmodhi4>
    6f48:	cb 01       	movw	r24, r22
    6f4a:	89 83       	std	Y+1, r24	; 0x01
			if (TEMP_val < 10)
    6f4c:	89 81       	ldd	r24, Y+1	; 0x01
    6f4e:	8a 30       	cpi	r24, 0x0A	; 10
    6f50:	90 f4       	brcc	.+36     	; 0x6f76 <Get_Temp+0xce>
			{
				CLCD_vSetPosition(4, 16);
    6f52:	84 e0       	ldi	r24, 0x04	; 4
    6f54:	60 e1       	ldi	r22, 0x10	; 16
    6f56:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData(TEMP_val + 48);
    6f5a:	89 81       	ldd	r24, Y+1	; 0x01
    6f5c:	80 5d       	subi	r24, 0xD0	; 208
    6f5e:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    6f62:	8f ed       	ldi	r24, 0xDF	; 223
    6f64:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData('C');
    6f68:	83 e4       	ldi	r24, 0x43	; 67
    6f6a:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(' ');
    6f6e:	80 e2       	ldi	r24, 0x20	; 32
    6f70:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    6f74:	b0 cf       	rjmp	.-160    	; 0x6ed6 <Get_Temp+0x2e>
			}
			else if (TEMP_val < 100)
    6f76:	89 81       	ldd	r24, Y+1	; 0x01
    6f78:	84 36       	cpi	r24, 0x64	; 100
    6f7a:	e0 f4       	brcc	.+56     	; 0x6fb4 <Get_Temp+0x10c>
			{
				CLCD_vSetPosition(4, 16);
    6f7c:	84 e0       	ldi	r24, 0x04	; 4
    6f7e:	60 e1       	ldi	r22, 0x10	; 16
    6f80:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData((TEMP_val /10) + 48);
    6f84:	89 81       	ldd	r24, Y+1	; 0x01
    6f86:	9a e0       	ldi	r25, 0x0A	; 10
    6f88:	69 2f       	mov	r22, r25
    6f8a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6f8e:	80 5d       	subi	r24, 0xD0	; 208
    6f90:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    6f94:	89 81       	ldd	r24, Y+1	; 0x01
    6f96:	9a e0       	ldi	r25, 0x0A	; 10
    6f98:	69 2f       	mov	r22, r25
    6f9a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6f9e:	89 2f       	mov	r24, r25
    6fa0:	80 5d       	subi	r24, 0xD0	; 208
    6fa2:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    6fa6:	8f ed       	ldi	r24, 0xDF	; 223
    6fa8:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData('C');
    6fac:	83 e4       	ldi	r24, 0x43	; 67
    6fae:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    6fb2:	91 cf       	rjmp	.-222    	; 0x6ed6 <Get_Temp+0x2e>
			}
			else if (TEMP_val < 1000)
    6fb4:	89 81       	ldd	r24, Y+1	; 0x01
			{
				CLCD_vSetPosition(4, 16);
    6fb6:	84 e0       	ldi	r24, 0x04	; 4
    6fb8:	60 e1       	ldi	r22, 0x10	; 16
    6fba:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData((TEMP_val / 100) + 48);
    6fbe:	89 81       	ldd	r24, Y+1	; 0x01
    6fc0:	94 e6       	ldi	r25, 0x64	; 100
    6fc2:	69 2f       	mov	r22, r25
    6fc4:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6fc8:	80 5d       	subi	r24, 0xD0	; 208
    6fca:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(((TEMP_val / 10) % 10) + 48);
    6fce:	89 81       	ldd	r24, Y+1	; 0x01
    6fd0:	9a e0       	ldi	r25, 0x0A	; 10
    6fd2:	69 2f       	mov	r22, r25
    6fd4:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6fd8:	9a e0       	ldi	r25, 0x0A	; 10
    6fda:	69 2f       	mov	r22, r25
    6fdc:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6fe0:	89 2f       	mov	r24, r25
    6fe2:	80 5d       	subi	r24, 0xD0	; 208
    6fe4:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    6fe8:	89 81       	ldd	r24, Y+1	; 0x01
    6fea:	9a e0       	ldi	r25, 0x0A	; 10
    6fec:	69 2f       	mov	r22, r25
    6fee:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    6ff2:	89 2f       	mov	r24, r25
    6ff4:	80 5d       	subi	r24, 0xD0	; 208
    6ff6:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    6ffa:	8f ed       	ldi	r24, 0xDF	; 223
    6ffc:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData('C');
    7000:	83 e4       	ldi	r24, 0x43	; 67
    7002:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    7006:	67 cf       	rjmp	.-306    	; 0x6ed6 <Get_Temp+0x2e>
			}
		}
		else
		{
			TEMP_val = (1000 - TEMP_volt ) / 10;
    7008:	2b 81       	ldd	r18, Y+3	; 0x03
    700a:	3c 81       	ldd	r19, Y+4	; 0x04
    700c:	88 ee       	ldi	r24, 0xE8	; 232
    700e:	93 e0       	ldi	r25, 0x03	; 3
    7010:	82 1b       	sub	r24, r18
    7012:	93 0b       	sbc	r25, r19
    7014:	2a e0       	ldi	r18, 0x0A	; 10
    7016:	30 e0       	ldi	r19, 0x00	; 0
    7018:	b9 01       	movw	r22, r18
    701a:	0e 94 ed 38 	call	0x71da	; 0x71da <__udivmodhi4>
    701e:	cb 01       	movw	r24, r22
    7020:	89 83       	std	Y+1, r24	; 0x01
			if (TEMP_val < 10)
    7022:	89 81       	ldd	r24, Y+1	; 0x01
    7024:	8a 30       	cpi	r24, 0x0A	; 10
    7026:	a8 f4       	brcc	.+42     	; 0x7052 <Get_Temp+0x1aa>
			{
				CLCD_vSetPosition(4, 16);
    7028:	84 e0       	ldi	r24, 0x04	; 4
    702a:	60 e1       	ldi	r22, 0x10	; 16
    702c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData('-');
    7030:	8d e2       	ldi	r24, 0x2D	; 45
    7032:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(TEMP_val + 48);
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	80 5d       	subi	r24, 0xD0	; 208
    703a:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    703e:	8f ed       	ldi	r24, 0xDF	; 223
    7040:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData('C');
    7044:	83 e4       	ldi	r24, 0x43	; 67
    7046:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(' ');
    704a:	80 e2       	ldi	r24, 0x20	; 32
    704c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    7050:	42 cf       	rjmp	.-380    	; 0x6ed6 <Get_Temp+0x2e>
			}
			else if (TEMP_val < 100)
    7052:	89 81       	ldd	r24, Y+1	; 0x01
    7054:	84 36       	cpi	r24, 0x64	; 100
    7056:	08 f0       	brcs	.+2      	; 0x705a <Get_Temp+0x1b2>
    7058:	3e cf       	rjmp	.-388    	; 0x6ed6 <Get_Temp+0x2e>
			{
				CLCD_vSetPosition(4, 16);
    705a:	84 e0       	ldi	r24, 0x04	; 4
    705c:	60 e1       	ldi	r22, 0x10	; 16
    705e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <CLCD_vSetPosition>
				CLCD_vSendData('-');
    7062:	8d e2       	ldi	r24, 0x2D	; 45
    7064:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val/10) + 48);
    7068:	89 81       	ldd	r24, Y+1	; 0x01
    706a:	9a e0       	ldi	r25, 0x0A	; 10
    706c:	69 2f       	mov	r22, r25
    706e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    7072:	80 5d       	subi	r24, 0xD0	; 208
    7074:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    7078:	89 81       	ldd	r24, Y+1	; 0x01
    707a:	9a e0       	ldi	r25, 0x0A	; 10
    707c:	69 2f       	mov	r22, r25
    707e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <__udivmodqi4>
    7082:	89 2f       	mov	r24, r25
    7084:	80 5d       	subi	r24, 0xD0	; 208
    7086:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    708a:	8f ed       	ldi	r24, 0xDF	; 223
    708c:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
				CLCD_vSendData('C');
    7090:	83 e4       	ldi	r24, 0x43	; 67
    7092:	0e 94 29 1c 	call	0x3852	; 0x3852 <CLCD_vSendData>
    7096:	1f cf       	rjmp	.-450    	; 0x6ed6 <Get_Temp+0x2e>

00007098 <ISR_TIMER2_OVF_MODE>:
}

//===================================================================/
/* ISR for timer OverFlow */
void ISR_TIMER2_OVF_MODE()
{
    7098:	df 93       	push	r29
    709a:	cf 93       	push	r28
    709c:	cd b7       	in	r28, 0x3d	; 61
    709e:	de b7       	in	r29, 0x3e	; 62
	Second++;
    70a0:	80 91 53 03 	lds	r24, 0x0353
    70a4:	8f 5f       	subi	r24, 0xFF	; 255
    70a6:	80 93 53 03 	sts	0x0353, r24

	if (Second == 60)
    70aa:	80 91 53 03 	lds	r24, 0x0353
    70ae:	8c 33       	cpi	r24, 0x3C	; 60
    70b0:	39 f4       	brne	.+14     	; 0x70c0 <ISR_TIMER2_OVF_MODE+0x28>
	{
		Second = 0;
    70b2:	10 92 53 03 	sts	0x0353, r1
		Minute++;
    70b6:	80 91 52 03 	lds	r24, 0x0352
    70ba:	8f 5f       	subi	r24, 0xFF	; 255
    70bc:	80 93 52 03 	sts	0x0352, r24
	}
	if (Minute == 60)
    70c0:	80 91 52 03 	lds	r24, 0x0352
    70c4:	8c 33       	cpi	r24, 0x3C	; 60
    70c6:	39 f4       	brne	.+14     	; 0x70d6 <ISR_TIMER2_OVF_MODE+0x3e>
	{
		Minute=0;
    70c8:	10 92 52 03 	sts	0x0352, r1
		Hour++;
    70cc:	80 91 10 03 	lds	r24, 0x0310
    70d0:	8f 5f       	subi	r24, 0xFF	; 255
    70d2:	80 93 10 03 	sts	0x0310, r24
	}
	if (mode == '1')
    70d6:	80 91 11 03 	lds	r24, 0x0311
    70da:	81 33       	cpi	r24, 0x31	; 49
    70dc:	d9 f4       	brne	.+54     	; 0x7114 <ISR_TIMER2_OVF_MODE+0x7c>
	{
		if (Hour== 13)
    70de:	80 91 10 03 	lds	r24, 0x0310
    70e2:	8d 30       	cpi	r24, 0x0D	; 13
    70e4:	19 f4       	brne	.+6      	; 0x70ec <ISR_TIMER2_OVF_MODE+0x54>
		{
			Hour= 1;
    70e6:	81 e0       	ldi	r24, 0x01	; 1
    70e8:	80 93 10 03 	sts	0x0310, r24
		}
		if (Hour == 12 && Minute == 0 && Second == 0 )
    70ec:	80 91 10 03 	lds	r24, 0x0310
    70f0:	8c 30       	cpi	r24, 0x0C	; 12
    70f2:	81 f4       	brne	.+32     	; 0x7114 <ISR_TIMER2_OVF_MODE+0x7c>
    70f4:	80 91 52 03 	lds	r24, 0x0352
    70f8:	88 23       	and	r24, r24
    70fa:	61 f4       	brne	.+24     	; 0x7114 <ISR_TIMER2_OVF_MODE+0x7c>
    70fc:	80 91 53 03 	lds	r24, 0x0353
    7100:	88 23       	and	r24, r24
    7102:	41 f4       	brne	.+16     	; 0x7114 <ISR_TIMER2_OVF_MODE+0x7c>
		{
			TOG_BIT(PORTA_REG, DIO_PIN3);
    7104:	ab e3       	ldi	r26, 0x3B	; 59
    7106:	b0 e0       	ldi	r27, 0x00	; 0
    7108:	eb e3       	ldi	r30, 0x3B	; 59
    710a:	f0 e0       	ldi	r31, 0x00	; 0
    710c:	90 81       	ld	r25, Z
    710e:	88 e0       	ldi	r24, 0x08	; 8
    7110:	89 27       	eor	r24, r25
    7112:	8c 93       	st	X, r24
		}
	}
	if (mode == '2')
    7114:	80 91 11 03 	lds	r24, 0x0311
    7118:	82 33       	cpi	r24, 0x32	; 50
    711a:	89 f5       	brne	.+98     	; 0x717e <ISR_TIMER2_OVF_MODE+0xe6>
	{
		if (Hour == 24)
    711c:	80 91 10 03 	lds	r24, 0x0310
    7120:	88 31       	cpi	r24, 0x18	; 24
    7122:	11 f4       	brne	.+4      	; 0x7128 <ISR_TIMER2_OVF_MODE+0x90>
		{
			Hour = 0;
    7124:	10 92 10 03 	sts	0x0310, r1
		}
		else
		{

		}
		if (Hour < 12)
    7128:	80 91 10 03 	lds	r24, 0x0310
    712c:	8c 30       	cpi	r24, 0x0C	; 12
    712e:	40 f4       	brcc	.+16     	; 0x7140 <ISR_TIMER2_OVF_MODE+0xa8>
		{
			SET_BIT(PORTA_REG, DIO_PIN3);
    7130:	ab e3       	ldi	r26, 0x3B	; 59
    7132:	b0 e0       	ldi	r27, 0x00	; 0
    7134:	eb e3       	ldi	r30, 0x3B	; 59
    7136:	f0 e0       	ldi	r31, 0x00	; 0
    7138:	80 81       	ld	r24, Z
    713a:	88 60       	ori	r24, 0x08	; 8
    713c:	8c 93       	st	X, r24
    713e:	1f c0       	rjmp	.+62     	; 0x717e <ISR_TIMER2_OVF_MODE+0xe6>
		}
		else if (Hour == 12 && Minute == 0 && Second == 0)
    7140:	80 91 10 03 	lds	r24, 0x0310
    7144:	8c 30       	cpi	r24, 0x0C	; 12
    7146:	81 f4       	brne	.+32     	; 0x7168 <ISR_TIMER2_OVF_MODE+0xd0>
    7148:	80 91 52 03 	lds	r24, 0x0352
    714c:	88 23       	and	r24, r24
    714e:	61 f4       	brne	.+24     	; 0x7168 <ISR_TIMER2_OVF_MODE+0xd0>
    7150:	80 91 53 03 	lds	r24, 0x0353
    7154:	88 23       	and	r24, r24
    7156:	41 f4       	brne	.+16     	; 0x7168 <ISR_TIMER2_OVF_MODE+0xd0>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    7158:	ab e3       	ldi	r26, 0x3B	; 59
    715a:	b0 e0       	ldi	r27, 0x00	; 0
    715c:	eb e3       	ldi	r30, 0x3B	; 59
    715e:	f0 e0       	ldi	r31, 0x00	; 0
    7160:	80 81       	ld	r24, Z
    7162:	87 7f       	andi	r24, 0xF7	; 247
    7164:	8c 93       	st	X, r24
    7166:	0b c0       	rjmp	.+22     	; 0x717e <ISR_TIMER2_OVF_MODE+0xe6>
		}
		else if (Hour > 12)
    7168:	80 91 10 03 	lds	r24, 0x0310
    716c:	8d 30       	cpi	r24, 0x0D	; 13
    716e:	38 f0       	brcs	.+14     	; 0x717e <ISR_TIMER2_OVF_MODE+0xe6>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    7170:	ab e3       	ldi	r26, 0x3B	; 59
    7172:	b0 e0       	ldi	r27, 0x00	; 0
    7174:	eb e3       	ldi	r30, 0x3B	; 59
    7176:	f0 e0       	ldi	r31, 0x00	; 0
    7178:	80 81       	ld	r24, Z
    717a:	87 7f       	andi	r24, 0xF7	; 247
    717c:	8c 93       	st	X, r24
		else
		{

		}
	}
}
    717e:	cf 91       	pop	r28
    7180:	df 91       	pop	r29
    7182:	08 95       	ret

00007184 <__mulsi3>:
    7184:	62 9f       	mul	r22, r18
    7186:	d0 01       	movw	r26, r0
    7188:	73 9f       	mul	r23, r19
    718a:	f0 01       	movw	r30, r0
    718c:	82 9f       	mul	r24, r18
    718e:	e0 0d       	add	r30, r0
    7190:	f1 1d       	adc	r31, r1
    7192:	64 9f       	mul	r22, r20
    7194:	e0 0d       	add	r30, r0
    7196:	f1 1d       	adc	r31, r1
    7198:	92 9f       	mul	r25, r18
    719a:	f0 0d       	add	r31, r0
    719c:	83 9f       	mul	r24, r19
    719e:	f0 0d       	add	r31, r0
    71a0:	74 9f       	mul	r23, r20
    71a2:	f0 0d       	add	r31, r0
    71a4:	65 9f       	mul	r22, r21
    71a6:	f0 0d       	add	r31, r0
    71a8:	99 27       	eor	r25, r25
    71aa:	72 9f       	mul	r23, r18
    71ac:	b0 0d       	add	r27, r0
    71ae:	e1 1d       	adc	r30, r1
    71b0:	f9 1f       	adc	r31, r25
    71b2:	63 9f       	mul	r22, r19
    71b4:	b0 0d       	add	r27, r0
    71b6:	e1 1d       	adc	r30, r1
    71b8:	f9 1f       	adc	r31, r25
    71ba:	bd 01       	movw	r22, r26
    71bc:	cf 01       	movw	r24, r30
    71be:	11 24       	eor	r1, r1
    71c0:	08 95       	ret

000071c2 <__udivmodqi4>:
    71c2:	99 1b       	sub	r25, r25
    71c4:	79 e0       	ldi	r23, 0x09	; 9
    71c6:	04 c0       	rjmp	.+8      	; 0x71d0 <__udivmodqi4_ep>

000071c8 <__udivmodqi4_loop>:
    71c8:	99 1f       	adc	r25, r25
    71ca:	96 17       	cp	r25, r22
    71cc:	08 f0       	brcs	.+2      	; 0x71d0 <__udivmodqi4_ep>
    71ce:	96 1b       	sub	r25, r22

000071d0 <__udivmodqi4_ep>:
    71d0:	88 1f       	adc	r24, r24
    71d2:	7a 95       	dec	r23
    71d4:	c9 f7       	brne	.-14     	; 0x71c8 <__udivmodqi4_loop>
    71d6:	80 95       	com	r24
    71d8:	08 95       	ret

000071da <__udivmodhi4>:
    71da:	aa 1b       	sub	r26, r26
    71dc:	bb 1b       	sub	r27, r27
    71de:	51 e1       	ldi	r21, 0x11	; 17
    71e0:	07 c0       	rjmp	.+14     	; 0x71f0 <__udivmodhi4_ep>

000071e2 <__udivmodhi4_loop>:
    71e2:	aa 1f       	adc	r26, r26
    71e4:	bb 1f       	adc	r27, r27
    71e6:	a6 17       	cp	r26, r22
    71e8:	b7 07       	cpc	r27, r23
    71ea:	10 f0       	brcs	.+4      	; 0x71f0 <__udivmodhi4_ep>
    71ec:	a6 1b       	sub	r26, r22
    71ee:	b7 0b       	sbc	r27, r23

000071f0 <__udivmodhi4_ep>:
    71f0:	88 1f       	adc	r24, r24
    71f2:	99 1f       	adc	r25, r25
    71f4:	5a 95       	dec	r21
    71f6:	a9 f7       	brne	.-22     	; 0x71e2 <__udivmodhi4_loop>
    71f8:	80 95       	com	r24
    71fa:	90 95       	com	r25
    71fc:	bc 01       	movw	r22, r24
    71fe:	cd 01       	movw	r24, r26
    7200:	08 95       	ret

00007202 <__udivmodsi4>:
    7202:	a1 e2       	ldi	r26, 0x21	; 33
    7204:	1a 2e       	mov	r1, r26
    7206:	aa 1b       	sub	r26, r26
    7208:	bb 1b       	sub	r27, r27
    720a:	fd 01       	movw	r30, r26
    720c:	0d c0       	rjmp	.+26     	; 0x7228 <__udivmodsi4_ep>

0000720e <__udivmodsi4_loop>:
    720e:	aa 1f       	adc	r26, r26
    7210:	bb 1f       	adc	r27, r27
    7212:	ee 1f       	adc	r30, r30
    7214:	ff 1f       	adc	r31, r31
    7216:	a2 17       	cp	r26, r18
    7218:	b3 07       	cpc	r27, r19
    721a:	e4 07       	cpc	r30, r20
    721c:	f5 07       	cpc	r31, r21
    721e:	20 f0       	brcs	.+8      	; 0x7228 <__udivmodsi4_ep>
    7220:	a2 1b       	sub	r26, r18
    7222:	b3 0b       	sbc	r27, r19
    7224:	e4 0b       	sbc	r30, r20
    7226:	f5 0b       	sbc	r31, r21

00007228 <__udivmodsi4_ep>:
    7228:	66 1f       	adc	r22, r22
    722a:	77 1f       	adc	r23, r23
    722c:	88 1f       	adc	r24, r24
    722e:	99 1f       	adc	r25, r25
    7230:	1a 94       	dec	r1
    7232:	69 f7       	brne	.-38     	; 0x720e <__udivmodsi4_loop>
    7234:	60 95       	com	r22
    7236:	70 95       	com	r23
    7238:	80 95       	com	r24
    723a:	90 95       	com	r25
    723c:	9b 01       	movw	r18, r22
    723e:	ac 01       	movw	r20, r24
    7240:	bd 01       	movw	r22, r26
    7242:	cf 01       	movw	r24, r30
    7244:	08 95       	ret

00007246 <__divmodsi4>:
    7246:	97 fb       	bst	r25, 7
    7248:	09 2e       	mov	r0, r25
    724a:	05 26       	eor	r0, r21
    724c:	0e d0       	rcall	.+28     	; 0x726a <__divmodsi4_neg1>
    724e:	57 fd       	sbrc	r21, 7
    7250:	04 d0       	rcall	.+8      	; 0x725a <__divmodsi4_neg2>
    7252:	d7 df       	rcall	.-82     	; 0x7202 <__udivmodsi4>
    7254:	0a d0       	rcall	.+20     	; 0x726a <__divmodsi4_neg1>
    7256:	00 1c       	adc	r0, r0
    7258:	38 f4       	brcc	.+14     	; 0x7268 <__divmodsi4_exit>

0000725a <__divmodsi4_neg2>:
    725a:	50 95       	com	r21
    725c:	40 95       	com	r20
    725e:	30 95       	com	r19
    7260:	21 95       	neg	r18
    7262:	3f 4f       	sbci	r19, 0xFF	; 255
    7264:	4f 4f       	sbci	r20, 0xFF	; 255
    7266:	5f 4f       	sbci	r21, 0xFF	; 255

00007268 <__divmodsi4_exit>:
    7268:	08 95       	ret

0000726a <__divmodsi4_neg1>:
    726a:	f6 f7       	brtc	.-4      	; 0x7268 <__divmodsi4_exit>
    726c:	90 95       	com	r25
    726e:	80 95       	com	r24
    7270:	70 95       	com	r23
    7272:	61 95       	neg	r22
    7274:	7f 4f       	sbci	r23, 0xFF	; 255
    7276:	8f 4f       	sbci	r24, 0xFF	; 255
    7278:	9f 4f       	sbci	r25, 0xFF	; 255
    727a:	08 95       	ret

0000727c <__prologue_saves__>:
    727c:	2f 92       	push	r2
    727e:	3f 92       	push	r3
    7280:	4f 92       	push	r4
    7282:	5f 92       	push	r5
    7284:	6f 92       	push	r6
    7286:	7f 92       	push	r7
    7288:	8f 92       	push	r8
    728a:	9f 92       	push	r9
    728c:	af 92       	push	r10
    728e:	bf 92       	push	r11
    7290:	cf 92       	push	r12
    7292:	df 92       	push	r13
    7294:	ef 92       	push	r14
    7296:	ff 92       	push	r15
    7298:	0f 93       	push	r16
    729a:	1f 93       	push	r17
    729c:	cf 93       	push	r28
    729e:	df 93       	push	r29
    72a0:	cd b7       	in	r28, 0x3d	; 61
    72a2:	de b7       	in	r29, 0x3e	; 62
    72a4:	ca 1b       	sub	r28, r26
    72a6:	db 0b       	sbc	r29, r27
    72a8:	0f b6       	in	r0, 0x3f	; 63
    72aa:	f8 94       	cli
    72ac:	de bf       	out	0x3e, r29	; 62
    72ae:	0f be       	out	0x3f, r0	; 63
    72b0:	cd bf       	out	0x3d, r28	; 61
    72b2:	09 94       	ijmp

000072b4 <__epilogue_restores__>:
    72b4:	2a 88       	ldd	r2, Y+18	; 0x12
    72b6:	39 88       	ldd	r3, Y+17	; 0x11
    72b8:	48 88       	ldd	r4, Y+16	; 0x10
    72ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    72bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    72be:	7d 84       	ldd	r7, Y+13	; 0x0d
    72c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    72c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    72c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    72c6:	b9 84       	ldd	r11, Y+9	; 0x09
    72c8:	c8 84       	ldd	r12, Y+8	; 0x08
    72ca:	df 80       	ldd	r13, Y+7	; 0x07
    72cc:	ee 80       	ldd	r14, Y+6	; 0x06
    72ce:	fd 80       	ldd	r15, Y+5	; 0x05
    72d0:	0c 81       	ldd	r16, Y+4	; 0x04
    72d2:	1b 81       	ldd	r17, Y+3	; 0x03
    72d4:	aa 81       	ldd	r26, Y+2	; 0x02
    72d6:	b9 81       	ldd	r27, Y+1	; 0x01
    72d8:	ce 0f       	add	r28, r30
    72da:	d1 1d       	adc	r29, r1
    72dc:	0f b6       	in	r0, 0x3f	; 63
    72de:	f8 94       	cli
    72e0:	de bf       	out	0x3e, r29	; 62
    72e2:	0f be       	out	0x3f, r0	; 63
    72e4:	cd bf       	out	0x3d, r28	; 61
    72e6:	ed 01       	movw	r28, r26
    72e8:	08 95       	ret

000072ea <_exit>:
    72ea:	f8 94       	cli

000072ec <__stop_program>:
    72ec:	ff cf       	rjmp	.-2      	; 0x72ec <__stop_program>
