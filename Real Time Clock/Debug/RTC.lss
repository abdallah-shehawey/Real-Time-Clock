
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031a  00800060  00007a30  00007ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080037a  0080037a  00007dde  2**0
                  ALLOC
  3 .stab         000070f8  00000000  00000000  00007de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002201  00000000  00000000  0000eed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000110d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  000112f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00011570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  00013ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0001557a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00016aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00016d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  00017097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017c87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_4>
      14:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_5>
      18:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_6>
      1c:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_7>
      20:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_8>
      24:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_9>
      28:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_10>
      2c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <main>
      8a:	0c 94 16 3d 	jmp	0x7a2c	; 0x7a2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 df 3c 	jmp	0x79be	; 0x79be <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 fb 3c 	jmp	0x79f6	; 0x79f6 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 df 3c 	jmp	0x79be	; 0x79be <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	ab ef       	ldi	r26, 0xFB	; 251
     360:	b1 e0       	ldi	r27, 0x01	; 1
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 fb 3c 	jmp	0x79f6	; 0x79f6 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 df 3c 	jmp	0x79be	; 0x79be <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	8b ef       	ldi	r24, 0xFB	; 251
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 fb 3c 	jmp	0x79f6	; 0x79f6 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 e7 3c 	jmp	0x79ce	; 0x79ce <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	6b ef       	ldi	r22, 0xFB	; 251
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 e8 3c 	jmp	0x79d0	; 0x79d0 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 04 3d 	jmp	0x7a08	; 0x7a08 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 ef 3c 	jmp	0x79de	; 0x79de <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 0b 3d 	jmp	0x7a16	; 0x7a16 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 e7 3c 	jmp	0x79ce	; 0x79ce <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	ed 5f       	subi	r30, 0xFD	; 253
     ebc:	fd 4f       	sbci	r31, 0xFD	; 253
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <TIMER0_vInit>:

/*Global Pointer to array of Function to Hold the Call Back Function Address for Timer*/
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */

void TIMER0_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1228:	a3 e5       	ldi	r26, 0x53	; 83
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e3 e5       	ldi	r30, 0x53	; 83
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7b       	andi	r24, 0xBF	; 191
    1234:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1236:	a3 e5       	ldi	r26, 0x53	; 83
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e3 e5       	ldi	r30, 0x53	; 83
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1244:	e2 e5       	ldi	r30, 0x52	; 82
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 ec       	ldi	r24, 0xC0	; 192
    124a:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    124c:	a9 e5       	ldi	r26, 0x59	; 89
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 e5       	ldi	r30, 0x59	; 89
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    125a:	a3 e5       	ldi	r26, 0x53	; 83
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 7f       	andi	r24, 0xF8	; 248
    1266:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1268:	a3 e5       	ldi	r26, 0x53	; 83
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	8c 93       	st	X, r24
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    12bc:	ea e4       	ldi	r30, 0x4A	; 74
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	84 ef       	ldi	r24, 0xF4	; 244
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    12c8:	e8 e4       	ldi	r30, 0x48	; 72
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	11 82       	std	Z+1, r1	; 0x01
    12ce:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    12d0:	e6 e4       	ldi	r30, 0x46	; 70
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	9e e4       	ldi	r25, 0x4E	; 78
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    12dc:	ae e4       	ldi	r26, 0x4E	; 78
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ee e4       	ldi	r30, 0x4E	; 78
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 64       	ori	r24, 0x40	; 64
    12e8:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    12ea:	af e4       	ldi	r26, 0x4F	; 79
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e4       	ldi	r30, 0x4F	; 79
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7b       	andi	r24, 0xBF	; 191
    12f6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    12f8:	af e4       	ldi	r26, 0x4F	; 79
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 7e       	andi	r24, 0xEF	; 239
    1312:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1314:	af e4       	ldi	r26, 0x4F	; 79
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 62       	ori	r24, 0x20	; 32
    1320:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8b 7f       	andi	r24, 0xFB	; 251
    132e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7e       	andi	r24, 0xEF	; 239
    133c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    133e:	a9 e5       	ldi	r26, 0x59	; 89
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e9 e5       	ldi	r30, 0x59	; 89
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    135a:	ae e4       	ldi	r26, 0x4E	; 78
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ee e4       	ldi	r30, 0x4E	; 78
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	88 7f       	andi	r24, 0xF8	; 248
    1366:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1368:	ae e4       	ldi	r26, 0x4E	; 78
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ee e4       	ldi	r30, 0x4E	; 78
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	8c 93       	st	X, r24


}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    1384:	a2 e4       	ldi	r26, 0x42	; 66
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e4       	ldi	r30, 0x42	; 66
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1392:	a5 e4       	ldi	r26, 0x45	; 69
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e4       	ldi	r30, 0x45	; 69
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    13a0:	a5 e4       	ldi	r26, 0x45	; 69
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e4       	ldi	r30, 0x45	; 69
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	87 7f       	andi	r24, 0xF7	; 247
    13ac:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    13ae:	e4 e4       	ldi	r30, 0x44	; 68
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    13b4:	a9 e5       	ldi	r26, 0x59	; 89
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 e5       	ldi	r30, 0x59	; 89
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	80 64       	ori	r24, 0x40	; 64
    13c0:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    13c2:	a5 e4       	ldi	r26, 0x45	; 69
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e4       	ldi	r30, 0x45	; 69
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    13d0:	a5 e4       	ldi	r26, 0x45	; 69
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e4       	ldi	r30, 0x45	; 69
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	85 60       	ori	r24, 0x05	; 5
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    13f0:	e2 e5       	ldi	r30, 0x52	; 82
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	80 83       	st	Z, r24
}
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <TIMER1_vSetPreload+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    140e:	ec e4       	ldi	r30, 0x4C	; 76
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1430:	e4 e4       	ldi	r30, 0x44	; 68
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	80 83       	st	Z, r24
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    144c:	ec e5       	ldi	r30, 0x5C	; 92
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	80 83       	st	Z, r24
}
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <TIMER1_vSetCTCA+0x6>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    146a:	ea e4       	ldi	r30, 0x4A	; 74
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <TIMER1_vSetCTCB+0x6>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    148e:	e8 e4       	ldi	r30, 0x48	; 72
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    14b0:	e3 e4       	ldi	r30, 0x43	; 67
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	80 83       	st	Z, r24
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <TIMER1_vSetICR1+0x6>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    14ce:	e6 e4       	ldi	r30, 0x46	; 70
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    14ec:	e2 e5       	ldi	r30, 0x52	; 82
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1500:	ec e4       	ldi	r30, 0x4C	; 76
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1516:	e4 e4       	ldi	r30, 0x44	; 68
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <TIMER_vSetPWM+0x6>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1530:	ea e4       	ldi	r30, 0x4A	; 74
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    154e:	ae e4       	ldi	r26, 0x4E	; 78
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ee e4       	ldi	r30, 0x4E	; 78
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 64       	ori	r24, 0x40	; 64
    155a:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    155c:	a9 e5       	ldi	r26, 0x59	; 89
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e9 e5       	ldi	r30, 0x59	; 89
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 62       	ori	r24, 0x20	; 32
    1568:	8c 93       	st	X, r24
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <TIMER_vICUSetTriggerEdge+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    157c:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	41 f4       	brne	.+16     	; 0x1594 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1584:	ae e4       	ldi	r26, 0x4E	; 78
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ee e4       	ldi	r30, 0x4E	; 78
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 64       	ori	r24, 0x40	; 64
    1590:	8c 93       	st	X, r24
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 23       	and	r24, r24
    1598:	41 f4       	brne	.+16     	; 0x15aa <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    159a:	ae e4       	ldi	r26, 0x4E	; 78
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e4       	ldi	r30, 0x4E	; 78
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	8c 93       	st	X, r24
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    15c2:	a9 e5       	ldi	r26, 0x59	; 89
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e9 e5       	ldi	r30, 0x59	; 89
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 62       	ori	r24, 0x20	; 32
    15ce:	8c 93       	st	X, r24
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    15de:	a9 e5       	ldi	r26, 0x59	; 89
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e9 e5       	ldi	r30, 0x59	; 89
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7d       	andi	r24, 0xDF	; 223
    15ea:	8c 93       	st	X, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    15fa:	e6 e4       	ldi	r30, 0x46	; 70
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
}
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1610:	a1 e4       	ldi	r26, 0x41	; 65
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e1 e4       	ldi	r30, 0x41	; 65
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 7f       	andi	r24, 0xF8	; 248
    161c:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    161e:	a1 e4       	ldi	r26, 0x41	; 65
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e4       	ldi	r30, 0x41	; 65
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	86 60       	ori	r24, 0x06	; 6
    162a:	8c 93       	st	X, r24
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    163a:	a1 e4       	ldi	r26, 0x41	; 65
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e1 e4       	ldi	r30, 0x41	; 65
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 60       	ori	r24, 0x08	; 8
    1646:	8c 93       	st	X, r24
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1656:	a1 e4       	ldi	r26, 0x41	; 65
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e4       	ldi	r30, 0x41	; 65
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 61       	ori	r24, 0x18	; 24
    1662:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1664:	e1 e4       	ldi	r30, 0x41	; 65
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	10 82       	st	Z, r1
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <TIMER_u8SetCallBack>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <TIMER_u8SetCallBack+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <TIMER_u8SetCallBack+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9b 83       	std	Y+3, r25	; 0x03
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1682:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f0       	breq	.+26     	; 0x16a6 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	fc 01       	movw	r30, r24
    1698:	e6 58       	subi	r30, 0x86	; 134
    169a:	fc 4f       	sbci	r31, 0xFC	; 252
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	9b 81       	ldd	r25, Y+3	; 0x03
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    16e4:	80 91 90 03 	lds	r24, 0x0390
    16e8:	90 91 91 03 	lds	r25, 0x0391
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	29 f0       	breq	.+10     	; 0x16fa <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    16f0:	e0 91 90 03 	lds	r30, 0x0390
    16f4:	f0 91 91 03 	lds	r31, 0x0391
    16f8:	09 95       	icall
	}
}
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	7f 91       	pop	r23
    170c:	6f 91       	pop	r22
    170e:	5f 91       	pop	r21
    1710:	4f 91       	pop	r20
    1712:	3f 91       	pop	r19
    1714:	2f 91       	pop	r18
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    174a:	80 91 8e 03 	lds	r24, 0x038E
    174e:	90 91 8f 03 	lds	r25, 0x038F
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	29 f0       	breq	.+10     	; 0x1760 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1756:	e0 91 8e 03 	lds	r30, 0x038E
    175a:	f0 91 8f 03 	lds	r31, 0x038F
    175e:	09 95       	icall
	}
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    17b0:	80 91 8c 03 	lds	r24, 0x038C
    17b4:	90 91 8d 03 	lds	r25, 0x038D
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    17bc:	e0 91 8c 03 	lds	r30, 0x038C
    17c0:	f0 91 8d 03 	lds	r31, 0x038D
    17c4:	09 95       	icall
	}
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1816:	80 91 8a 03 	lds	r24, 0x038A
    181a:	90 91 8b 03 	lds	r25, 0x038B
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1822:	e0 91 8a 03 	lds	r30, 0x038A
    1826:	f0 91 8b 03 	lds	r31, 0x038B
    182a:	09 95       	icall
	}
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    187c:	80 91 88 03 	lds	r24, 0x0388
    1880:	90 91 89 03 	lds	r25, 0x0389
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	29 f0       	breq	.+10     	; 0x1892 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1888:	e0 91 88 03 	lds	r30, 0x0388
    188c:	f0 91 89 03 	lds	r31, 0x0389
    1890:	09 95       	icall
	}
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    18e2:	80 91 86 03 	lds	r24, 0x0386
    18e6:	90 91 87 03 	lds	r25, 0x0387
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    18ee:	e0 91 86 03 	lds	r30, 0x0386
    18f2:	f0 91 87 03 	lds	r31, 0x0387
    18f6:	09 95       	icall
	}
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1948:	80 91 84 03 	lds	r24, 0x0384
    194c:	90 91 85 03 	lds	r25, 0x0385
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	29 f0       	breq	.+10     	; 0x195e <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1954:	e0 91 84 03 	lds	r30, 0x0384
    1958:	f0 91 85 03 	lds	r31, 0x0385
    195c:	09 95       	icall
	}
}
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    19ae:	80 91 82 03 	lds	r24, 0x0382
    19b2:	90 91 83 03 	lds	r25, 0x0383
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    19ba:	e0 91 82 03 	lds	r30, 0x0382
    19be:	f0 91 83 03 	lds	r31, 0x0383
    19c2:	09 95       	icall
	}
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	bf 91       	pop	r27
    19ce:	af 91       	pop	r26
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	7f 91       	pop	r23
    19d6:	6f 91       	pop	r22
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    19f2:	af e5       	ldi	r26, 0x5F	; 95
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ef e5       	ldi	r30, 0x5F	; 95
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 68       	ori	r24, 0x80	; 128
    19fe:	8c 93       	st	X, r24
}
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    1a0e:	af e5       	ldi	r26, 0x5F	; 95
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ef e5       	ldi	r30, 0x5F	; 95
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 77       	andi	r24, 0x7F	; 127
    1a1a:	8c 93       	st	X, r24
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	28 97       	sbiw	r28, 0x08	; 8
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	8a 83       	std	Y+2, r24	; 0x02
    1a38:	6b 83       	std	Y+3, r22	; 0x03
    1a3a:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <DIO_enumSetPinDir+0x26>
    1a46:	f1 c0       	rjmp	.+482    	; 0x1c2a <DIO_enumSetPinDir+0x208>
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <DIO_enumSetPinDir+0x2e>
    1a4e:	ed c0       	rjmp	.+474    	; 0x1c2a <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <DIO_enumSetPinDir+0x36>
    1a56:	6f c0       	rjmp	.+222    	; 0x1b36 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	38 87       	std	Y+8, r19	; 0x08
    1a60:	2f 83       	std	Y+7, r18	; 0x07
    1a62:	8f 81       	ldd	r24, Y+7	; 0x07
    1a64:	98 85       	ldd	r25, Y+8	; 0x08
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	49 f1       	breq	.+82     	; 0x1abe <DIO_enumSetPinDir+0x9c>
    1a6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a6e:	38 85       	ldd	r19, Y+8	; 0x08
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_enumSetPinDir+0x5e>
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_enumSetPinDir+0x74>
    1a7e:	d6 c0       	rjmp	.+428    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    1a80:	2f 81       	ldd	r18, Y+7	; 0x07
    1a82:	38 85       	ldd	r19, Y+8	; 0x08
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	71 f1       	breq	.+92     	; 0x1ae6 <DIO_enumSetPinDir+0xc4>
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	e9 f1       	breq	.+122    	; 0x1b0e <DIO_enumSetPinDir+0xec>
    1a94:	cb c0       	rjmp	.+406    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1a96:	aa e3       	ldi	r26, 0x3A	; 58
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	ea e3       	ldi	r30, 0x3A	; 58
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_enumSetPinDir+0x92>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_enumSetPinDir+0x8e>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	b7 c0       	rjmp	.+366    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1abe:	a7 e3       	ldi	r26, 0x37	; 55
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e7 e3       	ldi	r30, 0x37	; 55
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_enumSetPinDir+0xba>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_enumSetPinDir+0xb6>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	a3 c0       	rjmp	.+326    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    1ae6:	a4 e3       	ldi	r26, 0x34	; 52
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e4 e3       	ldi	r30, 0x34	; 52
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_enumSetPinDir+0xe2>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_enumSetPinDir+0xde>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	8f c0       	rjmp	.+286    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    1b0e:	a1 e3       	ldi	r26, 0x31	; 49
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e1 e3       	ldi	r30, 0x31	; 49
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_enumSetPinDir+0x10a>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_enumSetPinDir+0x106>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	7b c0       	rjmp	.+246    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	88 23       	and	r24, r24
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <DIO_enumSetPinDir+0x11c>
    1b3c:	74 c0       	rjmp	.+232    	; 0x1c26 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	59 f1       	breq	.+86     	; 0x1ba8 <DIO_enumSetPinDir+0x186>
    1b52:	2d 81       	ldd	r18, Y+5	; 0x05
    1b54:	3e 81       	ldd	r19, Y+6	; 0x06
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <DIO_enumSetPinDir+0x144>
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f0       	breq	.+26     	; 0x1b7e <DIO_enumSetPinDir+0x15c>
    1b64:	63 c0       	rjmp	.+198    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    1b66:	2d 81       	ldd	r18, Y+5	; 0x05
    1b68:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	89 f1       	breq	.+98     	; 0x1bd2 <DIO_enumSetPinDir+0x1b0>
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <DIO_enumSetPinDir+0x15a>
    1b7a:	40 c0       	rjmp	.+128    	; 0x1bfc <DIO_enumSetPinDir+0x1da>
    1b7c:	57 c0       	rjmp	.+174    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1b7e:	aa e3       	ldi	r26, 0x3A	; 58
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ea e3       	ldi	r30, 0x3A	; 58
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_enumSetPinDir+0x17a>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_enumSetPinDir+0x176>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	42 c0       	rjmp	.+132    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_enumSetPinDir+0x1a4>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_enumSetPinDir+0x1a0>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	2d c0       	rjmp	.+90     	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1bd2:	a4 e3       	ldi	r26, 0x34	; 52
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e4 e3       	ldi	r30, 0x34	; 52
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enumSetPinDir+0x1ce>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_enumSetPinDir+0x1ca>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	18 c0       	rjmp	.+48     	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1bfc:	a1 e3       	ldi	r26, 0x31	; 49
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e1 e3       	ldi	r30, 0x31	; 49
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_enumSetPinDir+0x1f8>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_enumSetPinDir+0x1f4>
    1c1e:	80 95       	com	r24
    1c20:	84 23       	and	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1c26:	19 82       	std	Y+1, r1	; 0x01
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	28 96       	adiw	r28, 0x08	; 8
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	28 97       	sbiw	r28, 0x08	; 8
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	6b 83       	std	Y+3, r22	; 0x03
    1c58:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <DIO_enumWritePinVal+0x26>
    1c64:	f1 c0       	rjmp	.+482    	; 0x1e48 <DIO_enumWritePinVal+0x208>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 30       	cpi	r24, 0x08	; 8
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <DIO_enumWritePinVal+0x2e>
    1c6c:	ed c0       	rjmp	.+474    	; 0x1e48 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <DIO_enumWritePinVal+0x36>
    1c74:	6f c0       	rjmp	.+222    	; 0x1d54 <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	38 87       	std	Y+8, r19	; 0x08
    1c7e:	2f 83       	std	Y+7, r18	; 0x07
    1c80:	8f 81       	ldd	r24, Y+7	; 0x07
    1c82:	98 85       	ldd	r25, Y+8	; 0x08
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	49 f1       	breq	.+82     	; 0x1cdc <DIO_enumWritePinVal+0x9c>
    1c8a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c8c:	38 85       	ldd	r19, Y+8	; 0x08
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <DIO_enumWritePinVal+0x5e>
    1c94:	8f 81       	ldd	r24, Y+7	; 0x07
    1c96:	98 85       	ldd	r25, Y+8	; 0x08
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <DIO_enumWritePinVal+0x74>
    1c9c:	d6 c0       	rjmp	.+428    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    1c9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca0:	38 85       	ldd	r19, Y+8	; 0x08
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	71 f1       	breq	.+92     	; 0x1d04 <DIO_enumWritePinVal+0xc4>
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	e9 f1       	breq	.+122    	; 0x1d2c <DIO_enumWritePinVal+0xec>
    1cb2:	cb c0       	rjmp	.+406    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1cb4:	ab e3       	ldi	r26, 0x3B	; 59
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	eb e3       	ldi	r30, 0x3B	; 59
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enumWritePinVal+0x92>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_enumWritePinVal+0x8e>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	b7 c0       	rjmp	.+366    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1cdc:	a8 e3       	ldi	r26, 0x38	; 56
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e8 e3       	ldi	r30, 0x38	; 56
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_enumWritePinVal+0xba>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_enumWritePinVal+0xb6>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	a3 c0       	rjmp	.+326    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1d04:	a5 e3       	ldi	r26, 0x35	; 53
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e3       	ldi	r30, 0x35	; 53
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <DIO_enumWritePinVal+0xe2>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <DIO_enumWritePinVal+0xde>
    1d26:	84 2b       	or	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	8f c0       	rjmp	.+286    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1d2c:	a2 e3       	ldi	r26, 0x32	; 50
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_enumWritePinVal+0x10a>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_enumWritePinVal+0x106>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	7b c0       	rjmp	.+246    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	88 23       	and	r24, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <DIO_enumWritePinVal+0x11c>
    1d5a:	74 c0       	rjmp	.+232    	; 0x1e44 <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	2d 83       	std	Y+5, r18	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	59 f1       	breq	.+86     	; 0x1dc6 <DIO_enumWritePinVal+0x186>
    1d70:	2d 81       	ldd	r18, Y+5	; 0x05
    1d72:	3e 81       	ldd	r19, Y+6	; 0x06
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <DIO_enumWritePinVal+0x144>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f0       	breq	.+26     	; 0x1d9c <DIO_enumWritePinVal+0x15c>
    1d82:	63 c0       	rjmp	.+198    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	89 f1       	breq	.+98     	; 0x1df0 <DIO_enumWritePinVal+0x1b0>
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	83 30       	cpi	r24, 0x03	; 3
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <DIO_enumWritePinVal+0x15a>
    1d98:	40 c0       	rjmp	.+128    	; 0x1e1a <DIO_enumWritePinVal+0x1da>
    1d9a:	57 c0       	rjmp	.+174    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_enumWritePinVal+0x17a>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_enumWritePinVal+0x176>
    1dbe:	80 95       	com	r24
    1dc0:	84 23       	and	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	42 c0       	rjmp	.+132    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1dc6:	a8 e3       	ldi	r26, 0x38	; 56
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_enumWritePinVal+0x1a4>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_enumWritePinVal+0x1a0>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	2d c0       	rjmp	.+90     	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1df0:	a5 e3       	ldi	r26, 0x35	; 53
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e5 e3       	ldi	r30, 0x35	; 53
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_enumWritePinVal+0x1ce>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <DIO_enumWritePinVal+0x1ca>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	18 c0       	rjmp	.+48     	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e2 e3       	ldi	r30, 0x32	; 50
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_enumWritePinVal+0x1f8>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_enumWritePinVal+0x1f4>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1e48:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	28 96       	adiw	r28, 0x08	; 8
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	27 97       	sbiw	r28, 0x07	; 7
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
    1e76:	5d 83       	std	Y+5, r21	; 0x05
    1e78:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <DIO_enumReadPinVal+0x28>
    1e84:	a6 c0       	rjmp	.+332    	; 0x1fd2 <DIO_enumReadPinVal+0x174>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <DIO_enumReadPinVal+0x30>
    1e8c:	a2 c0       	rjmp	.+324    	; 0x1fd2 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3f 83       	std	Y+7, r19	; 0x07
    1e96:	2e 83       	std	Y+6, r18	; 0x06
    1e98:	4e 81       	ldd	r20, Y+6	; 0x06
    1e9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e9c:	41 30       	cpi	r20, 0x01	; 1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	c1 f1       	breq	.+112    	; 0x1f12 <DIO_enumReadPinVal+0xb4>
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	34 f4       	brge	.+12     	; 0x1eb8 <DIO_enumReadPinVal+0x5a>
    1eac:	2e 81       	ldd	r18, Y+6	; 0x06
    1eae:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb0:	21 15       	cp	r18, r1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <DIO_enumReadPinVal+0x74>
    1eb6:	8e c0       	rjmp	.+284    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    1eb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1eba:	5f 81       	ldd	r21, Y+7	; 0x07
    1ebc:	42 30       	cpi	r20, 0x02	; 2
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <DIO_enumReadPinVal+0x66>
    1ec2:	47 c0       	rjmp	.+142    	; 0x1f52 <DIO_enumReadPinVal+0xf4>
    1ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <DIO_enumReadPinVal+0x72>
    1ece:	61 c0       	rjmp	.+194    	; 0x1f92 <DIO_enumReadPinVal+0x134>
    1ed0:	81 c0       	rjmp	.+258    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1ed2:	e9 e3       	ldi	r30, 0x39	; 57
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_enumReadPinVal+0x8e>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	2a 95       	dec	r18
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_enumReadPinVal+0x8a>
    1ef0:	9a 01       	movw	r18, r20
    1ef2:	28 23       	and	r18, r24
    1ef4:	39 23       	and	r19, r25
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_enumReadPinVal+0xa6>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	8a 95       	dec	r24
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_enumReadPinVal+0xa2>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f0e:	80 83       	st	Z, r24
    1f10:	61 c0       	rjmp	.+194    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1f12:	e6 e3       	ldi	r30, 0x36	; 54
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_enumReadPinVal+0xce>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	2a 95       	dec	r18
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_enumReadPinVal+0xca>
    1f30:	9a 01       	movw	r18, r20
    1f32:	28 23       	and	r18, r24
    1f34:	39 23       	and	r19, r25
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_enumReadPinVal+0xe6>
    1f40:	55 95       	asr	r21
    1f42:	47 95       	ror	r20
    1f44:	8a 95       	dec	r24
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_enumReadPinVal+0xe2>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4e:	80 83       	st	Z, r24
    1f50:	41 c0       	rjmp	.+130    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1f52:	e3 e3       	ldi	r30, 0x33	; 51
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <DIO_enumReadPinVal+0x10e>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	2a 95       	dec	r18
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <DIO_enumReadPinVal+0x10a>
    1f70:	9a 01       	movw	r18, r20
    1f72:	28 23       	and	r18, r24
    1f74:	39 23       	and	r19, r25
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enumReadPinVal+0x126>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_enumReadPinVal+0x122>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f8e:	80 83       	st	Z, r24
    1f90:	21 c0       	rjmp	.+66     	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1f92:	e0 e3       	ldi	r30, 0x30	; 48
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_enumReadPinVal+0x14e>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	2a 95       	dec	r18
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_enumReadPinVal+0x14a>
    1fb0:	9a 01       	movw	r18, r20
    1fb2:	28 23       	and	r18, r24
    1fb4:	39 23       	and	r19, r25
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_enumReadPinVal+0x166>
    1fc0:	55 95       	asr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	8a 95       	dec	r24
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_enumReadPinVal+0x162>
    1fc8:	ca 01       	movw	r24, r20
    1fca:	ec 81       	ldd	r30, Y+4	; 0x04
    1fcc:	fd 81       	ldd	r31, Y+5	; 0x05
    1fce:	80 83       	st	Z, r24
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd6:	27 96       	adiw	r28, 0x07	; 7
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <DIO_enumTogglePinVal+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <DIO_enumTogglePinVal+0x8>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	08 f0       	brcs	.+2      	; 0x2006 <DIO_enumTogglePinVal+0x1e>
    2004:	73 c0       	rjmp	.+230    	; 0x20ec <DIO_enumTogglePinVal+0x104>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	88 30       	cpi	r24, 0x08	; 8
    200a:	08 f0       	brcs	.+2      	; 0x200e <DIO_enumTogglePinVal+0x26>
    200c:	6f c0       	rjmp	.+222    	; 0x20ec <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	49 f1       	breq	.+82     	; 0x2074 <DIO_enumTogglePinVal+0x8c>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <DIO_enumTogglePinVal+0x4e>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <DIO_enumTogglePinVal+0x64>
    2034:	5c c0       	rjmp	.+184    	; 0x20ee <DIO_enumTogglePinVal+0x106>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	71 f1       	breq	.+92     	; 0x209c <DIO_enumTogglePinVal+0xb4>
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	e9 f1       	breq	.+122    	; 0x20c4 <DIO_enumTogglePinVal+0xdc>
    204a:	51 c0       	rjmp	.+162    	; 0x20ee <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    204c:	ab e3       	ldi	r26, 0x3B	; 59
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	eb e3       	ldi	r30, 0x3B	; 59
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_enumTogglePinVal+0x82>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_enumTogglePinVal+0x7e>
    206e:	84 27       	eor	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	3d c0       	rjmp	.+122    	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2074:	a8 e3       	ldi	r26, 0x38	; 56
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e8 e3       	ldi	r30, 0x38	; 56
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_enumTogglePinVal+0xaa>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_enumTogglePinVal+0xa6>
    2096:	84 27       	eor	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	29 c0       	rjmp	.+82     	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    209c:	a5 e3       	ldi	r26, 0x35	; 53
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e3       	ldi	r30, 0x35	; 53
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_enumTogglePinVal+0xd2>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_enumTogglePinVal+0xce>
    20be:	84 27       	eor	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	15 c0       	rjmp	.+42     	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    20c4:	a2 e3       	ldi	r26, 0x32	; 50
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e2 e3       	ldi	r30, 0x32	; 50
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	48 2f       	mov	r20, r24
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_enumTogglePinVal+0xfa>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_enumTogglePinVal+0xf6>
    20e6:	84 27       	eor	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    20ec:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <DIO_enumConnectPullUp+0x6>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <DIO_enumConnectPullUp+0x8>
    2108:	00 d0       	rcall	.+0      	; 0x210a <DIO_enumConnectPullUp+0xa>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	6b 83       	std	Y+3, r22	; 0x03
    2112:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	08 f0       	brcs	.+2      	; 0x2120 <DIO_enumConnectPullUp+0x20>
    211e:	3e c1       	rjmp	.+636    	; 0x239c <DIO_enumConnectPullUp+0x29c>
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	88 30       	cpi	r24, 0x08	; 8
    2124:	08 f0       	brcs	.+2      	; 0x2128 <DIO_enumConnectPullUp+0x28>
    2126:	3a c1       	rjmp	.+628    	; 0x239c <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3e 83       	std	Y+6, r19	; 0x06
    2130:	2d 83       	std	Y+5, r18	; 0x05
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <DIO_enumConnectPullUp+0x3e>
    213c:	5d c0       	rjmp	.+186    	; 0x21f8 <DIO_enumConnectPullUp+0xf8>
    213e:	2d 81       	ldd	r18, Y+5	; 0x05
    2140:	3e 81       	ldd	r19, Y+6	; 0x06
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	31 05       	cpc	r19, r1
    2146:	2c f4       	brge	.+10     	; 0x2152 <DIO_enumConnectPullUp+0x52>
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	71 f0       	breq	.+28     	; 0x216c <DIO_enumConnectPullUp+0x6c>
    2150:	26 c1       	rjmp	.+588    	; 0x239e <DIO_enumConnectPullUp+0x29e>
    2152:	2d 81       	ldd	r18, Y+5	; 0x05
    2154:	3e 81       	ldd	r19, Y+6	; 0x06
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <DIO_enumConnectPullUp+0x5e>
    215c:	93 c0       	rjmp	.+294    	; 0x2284 <DIO_enumConnectPullUp+0x184>
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	91 05       	cpc	r25, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <DIO_enumConnectPullUp+0x6a>
    2168:	d3 c0       	rjmp	.+422    	; 0x2310 <DIO_enumConnectPullUp+0x210>
    216a:	19 c1       	rjmp	.+562    	; 0x239e <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	71 f5       	brne	.+92     	; 0x21ce <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2172:	a0 e5       	ldi	r26, 0x50	; 80
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e0 e5       	ldi	r30, 0x50	; 80
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8b 7f       	andi	r24, 0xFB	; 251
    217e:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2180:	aa e3       	ldi	r26, 0x3A	; 58
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ea e3       	ldi	r30, 0x3A	; 58
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <DIO_enumConnectPullUp+0x9c>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	2a 95       	dec	r18
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <DIO_enumConnectPullUp+0x98>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    21a6:	ab e3       	ldi	r26, 0x3B	; 59
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	eb e3       	ldi	r30, 0x3B	; 59
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <DIO_enumConnectPullUp+0xc4>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <DIO_enumConnectPullUp+0xc0>
    21c8:	84 2b       	or	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	e8 c0       	rjmp	.+464    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    21ce:	ab e3       	ldi	r26, 0x3B	; 59
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	eb e3       	ldi	r30, 0x3B	; 59
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_enumConnectPullUp+0xec>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_enumConnectPullUp+0xe8>
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	d3 c0       	rjmp	.+422    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	71 f5       	brne	.+92     	; 0x225a <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    21fe:	a0 e5       	ldi	r26, 0x50	; 80
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e0 e5       	ldi	r30, 0x50	; 80
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8b 7f       	andi	r24, 0xFB	; 251
    220a:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    220c:	a7 e3       	ldi	r26, 0x37	; 55
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e7 e3       	ldi	r30, 0x37	; 55
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_enumConnectPullUp+0x128>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	2a 95       	dec	r18
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <DIO_enumConnectPullUp+0x124>
    222c:	80 95       	com	r24
    222e:	84 23       	and	r24, r20
    2230:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2232:	a8 e3       	ldi	r26, 0x38	; 56
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e8 e3       	ldi	r30, 0x38	; 56
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_enumConnectPullUp+0x150>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_enumConnectPullUp+0x14c>
    2254:	84 2b       	or	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	a2 c0       	rjmp	.+324    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    225a:	a8 e3       	ldi	r26, 0x38	; 56
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e8 e3       	ldi	r30, 0x38	; 56
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_enumConnectPullUp+0x178>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_enumConnectPullUp+0x174>
    227c:	80 95       	com	r24
    227e:	84 23       	and	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	8d c0       	rjmp	.+282    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	71 f5       	brne	.+92     	; 0x22e6 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    228a:	a0 e5       	ldi	r26, 0x50	; 80
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e0 e5       	ldi	r30, 0x50	; 80
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8b 7f       	andi	r24, 0xFB	; 251
    2296:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2298:	a4 e3       	ldi	r26, 0x34	; 52
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e4 e3       	ldi	r30, 0x34	; 52
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <DIO_enumConnectPullUp+0x1b4>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	2a 95       	dec	r18
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <DIO_enumConnectPullUp+0x1b0>
    22b8:	80 95       	com	r24
    22ba:	84 23       	and	r24, r20
    22bc:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    22be:	a5 e3       	ldi	r26, 0x35	; 53
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e3       	ldi	r30, 0x35	; 53
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <DIO_enumConnectPullUp+0x1dc>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <DIO_enumConnectPullUp+0x1d8>
    22e0:	84 2b       	or	r24, r20
    22e2:	8c 93       	st	X, r24
    22e4:	5c c0       	rjmp	.+184    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    22e6:	a5 e3       	ldi	r26, 0x35	; 53
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e5 e3       	ldi	r30, 0x35	; 53
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	48 2f       	mov	r20, r24
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	02 2e       	mov	r0, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_enumConnectPullUp+0x204>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	0a 94       	dec	r0
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <DIO_enumConnectPullUp+0x200>
    2308:	80 95       	com	r24
    230a:	84 23       	and	r24, r20
    230c:	8c 93       	st	X, r24
    230e:	47 c0       	rjmp	.+142    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	71 f5       	brne	.+92     	; 0x2372 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2316:	a0 e5       	ldi	r26, 0x50	; 80
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e0 e5       	ldi	r30, 0x50	; 80
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8b 7f       	andi	r24, 0xFB	; 251
    2322:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2324:	a1 e3       	ldi	r26, 0x31	; 49
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e1 e3       	ldi	r30, 0x31	; 49
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_enumConnectPullUp+0x240>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	2a 95       	dec	r18
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DIO_enumConnectPullUp+0x23c>
    2344:	80 95       	com	r24
    2346:	84 23       	and	r24, r20
    2348:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    234a:	a2 e3       	ldi	r26, 0x32	; 50
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e2 e3       	ldi	r30, 0x32	; 50
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_enumConnectPullUp+0x268>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_enumConnectPullUp+0x264>
    236c:	84 2b       	or	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	16 c0       	rjmp	.+44     	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2372:	a2 e3       	ldi	r26, 0x32	; 50
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e2 e3       	ldi	r30, 0x32	; 50
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_enumConnectPullUp+0x290>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_enumConnectPullUp+0x28c>
    2394:	80 95       	com	r24
    2396:	84 23       	and	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	01 c0       	rjmp	.+2      	; 0x239e <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    239c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a0:	26 96       	adiw	r28, 0x06	; 6
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <DIO_enumSetPortDir+0x6>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <DIO_enumSetPortDir+0x8>
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	a8 f5       	brcc	.+106    	; 0x2438 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3d 83       	std	Y+5, r19	; 0x05
    23d6:	2c 83       	std	Y+4, r18	; 0x04
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	d1 f0       	breq	.+52     	; 0x2416 <DIO_enumSetPortDir+0x64>
    23e2:	2c 81       	ldd	r18, Y+4	; 0x04
    23e4:	3d 81       	ldd	r19, Y+5	; 0x05
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <DIO_enumSetPortDir+0x44>
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	61 f0       	breq	.+24     	; 0x240c <DIO_enumSetPortDir+0x5a>
    23f4:	1f c0       	rjmp	.+62     	; 0x2434 <DIO_enumSetPortDir+0x82>
    23f6:	2c 81       	ldd	r18, Y+4	; 0x04
    23f8:	3d 81       	ldd	r19, Y+5	; 0x05
    23fa:	22 30       	cpi	r18, 0x02	; 2
    23fc:	31 05       	cpc	r19, r1
    23fe:	81 f0       	breq	.+32     	; 0x2420 <DIO_enumSetPortDir+0x6e>
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	83 30       	cpi	r24, 0x03	; 3
    2406:	91 05       	cpc	r25, r1
    2408:	81 f0       	breq	.+32     	; 0x242a <DIO_enumSetPortDir+0x78>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    240c:	ea e3       	ldi	r30, 0x3A	; 58
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	80 83       	st	Z, r24
    2414:	12 c0       	rjmp	.+36     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    2416:	e7 e3       	ldi	r30, 0x37	; 55
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	80 83       	st	Z, r24
    241e:	0d c0       	rjmp	.+26     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    2420:	e4 e3       	ldi	r30, 0x34	; 52
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	80 83       	st	Z, r24
    2428:	08 c0       	rjmp	.+16     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    242a:	e1 e3       	ldi	r30, 0x31	; 49
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	80 83       	st	Z, r24
    2432:	03 c0       	rjmp	.+6      	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2434:	19 82       	std	Y+1, r1	; 0x01
    2436:	01 c0       	rjmp	.+2      	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <DIO_enumWritePortVal+0x6>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <DIO_enumWritePortVal+0x8>
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	84 30       	cpi	r24, 0x04	; 4
    2466:	a8 f5       	brcc	.+106    	; 0x24d2 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3d 83       	std	Y+5, r19	; 0x05
    2470:	2c 83       	std	Y+4, r18	; 0x04
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	d1 f0       	breq	.+52     	; 0x24b0 <DIO_enumWritePortVal+0x64>
    247c:	2c 81       	ldd	r18, Y+4	; 0x04
    247e:	3d 81       	ldd	r19, Y+5	; 0x05
    2480:	22 30       	cpi	r18, 0x02	; 2
    2482:	31 05       	cpc	r19, r1
    2484:	2c f4       	brge	.+10     	; 0x2490 <DIO_enumWritePortVal+0x44>
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	61 f0       	breq	.+24     	; 0x24a6 <DIO_enumWritePortVal+0x5a>
    248e:	1f c0       	rjmp	.+62     	; 0x24ce <DIO_enumWritePortVal+0x82>
    2490:	2c 81       	ldd	r18, Y+4	; 0x04
    2492:	3d 81       	ldd	r19, Y+5	; 0x05
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	31 05       	cpc	r19, r1
    2498:	81 f0       	breq	.+32     	; 0x24ba <DIO_enumWritePortVal+0x6e>
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	91 05       	cpc	r25, r1
    24a2:	81 f0       	breq	.+32     	; 0x24c4 <DIO_enumWritePortVal+0x78>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	80 83       	st	Z, r24
    24ae:	12 c0       	rjmp	.+36     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    24b0:	e8 e3       	ldi	r30, 0x38	; 56
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	80 83       	st	Z, r24
    24b8:	0d c0       	rjmp	.+26     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    24ba:	e5 e3       	ldi	r30, 0x35	; 53
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	80 83       	st	Z, r24
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    24c4:	e2 e3       	ldi	r30, 0x32	; 50
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	80 83       	st	Z, r24
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    24d2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	27 97       	sbiw	r28, 0x07	; 7
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	7c 83       	std	Y+4, r23	; 0x04
    24fe:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	08 f0       	brcs	.+2      	; 0x250c <DIO_enumReadPorVal+0x26>
    250a:	3f c0       	rjmp	.+126    	; 0x258a <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	3f 83       	std	Y+7, r19	; 0x07
    2514:	2e 83       	std	Y+6, r18	; 0x06
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	91 05       	cpc	r25, r1
    251e:	e1 f0       	breq	.+56     	; 0x2558 <DIO_enumReadPorVal+0x72>
    2520:	2e 81       	ldd	r18, Y+6	; 0x06
    2522:	3f 81       	ldd	r19, Y+7	; 0x07
    2524:	22 30       	cpi	r18, 0x02	; 2
    2526:	31 05       	cpc	r19, r1
    2528:	2c f4       	brge	.+10     	; 0x2534 <DIO_enumReadPorVal+0x4e>
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	9f 81       	ldd	r25, Y+7	; 0x07
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	61 f0       	breq	.+24     	; 0x254a <DIO_enumReadPorVal+0x64>
    2532:	27 c0       	rjmp	.+78     	; 0x2582 <DIO_enumReadPorVal+0x9c>
    2534:	2e 81       	ldd	r18, Y+6	; 0x06
    2536:	3f 81       	ldd	r19, Y+7	; 0x07
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	a1 f0       	breq	.+40     	; 0x2566 <DIO_enumReadPorVal+0x80>
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	9f 81       	ldd	r25, Y+7	; 0x07
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	91 05       	cpc	r25, r1
    2546:	b1 f0       	breq	.+44     	; 0x2574 <DIO_enumReadPorVal+0x8e>
    2548:	1c c0       	rjmp	.+56     	; 0x2582 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    254a:	e9 e3       	ldi	r30, 0x39	; 57
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	eb 81       	ldd	r30, Y+3	; 0x03
    2552:	fc 81       	ldd	r31, Y+4	; 0x04
    2554:	80 83       	st	Z, r24
    2556:	16 c0       	rjmp	.+44     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    2558:	e6 e3       	ldi	r30, 0x36	; 54
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	eb 81       	ldd	r30, Y+3	; 0x03
    2560:	fc 81       	ldd	r31, Y+4	; 0x04
    2562:	80 83       	st	Z, r24
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    2566:	e3 e3       	ldi	r30, 0x33	; 51
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	eb 81       	ldd	r30, Y+3	; 0x03
    256e:	fc 81       	ldd	r31, Y+4	; 0x04
    2570:	80 83       	st	Z, r24
    2572:	08 c0       	rjmp	.+16     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    2574:	e0 e3       	ldi	r30, 0x30	; 48
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	80 83       	st	Z, r24
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2582:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    2584:	99 81       	ldd	r25, Y+1	; 0x01
    2586:	9d 83       	std	Y+5, r25	; 0x05
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    258a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    258c:	29 81       	ldd	r18, Y+1	; 0x01
    258e:	2d 83       	std	Y+5, r18	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2592:	27 96       	adiw	r28, 0x07	; 7
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <DIO_enumTogglePortValue+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <DIO_enumTogglePortValue+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	84 30       	cpi	r24, 0x04	; 4
    25ba:	08 f0       	brcs	.+2      	; 0x25be <DIO_enumTogglePortValue+0x1a>
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3c 83       	std	Y+4, r19	; 0x04
    25c6:	2b 83       	std	Y+3, r18	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	91 05       	cpc	r25, r1
    25d0:	e9 f0       	breq	.+58     	; 0x260c <DIO_enumTogglePortValue+0x68>
    25d2:	2b 81       	ldd	r18, Y+3	; 0x03
    25d4:	3c 81       	ldd	r19, Y+4	; 0x04
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	2c f4       	brge	.+10     	; 0x25e6 <DIO_enumTogglePortValue+0x42>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	61 f0       	breq	.+24     	; 0x25fc <DIO_enumTogglePortValue+0x58>
    25e4:	2c c0       	rjmp	.+88     	; 0x263e <DIO_enumTogglePortValue+0x9a>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	22 30       	cpi	r18, 0x02	; 2
    25ec:	31 05       	cpc	r19, r1
    25ee:	b1 f0       	breq	.+44     	; 0x261c <DIO_enumTogglePortValue+0x78>
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	91 05       	cpc	r25, r1
    25f8:	c9 f0       	breq	.+50     	; 0x262c <DIO_enumTogglePortValue+0x88>
    25fa:	21 c0       	rjmp	.+66     	; 0x263e <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    25fc:	ab e3       	ldi	r26, 0x3B	; 59
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	eb e3       	ldi	r30, 0x3B	; 59
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	80 95       	com	r24
    2608:	8c 93       	st	X, r24
    260a:	19 c0       	rjmp	.+50     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    260c:	a8 e3       	ldi	r26, 0x38	; 56
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e8 e3       	ldi	r30, 0x38	; 56
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 95       	com	r24
    2618:	8c 93       	st	X, r24
    261a:	11 c0       	rjmp	.+34     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    261c:	a5 e3       	ldi	r26, 0x35	; 53
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e3       	ldi	r30, 0x35	; 53
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	80 95       	com	r24
    2628:	8c 93       	st	X, r24
    262a:	09 c0       	rjmp	.+18     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    262c:	a2 e3       	ldi	r26, 0x32	; 50
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e2 e3       	ldi	r30, 0x32	; 50
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	80 95       	com	r24
    2638:	8c 93       	st	X, r24
    263a:	01 c0       	rjmp	.+2      	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    263c:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <DIO_vWriteLowNibble+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <DIO_vWriteLowNibble+0x8>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	84 30       	cpi	r24, 0x04	; 4
    2668:	08 f0       	brcs	.+2      	; 0x266c <DIO_vWriteLowNibble+0x1e>
    266a:	62 c0       	rjmp	.+196    	; 0x2730 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	8f 70       	andi	r24, 0x0F	; 15
    2670:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3d 83       	std	Y+5, r19	; 0x05
    267a:	2c 83       	std	Y+4, r18	; 0x04
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	91 05       	cpc	r25, r1
    2684:	29 f1       	breq	.+74     	; 0x26d0 <DIO_vWriteLowNibble+0x82>
    2686:	2c 81       	ldd	r18, Y+4	; 0x04
    2688:	3d 81       	ldd	r19, Y+5	; 0x05
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	2c f4       	brge	.+10     	; 0x269a <DIO_vWriteLowNibble+0x4c>
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	61 f0       	breq	.+24     	; 0x26b0 <DIO_vWriteLowNibble+0x62>
    2698:	4c c0       	rjmp	.+152    	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    269a:	2c 81       	ldd	r18, Y+4	; 0x04
    269c:	3d 81       	ldd	r19, Y+5	; 0x05
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	31 f1       	breq	.+76     	; 0x26f0 <DIO_vWriteLowNibble+0xa2>
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	83 30       	cpi	r24, 0x03	; 3
    26aa:	91 05       	cpc	r25, r1
    26ac:	89 f1       	breq	.+98     	; 0x2710 <DIO_vWriteLowNibble+0xc2>
    26ae:	41 c0       	rjmp	.+130    	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    26b0:	ab e3       	ldi	r26, 0x3B	; 59
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	eb e3       	ldi	r30, 0x3B	; 59
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	80 7f       	andi	r24, 0xF0	; 240
    26bc:	8c 93       	st	X, r24
      PORTA_REG |= value;
    26be:	ab e3       	ldi	r26, 0x3B	; 59
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	eb e3       	ldi	r30, 0x3B	; 59
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	90 81       	ld	r25, Z
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	89 2b       	or	r24, r25
    26cc:	8c 93       	st	X, r24
    26ce:	31 c0       	rjmp	.+98     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    26d0:	a8 e3       	ldi	r26, 0x38	; 56
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e8 e3       	ldi	r30, 0x38	; 56
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 7f       	andi	r24, 0xF0	; 240
    26dc:	8c 93       	st	X, r24
      PORTB_REG |= value;
    26de:	a8 e3       	ldi	r26, 0x38	; 56
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e8 e3       	ldi	r30, 0x38	; 56
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	90 81       	ld	r25, Z
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	89 2b       	or	r24, r25
    26ec:	8c 93       	st	X, r24
    26ee:	21 c0       	rjmp	.+66     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    26f0:	a5 e3       	ldi	r26, 0x35	; 53
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e5 e3       	ldi	r30, 0x35	; 53
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	80 7f       	andi	r24, 0xF0	; 240
    26fc:	8c 93       	st	X, r24
      PORTC_REG |= value;
    26fe:	a5 e3       	ldi	r26, 0x35	; 53
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e5 e3       	ldi	r30, 0x35	; 53
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	90 81       	ld	r25, Z
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	89 2b       	or	r24, r25
    270c:	8c 93       	st	X, r24
    270e:	11 c0       	rjmp	.+34     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    2710:	a2 e3       	ldi	r26, 0x32	; 50
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e2 e3       	ldi	r30, 0x32	; 50
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 7f       	andi	r24, 0xF0	; 240
    271c:	8c 93       	st	X, r24
      PORTD_REG |= value;
    271e:	a2 e3       	ldi	r26, 0x32	; 50
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e2 e3       	ldi	r30, 0x32	; 50
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	90 81       	ld	r25, Z
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	89 2b       	or	r24, r25
    272c:	8c 93       	st	X, r24
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2730:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <DIO_vWriteHighNibble+0x6>
    274a:	00 d0       	rcall	.+0      	; 0x274c <DIO_vWriteHighNibble+0x8>
    274c:	0f 92       	push	r0
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	84 30       	cpi	r24, 0x04	; 4
    275e:	08 f0       	brcs	.+2      	; 0x2762 <DIO_vWriteHighNibble+0x1e>
    2760:	63 c0       	rjmp	.+198    	; 0x2828 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	82 95       	swap	r24
    2766:	80 7f       	andi	r24, 0xF0	; 240
    2768:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	3d 83       	std	Y+5, r19	; 0x05
    2772:	2c 83       	std	Y+4, r18	; 0x04
    2774:	8c 81       	ldd	r24, Y+4	; 0x04
    2776:	9d 81       	ldd	r25, Y+5	; 0x05
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	91 05       	cpc	r25, r1
    277c:	29 f1       	breq	.+74     	; 0x27c8 <DIO_vWriteHighNibble+0x84>
    277e:	2c 81       	ldd	r18, Y+4	; 0x04
    2780:	3d 81       	ldd	r19, Y+5	; 0x05
    2782:	22 30       	cpi	r18, 0x02	; 2
    2784:	31 05       	cpc	r19, r1
    2786:	2c f4       	brge	.+10     	; 0x2792 <DIO_vWriteHighNibble+0x4e>
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	9d 81       	ldd	r25, Y+5	; 0x05
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	61 f0       	breq	.+24     	; 0x27a8 <DIO_vWriteHighNibble+0x64>
    2790:	4c c0       	rjmp	.+152    	; 0x282a <DIO_vWriteHighNibble+0xe6>
    2792:	2c 81       	ldd	r18, Y+4	; 0x04
    2794:	3d 81       	ldd	r19, Y+5	; 0x05
    2796:	22 30       	cpi	r18, 0x02	; 2
    2798:	31 05       	cpc	r19, r1
    279a:	31 f1       	breq	.+76     	; 0x27e8 <DIO_vWriteHighNibble+0xa4>
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	83 30       	cpi	r24, 0x03	; 3
    27a2:	91 05       	cpc	r25, r1
    27a4:	89 f1       	breq	.+98     	; 0x2808 <DIO_vWriteHighNibble+0xc4>
    27a6:	41 c0       	rjmp	.+130    	; 0x282a <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    27a8:	ab e3       	ldi	r26, 0x3B	; 59
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	eb e3       	ldi	r30, 0x3B	; 59
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 70       	andi	r24, 0x0F	; 15
    27b4:	8c 93       	st	X, r24
      PORTA_REG|= value;
    27b6:	ab e3       	ldi	r26, 0x3B	; 59
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	eb e3       	ldi	r30, 0x3B	; 59
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	90 81       	ld	r25, Z
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	89 2b       	or	r24, r25
    27c4:	8c 93       	st	X, r24
    27c6:	31 c0       	rjmp	.+98     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    27c8:	a8 e3       	ldi	r26, 0x38	; 56
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e8 e3       	ldi	r30, 0x38	; 56
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 70       	andi	r24, 0x0F	; 15
    27d4:	8c 93       	st	X, r24
      PORTB_REG |= value;
    27d6:	a8 e3       	ldi	r26, 0x38	; 56
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e8 e3       	ldi	r30, 0x38	; 56
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	90 81       	ld	r25, Z
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	89 2b       	or	r24, r25
    27e4:	8c 93       	st	X, r24
    27e6:	21 c0       	rjmp	.+66     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    27e8:	a5 e3       	ldi	r26, 0x35	; 53
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e5 e3       	ldi	r30, 0x35	; 53
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8f 70       	andi	r24, 0x0F	; 15
    27f4:	8c 93       	st	X, r24
      PORTC_REG |= value;
    27f6:	a5 e3       	ldi	r26, 0x35	; 53
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e5 e3       	ldi	r30, 0x35	; 53
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	90 81       	ld	r25, Z
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	89 2b       	or	r24, r25
    2804:	8c 93       	st	X, r24
    2806:	11 c0       	rjmp	.+34     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    2808:	a2 e3       	ldi	r26, 0x32	; 50
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e2 e3       	ldi	r30, 0x32	; 50
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8f 70       	andi	r24, 0x0F	; 15
    2814:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2816:	a2 e3       	ldi	r26, 0x32	; 50
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e2 e3       	ldi	r30, 0x32	; 50
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	90 81       	ld	r25, Z
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	89 2b       	or	r24, r25
    2824:	8c 93       	st	X, r24
    2826:	01 c0       	rjmp	.+2      	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2828:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <DIO_vSetLowNibbleDir+0x6>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <DIO_vSetLowNibbleDir+0x8>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	08 f0       	brcs	.+2      	; 0x285a <DIO_vSetLowNibbleDir+0x1e>
    2858:	62 c0       	rjmp	.+196    	; 0x291e <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	8f 70       	andi	r24, 0x0F	; 15
    285e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	3d 83       	std	Y+5, r19	; 0x05
    2868:	2c 83       	std	Y+4, r18	; 0x04
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	9d 81       	ldd	r25, Y+5	; 0x05
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	91 05       	cpc	r25, r1
    2872:	29 f1       	breq	.+74     	; 0x28be <DIO_vSetLowNibbleDir+0x82>
    2874:	2c 81       	ldd	r18, Y+4	; 0x04
    2876:	3d 81       	ldd	r19, Y+5	; 0x05
    2878:	22 30       	cpi	r18, 0x02	; 2
    287a:	31 05       	cpc	r19, r1
    287c:	2c f4       	brge	.+10     	; 0x2888 <DIO_vSetLowNibbleDir+0x4c>
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	9d 81       	ldd	r25, Y+5	; 0x05
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	61 f0       	breq	.+24     	; 0x289e <DIO_vSetLowNibbleDir+0x62>
    2886:	4c c0       	rjmp	.+152    	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    2888:	2c 81       	ldd	r18, Y+4	; 0x04
    288a:	3d 81       	ldd	r19, Y+5	; 0x05
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 05       	cpc	r19, r1
    2890:	31 f1       	breq	.+76     	; 0x28de <DIO_vSetLowNibbleDir+0xa2>
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	83 30       	cpi	r24, 0x03	; 3
    2898:	91 05       	cpc	r25, r1
    289a:	89 f1       	breq	.+98     	; 0x28fe <DIO_vSetLowNibbleDir+0xc2>
    289c:	41 c0       	rjmp	.+130    	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    289e:	aa e3       	ldi	r26, 0x3A	; 58
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ea e3       	ldi	r30, 0x3A	; 58
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 7f       	andi	r24, 0xF0	; 240
    28aa:	8c 93       	st	X, r24
      DDRA_REG |= value;
    28ac:	aa e3       	ldi	r26, 0x3A	; 58
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ea e3       	ldi	r30, 0x3A	; 58
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	90 81       	ld	r25, Z
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	89 2b       	or	r24, r25
    28ba:	8c 93       	st	X, r24
    28bc:	31 c0       	rjmp	.+98     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    28be:	a7 e3       	ldi	r26, 0x37	; 55
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e7 e3       	ldi	r30, 0x37	; 55
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 7f       	andi	r24, 0xF0	; 240
    28ca:	8c 93       	st	X, r24
      DDRB_REG |= value;
    28cc:	a7 e3       	ldi	r26, 0x37	; 55
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e7 e3       	ldi	r30, 0x37	; 55
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	90 81       	ld	r25, Z
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	89 2b       	or	r24, r25
    28da:	8c 93       	st	X, r24
    28dc:	21 c0       	rjmp	.+66     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    28de:	a4 e3       	ldi	r26, 0x34	; 52
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e4 e3       	ldi	r30, 0x34	; 52
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 7f       	andi	r24, 0xF0	; 240
    28ea:	8c 93       	st	X, r24
      DDRC_REG |= value;
    28ec:	a4 e3       	ldi	r26, 0x34	; 52
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e4 e3       	ldi	r30, 0x34	; 52
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	90 81       	ld	r25, Z
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	89 2b       	or	r24, r25
    28fa:	8c 93       	st	X, r24
    28fc:	11 c0       	rjmp	.+34     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    28fe:	a1 e3       	ldi	r26, 0x31	; 49
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e1 e3       	ldi	r30, 0x31	; 49
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 7f       	andi	r24, 0xF0	; 240
    290a:	8c 93       	st	X, r24
      DDRD_REG|= value;
    290c:	a1 e3       	ldi	r26, 0x31	; 49
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e1 e3       	ldi	r30, 0x31	; 49
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	90 81       	ld	r25, Z
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	89 2b       	or	r24, r25
    291a:	8c 93       	st	X, r24
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    291e:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	00 d0       	rcall	.+0      	; 0x2938 <DIO_vSetHighNibbleDir+0x6>
    2938:	00 d0       	rcall	.+0      	; 0x293a <DIO_vSetHighNibbleDir+0x8>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	84 30       	cpi	r24, 0x04	; 4
    294c:	08 f0       	brcs	.+2      	; 0x2950 <DIO_vSetHighNibbleDir+0x1e>
    294e:	63 c0       	rjmp	.+198    	; 0x2a16 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	82 95       	swap	r24
    2954:	80 7f       	andi	r24, 0xF0	; 240
    2956:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	3d 83       	std	Y+5, r19	; 0x05
    2960:	2c 83       	std	Y+4, r18	; 0x04
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	91 05       	cpc	r25, r1
    296a:	29 f1       	breq	.+74     	; 0x29b6 <DIO_vSetHighNibbleDir+0x84>
    296c:	2c 81       	ldd	r18, Y+4	; 0x04
    296e:	3d 81       	ldd	r19, Y+5	; 0x05
    2970:	22 30       	cpi	r18, 0x02	; 2
    2972:	31 05       	cpc	r19, r1
    2974:	2c f4       	brge	.+10     	; 0x2980 <DIO_vSetHighNibbleDir+0x4e>
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	9d 81       	ldd	r25, Y+5	; 0x05
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	61 f0       	breq	.+24     	; 0x2996 <DIO_vSetHighNibbleDir+0x64>
    297e:	4c c0       	rjmp	.+152    	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
    2980:	2c 81       	ldd	r18, Y+4	; 0x04
    2982:	3d 81       	ldd	r19, Y+5	; 0x05
    2984:	22 30       	cpi	r18, 0x02	; 2
    2986:	31 05       	cpc	r19, r1
    2988:	31 f1       	breq	.+76     	; 0x29d6 <DIO_vSetHighNibbleDir+0xa4>
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	9d 81       	ldd	r25, Y+5	; 0x05
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	91 05       	cpc	r25, r1
    2992:	89 f1       	breq	.+98     	; 0x29f6 <DIO_vSetHighNibbleDir+0xc4>
    2994:	41 c0       	rjmp	.+130    	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    2996:	aa e3       	ldi	r26, 0x3A	; 58
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	ea e3       	ldi	r30, 0x3A	; 58
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 70       	andi	r24, 0x0F	; 15
    29a2:	8c 93       	st	X, r24
      DDRA_REG |= value;
    29a4:	aa e3       	ldi	r26, 0x3A	; 58
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	ea e3       	ldi	r30, 0x3A	; 58
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	90 81       	ld	r25, Z
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	89 2b       	or	r24, r25
    29b2:	8c 93       	st	X, r24
    29b4:	31 c0       	rjmp	.+98     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    29b6:	a7 e3       	ldi	r26, 0x37	; 55
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e7 e3       	ldi	r30, 0x37	; 55
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 70       	andi	r24, 0x0F	; 15
    29c2:	8c 93       	st	X, r24
      DDRB_REG |= value;
    29c4:	a7 e3       	ldi	r26, 0x37	; 55
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e7 e3       	ldi	r30, 0x37	; 55
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	90 81       	ld	r25, Z
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	89 2b       	or	r24, r25
    29d2:	8c 93       	st	X, r24
    29d4:	21 c0       	rjmp	.+66     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    29d6:	a4 e3       	ldi	r26, 0x34	; 52
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e4 e3       	ldi	r30, 0x34	; 52
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8f 70       	andi	r24, 0x0F	; 15
    29e2:	8c 93       	st	X, r24
      DDRC_REG |= value;
    29e4:	a4 e3       	ldi	r26, 0x34	; 52
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e4 e3       	ldi	r30, 0x34	; 52
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	90 81       	ld	r25, Z
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	89 2b       	or	r24, r25
    29f2:	8c 93       	st	X, r24
    29f4:	11 c0       	rjmp	.+34     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    29f6:	a1 e3       	ldi	r26, 0x31	; 49
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e3       	ldi	r30, 0x31	; 49
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 70       	andi	r24, 0x0F	; 15
    2a02:	8c 93       	st	X, r24
      DDRD_REG |= value;
    2a04:	a1 e3       	ldi	r26, 0x31	; 49
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e1 e3       	ldi	r30, 0x31	; 49
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	90 81       	ld	r25, Z
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	89 2b       	or	r24, r25
    2a12:	8c 93       	st	X, r24
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2a16:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    2a32:	a7 e2       	ldi	r26, 0x27	; 39
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e7 e2       	ldi	r30, 0x27	; 39
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 64       	ori	r24, 0x40	; 64
    2a3e:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    2a40:	a7 e2       	ldi	r26, 0x27	; 39
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e7 e2       	ldi	r30, 0x27	; 39
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 77       	andi	r24, 0x7F	; 127
    2a4c:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    2a4e:	a7 e2       	ldi	r26, 0x27	; 39
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e7 e2       	ldi	r30, 0x27	; 39
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    2a5c:	a6 e2       	ldi	r26, 0x26	; 38
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e6 e2       	ldi	r30, 0x26	; 38
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	88 7f       	andi	r24, 0xF8	; 248
    2a68:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    2a6a:	a6 e2       	ldi	r26, 0x26	; 38
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e6 e2       	ldi	r30, 0x26	; 38
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	87 60       	ori	r24, 0x07	; 7
    2a76:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2a78:	a6 e2       	ldi	r26, 0x26	; 38
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e6 e2       	ldi	r30, 0x26	; 38
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 7d       	andi	r24, 0xDF	; 223
    2a84:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    2a86:	a6 e2       	ldi	r26, 0x26	; 38
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e6 e2       	ldi	r30, 0x26	; 38
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 68       	ori	r24, 0x80	; 128
    2a92:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2a94:	a6 e2       	ldi	r26, 0x26	; 38
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e6 e2       	ldi	r30, 0x26	; 38
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	87 7f       	andi	r24, 0xF7	; 247
    2aa0:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    2ab0:	a6 e2       	ldi	r26, 0x26	; 38
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e6 e2       	ldi	r30, 0x26	; 38
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 68       	ori	r24, 0x80	; 128
    2abc:	8c 93       	st	X, r24
}
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    2acc:	a6 e2       	ldi	r26, 0x26	; 38
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e6 e2       	ldi	r30, 0x26	; 38
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8f 77       	andi	r24, 0x7F	; 127
    2ad8:	8c 93       	st	X, r24
}
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    2ae8:	a6 e2       	ldi	r26, 0x26	; 38
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e6 e2       	ldi	r30, 0x26	; 38
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	88 60       	ori	r24, 0x08	; 8
    2af4:	8c 93       	st	X, r24
}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2b04:	a6 e2       	ldi	r26, 0x26	; 38
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e6 e2       	ldi	r30, 0x26	; 38
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	87 7f       	andi	r24, 0xF7	; 247
    2b10:	8c 93       	st	X, r24
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <ADC_u8VoltageReference+0x6>
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	88 23       	and	r24, r24
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <ADC_u8VoltageReference+0x22>
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <ADC_u8VoltageReference+0x22>
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	e1 f4       	brne	.+56     	; 0x2b72 <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    2b3a:	a7 e2       	ldi	r26, 0x27	; 39
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e7 e2       	ldi	r30, 0x27	; 39
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	8f 73       	andi	r24, 0x3F	; 63
    2b46:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    2b48:	a7 e2       	ldi	r26, 0x27	; 39
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e7 e2       	ldi	r30, 0x27	; 39
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	28 2f       	mov	r18, r24
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	00 24       	eor	r0, r0
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	07 94       	ror	r0
    2b62:	96 95       	lsr	r25
    2b64:	87 95       	ror	r24
    2b66:	07 94       	ror	r0
    2b68:	98 2f       	mov	r25, r24
    2b6a:	80 2d       	mov	r24, r0
    2b6c:	82 2b       	or	r24, r18
    2b6e:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2b70:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <ADC_u8SetPrescaler+0x6>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	80 f4       	brcc	.+32     	; 0x2bb4 <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    2b94:	a6 e2       	ldi	r26, 0x26	; 38
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e6 e2       	ldi	r30, 0x26	; 38
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	88 7f       	andi	r24, 0xF8	; 248
    2ba0:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    2ba2:	a6 e2       	ldi	r26, 0x26	; 38
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e6 e2       	ldi	r30, 0x26	; 38
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	90 81       	ld	r25, Z
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	89 2b       	or	r24, r25
    2bb0:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2bb2:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <ADC_u8SetAdjustment+0x6>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    2bcc:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	88 23       	and	r24, r24
    2bd2:	41 f4       	brne	.+16     	; 0x2be4 <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    2bd4:	a7 e2       	ldi	r26, 0x27	; 39
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e7 e2       	ldi	r30, 0x27	; 39
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8f 7d       	andi	r24, 0xDF	; 223
    2be0:	8c 93       	st	X, r24
    2be2:	0d c0       	rjmp	.+26     	; 0x2bfe <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	41 f4       	brne	.+16     	; 0x2bfa <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    2bea:	a7 e2       	ldi	r26, 0x27	; 39
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e7 e2       	ldi	r30, 0x27	; 39
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	80 62       	ori	r24, 0x20	; 32
    2bf6:	8c 93       	st	X, r24
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <ADC_u8SetTriggerSource+0x6>
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2c16:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	41 f4       	brne	.+16     	; 0x2c2e <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2c1e:	a6 e2       	ldi	r26, 0x26	; 38
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e6 e2       	ldi	r30, 0x26	; 38
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 7d       	andi	r24, 0xDF	; 223
    2c2a:	8c 93       	st	X, r24
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	88 30       	cpi	r24, 0x08	; 8
    2c32:	a8 f4       	brcc	.+42     	; 0x2c5e <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    2c34:	a6 e2       	ldi	r26, 0x26	; 38
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e6 e2       	ldi	r30, 0x26	; 38
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 62       	ori	r24, 0x20	; 32
    2c40:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    2c42:	a0 e5       	ldi	r26, 0x50	; 80
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e0 e5       	ldi	r30, 0x50	; 80
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8f 71       	andi	r24, 0x1F	; 31
    2c4e:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    2c50:	a0 e5       	ldi	r26, 0x50	; 80
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e0 e5       	ldi	r30, 0x50	; 80
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8c 93       	st	X, r24
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	28 97       	sbiw	r28, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	8e 83       	std	Y+6, r24	; 0x06
    2c84:	78 87       	std	Y+8, r23	; 0x08
    2c86:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    2c88:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	1a 82       	std	Y+2, r1	; 0x02
    2c8e:	1b 82       	std	Y+3, r1	; 0x03
    2c90:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    2c92:	8f 81       	ldd	r24, Y+7	; 0x07
    2c94:	98 85       	ldd	r25, Y+8	; 0x08
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <ADC_u8GetResultSync+0x2e>
    2c9a:	78 c0       	rjmp	.+240    	; 0x2d8c <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    2c9c:	80 91 8e 03 	lds	r24, 0x038E
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <ADC_u8GetResultSync+0x38>
    2ca4:	70 c0       	rjmp	.+224    	; 0x2d86 <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 8e 03 	sts	0x038E, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2cac:	8e 81       	ldd	r24, Y+6	; 0x06
    2cae:	80 32       	cpi	r24, 0x20	; 32
    2cb0:	78 f4       	brcc	.+30     	; 0x2cd0 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    2cb2:	a7 e2       	ldi	r26, 0x27	; 39
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e7 e2       	ldi	r30, 0x27	; 39
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 7e       	andi	r24, 0xE0	; 224
    2cbe:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2cc0:	a7 e2       	ldi	r26, 0x27	; 39
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e7 e2       	ldi	r30, 0x27	; 39
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	90 81       	ld	r25, Z
    2cca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ccc:	89 2b       	or	r24, r25
    2cce:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2cd0:	a6 e2       	ldi	r26, 0x26	; 38
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e6 e2       	ldi	r30, 0x26	; 38
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 64       	ori	r24, 0x40	; 64
    2cdc:	8c 93       	st	X, r24
    2cde:	0b c0       	rjmp	.+22     	; 0x2cf6 <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ce8:	01 96       	adiw	r24, 0x01	; 1
    2cea:	a1 1d       	adc	r26, r1
    2cec:	b1 1d       	adc	r27, r1
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	ab 83       	std	Y+3, r26	; 0x03
    2cf4:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    2cf6:	e6 e2       	ldi	r30, 0x26	; 38
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	80 71       	andi	r24, 0x10	; 16
    2d02:	90 70       	andi	r25, 0x00	; 0
    2d04:	95 95       	asr	r25
    2d06:	87 95       	ror	r24
    2d08:	95 95       	asr	r25
    2d0a:	87 95       	ror	r24
    2d0c:	95 95       	asr	r25
    2d0e:	87 95       	ror	r24
    2d10:	95 95       	asr	r25
    2d12:	87 95       	ror	r24
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	61 f4       	brne	.+24     	; 0x2d30 <ADC_u8GetResultSync+0xc2>
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d20:	80 35       	cpi	r24, 0x50	; 80
    2d22:	23 ec       	ldi	r18, 0xC3	; 195
    2d24:	92 07       	cpc	r25, r18
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	a2 07       	cpc	r26, r18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	b2 07       	cpc	r27, r18
    2d2e:	c0 f2       	brcs	.-80     	; 0x2ce0 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	ab 81       	ldd	r26, Y+3	; 0x03
    2d36:	bc 81       	ldd	r27, Y+4	; 0x04
    2d38:	80 35       	cpi	r24, 0x50	; 80
    2d3a:	23 ec       	ldi	r18, 0xC3	; 195
    2d3c:	92 07       	cpc	r25, r18
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	a2 07       	cpc	r26, r18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	b2 07       	cpc	r27, r18
    2d46:	19 f4       	brne	.+6      	; 0x2d4e <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	19 c0       	rjmp	.+50     	; 0x2d80 <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    2d4e:	a6 e2       	ldi	r26, 0x26	; 38
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e6 e2       	ldi	r30, 0x26	; 38
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 61       	ori	r24, 0x10	; 16
    2d5a:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    2d5c:	e4 e2       	ldi	r30, 0x24	; 36
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	e5 e2       	ldi	r30, 0x25	; 37
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	98 2f       	mov	r25, r24
    2d72:	88 27       	eor	r24, r24
    2d74:	82 2b       	or	r24, r18
    2d76:	93 2b       	or	r25, r19
    2d78:	ef 81       	ldd	r30, Y+7	; 0x07
    2d7a:	f8 85       	ldd	r31, Y+8	; 0x08
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    2d80:	10 92 8e 03 	sts	0x038E, r1
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d92:	28 96       	adiw	r28, 0x08	; 8
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <ADC_u8StartConversionAsynch+0x6>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <ADC_u8StartConversionAsynch+0x8>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <ADC_u8StartConversionAsynch+0xa>
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	8a 83       	std	Y+2, r24	; 0x02
    2db4:	7c 83       	std	Y+4, r23	; 0x04
    2db6:	6b 83       	std	Y+3, r22	; 0x03
    2db8:	5e 83       	std	Y+6, r21	; 0x06
    2dba:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    2dbc:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	e9 f1       	breq	.+122    	; 0x2e40 <ADC_u8StartConversionAsynch+0x9c>
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	c9 f1       	breq	.+114    	; 0x2e40 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    2dce:	80 91 8e 03 	lds	r24, 0x038E
    2dd2:	88 23       	and	r24, r24
    2dd4:	91 f5       	brne	.+100    	; 0x2e3a <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	80 93 8e 03 	sts	0x038E, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    2ddc:	10 92 8f 03 	sts	0x038F, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	90 93 8b 03 	sts	0x038B, r25
    2de8:	80 93 8a 03 	sts	0x038A, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	90 93 8d 03 	sts	0x038D, r25
    2df4:	80 93 8c 03 	sts	0x038C, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	80 32       	cpi	r24, 0x20	; 32
    2dfc:	78 f4       	brcc	.+30     	; 0x2e1c <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    2dfe:	a7 e2       	ldi	r26, 0x27	; 39
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e7 e2       	ldi	r30, 0x27	; 39
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	80 7e       	andi	r24, 0xE0	; 224
    2e0a:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2e0c:	a7 e2       	ldi	r26, 0x27	; 39
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e7 e2       	ldi	r30, 0x27	; 39
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	90 81       	ld	r25, Z
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	89 2b       	or	r24, r25
    2e1a:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2e1c:	a6 e2       	ldi	r26, 0x26	; 38
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e6 e2       	ldi	r30, 0x26	; 38
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	80 64       	ori	r24, 0x40	; 64
    2e28:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2e2a:	a6 e2       	ldi	r26, 0x26	; 38
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e6 e2       	ldi	r30, 0x26	; 38
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	88 60       	ori	r24, 0x08	; 8
    2e36:	8c 93       	st	X, r24
    2e38:	05 c0       	rjmp	.+10     	; 0x2e44 <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e46:	26 96       	adiw	r28, 0x06	; 6
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <ADC_u8StartChainAsynch+0x6>
    2e5e:	0f 92       	push	r0
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	9b 83       	std	Y+3, r25	; 0x03
    2e66:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2e68:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <ADC_u8StartChainAsynch+0x1c>
    2e72:	79 c0       	rjmp	.+242    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e74:	ea 81       	ldd	r30, Y+2	; 0x02
    2e76:	fb 81       	ldd	r31, Y+3	; 0x03
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <ADC_u8StartChainAsynch+0x2a>
    2e80:	72 c0       	rjmp	.+228    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e82:	ea 81       	ldd	r30, Y+2	; 0x02
    2e84:	fb 81       	ldd	r31, Y+3	; 0x03
    2e86:	85 81       	ldd	r24, Z+5	; 0x05
    2e88:	96 81       	ldd	r25, Z+6	; 0x06
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <ADC_u8StartChainAsynch+0x38>
    2e8e:	6b c0       	rjmp	.+214    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e90:	ea 81       	ldd	r30, Y+2	; 0x02
    2e92:	fb 81       	ldd	r31, Y+3	; 0x03
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <ADC_u8StartChainAsynch+0x46>
    2e9c:	64 c0       	rjmp	.+200    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    2e9e:	80 91 8e 03 	lds	r24, 0x038E
    2ea2:	88 23       	and	r24, r24
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <ADC_u8StartChainAsynch+0x50>
    2ea6:	5c c0       	rjmp	.+184    	; 0x2f60 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 8e 03 	sts	0x038E, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 8f 03 	sts	0x038F, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    2eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	90 93 8b 03 	sts	0x038B, r25
    2ec0:	80 93 8a 03 	sts	0x038A, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    2ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	90 93 91 03 	sts	0x0391, r25
    2ed0:	80 93 90 03 	sts	0x0390, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    2ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed8:	84 81       	ldd	r24, Z+4	; 0x04
    2eda:	80 93 92 03 	sts	0x0392, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    2ede:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee2:	85 81       	ldd	r24, Z+5	; 0x05
    2ee4:	96 81       	ldd	r25, Z+6	; 0x06
    2ee6:	90 93 8d 03 	sts	0x038D, r25
    2eea:	80 93 8c 03 	sts	0x038C, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    2eee:	10 92 93 03 	sts	0x0393, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    2ef2:	20 91 90 03 	lds	r18, 0x0390
    2ef6:	30 91 91 03 	lds	r19, 0x0391
    2efa:	80 91 93 03 	lds	r24, 0x0393
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	f9 01       	movw	r30, r18
    2f04:	e8 0f       	add	r30, r24
    2f06:	f9 1f       	adc	r31, r25
    2f08:	80 81       	ld	r24, Z
    2f0a:	80 32       	cpi	r24, 0x20	; 32
    2f0c:	d0 f4       	brcc	.+52     	; 0x2f42 <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    2f0e:	a7 e2       	ldi	r26, 0x27	; 39
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e7 e2       	ldi	r30, 0x27	; 39
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	80 7e       	andi	r24, 0xE0	; 224
    2f1a:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    2f1c:	a7 e2       	ldi	r26, 0x27	; 39
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e7 e2       	ldi	r30, 0x27	; 39
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	40 81       	ld	r20, Z
    2f26:	20 91 90 03 	lds	r18, 0x0390
    2f2a:	30 91 91 03 	lds	r19, 0x0391
    2f2e:	80 91 93 03 	lds	r24, 0x0393
    2f32:	88 2f       	mov	r24, r24
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	f9 01       	movw	r30, r18
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	80 81       	ld	r24, Z
    2f3e:	84 2b       	or	r24, r20
    2f40:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2f42:	a6 e2       	ldi	r26, 0x26	; 38
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e6 e2       	ldi	r30, 0x26	; 38
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	80 64       	ori	r24, 0x40	; 64
    2f4e:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2f50:	a6 e2       	ldi	r26, 0x26	; 38
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e6 e2       	ldi	r30, 0x26	; 38
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 60       	ori	r24, 0x08	; 8
    2f5c:	8c 93       	st	X, r24
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2f60:	83 e0       	ldi	r24, 0x03	; 3
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	2f 93       	push	r18
    2f84:	3f 93       	push	r19
    2f86:	4f 93       	push	r20
    2f88:	5f 93       	push	r21
    2f8a:	6f 93       	push	r22
    2f8c:	7f 93       	push	r23
    2f8e:	8f 93       	push	r24
    2f90:	9f 93       	push	r25
    2f92:	af 93       	push	r26
    2f94:	bf 93       	push	r27
    2f96:	ef 93       	push	r30
    2f98:	ff 93       	push	r31
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    2fa2:	80 91 8f 03 	lds	r24, 0x038F
    2fa6:	88 23       	and	r24, r24
    2fa8:	19 f5       	brne	.+70     	; 0x2ff0 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    2faa:	a0 91 8a 03 	lds	r26, 0x038A
    2fae:	b0 91 8b 03 	lds	r27, 0x038B
    2fb2:	e4 e2       	ldi	r30, 0x24	; 36
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	e5 e2       	ldi	r30, 0x25	; 37
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	88 27       	eor	r24, r24
    2fca:	82 2b       	or	r24, r18
    2fcc:	93 2b       	or	r25, r19
    2fce:	8d 93       	st	X+, r24
    2fd0:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    2fd2:	10 92 8e 03 	sts	0x038E, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    2fd6:	e0 91 8c 03 	lds	r30, 0x038C
    2fda:	f0 91 8d 03 	lds	r31, 0x038D
    2fde:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2fe0:	a6 e2       	ldi	r26, 0x26	; 38
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	e6 e2       	ldi	r30, 0x26	; 38
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	87 7f       	andi	r24, 0xF7	; 247
    2fec:	8c 93       	st	X, r24
    2fee:	6c c0       	rjmp	.+216    	; 0x30c8 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    2ff0:	80 91 8f 03 	lds	r24, 0x038F
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <__vector_16+0x82>
    2ff8:	67 c0       	rjmp	.+206    	; 0x30c8 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    2ffa:	20 91 8a 03 	lds	r18, 0x038A
    2ffe:	30 91 8b 03 	lds	r19, 0x038B
    3002:	80 91 93 03 	lds	r24, 0x0393
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	d9 01       	movw	r26, r18
    3010:	a8 0f       	add	r26, r24
    3012:	b9 1f       	adc	r27, r25
    3014:	e4 e2       	ldi	r30, 0x24	; 36
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	e5 e2       	ldi	r30, 0x25	; 37
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	98 2f       	mov	r25, r24
    302a:	88 27       	eor	r24, r24
    302c:	82 2b       	or	r24, r18
    302e:	93 2b       	or	r25, r19
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	9c 93       	st	X, r25
    3034:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    3036:	80 91 93 03 	lds	r24, 0x0393
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	80 93 93 03 	sts	0x0393, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    3040:	90 91 93 03 	lds	r25, 0x0393
    3044:	80 91 92 03 	lds	r24, 0x0392
    3048:	98 17       	cp	r25, r24
    304a:	79 f4       	brne	.+30     	; 0x306a <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    304c:	10 92 8e 03 	sts	0x038E, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    3050:	e0 91 8c 03 	lds	r30, 0x038C
    3054:	f0 91 8d 03 	lds	r31, 0x038D
    3058:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    305a:	a6 e2       	ldi	r26, 0x26	; 38
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e6 e2       	ldi	r30, 0x26	; 38
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	87 7f       	andi	r24, 0xF7	; 247
    3066:	8c 93       	st	X, r24
    3068:	2f c0       	rjmp	.+94     	; 0x30c8 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    306a:	20 91 90 03 	lds	r18, 0x0390
    306e:	30 91 91 03 	lds	r19, 0x0391
    3072:	80 91 93 03 	lds	r24, 0x0393
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	f9 01       	movw	r30, r18
    307c:	e8 0f       	add	r30, r24
    307e:	f9 1f       	adc	r31, r25
    3080:	80 81       	ld	r24, Z
    3082:	80 32       	cpi	r24, 0x20	; 32
    3084:	d0 f4       	brcc	.+52     	; 0x30ba <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    3086:	a7 e2       	ldi	r26, 0x27	; 39
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e7 e2       	ldi	r30, 0x27	; 39
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 7e       	andi	r24, 0xE0	; 224
    3092:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3094:	a7 e2       	ldi	r26, 0x27	; 39
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e7 e2       	ldi	r30, 0x27	; 39
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	40 81       	ld	r20, Z
    309e:	20 91 90 03 	lds	r18, 0x0390
    30a2:	30 91 91 03 	lds	r19, 0x0391
    30a6:	80 91 93 03 	lds	r24, 0x0393
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	f9 01       	movw	r30, r18
    30b0:	e8 0f       	add	r30, r24
    30b2:	f9 1f       	adc	r31, r25
    30b4:	80 81       	ld	r24, Z
    30b6:	84 2b       	or	r24, r20
    30b8:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    30ba:	a6 e2       	ldi	r26, 0x26	; 38
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e6 e2       	ldi	r30, 0x26	; 38
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 64       	ori	r24, 0x40	; 64
    30c6:	8c 93       	st	X, r24
    }
  }
}
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	ff 91       	pop	r31
    30ce:	ef 91       	pop	r30
    30d0:	bf 91       	pop	r27
    30d2:	af 91       	pop	r26
    30d4:	9f 91       	pop	r25
    30d6:	8f 91       	pop	r24
    30d8:	7f 91       	pop	r23
    30da:	6f 91       	pop	r22
    30dc:	5f 91       	pop	r21
    30de:	4f 91       	pop	r20
    30e0:	3f 91       	pop	r19
    30e2:	2f 91       	pop	r18
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	2b 97       	sbiw	r28, 0x0b	; 11
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	99 87       	std	Y+9, r25	; 0x09
    310c:	88 87       	std	Y+8, r24	; 0x08
    310e:	7b 87       	std	Y+11, r23	; 0x0b
    3110:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    3112:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3114:	e8 85       	ldd	r30, Y+8	; 0x08
    3116:	f9 85       	ldd	r31, Y+9	; 0x09
    3118:	81 81       	ldd	r24, Z+1	; 0x01
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	88 ee       	ldi	r24, 0xE8	; 232
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	ac 01       	movw	r20, r24
    3124:	24 9f       	mul	r18, r20
    3126:	c0 01       	movw	r24, r0
    3128:	25 9f       	mul	r18, r21
    312a:	90 0d       	add	r25, r0
    312c:	34 9f       	mul	r19, r20
    312e:	90 0d       	add	r25, r0
    3130:	11 24       	eor	r1, r1
    3132:	9a 83       	std	Y+2, r25	; 0x02
    3134:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    3136:	e8 85       	ldd	r30, Y+8	; 0x08
    3138:	f9 85       	ldd	r31, Y+9	; 0x09
    313a:	80 81       	ld	r24, Z
    313c:	9e 01       	movw	r18, r28
    313e:	2a 5f       	subi	r18, 0xFA	; 250
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	b9 01       	movw	r22, r18
    3144:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    3148:	e8 85       	ldd	r30, Y+8	; 0x08
    314a:	f9 85       	ldd	r31, Y+9	; 0x09
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	88 23       	and	r24, r24
    3150:	e1 f4       	brne	.+56     	; 0x318a <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3152:	8e 81       	ldd	r24, Y+6	; 0x06
    3154:	9f 81       	ldd	r25, Y+7	; 0x07
    3156:	7c 01       	movw	r14, r24
    3158:	00 e0       	ldi	r16, 0x00	; 0
    315a:	10 e0       	ldi	r17, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	9c 01       	movw	r18, r24
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	c8 01       	movw	r24, r16
    3168:	b7 01       	movw	r22, r14
    316a:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__mulsi3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	07 2e       	mov	r0, r23
    3174:	7a e0       	ldi	r23, 0x0A	; 10
    3176:	b6 95       	lsr	r27
    3178:	a7 95       	ror	r26
    317a:	97 95       	ror	r25
    317c:	87 95       	ror	r24
    317e:	7a 95       	dec	r23
    3180:	d1 f7       	brne	.-12     	; 0x3176 <LM35_u8GetTemp+0x88>
    3182:	70 2d       	mov	r23, r0
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	1b c0       	rjmp	.+54     	; 0x31c0 <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    318a:	e8 85       	ldd	r30, Y+8	; 0x08
    318c:	f9 85       	ldd	r31, Y+9	; 0x09
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	b1 f4       	brne	.+44     	; 0x31c0 <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    3194:	8e 81       	ldd	r24, Y+6	; 0x06
    3196:	9f 81       	ldd	r25, Y+7	; 0x07
    3198:	7c 01       	movw	r14, r24
    319a:	00 e0       	ldi	r16, 0x00	; 0
    319c:	10 e0       	ldi	r17, 0x00	; 0
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	9c 01       	movw	r18, r24
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	c8 01       	movw	r24, r16
    31aa:	b7 01       	movw	r22, r14
    31ac:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__mulsi3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	89 2f       	mov	r24, r25
    31b6:	9a 2f       	mov	r25, r26
    31b8:	ab 2f       	mov	r26, r27
    31ba:	bb 27       	eor	r27, r27
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	2a e0       	ldi	r18, 0x0A	; 10
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	b9 01       	movw	r22, r18
    31ca:	0e 94 8e 3c 	call	0x791c	; 0x791c <__udivmodhi4>
    31ce:	cb 01       	movw	r24, r22
    31d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    31d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    31d4:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31d8:	2b 96       	adiw	r28, 0x0b	; 11
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	08 95       	ret

000031f2 <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	29 97       	sbiw	r28, 0x09	; 9
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	9f 83       	std	Y+7, r25	; 0x07
    3210:	8e 83       	std	Y+6, r24	; 0x06
    3212:	79 87       	std	Y+9, r23	; 0x09
    3214:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    3216:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3218:	ee 81       	ldd	r30, Y+6	; 0x06
    321a:	ff 81       	ldd	r31, Y+7	; 0x07
    321c:	81 81       	ldd	r24, Z+1	; 0x01
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	88 ee       	ldi	r24, 0xE8	; 232
    3224:	93 e0       	ldi	r25, 0x03	; 3
    3226:	ac 01       	movw	r20, r24
    3228:	24 9f       	mul	r18, r20
    322a:	c0 01       	movw	r24, r0
    322c:	25 9f       	mul	r18, r21
    322e:	90 0d       	add	r25, r0
    3230:	34 9f       	mul	r19, r20
    3232:	90 0d       	add	r25, r0
    3234:	11 24       	eor	r1, r1
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    323a:	ee 81       	ldd	r30, Y+6	; 0x06
    323c:	ff 81       	ldd	r31, Y+7	; 0x07
    323e:	80 81       	ld	r24, Z
    3240:	9e 01       	movw	r18, r28
    3242:	2c 5f       	subi	r18, 0xFC	; 252
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	b9 01       	movw	r22, r18
    3248:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    324c:	ee 81       	ldd	r30, Y+6	; 0x06
    324e:	ff 81       	ldd	r31, Y+7	; 0x07
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	88 23       	and	r24, r24
    3254:	f1 f4       	brne	.+60     	; 0x3292 <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3256:	8c 81       	ldd	r24, Y+4	; 0x04
    3258:	9d 81       	ldd	r25, Y+5	; 0x05
    325a:	7c 01       	movw	r14, r24
    325c:	00 e0       	ldi	r16, 0x00	; 0
    325e:	10 e0       	ldi	r17, 0x00	; 0
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	9c 01       	movw	r18, r24
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	c8 01       	movw	r24, r16
    326c:	b7 01       	movw	r22, r14
    326e:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__mulsi3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	07 2e       	mov	r0, r23
    3278:	7a e0       	ldi	r23, 0x0A	; 10
    327a:	b6 95       	lsr	r27
    327c:	a7 95       	ror	r26
    327e:	97 95       	ror	r25
    3280:	87 95       	ror	r24
    3282:	7a 95       	dec	r23
    3284:	d1 f7       	brne	.-12     	; 0x327a <LM35_u8GetAnalogSignal+0x88>
    3286:	70 2d       	mov	r23, r0
    3288:	e8 85       	ldd	r30, Y+8	; 0x08
    328a:	f9 85       	ldd	r31, Y+9	; 0x09
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	1d c0       	rjmp	.+58     	; 0x32cc <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    3292:	ee 81       	ldd	r30, Y+6	; 0x06
    3294:	ff 81       	ldd	r31, Y+7	; 0x07
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	c1 f4       	brne	.+48     	; 0x32cc <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	7c 01       	movw	r14, r24
    32a2:	00 e0       	ldi	r16, 0x00	; 0
    32a4:	10 e0       	ldi	r17, 0x00	; 0
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	9c 01       	movw	r18, r24
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	c8 01       	movw	r24, r16
    32b2:	b7 01       	movw	r22, r14
    32b4:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__mulsi3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	89 2f       	mov	r24, r25
    32be:	9a 2f       	mov	r25, r26
    32c0:	ab 2f       	mov	r26, r27
    32c2:	bb 27       	eor	r27, r27
    32c4:	e8 85       	ldd	r30, Y+8	; 0x08
    32c6:	f9 85       	ldd	r31, Y+9	; 0x09
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32ce:	29 96       	adiw	r28, 0x09	; 9
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	08 95       	ret

000032e8 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    3304:	83 e0       	ldi	r24, 0x03	; 3
    3306:	62 e0       	ldi	r22, 0x02	; 2
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    330e:	83 e0       	ldi	r24, 0x03	; 3
    3310:	63 e0       	ldi	r22, 0x03	; 3
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	6f e0       	ldi	r22, 0x0F	; 15
    331c:	0e 94 99 14 	call	0x2932	; 0x2932 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	6f e0       	ldi	r22, 0x0F	; 15
    3324:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	62 97       	sbiw	r28, 0x12	; 18
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    3342:	8f ef       	ldi	r24, 0xFF	; 255
    3344:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    3346:	84 e0       	ldi	r24, 0x04	; 4
    3348:	8f 87       	std	Y+15, r24	; 0x0f
    334a:	c9 c0       	rjmp	.+402    	; 0x34de <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    3356:	18 8a       	std	Y+16, r1	; 0x10
    3358:	b6 c0       	rjmp	.+364    	; 0x34c6 <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    335a:	9e 01       	movw	r18, r28
    335c:	2e 5e       	subi	r18, 0xEE	; 238
    335e:	3f 4f       	sbci	r19, 0xFF	; 255
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	68 89       	ldd	r22, Y+16	; 0x10
    3364:	a9 01       	movw	r20, r18
    3366:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    336a:	8a 89       	ldd	r24, Y+18	; 0x12
    336c:	88 23       	and	r24, r24
    336e:	09 f0       	breq	.+2      	; 0x3372 <KPD_u8GetPressed+0x44>
    3370:	a7 c0       	rjmp	.+334    	; 0x34c0 <KPD_u8GetPressed+0x192>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a8 e4       	ldi	r26, 0x48	; 72
    3378:	b2 e4       	ldi	r27, 0x42	; 66
    337a:	8b 87       	std	Y+11, r24	; 0x0b
    337c:	9c 87       	std	Y+12, r25	; 0x0c
    337e:	ad 87       	std	Y+13, r26	; 0x0d
    3380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	6b 85       	ldd	r22, Y+11	; 0x0b
    3384:	7c 85       	ldd	r23, Y+12	; 0x0c
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	9e 85       	ldd	r25, Y+14	; 0x0e
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8f 83       	std	Y+7, r24	; 0x07
    339c:	98 87       	std	Y+8, r25	; 0x08
    339e:	a9 87       	std	Y+9, r26	; 0x09
    33a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33de:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <KPD_u8GetPressed+0xf6>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <KPD_u8GetPressed+0xe4>
    3416:	9c 83       	std	Y+4, r25	; 0x04
    3418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <KPD_u8GetPressed+0xd8>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <KPD_u8GetPressed+0x120>
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    3456:	9e 01       	movw	r18, r28
    3458:	2e 5e       	subi	r18, 0xEE	; 238
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	68 89       	ldd	r22, Y+16	; 0x10
    3460:	a9 01       	movw	r20, r18
    3462:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    3466:	8a 89       	ldd	r24, Y+18	; 0x12
    3468:	88 23       	and	r24, r24
    346a:	a9 f4       	brne	.+42     	; 0x3496 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    346c:	88 89       	ldd	r24, Y+16	; 0x10
    346e:	48 2f       	mov	r20, r24
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	9c 01       	movw	r18, r24
    347a:	24 50       	subi	r18, 0x04	; 4
    347c:	30 40       	sbci	r19, 0x00	; 0
    347e:	ca 01       	movw	r24, r20
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	fc 01       	movw	r30, r24
    348e:	ed 5f       	subi	r30, 0xFD	; 253
    3490:	fc 4f       	sbci	r31, 0xFC	; 252
    3492:	80 81       	ld	r24, Z
    3494:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3496:	9e 01       	movw	r18, r28
    3498:	2e 5e       	subi	r18, 0xEE	; 238
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	68 89       	ldd	r22, Y+16	; 0x10
    34a0:	a9 01       	movw	r20, r18
    34a2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    34a8:	9e 01       	movw	r18, r28
    34aa:	2e 5e       	subi	r18, 0xEE	; 238
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	68 89       	ldd	r22, Y+16	; 0x10
    34b2:	a9 01       	movw	r20, r18
    34b4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    34b8:	8a 89       	ldd	r24, Y+18	; 0x12
    34ba:	88 23       	and	r24, r24
    34bc:	a9 f3       	breq	.-22     	; 0x34a8 <KPD_u8GetPressed+0x17a>
    34be:	07 c0       	rjmp	.+14     	; 0x34ce <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    34c0:	88 89       	ldd	r24, Y+16	; 0x10
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	88 8b       	std	Y+16, r24	; 0x10
    34c6:	88 89       	ldd	r24, Y+16	; 0x10
    34c8:	84 30       	cpi	r24, 0x04	; 4
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <KPD_u8GetPressed+0x1a0>
    34cc:	46 cf       	rjmp	.-372    	; 0x335a <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    34d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34da:	8f 5f       	subi	r24, 0xFF	; 255
    34dc:	8f 87       	std	Y+15, r24	; 0x0f
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	88 30       	cpi	r24, 0x08	; 8
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <KPD_u8GetPressed+0x1b8>
    34e4:	33 cf       	rjmp	.-410    	; 0x334c <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
}
    34e8:	62 96       	adiw	r28, 0x12	; 18
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	c6 54       	subi	r28, 0x46	; 70
    3508:	d0 40       	sbci	r29, 0x00	; 0
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	fe 01       	movw	r30, r28
    3516:	ed 5b       	subi	r30, 0xBD	; 189
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	a8 e4       	ldi	r26, 0x48	; 72
    3520:	b2 e4       	ldi	r27, 0x42	; 66
    3522:	80 83       	st	Z, r24
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	a2 83       	std	Z+2, r26	; 0x02
    3528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	8e 01       	movw	r16, r28
    352c:	01 5c       	subi	r16, 0xC1	; 193
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	fe 01       	movw	r30, r28
    3532:	ed 5b       	subi	r30, 0xBD	; 189
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	f8 01       	movw	r30, r16
    3550:	80 83       	st	Z, r24
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	a2 83       	std	Z+2, r26	; 0x02
    3556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3558:	fe 01       	movw	r30, r28
    355a:	ff 96       	adiw	r30, 0x3f	; 63
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <CLCD_vInit+0x84>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9e af       	std	Y+62, r25	; 0x3e
    357a:	8d af       	std	Y+61, r24	; 0x3d
    357c:	46 c0       	rjmp	.+140    	; 0x360a <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    357e:	fe 01       	movw	r30, r28
    3580:	ff 96       	adiw	r30, 0x3f	; 63
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	64 f5       	brge	.+88     	; 0x35f2 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	fe 01       	movw	r30, r28
    359c:	ed 5b       	subi	r30, 0xBD	; 189
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e2       	ldi	r20, 0x20	; 32
    35ae:	51 e4       	ldi	r21, 0x41	; 65
    35b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e af       	std	Y+62, r25	; 0x3e
    35c6:	8d af       	std	Y+61, r24	; 0x3d
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <CLCD_vInit+0xee>
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9c af       	std	Y+60, r25	; 0x3c
    35d0:	8b af       	std	Y+59, r24	; 0x3b
    35d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    35d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <CLCD_vInit+0xdc>
    35da:	9c af       	std	Y+60, r25	; 0x3c
    35dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	8d ad       	ldd	r24, Y+61	; 0x3d
    35e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	9e af       	std	Y+62, r25	; 0x3e
    35e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	69 f7       	brne	.-38     	; 0x35ca <CLCD_vInit+0xd0>
    35f0:	16 c0       	rjmp	.+44     	; 0x361e <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f2:	fe 01       	movw	r30, r28
    35f4:	ff 96       	adiw	r30, 0x3f	; 63
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	9e af       	std	Y+62, r25	; 0x3e
    3608:	8d af       	std	Y+61, r24	; 0x3d
    360a:	8d ad       	ldd	r24, Y+61	; 0x3d
    360c:	9e ad       	ldd	r25, Y+62	; 0x3e
    360e:	9a af       	std	Y+58, r25	; 0x3a
    3610:	89 af       	std	Y+57, r24	; 0x39
    3612:	89 ad       	ldd	r24, Y+57	; 0x39
    3614:	9a ad       	ldd	r25, Y+58	; 0x3a
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <CLCD_vInit+0x11c>
    361a:	9a af       	std	Y+58, r25	; 0x3a
    361c:	89 af       	std	Y+57, r24	; 0x39

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	64 e0       	ldi	r22, 0x04	; 4
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	65 e0       	ldi	r22, 0x05	; 5
    362c:	41 e0       	ldi	r20, 0x01	; 1
    362e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	66 e0       	ldi	r22, 0x06	; 6
    3636:	41 e0       	ldi	r20, 0x01	; 1
    3638:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	67 e0       	ldi	r22, 0x07	; 7
    3640:	41 e0       	ldi	r20, 0x01	; 1
    3642:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	67 e0       	ldi	r22, 0x07	; 7
    364a:	41 e0       	ldi	r20, 0x01	; 1
    364c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	66 e0       	ldi	r22, 0x06	; 6
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	65 e0       	ldi	r22, 0x05	; 5
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    3664:	82 e0       	ldi	r24, 0x02	; 2
    3666:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a0 e2       	ldi	r26, 0x20	; 32
    3670:	b1 e4       	ldi	r27, 0x41	; 65
    3672:	8d ab       	std	Y+53, r24	; 0x35
    3674:	9e ab       	std	Y+54, r25	; 0x36
    3676:	af ab       	std	Y+55, r26	; 0x37
    3678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367a:	6d a9       	ldd	r22, Y+53	; 0x35
    367c:	7e a9       	ldd	r23, Y+54	; 0x36
    367e:	8f a9       	ldd	r24, Y+55	; 0x37
    3680:	98 ad       	ldd	r25, Y+56	; 0x38
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a ef       	ldi	r20, 0xFA	; 250
    3688:	54 e4       	ldi	r21, 0x44	; 68
    368a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	89 ab       	std	Y+49, r24	; 0x31
    3694:	9a ab       	std	Y+50, r25	; 0x32
    3696:	ab ab       	std	Y+51, r26	; 0x33
    3698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    369a:	69 a9       	ldd	r22, Y+49	; 0x31
    369c:	7a a9       	ldd	r23, Y+50	; 0x32
    369e:	8b a9       	ldd	r24, Y+51	; 0x33
    36a0:	9c a9       	ldd	r25, Y+52	; 0x34
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    36ae:	88 23       	and	r24, r24
    36b0:	2c f4       	brge	.+10     	; 0x36bc <CLCD_vInit+0x1c2>
		__ticks = 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	98 ab       	std	Y+48, r25	; 0x30
    36b8:	8f a7       	std	Y+47, r24	; 0x2f
    36ba:	3f c0       	rjmp	.+126    	; 0x373a <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    36bc:	69 a9       	ldd	r22, Y+49	; 0x31
    36be:	7a a9       	ldd	r23, Y+50	; 0x32
    36c0:	8b a9       	ldd	r24, Y+51	; 0x33
    36c2:	9c a9       	ldd	r25, Y+52	; 0x34
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	4c f5       	brge	.+82     	; 0x3726 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	6d a9       	ldd	r22, Y+53	; 0x35
    36d6:	7e a9       	ldd	r23, Y+54	; 0x36
    36d8:	8f a9       	ldd	r24, Y+55	; 0x37
    36da:	98 ad       	ldd	r25, Y+56	; 0x38
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	bc 01       	movw	r22, r24
    36ee:	cd 01       	movw	r24, r26
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	98 ab       	std	Y+48, r25	; 0x30
    36fa:	8f a7       	std	Y+47, r24	; 0x2f
    36fc:	0f c0       	rjmp	.+30     	; 0x371c <CLCD_vInit+0x222>
    36fe:	88 ec       	ldi	r24, 0xC8	; 200
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9e a7       	std	Y+46, r25	; 0x2e
    3704:	8d a7       	std	Y+45, r24	; 0x2d
    3706:	8d a5       	ldd	r24, Y+45	; 0x2d
    3708:	9e a5       	ldd	r25, Y+46	; 0x2e
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <CLCD_vInit+0x210>
    370e:	9e a7       	std	Y+46, r25	; 0x2e
    3710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3712:	8f a5       	ldd	r24, Y+47	; 0x2f
    3714:	98 a9       	ldd	r25, Y+48	; 0x30
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	98 ab       	std	Y+48, r25	; 0x30
    371a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371c:	8f a5       	ldd	r24, Y+47	; 0x2f
    371e:	98 a9       	ldd	r25, Y+48	; 0x30
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	69 f7       	brne	.-38     	; 0x36fe <CLCD_vInit+0x204>
    3724:	14 c0       	rjmp	.+40     	; 0x374e <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	69 a9       	ldd	r22, Y+49	; 0x31
    3728:	7a a9       	ldd	r23, Y+50	; 0x32
    372a:	8b a9       	ldd	r24, Y+51	; 0x33
    372c:	9c a9       	ldd	r25, Y+52	; 0x34
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	8f a5       	ldd	r24, Y+47	; 0x2f
    373c:	98 a9       	ldd	r25, Y+48	; 0x30
    373e:	9c a7       	std	Y+44, r25	; 0x2c
    3740:	8b a7       	std	Y+43, r24	; 0x2b
    3742:	8b a5       	ldd	r24, Y+43	; 0x2b
    3744:	9c a5       	ldd	r25, Y+44	; 0x2c
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <CLCD_vInit+0x24c>
    374a:	9c a7       	std	Y+44, r25	; 0x2c
    374c:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    374e:	88 e2       	ldi	r24, 0x28	; 40
    3750:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a0 e8       	ldi	r26, 0x80	; 128
    375a:	bf e3       	ldi	r27, 0x3F	; 63
    375c:	8f a3       	std	Y+39, r24	; 0x27
    375e:	98 a7       	std	Y+40, r25	; 0x28
    3760:	a9 a7       	std	Y+41, r26	; 0x29
    3762:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3764:	6f a1       	ldd	r22, Y+39	; 0x27
    3766:	78 a5       	ldd	r23, Y+40	; 0x28
    3768:	89 a5       	ldd	r24, Y+41	; 0x29
    376a:	9a a5       	ldd	r25, Y+42	; 0x2a
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	4a ef       	ldi	r20, 0xFA	; 250
    3772:	54 e4       	ldi	r21, 0x44	; 68
    3774:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8b a3       	std	Y+35, r24	; 0x23
    377e:	9c a3       	std	Y+36, r25	; 0x24
    3780:	ad a3       	std	Y+37, r26	; 0x25
    3782:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3784:	6b a1       	ldd	r22, Y+35	; 0x23
    3786:	7c a1       	ldd	r23, Y+36	; 0x24
    3788:	8d a1       	ldd	r24, Y+37	; 0x25
    378a:	9e a1       	ldd	r25, Y+38	; 0x26
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e8       	ldi	r20, 0x80	; 128
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3798:	88 23       	and	r24, r24
    379a:	2c f4       	brge	.+10     	; 0x37a6 <CLCD_vInit+0x2ac>
		__ticks = 1;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9a a3       	std	Y+34, r25	; 0x22
    37a2:	89 a3       	std	Y+33, r24	; 0x21
    37a4:	3f c0       	rjmp	.+126    	; 0x3824 <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    37a6:	6b a1       	ldd	r22, Y+35	; 0x23
    37a8:	7c a1       	ldd	r23, Y+36	; 0x24
    37aa:	8d a1       	ldd	r24, Y+37	; 0x25
    37ac:	9e a1       	ldd	r25, Y+38	; 0x26
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	3f ef       	ldi	r19, 0xFF	; 255
    37b2:	4f e7       	ldi	r20, 0x7F	; 127
    37b4:	57 e4       	ldi	r21, 0x47	; 71
    37b6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    37ba:	18 16       	cp	r1, r24
    37bc:	4c f5       	brge	.+82     	; 0x3810 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37be:	6f a1       	ldd	r22, Y+39	; 0x27
    37c0:	78 a5       	ldd	r23, Y+40	; 0x28
    37c2:	89 a5       	ldd	r24, Y+41	; 0x29
    37c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9a a3       	std	Y+34, r25	; 0x22
    37e4:	89 a3       	std	Y+33, r24	; 0x21
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <CLCD_vInit+0x30c>
    37e8:	88 ec       	ldi	r24, 0xC8	; 200
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	98 a3       	std	Y+32, r25	; 0x20
    37ee:	8f 8f       	std	Y+31, r24	; 0x1f
    37f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37f2:	98 a1       	ldd	r25, Y+32	; 0x20
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	f1 f7       	brne	.-4      	; 0x37f4 <CLCD_vInit+0x2fa>
    37f8:	98 a3       	std	Y+32, r25	; 0x20
    37fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	89 a1       	ldd	r24, Y+33	; 0x21
    37fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	9a a3       	std	Y+34, r25	; 0x22
    3804:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3806:	89 a1       	ldd	r24, Y+33	; 0x21
    3808:	9a a1       	ldd	r25, Y+34	; 0x22
    380a:	00 97       	sbiw	r24, 0x00	; 0
    380c:	69 f7       	brne	.-38     	; 0x37e8 <CLCD_vInit+0x2ee>
    380e:	14 c0       	rjmp	.+40     	; 0x3838 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3810:	6b a1       	ldd	r22, Y+35	; 0x23
    3812:	7c a1       	ldd	r23, Y+36	; 0x24
    3814:	8d a1       	ldd	r24, Y+37	; 0x25
    3816:	9e a1       	ldd	r25, Y+38	; 0x26
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	9a a3       	std	Y+34, r25	; 0x22
    3822:	89 a3       	std	Y+33, r24	; 0x21
    3824:	89 a1       	ldd	r24, Y+33	; 0x21
    3826:	9a a1       	ldd	r25, Y+34	; 0x22
    3828:	9e 8f       	std	Y+30, r25	; 0x1e
    382a:	8d 8f       	std	Y+29, r24	; 0x1d
    382c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    382e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <CLCD_vInit+0x336>
    3834:	9e 8f       	std	Y+30, r25	; 0x1e
    3836:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    3838:	8c e0       	ldi	r24, 0x0C	; 12
    383a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	a0 e8       	ldi	r26, 0x80	; 128
    3844:	bf e3       	ldi	r27, 0x3F	; 63
    3846:	89 8f       	std	Y+25, r24	; 0x19
    3848:	9a 8f       	std	Y+26, r25	; 0x1a
    384a:	ab 8f       	std	Y+27, r26	; 0x1b
    384c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384e:	69 8d       	ldd	r22, Y+25	; 0x19
    3850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a ef       	ldi	r20, 0xFA	; 250
    385c:	54 e4       	ldi	r21, 0x44	; 68
    385e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8d 8b       	std	Y+21, r24	; 0x15
    3868:	9e 8b       	std	Y+22, r25	; 0x16
    386a:	af 8b       	std	Y+23, r26	; 0x17
    386c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    386e:	6d 89       	ldd	r22, Y+21	; 0x15
    3870:	7e 89       	ldd	r23, Y+22	; 0x16
    3872:	8f 89       	ldd	r24, Y+23	; 0x17
    3874:	98 8d       	ldd	r25, Y+24	; 0x18
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e8       	ldi	r20, 0x80	; 128
    387c:	5f e3       	ldi	r21, 0x3F	; 63
    387e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3882:	88 23       	and	r24, r24
    3884:	2c f4       	brge	.+10     	; 0x3890 <CLCD_vInit+0x396>
		__ticks = 1;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	9c 8b       	std	Y+20, r25	; 0x14
    388c:	8b 8b       	std	Y+19, r24	; 0x13
    388e:	3f c0       	rjmp	.+126    	; 0x390e <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    3890:	6d 89       	ldd	r22, Y+21	; 0x15
    3892:	7e 89       	ldd	r23, Y+22	; 0x16
    3894:	8f 89       	ldd	r24, Y+23	; 0x17
    3896:	98 8d       	ldd	r25, Y+24	; 0x18
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	4f e7       	ldi	r20, 0x7F	; 127
    389e:	57 e4       	ldi	r21, 0x47	; 71
    38a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    38a4:	18 16       	cp	r1, r24
    38a6:	4c f5       	brge	.+82     	; 0x38fa <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a8:	69 8d       	ldd	r22, Y+25	; 0x19
    38aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e2       	ldi	r20, 0x20	; 32
    38b6:	51 e4       	ldi	r21, 0x41	; 65
    38b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	9c 8b       	std	Y+20, r25	; 0x14
    38ce:	8b 8b       	std	Y+19, r24	; 0x13
    38d0:	0f c0       	rjmp	.+30     	; 0x38f0 <CLCD_vInit+0x3f6>
    38d2:	88 ec       	ldi	r24, 0xC8	; 200
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9a 8b       	std	Y+18, r25	; 0x12
    38d8:	89 8b       	std	Y+17, r24	; 0x11
    38da:	89 89       	ldd	r24, Y+17	; 0x11
    38dc:	9a 89       	ldd	r25, Y+18	; 0x12
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <CLCD_vInit+0x3e4>
    38e2:	9a 8b       	std	Y+18, r25	; 0x12
    38e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	9c 8b       	std	Y+20, r25	; 0x14
    38ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f0:	8b 89       	ldd	r24, Y+19	; 0x13
    38f2:	9c 89       	ldd	r25, Y+20	; 0x14
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	69 f7       	brne	.-38     	; 0x38d2 <CLCD_vInit+0x3d8>
    38f8:	14 c0       	rjmp	.+40     	; 0x3922 <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	9c 8b       	std	Y+20, r25	; 0x14
    390c:	8b 8b       	std	Y+19, r24	; 0x13
    390e:	8b 89       	ldd	r24, Y+19	; 0x13
    3910:	9c 89       	ldd	r25, Y+20	; 0x14
    3912:	98 8b       	std	Y+16, r25	; 0x10
    3914:	8f 87       	std	Y+15, r24	; 0x0f
    3916:	8f 85       	ldd	r24, Y+15	; 0x0f
    3918:	98 89       	ldd	r25, Y+16	; 0x10
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <CLCD_vInit+0x420>
    391e:	98 8b       	std	Y+16, r25	; 0x10
    3920:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    3922:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    3926:	86 e0       	ldi	r24, 0x06	; 6
    3928:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e8       	ldi	r26, 0x80	; 128
    3932:	bf e3       	ldi	r27, 0x3F	; 63
    3934:	8b 87       	std	Y+11, r24	; 0x0b
    3936:	9c 87       	std	Y+12, r25	; 0x0c
    3938:	ad 87       	std	Y+13, r26	; 0x0d
    393a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6b 85       	ldd	r22, Y+11	; 0x0b
    393e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3940:	8d 85       	ldd	r24, Y+13	; 0x0d
    3942:	9e 85       	ldd	r25, Y+14	; 0x0e
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8f 83       	std	Y+7, r24	; 0x07
    3956:	98 87       	std	Y+8, r25	; 0x08
    3958:	a9 87       	std	Y+9, r26	; 0x09
    395a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395c:	6f 81       	ldd	r22, Y+7	; 0x07
    395e:	78 85       	ldd	r23, Y+8	; 0x08
    3960:	89 85       	ldd	r24, Y+9	; 0x09
    3962:	9a 85       	ldd	r25, Y+10	; 0x0a
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <CLCD_vInit+0x484>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    397e:	6f 81       	ldd	r22, Y+7	; 0x07
    3980:	78 85       	ldd	r23, Y+8	; 0x08
    3982:	89 85       	ldd	r24, Y+9	; 0x09
    3984:	9a 85       	ldd	r25, Y+10	; 0x0a
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6b 85       	ldd	r22, Y+11	; 0x0b
    3998:	7c 85       	ldd	r23, Y+12	; 0x0c
    399a:	8d 85       	ldd	r24, Y+13	; 0x0d
    399c:	9e 85       	ldd	r25, Y+14	; 0x0e
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9e 83       	std	Y+6, r25	; 0x06
    39bc:	8d 83       	std	Y+5, r24	; 0x05
    39be:	0f c0       	rjmp	.+30     	; 0x39de <CLCD_vInit+0x4e4>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	8b 83       	std	Y+3, r24	; 0x03
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	9c 81       	ldd	r25, Y+4	; 0x04
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <CLCD_vInit+0x4d2>
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	9e 83       	std	Y+6, r25	; 0x06
    39dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8d 81       	ldd	r24, Y+5	; 0x05
    39e0:	9e 81       	ldd	r25, Y+6	; 0x06
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <CLCD_vInit+0x4c6>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <CLCD_vInit+0x50e>
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3a10:	ca 5b       	subi	r28, 0xBA	; 186
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	08 95       	ret

00003a28 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	0f 92       	push	r0
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	67 e0       	ldi	r22, 0x07	; 7
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	66 e0       	ldi	r22, 0x06	; 6
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  
#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to high nibbles
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	98 2f       	mov	r25, r24
    3a4c:	92 95       	swap	r25
    3a4e:	9f 70       	andi	r25, 0x0F	; 15
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	69 2f       	mov	r22, r25
    3a54:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3a58:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	69 81       	ldd	r22, Y+1	; 0x01
    3a60:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3a64:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3a68:	0f 90       	pop	r0
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	0f 92       	push	r0
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	67 e0       	ldi	r22, 0x07	; 7
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	66 e0       	ldi	r22, 0x06	; 6
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to high nibbles
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	98 2f       	mov	r25, r24
    3a94:	92 95       	swap	r25
    3a96:	9f 70       	andi	r25, 0x0F	; 15
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	69 2f       	mov	r22, r25
    3a9c:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3aa0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	69 81       	ldd	r22, Y+1	; 0x01
    3aa8:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3aac:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3ab0:	0f 90       	pop	r0
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	6c 97       	sbiw	r28, 0x1c	; 28
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	65 e0       	ldi	r22, 0x05	; 5
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	a0 e8       	ldi	r26, 0x80	; 128
    3adc:	bf e3       	ldi	r27, 0x3F	; 63
    3ade:	89 8f       	std	Y+25, r24	; 0x19
    3ae0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ae2:	ab 8f       	std	Y+27, r26	; 0x1b
    3ae4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	4a ef       	ldi	r20, 0xFA	; 250
    3af4:	54 e4       	ldi	r21, 0x44	; 68
    3af6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8d 8b       	std	Y+21, r24	; 0x15
    3b00:	9e 8b       	std	Y+22, r25	; 0x16
    3b02:	af 8b       	std	Y+23, r26	; 0x17
    3b04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b06:	6d 89       	ldd	r22, Y+21	; 0x15
    3b08:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e8       	ldi	r20, 0x80	; 128
    3b14:	5f e3       	ldi	r21, 0x3F	; 63
    3b16:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3b1a:	88 23       	and	r24, r24
    3b1c:	2c f4       	brge	.+10     	; 0x3b28 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9c 8b       	std	Y+20, r25	; 0x14
    3b24:	8b 8b       	std	Y+19, r24	; 0x13
    3b26:	3f c0       	rjmp	.+126    	; 0x3ba6 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3b28:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	4c f5       	brge	.+82     	; 0x3b92 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b40:	69 8d       	ldd	r22, Y+25	; 0x19
    3b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e2       	ldi	r20, 0x20	; 32
    3b4e:	51 e4       	ldi	r21, 0x41	; 65
    3b50:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9c 8b       	std	Y+20, r25	; 0x14
    3b66:	8b 8b       	std	Y+19, r24	; 0x13
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <CLCD_vSendFallingEdge+0xd0>
    3b6a:	88 ec       	ldi	r24, 0xC8	; 200
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9a 8b       	std	Y+18, r25	; 0x12
    3b70:	89 8b       	std	Y+17, r24	; 0x11
    3b72:	89 89       	ldd	r24, Y+17	; 0x11
    3b74:	9a 89       	ldd	r25, Y+18	; 0x12
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <CLCD_vSendFallingEdge+0xbe>
    3b7a:	9a 8b       	std	Y+18, r25	; 0x12
    3b7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b80:	9c 89       	ldd	r25, Y+20	; 0x14
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	9c 8b       	std	Y+20, r25	; 0x14
    3b86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b88:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	69 f7       	brne	.-38     	; 0x3b6a <CLCD_vSendFallingEdge+0xb2>
    3b90:	14 c0       	rjmp	.+40     	; 0x3bba <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b92:	6d 89       	ldd	r22, Y+21	; 0x15
    3b94:	7e 89       	ldd	r23, Y+22	; 0x16
    3b96:	8f 89       	ldd	r24, Y+23	; 0x17
    3b98:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	9c 8b       	std	Y+20, r25	; 0x14
    3ba4:	8b 8b       	std	Y+19, r24	; 0x13
    3ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    3baa:	98 8b       	std	Y+16, r25	; 0x10
    3bac:	8f 87       	std	Y+15, r24	; 0x0f
    3bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb0:	98 89       	ldd	r25, Y+16	; 0x10
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <CLCD_vSendFallingEdge+0xfa>
    3bb6:	98 8b       	std	Y+16, r25	; 0x10
    3bb8:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	65 e0       	ldi	r22, 0x05	; 5
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 e8       	ldi	r26, 0x80	; 128
    3bca:	bf e3       	ldi	r27, 0x3F	; 63
    3bcc:	8b 87       	std	Y+11, r24	; 0x0b
    3bce:	9c 87       	std	Y+12, r25	; 0x0c
    3bd0:	ad 87       	std	Y+13, r26	; 0x0d
    3bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	4a ef       	ldi	r20, 0xFA	; 250
    3be2:	54 e4       	ldi	r21, 0x44	; 68
    3be4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	8f 83       	std	Y+7, r24	; 0x07
    3bee:	98 87       	std	Y+8, r25	; 0x08
    3bf0:	a9 87       	std	Y+9, r26	; 0x09
    3bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf6:	78 85       	ldd	r23, Y+8	; 0x08
    3bf8:	89 85       	ldd	r24, Y+9	; 0x09
    3bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e8       	ldi	r20, 0x80	; 128
    3c02:	5f e3       	ldi	r21, 0x3F	; 63
    3c04:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3c08:	88 23       	and	r24, r24
    3c0a:	2c f4       	brge	.+10     	; 0x3c16 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	9e 83       	std	Y+6, r25	; 0x06
    3c12:	8d 83       	std	Y+5, r24	; 0x05
    3c14:	3f c0       	rjmp	.+126    	; 0x3c94 <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	3f ef       	ldi	r19, 0xFF	; 255
    3c22:	4f e7       	ldi	r20, 0x7F	; 127
    3c24:	57 e4       	ldi	r21, 0x47	; 71
    3c26:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3c2a:	18 16       	cp	r1, r24
    3c2c:	4c f5       	brge	.+82     	; 0x3c80 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e2       	ldi	r20, 0x20	; 32
    3c3c:	51 e4       	ldi	r21, 0x41	; 65
    3c3e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	0f c0       	rjmp	.+30     	; 0x3c76 <CLCD_vSendFallingEdge+0x1be>
    3c58:	88 ec       	ldi	r24, 0xC8	; 200
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9c 83       	std	Y+4, r25	; 0x04
    3c5e:	8b 83       	std	Y+3, r24	; 0x03
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <CLCD_vSendFallingEdge+0x1ac>
    3c68:	9c 83       	std	Y+4, r25	; 0x04
    3c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	9e 83       	std	Y+6, r25	; 0x06
    3c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c76:	8d 81       	ldd	r24, Y+5	; 0x05
    3c78:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	69 f7       	brne	.-38     	; 0x3c58 <CLCD_vSendFallingEdge+0x1a0>
    3c7e:	14 c0       	rjmp	.+40     	; 0x3ca8 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c80:	6f 81       	ldd	r22, Y+7	; 0x07
    3c82:	78 85       	ldd	r23, Y+8	; 0x08
    3c84:	89 85       	ldd	r24, Y+9	; 0x09
    3c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	9e 81       	ldd	r25, Y+6	; 0x06
    3c98:	9a 83       	std	Y+2, r25	; 0x02
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <CLCD_vSendFallingEdge+0x1e8>
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3ca8:	6c 96       	adiw	r28, 0x1c	; 28
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	2e 97       	sbiw	r28, 0x0e	; 14
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	a0 e2       	ldi	r26, 0x20	; 32
    3cda:	b1 e4       	ldi	r27, 0x41	; 65
    3cdc:	8b 87       	std	Y+11, r24	; 0x0b
    3cde:	9c 87       	std	Y+12, r25	; 0x0c
    3ce0:	ad 87       	std	Y+13, r26	; 0x0d
    3ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	4a ef       	ldi	r20, 0xFA	; 250
    3cf2:	54 e4       	ldi	r21, 0x44	; 68
    3cf4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	8f 83       	std	Y+7, r24	; 0x07
    3cfe:	98 87       	std	Y+8, r25	; 0x08
    3d00:	a9 87       	std	Y+9, r26	; 0x09
    3d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e8       	ldi	r20, 0x80	; 128
    3d12:	5f e3       	ldi	r21, 0x3F	; 63
    3d14:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3d18:	88 23       	and	r24, r24
    3d1a:	2c f4       	brge	.+10     	; 0x3d26 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9e 83       	std	Y+6, r25	; 0x06
    3d22:	8d 83       	std	Y+5, r24	; 0x05
    3d24:	3f c0       	rjmp	.+126    	; 0x3da4 <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    3d26:	6f 81       	ldd	r22, Y+7	; 0x07
    3d28:	78 85       	ldd	r23, Y+8	; 0x08
    3d2a:	89 85       	ldd	r24, Y+9	; 0x09
    3d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	4f e7       	ldi	r20, 0x7F	; 127
    3d34:	57 e4       	ldi	r21, 0x47	; 71
    3d36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3d3a:	18 16       	cp	r1, r24
    3d3c:	4c f5       	brge	.+82     	; 0x3d90 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e2       	ldi	r20, 0x20	; 32
    3d4c:	51 e4       	ldi	r21, 0x41	; 65
    3d4e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	9e 83       	std	Y+6, r25	; 0x06
    3d64:	8d 83       	std	Y+5, r24	; 0x05
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <CLCD_vClearScreen+0xcc>
    3d68:	88 ec       	ldi	r24, 0xC8	; 200
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	9c 83       	std	Y+4, r25	; 0x04
    3d6e:	8b 83       	std	Y+3, r24	; 0x03
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <CLCD_vClearScreen+0xba>
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	9e 83       	std	Y+6, r25	; 0x06
    3d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	69 f7       	brne	.-38     	; 0x3d68 <CLCD_vClearScreen+0xae>
    3d8e:	14 c0       	rjmp	.+40     	; 0x3db8 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	6f 81       	ldd	r22, Y+7	; 0x07
    3d92:	78 85       	ldd	r23, Y+8	; 0x08
    3d94:	89 85       	ldd	r24, Y+9	; 0x09
    3d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	8d 83       	std	Y+5, r24	; 0x05
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <CLCD_vClearScreen+0xf6>
    3db4:	9a 83       	std	Y+2, r25	; 0x02
    3db6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    3db8:	2e 96       	adiw	r28, 0x0e	; 14
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <CLCD_vSendString+0x6>
    3dd0:	0f 92       	push	r0
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9b 83       	std	Y+3, r25	; 0x03
    3dd8:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    3dda:	19 82       	std	Y+1, r1	; 0x01
    3ddc:	0e c0       	rjmp	.+28     	; 0x3dfa <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	9b 81       	ldd	r25, Y+3	; 0x03
    3de8:	fc 01       	movw	r30, r24
    3dea:	e2 0f       	add	r30, r18
    3dec:	f3 1f       	adc	r31, r19
    3dee:	80 81       	ld	r24, Z
    3df0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    LOC_u8Iterator++;
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	8f 5f       	subi	r24, 0xFF	; 255
    3df8:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	9b 81       	ldd	r25, Y+3	; 0x03
    3e04:	fc 01       	movw	r30, r24
    3e06:	e2 0f       	add	r30, r18
    3e08:	f3 1f       	adc	r31, r19
    3e0a:	80 81       	ld	r24, Z
    3e0c:	88 23       	and	r24, r24
    3e0e:	39 f7       	brne	.-50     	; 0x3dde <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3e1c:	ef 92       	push	r14
    3e1e:	ff 92       	push	r15
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	28 97       	sbiw	r28, 0x08	; 8
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	6d 83       	std	Y+5, r22	; 0x05
    3e3a:	7e 83       	std	Y+6, r23	; 0x06
    3e3c:	8f 83       	std	Y+7, r24	; 0x07
    3e3e:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a0 e0       	ldi	r26, 0x00	; 0
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	ab 83       	std	Y+3, r26	; 0x03
    3e4e:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    3e50:	8d 81       	ldd	r24, Y+5	; 0x05
    3e52:	9e 81       	ldd	r25, Y+6	; 0x06
    3e54:	af 81       	ldd	r26, Y+7	; 0x07
    3e56:	b8 85       	ldd	r27, Y+8	; 0x08
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	a1 05       	cpc	r26, r1
    3e5c:	b1 05       	cpc	r27, r1
    3e5e:	21 f4       	brne	.+8      	; 0x3e68 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    3e60:	80 e3       	ldi	r24, 0x30	; 48
    3e62:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    3e66:	85 c0       	rjmp	.+266    	; 0x3f72 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	af 81       	ldd	r26, Y+7	; 0x07
    3e6e:	b8 85       	ldd	r27, Y+8	; 0x08
    3e70:	bb 23       	and	r27, r27
    3e72:	0c f0       	brlt	.+2      	; 0x3e76 <CLCD_vSendIntNumber+0x5a>
    3e74:	49 c0       	rjmp	.+146    	; 0x3f08 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    3e76:	8d e2       	ldi	r24, 0x2D	; 45
    3e78:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	af 81       	ldd	r26, Y+7	; 0x07
    3e82:	b8 85       	ldd	r27, Y+8	; 0x08
    3e84:	b0 95       	com	r27
    3e86:	a0 95       	com	r26
    3e88:	90 95       	com	r25
    3e8a:	81 95       	neg	r24
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	af 4f       	sbci	r26, 0xFF	; 255
    3e90:	bf 4f       	sbci	r27, 0xFF	; 255
    3e92:	8d 83       	std	Y+5, r24	; 0x05
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	af 83       	std	Y+7, r26	; 0x07
    3e98:	b8 87       	std	Y+8, r27	; 0x08
    3e9a:	36 c0       	rjmp	.+108    	; 0x3f08 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ea2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ea4:	2a e0       	ldi	r18, 0x0A	; 10
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e0       	ldi	r20, 0x00	; 0
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__mulsi3>
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	af 81       	ldd	r26, Y+7	; 0x07
    3ebe:	b8 85       	ldd	r27, Y+8	; 0x08
    3ec0:	2a e0       	ldi	r18, 0x0A	; 10
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__divmodsi4>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	8e 0d       	add	r24, r14
    3ed6:	9f 1d       	adc	r25, r15
    3ed8:	a0 1f       	adc	r26, r16
    3eda:	b1 1f       	adc	r27, r17
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	9a 83       	std	Y+2, r25	; 0x02
    3ee0:	ab 83       	std	Y+3, r26	; 0x03
    3ee2:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    3ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee8:	af 81       	ldd	r26, Y+7	; 0x07
    3eea:	b8 85       	ldd	r27, Y+8	; 0x08
    3eec:	2a e0       	ldi	r18, 0x0A	; 10
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e0       	ldi	r20, 0x00	; 0
    3ef2:	50 e0       	ldi	r21, 0x00	; 0
    3ef4:	bc 01       	movw	r22, r24
    3ef6:	cd 01       	movw	r24, r26
    3ef8:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__divmodsi4>
    3efc:	da 01       	movw	r26, r20
    3efe:	c9 01       	movw	r24, r18
    3f00:	8d 83       	std	Y+5, r24	; 0x05
    3f02:	9e 83       	std	Y+6, r25	; 0x06
    3f04:	af 83       	std	Y+7, r26	; 0x07
    3f06:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0c:	af 81       	ldd	r26, Y+7	; 0x07
    3f0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	a1 05       	cpc	r26, r1
    3f14:	b1 05       	cpc	r27, r1
    3f16:	11 f6       	brne	.-124    	; 0x3e9c <CLCD_vSendIntNumber+0x80>
    3f18:	23 c0       	rjmp	.+70     	; 0x3f60 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f20:	bc 81       	ldd	r27, Y+4	; 0x04
    3f22:	2a e0       	ldi	r18, 0x0A	; 10
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 a2 3c 	call	0x7944	; 0x7944 <__udivmodsi4>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	80 5d       	subi	r24, 0xD0	; 208
    3f38:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f40:	ab 81       	ldd	r26, Y+3	; 0x03
    3f42:	bc 81       	ldd	r27, Y+4	; 0x04
    3f44:	2a e0       	ldi	r18, 0x0A	; 10
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e0       	ldi	r20, 0x00	; 0
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	0e 94 a2 3c 	call	0x7944	; 0x7944 <__udivmodsi4>
    3f54:	da 01       	movw	r26, r20
    3f56:	c9 01       	movw	r24, r18
    3f58:	89 83       	std	Y+1, r24	; 0x01
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	ab 83       	std	Y+3, r26	; 0x03
    3f5e:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	ab 81       	ldd	r26, Y+3	; 0x03
    3f66:	bc 81       	ldd	r27, Y+4	; 0x04
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	a1 05       	cpc	r26, r1
    3f6e:	b1 05       	cpc	r27, r1
    3f70:	a1 f6       	brne	.-88     	; 0x3f1a <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    3f72:	28 96       	adiw	r28, 0x08	; 8
    3f74:	0f b6       	in	r0, 0x3f	; 63
    3f76:	f8 94       	cli
    3f78:	de bf       	out	0x3e, r29	; 62
    3f7a:	0f be       	out	0x3f, r0	; 63
    3f7c:	cd bf       	out	0x3d, r28	; 61
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	1f 91       	pop	r17
    3f84:	0f 91       	pop	r16
    3f86:	ff 90       	pop	r15
    3f88:	ef 90       	pop	r14
    3f8a:	08 95       	ret

00003f8c <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3f8c:	af 92       	push	r10
    3f8e:	bf 92       	push	r11
    3f90:	cf 92       	push	r12
    3f92:	df 92       	push	r13
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	00 d0       	rcall	.+0      	; 0x3fa2 <CLCD_vSendFloatNumber+0x16>
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <CLCD_vSendFloatNumber+0x18>
    3fa4:	cd b7       	in	r28, 0x3d	; 61
    3fa6:	de b7       	in	r29, 0x3e	; 62
    3fa8:	69 83       	std	Y+1, r22	; 0x01
    3faa:	7a 83       	std	Y+2, r23	; 0x02
    3fac:	8b 83       	std	Y+3, r24	; 0x03
    3fae:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    3fb0:	69 81       	ldd	r22, Y+1	; 0x01
    3fb2:	7a 81       	ldd	r23, Y+2	; 0x02
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    3fc8:	69 81       	ldd	r22, Y+1	; 0x01
    3fca:	7a 81       	ldd	r23, Y+2	; 0x02
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	4c f4       	brge	.+18     	; 0x3ff2 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe8:	b0 58       	subi	r27, 0x80	; 128
    3fea:	89 83       	std	Y+1, r24	; 0x01
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	ab 83       	std	Y+3, r26	; 0x03
    3ff0:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    3ff2:	69 81       	ldd	r22, Y+1	; 0x01
    3ff4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	bc 01       	movw	r22, r24
    4004:	cd 01       	movw	r24, r26
    4006:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    400a:	9b 01       	movw	r18, r22
    400c:	ac 01       	movw	r20, r24
    400e:	69 81       	ldd	r22, Y+1	; 0x01
    4010:	7a 81       	ldd	r23, Y+2	; 0x02
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	9c 81       	ldd	r25, Y+4	; 0x04
    4016:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	9a 83       	std	Y+2, r25	; 0x02
    4022:	ab 83       	std	Y+3, r26	; 0x03
    4024:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    4026:	69 81       	ldd	r22, Y+1	; 0x01
    4028:	7a 81       	ldd	r23, Y+2	; 0x02
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	9c 81       	ldd	r25, Y+4	; 0x04
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e4       	ldi	r19, 0x40	; 64
    4032:	4c e1       	ldi	r20, 0x1C	; 28
    4034:	56 e4       	ldi	r21, 0x46	; 70
    4036:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	ab 83       	std	Y+3, r26	; 0x03
    4044:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    4046:	69 81       	ldd	r22, Y+1	; 0x01
    4048:	7a 81       	ldd	r23, Y+2	; 0x02
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	9c 81       	ldd	r25, Y+4	; 0x04
    404e:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    4052:	a2 2e       	mov	r10, r18
    4054:	b3 2e       	mov	r11, r19
    4056:	c4 2e       	mov	r12, r20
    4058:	d5 2e       	mov	r13, r21
    405a:	e6 2e       	mov	r14, r22
    405c:	f7 2e       	mov	r15, r23
    405e:	08 2f       	mov	r16, r24
    4060:	19 2f       	mov	r17, r25
    4062:	8a 2d       	mov	r24, r10
    4064:	8b 29       	or	r24, r11
    4066:	8c 29       	or	r24, r12
    4068:	8d 29       	or	r24, r13
    406a:	8e 29       	or	r24, r14
    406c:	8f 29       	or	r24, r15
    406e:	80 2b       	or	r24, r16
    4070:	81 2b       	or	r24, r17
    4072:	88 23       	and	r24, r24
    4074:	79 f0       	breq	.+30     	; 0x4094 <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    4076:	8e e2       	ldi	r24, 0x2E	; 46
    4078:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    407c:	69 81       	ldd	r22, Y+1	; 0x01
    407e:	7a 81       	ldd	r23, Y+2	; 0x02
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	9c 81       	ldd	r25, Y+4	; 0x04
    4084:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CLCD_vSendIntNumber>
  }
}
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	1f 91       	pop	r17
    40a2:	0f 91       	pop	r16
    40a4:	ff 90       	pop	r15
    40a6:	ef 90       	pop	r14
    40a8:	df 90       	pop	r13
    40aa:	cf 90       	pop	r12
    40ac:	bf 90       	pop	r11
    40ae:	af 90       	pop	r10
    40b0:	08 95       	ret

000040b2 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	61 97       	sbiw	r28, 0x11	; 17
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	88 8b       	std	Y+16, r24	; 0x10
    40c8:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    40ca:	88 89       	ldd	r24, Y+16	; 0x10
    40cc:	88 23       	and	r24, r24
    40ce:	49 f0       	breq	.+18     	; 0x40e2 <CLCD_vSetPosition+0x30>
    40d0:	88 89       	ldd	r24, Y+16	; 0x10
    40d2:	85 30       	cpi	r24, 0x05	; 5
    40d4:	30 f4       	brcc	.+12     	; 0x40e2 <CLCD_vSetPosition+0x30>
    40d6:	89 89       	ldd	r24, Y+17	; 0x11
    40d8:	88 23       	and	r24, r24
    40da:	19 f0       	breq	.+6      	; 0x40e2 <CLCD_vSetPosition+0x30>
    40dc:	89 89       	ldd	r24, Y+17	; 0x11
    40de:	85 31       	cpi	r24, 0x15	; 21
    40e0:	18 f0       	brcs	.+6      	; 0x40e8 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    40e2:	80 e8       	ldi	r24, 0x80	; 128
    40e4:	8f 87       	std	Y+15, r24	; 0x0f
    40e6:	1b c0       	rjmp	.+54     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    40e8:	88 89       	ldd	r24, Y+16	; 0x10
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	21 f4       	brne	.+8      	; 0x40f6 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    40ee:	89 89       	ldd	r24, Y+17	; 0x11
    40f0:	81 58       	subi	r24, 0x81	; 129
    40f2:	8f 87       	std	Y+15, r24	; 0x0f
    40f4:	14 c0       	rjmp	.+40     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    40f6:	88 89       	ldd	r24, Y+16	; 0x10
    40f8:	82 30       	cpi	r24, 0x02	; 2
    40fa:	21 f4       	brne	.+8      	; 0x4104 <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    40fc:	89 89       	ldd	r24, Y+17	; 0x11
    40fe:	81 54       	subi	r24, 0x41	; 65
    4100:	8f 87       	std	Y+15, r24	; 0x0f
    4102:	0d c0       	rjmp	.+26     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    4104:	88 89       	ldd	r24, Y+16	; 0x10
    4106:	83 30       	cpi	r24, 0x03	; 3
    4108:	21 f4       	brne	.+8      	; 0x4112 <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    410a:	89 89       	ldd	r24, Y+17	; 0x11
    410c:	8d 56       	subi	r24, 0x6D	; 109
    410e:	8f 87       	std	Y+15, r24	; 0x0f
    4110:	06 c0       	rjmp	.+12     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    4112:	88 89       	ldd	r24, Y+16	; 0x10
    4114:	84 30       	cpi	r24, 0x04	; 4
    4116:	19 f4       	brne	.+6      	; 0x411e <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    4118:	89 89       	ldd	r24, Y+17	; 0x11
    411a:	8d 52       	subi	r24, 0x2D	; 45
    411c:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    411e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4120:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	a0 e8       	ldi	r26, 0x80	; 128
    412a:	bf e3       	ldi	r27, 0x3F	; 63
    412c:	8b 87       	std	Y+11, r24	; 0x0b
    412e:	9c 87       	std	Y+12, r25	; 0x0c
    4130:	ad 87       	std	Y+13, r26	; 0x0d
    4132:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4134:	6b 85       	ldd	r22, Y+11	; 0x0b
    4136:	7c 85       	ldd	r23, Y+12	; 0x0c
    4138:	8d 85       	ldd	r24, Y+13	; 0x0d
    413a:	9e 85       	ldd	r25, Y+14	; 0x0e
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	4a ef       	ldi	r20, 0xFA	; 250
    4142:	54 e4       	ldi	r21, 0x44	; 68
    4144:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	8f 83       	std	Y+7, r24	; 0x07
    414e:	98 87       	std	Y+8, r25	; 0x08
    4150:	a9 87       	std	Y+9, r26	; 0x09
    4152:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4154:	6f 81       	ldd	r22, Y+7	; 0x07
    4156:	78 85       	ldd	r23, Y+8	; 0x08
    4158:	89 85       	ldd	r24, Y+9	; 0x09
    415a:	9a 85       	ldd	r25, Y+10	; 0x0a
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e8       	ldi	r20, 0x80	; 128
    4162:	5f e3       	ldi	r21, 0x3F	; 63
    4164:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4168:	88 23       	and	r24, r24
    416a:	2c f4       	brge	.+10     	; 0x4176 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
    4174:	3f c0       	rjmp	.+126    	; 0x41f4 <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	3f ef       	ldi	r19, 0xFF	; 255
    4182:	4f e7       	ldi	r20, 0x7F	; 127
    4184:	57 e4       	ldi	r21, 0x47	; 71
    4186:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    418a:	18 16       	cp	r1, r24
    418c:	4c f5       	brge	.+82     	; 0x41e0 <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4190:	7c 85       	ldd	r23, Y+12	; 0x0c
    4192:	8d 85       	ldd	r24, Y+13	; 0x0d
    4194:	9e 85       	ldd	r25, Y+14	; 0x0e
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e2       	ldi	r20, 0x20	; 32
    419c:	51 e4       	ldi	r21, 0x41	; 65
    419e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	9e 83       	std	Y+6, r25	; 0x06
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	0f c0       	rjmp	.+30     	; 0x41d6 <CLCD_vSetPosition+0x124>
    41b8:	88 ec       	ldi	r24, 0xC8	; 200
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9c 83       	std	Y+4, r25	; 0x04
    41be:	8b 83       	std	Y+3, r24	; 0x03
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	9c 81       	ldd	r25, Y+4	; 0x04
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	f1 f7       	brne	.-4      	; 0x41c4 <CLCD_vSetPosition+0x112>
    41c8:	9c 83       	std	Y+4, r25	; 0x04
    41ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41cc:	8d 81       	ldd	r24, Y+5	; 0x05
    41ce:	9e 81       	ldd	r25, Y+6	; 0x06
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	9e 83       	std	Y+6, r25	; 0x06
    41d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d6:	8d 81       	ldd	r24, Y+5	; 0x05
    41d8:	9e 81       	ldd	r25, Y+6	; 0x06
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	69 f7       	brne	.-38     	; 0x41b8 <CLCD_vSetPosition+0x106>
    41de:	14 c0       	rjmp	.+40     	; 0x4208 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e0:	6f 81       	ldd	r22, Y+7	; 0x07
    41e2:	78 85       	ldd	r23, Y+8	; 0x08
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
    41f4:	8d 81       	ldd	r24, Y+5	; 0x05
    41f6:	9e 81       	ldd	r25, Y+6	; 0x06
    41f8:	9a 83       	std	Y+2, r25	; 0x02
    41fa:	89 83       	std	Y+1, r24	; 0x01
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <CLCD_vSetPosition+0x14e>
    4204:	9a 83       	std	Y+2, r25	; 0x02
    4206:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4208:	61 96       	adiw	r28, 0x11	; 17
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	00 d0       	rcall	.+0      	; 0x4220 <CLCD_vSendExtraChar+0x6>
    4220:	0f 92       	push	r0
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	8a 83       	std	Y+2, r24	; 0x02
    4228:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    422a:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    422c:	80 e4       	ldi	r24, 0x40	; 64
    422e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    4232:	19 82       	std	Y+1, r1	; 0x01
    4234:	0c c0       	rjmp	.+24     	; 0x424e <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	88 2f       	mov	r24, r24
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	fc 01       	movw	r30, r24
    423e:	ed 5e       	subi	r30, 0xED	; 237
    4240:	fc 4f       	sbci	r31, 0xFC	; 252
    4242:	80 81       	ld	r24, Z
    4244:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	8f 5f       	subi	r24, 0xFF	; 255
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	80 34       	cpi	r24, 0x40	; 64
    4252:	88 f3       	brcs	.-30     	; 0x4236 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    4254:	8a 81       	ldd	r24, Y+2	; 0x02
    4256:	6b 81       	ldd	r22, Y+3	; 0x03
    4258:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    425c:	19 82       	std	Y+1, r1	; 0x01
    425e:	06 c0       	rjmp	.+12     	; 0x426c <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	8f 5f       	subi	r24, 0xFF	; 255
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	88 30       	cpi	r24, 0x08	; 8
    4270:	b8 f3       	brcs	.-18     	; 0x4260 <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	2e 97       	sbiw	r28, 0x0e	; 14
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    4292:	8c e1       	ldi	r24, 0x1C	; 28
    4294:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	a0 e8       	ldi	r26, 0x80	; 128
    429e:	bf e3       	ldi	r27, 0x3F	; 63
    42a0:	8b 87       	std	Y+11, r24	; 0x0b
    42a2:	9c 87       	std	Y+12, r25	; 0x0c
    42a4:	ad 87       	std	Y+13, r26	; 0x0d
    42a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    42aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	4a ef       	ldi	r20, 0xFA	; 250
    42b6:	54 e4       	ldi	r21, 0x44	; 68
    42b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	8f 83       	std	Y+7, r24	; 0x07
    42c2:	98 87       	std	Y+8, r25	; 0x08
    42c4:	a9 87       	std	Y+9, r26	; 0x09
    42c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42c8:	6f 81       	ldd	r22, Y+7	; 0x07
    42ca:	78 85       	ldd	r23, Y+8	; 0x08
    42cc:	89 85       	ldd	r24, Y+9	; 0x09
    42ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	40 e8       	ldi	r20, 0x80	; 128
    42d6:	5f e3       	ldi	r21, 0x3F	; 63
    42d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    42dc:	88 23       	and	r24, r24
    42de:	2c f4       	brge	.+10     	; 0x42ea <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	3f c0       	rjmp	.+126    	; 0x4368 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    42ea:	6f 81       	ldd	r22, Y+7	; 0x07
    42ec:	78 85       	ldd	r23, Y+8	; 0x08
    42ee:	89 85       	ldd	r24, Y+9	; 0x09
    42f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	3f ef       	ldi	r19, 0xFF	; 255
    42f6:	4f e7       	ldi	r20, 0x7F	; 127
    42f8:	57 e4       	ldi	r21, 0x47	; 71
    42fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    42fe:	18 16       	cp	r1, r24
    4300:	4c f5       	brge	.+82     	; 0x4354 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4302:	6b 85       	ldd	r22, Y+11	; 0x0b
    4304:	7c 85       	ldd	r23, Y+12	; 0x0c
    4306:	8d 85       	ldd	r24, Y+13	; 0x0d
    4308:	9e 85       	ldd	r25, Y+14	; 0x0e
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e2       	ldi	r20, 0x20	; 32
    4310:	51 e4       	ldi	r21, 0x41	; 65
    4312:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	bc 01       	movw	r22, r24
    431c:	cd 01       	movw	r24, r26
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	9e 83       	std	Y+6, r25	; 0x06
    4328:	8d 83       	std	Y+5, r24	; 0x05
    432a:	0f c0       	rjmp	.+30     	; 0x434a <CLCD_voidShiftDisplayRight+0xcc>
    432c:	88 ec       	ldi	r24, 0xC8	; 200
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9c 83       	std	Y+4, r25	; 0x04
    4332:	8b 83       	std	Y+3, r24	; 0x03
    4334:	8b 81       	ldd	r24, Y+3	; 0x03
    4336:	9c 81       	ldd	r25, Y+4	; 0x04
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <CLCD_voidShiftDisplayRight+0xba>
    433c:	9c 83       	std	Y+4, r25	; 0x04
    433e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	9e 81       	ldd	r25, Y+6	; 0x06
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	9e 83       	std	Y+6, r25	; 0x06
    4348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	9e 81       	ldd	r25, Y+6	; 0x06
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	69 f7       	brne	.-38     	; 0x432c <CLCD_voidShiftDisplayRight+0xae>
    4352:	14 c0       	rjmp	.+40     	; 0x437c <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9e 83       	std	Y+6, r25	; 0x06
    4366:	8d 83       	std	Y+5, r24	; 0x05
    4368:	8d 81       	ldd	r24, Y+5	; 0x05
    436a:	9e 81       	ldd	r25, Y+6	; 0x06
    436c:	9a 83       	std	Y+2, r25	; 0x02
    436e:	89 83       	std	Y+1, r24	; 0x01
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	9a 81       	ldd	r25, Y+2	; 0x02
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <CLCD_voidShiftDisplayRight+0xf6>
    4378:	9a 83       	std	Y+2, r25	; 0x02
    437a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    437c:	2e 96       	adiw	r28, 0x0e	; 14
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	2e 97       	sbiw	r28, 0x0e	; 14
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    43a2:	88 e1       	ldi	r24, 0x18	; 24
    43a4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	a0 e8       	ldi	r26, 0x80	; 128
    43ae:	bf e3       	ldi	r27, 0x3F	; 63
    43b0:	8b 87       	std	Y+11, r24	; 0x0b
    43b2:	9c 87       	std	Y+12, r25	; 0x0c
    43b4:	ad 87       	std	Y+13, r26	; 0x0d
    43b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    43bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43be:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	4a ef       	ldi	r20, 0xFA	; 250
    43c6:	54 e4       	ldi	r21, 0x44	; 68
    43c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	8f 83       	std	Y+7, r24	; 0x07
    43d2:	98 87       	std	Y+8, r25	; 0x08
    43d4:	a9 87       	std	Y+9, r26	; 0x09
    43d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d8:	6f 81       	ldd	r22, Y+7	; 0x07
    43da:	78 85       	ldd	r23, Y+8	; 0x08
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	2c f4       	brge	.+10     	; 0x43fa <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	9e 83       	std	Y+6, r25	; 0x06
    43f6:	8d 83       	std	Y+5, r24	; 0x05
    43f8:	3f c0       	rjmp	.+126    	; 0x4478 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    43fa:	6f 81       	ldd	r22, Y+7	; 0x07
    43fc:	78 85       	ldd	r23, Y+8	; 0x08
    43fe:	89 85       	ldd	r24, Y+9	; 0x09
    4400:	9a 85       	ldd	r25, Y+10	; 0x0a
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	3f ef       	ldi	r19, 0xFF	; 255
    4406:	4f e7       	ldi	r20, 0x7F	; 127
    4408:	57 e4       	ldi	r21, 0x47	; 71
    440a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    440e:	18 16       	cp	r1, r24
    4410:	4c f5       	brge	.+82     	; 0x4464 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4412:	6b 85       	ldd	r22, Y+11	; 0x0b
    4414:	7c 85       	ldd	r23, Y+12	; 0x0c
    4416:	8d 85       	ldd	r24, Y+13	; 0x0d
    4418:	9e 85       	ldd	r25, Y+14	; 0x0e
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e2       	ldi	r20, 0x20	; 32
    4420:	51 e4       	ldi	r21, 0x41	; 65
    4422:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 83       	std	Y+5, r24	; 0x05
    443a:	0f c0       	rjmp	.+30     	; 0x445a <CLCD_voidShiftDisplayLeft+0xcc>
    443c:	88 ec       	ldi	r24, 0xC8	; 200
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	9c 83       	std	Y+4, r25	; 0x04
    4442:	8b 83       	std	Y+3, r24	; 0x03
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	9c 81       	ldd	r25, Y+4	; 0x04
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <CLCD_voidShiftDisplayLeft+0xba>
    444c:	9c 83       	std	Y+4, r25	; 0x04
    444e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4450:	8d 81       	ldd	r24, Y+5	; 0x05
    4452:	9e 81       	ldd	r25, Y+6	; 0x06
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	69 f7       	brne	.-38     	; 0x443c <CLCD_voidShiftDisplayLeft+0xae>
    4462:	14 c0       	rjmp	.+40     	; 0x448c <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4464:	6f 81       	ldd	r22, Y+7	; 0x07
    4466:	78 85       	ldd	r23, Y+8	; 0x08
    4468:	89 85       	ldd	r24, Y+9	; 0x09
    446a:	9a 85       	ldd	r25, Y+10	; 0x0a
    446c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	9e 83       	std	Y+6, r25	; 0x06
    4476:	8d 83       	std	Y+5, r24	; 0x05
    4478:	8d 81       	ldd	r24, Y+5	; 0x05
    447a:	9e 81       	ldd	r25, Y+6	; 0x06
    447c:	9a 83       	std	Y+2, r25	; 0x02
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <CLCD_voidShiftDisplayLeft+0xf6>
    4488:	9a 83       	std	Y+2, r25	; 0x02
    448a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    448c:	2e 96       	adiw	r28, 0x0e	; 14
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	08 95       	ret

0000449e <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    449e:	df 93       	push	r29
    44a0:	cf 93       	push	r28
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <BUZ_vInit+0x6>
    44a4:	0f 92       	push	r0
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	69 83       	std	Y+1, r22	; 0x01
    44ac:	7a 83       	std	Y+2, r23	; 0x02
    44ae:	8b 83       	std	Y+3, r24	; 0x03

  DIO_enumSetPinDir(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44b0:	89 81       	ldd	r24, Y+1	; 0x01
    44b2:	9a 81       	ldd	r25, Y+2	; 0x02
    44b4:	69 2f       	mov	r22, r25
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
}
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <BUZ_vOn+0x6>
    44ce:	0f 92       	push	r0
    44d0:	cd b7       	in	r28, 0x3d	; 61
    44d2:	de b7       	in	r29, 0x3e	; 62
    44d4:	69 83       	std	Y+1, r22	; 0x01
    44d6:	7a 83       	std	Y+2, r23	; 0x02
    44d8:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    44da:	8b 81       	ldd	r24, Y+3	; 0x03
    44dc:	81 30       	cpi	r24, 0x01	; 1
    44de:	39 f4       	brne	.+14     	; 0x44ee <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	9a 81       	ldd	r25, Y+2	; 0x02
    44e4:	69 2f       	mov	r22, r25
    44e6:	41 e0       	ldi	r20, 0x01	; 1
    44e8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    44ec:	09 c0       	rjmp	.+18     	; 0x4500 <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    44ee:	8b 81       	ldd	r24, Y+3	; 0x03
    44f0:	88 23       	and	r24, r24
    44f2:	31 f4       	brne	.+12     	; 0x4500 <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	9a 81       	ldd	r25, Y+2	; 0x02
    44f8:	69 2f       	mov	r22, r25
    44fa:	41 e0       	ldi	r20, 0x01	; 1
    44fc:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	cf 91       	pop	r28
    4508:	df 91       	pop	r29
    450a:	08 95       	ret

0000450c <BUZ_vOff>:
* Parameters :
             => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	00 d0       	rcall	.+0      	; 0x4512 <BUZ_vOff+0x6>
    4512:	0f 92       	push	r0
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
    4518:	69 83       	std	Y+1, r22	; 0x01
    451a:	7a 83       	std	Y+2, r23	; 0x02
    451c:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	39 f4       	brne	.+14     	; 0x4532 <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_LOW);
    4524:	89 81       	ldd	r24, Y+1	; 0x01
    4526:	9a 81       	ldd	r25, Y+2	; 0x02
    4528:	69 2f       	mov	r22, r25
    452a:	40 e0       	ldi	r20, 0x00	; 0
    452c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    4530:	09 c0       	rjmp	.+18     	; 0x4544 <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	88 23       	and	r24, r24
    4536:	31 f4       	brne	.+12     	; 0x4544 <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_HIGH);
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	9a 81       	ldd	r25, Y+2	; 0x02
    453c:	69 2f       	mov	r22, r25
    453e:	41 e0       	ldi	r20, 0x01	; 1
    4540:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <BUZ_vTog+0x6>
    4556:	0f 92       	push	r0
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	69 83       	std	Y+1, r22	; 0x01
    455e:	7a 83       	std	Y+2, r23	; 0x02
    4560:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    4562:	89 81       	ldd	r24, Y+1	; 0x01
    4564:	9a 81       	ldd	r25, Y+2	; 0x02
    4566:	69 2f       	mov	r22, r25
    4568:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <DIO_enumTogglePinVal>
}
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <SSD_vInitDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_vInitDataPort(SSD_config Configuration)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <SSD_vInitDataPort+0x6>
    457e:	00 d0       	rcall	.+0      	; 0x4580 <SSD_vInitDataPort+0x8>
    4580:	0f 92       	push	r0
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	49 83       	std	Y+1, r20	; 0x01
    4588:	5a 83       	std	Y+2, r21	; 0x02
    458a:	6b 83       	std	Y+3, r22	; 0x03
    458c:	7c 83       	std	Y+4, r23	; 0x04
    458e:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    4590:	8d 81       	ldd	r24, Y+5	; 0x05
    4592:	88 23       	and	r24, r24
    4594:	29 f4       	brne	.+10     	; 0x45a0 <SSD_vInitDataPort+0x28>
  {
    DIO_vSetLowNibbleDir(Configuration.DataPort, 0x0F);
    4596:	8a 81       	ldd	r24, Y+2	; 0x02
    4598:	6f e0       	ldi	r22, 0x0F	; 15
    459a:	0e 94 1e 14 	call	0x283c	; 0x283c <DIO_vSetLowNibbleDir>
    459e:	07 c0       	rjmp	.+14     	; 0x45ae <SSD_vInitDataPort+0x36>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    45a0:	8d 81       	ldd	r24, Y+5	; 0x05
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	21 f4       	brne	.+8      	; 0x45ae <SSD_vInitDataPort+0x36>
  {
    DIO_vSetHighNibbleDir(Configuration.DataPort, 0xF0);
    45a6:	8a 81       	ldd	r24, Y+2	; 0x02
    45a8:	60 ef       	ldi	r22, 0xF0	; 240
    45aa:	0e 94 99 14 	call	0x2932	; 0x2932 <DIO_vSetHighNibbleDir>
  }
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	cf 91       	pop	r28
    45ba:	df 91       	pop	r29
    45bc:	08 95       	ret

000045be <SSD_vSendNumber>:
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vSendNumber(SSD_config Configuration, u8 Copy_u8Number)
{
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <SSD_vSendNumber+0x6>
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <SSD_vSendNumber+0x8>
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <SSD_vSendNumber+0xa>
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
    45cc:	49 83       	std	Y+1, r20	; 0x01
    45ce:	5a 83       	std	Y+2, r21	; 0x02
    45d0:	6b 83       	std	Y+3, r22	; 0x03
    45d2:	7c 83       	std	Y+4, r23	; 0x04
    45d4:	8d 83       	std	Y+5, r24	; 0x05
    45d6:	2e 83       	std	Y+6, r18	; 0x06
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	88 23       	and	r24, r24
    45dc:	29 f4       	brne	.+10     	; 0x45e8 <SSD_vSendNumber+0x2a>
  {
    DIO_vWriteLowNibble(Configuration.DataPort, Copy_u8Number);
    45de:	8a 81       	ldd	r24, Y+2	; 0x02
    45e0:	6e 81       	ldd	r22, Y+6	; 0x06
    45e2:	0e 94 27 13 	call	0x264e	; 0x264e <DIO_vWriteLowNibble>
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <SSD_vSendNumber+0x38>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    45e8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <SSD_vSendNumber+0x38>
  {
    DIO_vWriteHighNibble(Configuration.DataPort, Copy_u8Number);
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	6e 81       	ldd	r22, Y+6	; 0x06
    45f2:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  }
}
    45f6:	26 96       	adiw	r28, 0x06	; 6
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	08 95       	ret

00004608 <SSD_vEnable>:
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vEnable(SSD_config Configuration)
{
    4608:	df 93       	push	r29
    460a:	cf 93       	push	r28
    460c:	00 d0       	rcall	.+0      	; 0x460e <SSD_vEnable+0x6>
    460e:	00 d0       	rcall	.+0      	; 0x4610 <SSD_vEnable+0x8>
    4610:	0f 92       	push	r0
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	49 83       	std	Y+1, r20	; 0x01
    4618:	5a 83       	std	Y+2, r21	; 0x02
    461a:	6b 83       	std	Y+3, r22	; 0x03
    461c:	7c 83       	std	Y+4, r23	; 0x04
    461e:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	88 23       	and	r24, r24
    4624:	69 f4       	brne	.+26     	; 0x4640 <SSD_vEnable+0x38>
  {
    DIO_enumSetPinDir   (Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4626:	8b 81       	ldd	r24, Y+3	; 0x03
    4628:	9c 81       	ldd	r25, Y+4	; 0x04
    462a:	69 2f       	mov	r22, r25
    462c:	41 e0       	ldi	r20, 0x01	; 1
    462e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal (Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    4632:	8b 81       	ldd	r24, Y+3	; 0x03
    4634:	9c 81       	ldd	r25, Y+4	; 0x04
    4636:	69 2f       	mov	r22, r25
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    463e:	0f c0       	rjmp	.+30     	; 0x465e <SSD_vEnable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	81 30       	cpi	r24, 0x01	; 1
    4644:	61 f4       	brne	.+24     	; 0x465e <SSD_vEnable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4646:	8b 81       	ldd	r24, Y+3	; 0x03
    4648:	9c 81       	ldd	r25, Y+4	; 0x04
    464a:	69 2f       	mov	r22, r25
    464c:	41 e0       	ldi	r20, 0x01	; 1
    464e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	69 2f       	mov	r22, r25
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	cf 91       	pop	r28
    466a:	df 91       	pop	r29
    466c:	08 95       	ret

0000466e <SSD_vDisable>:
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vDisable(SSD_config Configuration)
{
    466e:	df 93       	push	r29
    4670:	cf 93       	push	r28
    4672:	00 d0       	rcall	.+0      	; 0x4674 <SSD_vDisable+0x6>
    4674:	00 d0       	rcall	.+0      	; 0x4676 <SSD_vDisable+0x8>
    4676:	0f 92       	push	r0
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	49 83       	std	Y+1, r20	; 0x01
    467e:	5a 83       	std	Y+2, r21	; 0x02
    4680:	6b 83       	std	Y+3, r22	; 0x03
    4682:	7c 83       	std	Y+4, r23	; 0x04
    4684:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	88 23       	and	r24, r24
    468a:	69 f4       	brne	.+26     	; 0x46a6 <SSD_vDisable+0x38>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    468c:	8b 81       	ldd	r24, Y+3	; 0x03
    468e:	9c 81       	ldd	r25, Y+4	; 0x04
    4690:	69 2f       	mov	r22, r25
    4692:	41 e0       	ldi	r20, 0x01	; 1
    4694:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	9c 81       	ldd	r25, Y+4	; 0x04
    469c:	69 2f       	mov	r22, r25
    469e:	41 e0       	ldi	r20, 0x01	; 1
    46a0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    46a4:	0f c0       	rjmp	.+30     	; 0x46c4 <SSD_vDisable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	81 30       	cpi	r24, 0x01	; 1
    46aa:	61 f4       	brne	.+24     	; 0x46c4 <SSD_vDisable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    46ac:	8b 81       	ldd	r24, Y+3	; 0x03
    46ae:	9c 81       	ldd	r25, Y+4	; 0x04
    46b0:	69 2f       	mov	r22, r25
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    46b8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ba:	9c 81       	ldd	r25, Y+4	; 0x04
    46bc:	69 2f       	mov	r22, r25
    46be:	40 e0       	ldi	r20, 0x00	; 0
    46c0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	cf 91       	pop	r28
    46d0:	df 91       	pop	r29
    46d2:	08 95       	ret

000046d4 <main>:
void ISR_TIMER2_OVF_MODE(void);

//======================================================================================================================================//

void main(void)
{
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	c8 5c       	subi	r28, 0xC8	; 200
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
	/* Configure AM/PM indicator pin as output */
	DIO_enumSetPinDir(DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT);
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	63 e0       	ldi	r22, 0x03	; 3
    46f2:	41 e0       	ldi	r20, 0x01	; 1
    46f4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
	DIO_enumWritePinVal(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	63 e0       	ldi	r22, 0x03	; 3
    46fc:	41 e0       	ldi	r20, 0x01	; 1
    46fe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
	/* To sure that ISR execute each 1 sec */
	DIO_enumSetPinDir(DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT);
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	62 e0       	ldi	r22, 0x02	; 2
    4706:	41 e0       	ldi	r20, 0x01	; 1
    4708:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>

	// Set callback function for TIMER2 overflow interrup
	TIMER_u8SetCallBack(ISR_TIMER2_OVF_MODE, TIMER2_OVF_VECTOR_ID);
    470c:	85 ee       	ldi	r24, 0xE5	; 229
    470e:	9b e3       	ldi	r25, 0x3B	; 59
    4710:	65 e0       	ldi	r22, 0x05	; 5
    4712:	0e 94 38 0b 	call	0x1670	; 0x1670 <TIMER_u8SetCallBack>

	/* Initialize Keypad on PORTD */
	KPD_vInit();
    4716:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KPD_vInit>

	/* Initialize CLCD on High Nibble for PORTA */
	CLCD_vInit();
    471a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <CLCD_vInit>

	/* Enable Global Interrupts */
	GIE_vEnable();
    471e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <GIE_vEnable>

	/* Initialize BUZ on PIN4 for PORTB */
	BUZ_vInit(BUZ0);
    4722:	60 91 77 03 	lds	r22, 0x0377
    4726:	70 91 78 03 	lds	r23, 0x0378
    472a:	80 91 79 03 	lds	r24, 0x0379
    472e:	0e 94 4f 22 	call	0x449e	; 0x449e <BUZ_vInit>

	/* Initialize seven-segment displays */
	SSD_vInitDataPort(seven_seg0);
    4732:	40 91 56 03 	lds	r20, 0x0356
    4736:	50 91 57 03 	lds	r21, 0x0357
    473a:	60 91 58 03 	lds	r22, 0x0358
    473e:	70 91 59 03 	lds	r23, 0x0359
    4742:	80 91 5a 03 	lds	r24, 0x035A
    4746:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg1);
    474a:	40 91 5b 03 	lds	r20, 0x035B
    474e:	50 91 5c 03 	lds	r21, 0x035C
    4752:	60 91 5d 03 	lds	r22, 0x035D
    4756:	70 91 5e 03 	lds	r23, 0x035E
    475a:	80 91 5f 03 	lds	r24, 0x035F
    475e:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg2);
    4762:	40 91 60 03 	lds	r20, 0x0360
    4766:	50 91 61 03 	lds	r21, 0x0361
    476a:	60 91 62 03 	lds	r22, 0x0362
    476e:	70 91 63 03 	lds	r23, 0x0363
    4772:	80 91 64 03 	lds	r24, 0x0364
    4776:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg3);
    477a:	40 91 65 03 	lds	r20, 0x0365
    477e:	50 91 66 03 	lds	r21, 0x0366
    4782:	60 91 67 03 	lds	r22, 0x0367
    4786:	70 91 68 03 	lds	r23, 0x0368
    478a:	80 91 69 03 	lds	r24, 0x0369
    478e:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg4);
    4792:	40 91 6a 03 	lds	r20, 0x036A
    4796:	50 91 6b 03 	lds	r21, 0x036B
    479a:	60 91 6c 03 	lds	r22, 0x036C
    479e:	70 91 6d 03 	lds	r23, 0x036D
    47a2:	80 91 6e 03 	lds	r24, 0x036E
    47a6:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg5);
    47aa:	40 91 6f 03 	lds	r20, 0x036F
    47ae:	50 91 70 03 	lds	r21, 0x0370
    47b2:	60 91 71 03 	lds	r22, 0x0371
    47b6:	70 91 72 03 	lds	r23, 0x0372
    47ba:	80 91 73 03 	lds	r24, 0x0373
    47be:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>

	/*
	 * Initialize TIMER2 with external clock at 32.768 KHz
	 * Using division factor 128 to achieve 1 second intervals
	 */
	TIMER2_vInit();
    47c2:	0e 94 be 09 	call	0x137c	; 0x137c <TIMER2_vInit>

	/* Initialize ADC for temperature sensor */
	ADC_vInit();
    47c6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <ADC_vInit>

	CLCD_vSendString("Press ON to");
    47ca:	80 e6       	ldi	r24, 0x60	; 96
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    47d2:	82 e0       	ldi	r24, 0x02	; 2
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    47da:	8c e6       	ldi	r24, 0x6C	; 108
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	while (1)
	{
		KPD_Press = KPD_u8GetPressed();
    47e2:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    47e6:	80 93 9a 03 	sts	0x039A, r24
		if (KPD_Press == 'A')
    47ea:	80 91 9a 03 	lds	r24, 0x039A
    47ee:	81 34       	cpi	r24, 0x41	; 65
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <main+0x120>
    47f2:	70 c1       	rjmp	.+736    	; 0x4ad4 <main+0x400>
		{
			// Display menu options on CLCD
			CLCD_vClearScreen();
    47f4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - Set time");
    47f8:	88 e7       	ldi	r24, 0x78	; 120
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	61 e0       	ldi	r22, 0x01	; 1
    4804:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - Select mode");
    4808:	85 e8       	ldi	r24, 0x85	; 133
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    4810:	83 e0       	ldi	r24, 0x03	; 3
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    4818:	85 e9       	ldi	r24, 0x95	; 149
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    4820:	84 e0       	ldi	r24, 0x04	; 4
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    4828:	83 ea       	ldi	r24, 0xA3	; 163
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    4830:	84 e0       	ldi	r24, 0x04	; 4
    4832:	6f e0       	ldi	r22, 0x0F	; 15
    4834:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    4838:	8f ea       	ldi	r24, 0xAF	; 175
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

			do
			{
				KPD_Press = KPD_u8GetPressed();
    4840:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    4844:	80 93 9a 03 	sts	0x039A, r24
				if (KPD_Press != NOTPRESSED)
    4848:	80 91 9a 03 	lds	r24, 0x039A
    484c:	8f 3f       	cpi	r24, 0xFF	; 255
    484e:	09 f4       	brne	.+2      	; 0x4852 <main+0x17e>
    4850:	3c c1       	rjmp	.+632    	; 0x4aca <main+0x3f6>
				{
					// Perform actions based on the pressed key
					switch (KPD_Press)
    4852:	80 91 9a 03 	lds	r24, 0x039A
    4856:	28 2f       	mov	r18, r24
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	c9 53       	subi	r28, 0x39	; 57
    485c:	df 4f       	sbci	r29, 0xFF	; 255
    485e:	39 83       	std	Y+1, r19	; 0x01
    4860:	28 83       	st	Y, r18
    4862:	c7 5c       	subi	r28, 0xC7	; 199
    4864:	d0 40       	sbci	r29, 0x00	; 0
    4866:	c9 53       	subi	r28, 0x39	; 57
    4868:	df 4f       	sbci	r29, 0xFF	; 255
    486a:	88 81       	ld	r24, Y
    486c:	99 81       	ldd	r25, Y+1	; 0x01
    486e:	c7 5c       	subi	r28, 0xC7	; 199
    4870:	d0 40       	sbci	r29, 0x00	; 0
    4872:	82 33       	cpi	r24, 0x32	; 50
    4874:	91 05       	cpc	r25, r1
    4876:	91 f1       	breq	.+100    	; 0x48dc <main+0x208>
    4878:	c9 53       	subi	r28, 0x39	; 57
    487a:	df 4f       	sbci	r29, 0xFF	; 255
    487c:	e8 81       	ld	r30, Y
    487e:	f9 81       	ldd	r31, Y+1	; 0x01
    4880:	c7 5c       	subi	r28, 0xC7	; 199
    4882:	d0 40       	sbci	r29, 0x00	; 0
    4884:	e3 33       	cpi	r30, 0x33	; 51
    4886:	f1 05       	cpc	r31, r1
    4888:	9c f4       	brge	.+38     	; 0x48b0 <main+0x1dc>
    488a:	c9 53       	subi	r28, 0x39	; 57
    488c:	df 4f       	sbci	r29, 0xFF	; 255
    488e:	28 81       	ld	r18, Y
    4890:	39 81       	ldd	r19, Y+1	; 0x01
    4892:	c7 5c       	subi	r28, 0xC7	; 199
    4894:	d0 40       	sbci	r29, 0x00	; 0
    4896:	2a 32       	cpi	r18, 0x2A	; 42
    4898:	31 05       	cpc	r19, r1
    489a:	49 f1       	breq	.+82     	; 0x48ee <main+0x21a>
    489c:	c9 53       	subi	r28, 0x39	; 57
    489e:	df 4f       	sbci	r29, 0xFF	; 255
    48a0:	88 81       	ld	r24, Y
    48a2:	99 81       	ldd	r25, Y+1	; 0x01
    48a4:	c7 5c       	subi	r28, 0xC7	; 199
    48a6:	d0 40       	sbci	r29, 0x00	; 0
    48a8:	81 33       	cpi	r24, 0x31	; 49
    48aa:	91 05       	cpc	r25, r1
    48ac:	a1 f0       	breq	.+40     	; 0x48d6 <main+0x202>
    48ae:	2e c0       	rjmp	.+92     	; 0x490c <main+0x238>
    48b0:	c9 53       	subi	r28, 0x39	; 57
    48b2:	df 4f       	sbci	r29, 0xFF	; 255
    48b4:	e8 81       	ld	r30, Y
    48b6:	f9 81       	ldd	r31, Y+1	; 0x01
    48b8:	c7 5c       	subi	r28, 0xC7	; 199
    48ba:	d0 40       	sbci	r29, 0x00	; 0
    48bc:	e3 33       	cpi	r30, 0x33	; 51
    48be:	f1 05       	cpc	r31, r1
    48c0:	81 f0       	breq	.+32     	; 0x48e2 <main+0x20e>
    48c2:	c9 53       	subi	r28, 0x39	; 57
    48c4:	df 4f       	sbci	r29, 0xFF	; 255
    48c6:	28 81       	ld	r18, Y
    48c8:	39 81       	ldd	r19, Y+1	; 0x01
    48ca:	c7 5c       	subi	r28, 0xC7	; 199
    48cc:	d0 40       	sbci	r29, 0x00	; 0
    48ce:	24 33       	cpi	r18, 0x34	; 52
    48d0:	31 05       	cpc	r19, r1
    48d2:	51 f0       	breq	.+20     	; 0x48e8 <main+0x214>
    48d4:	1b c0       	rjmp	.+54     	; 0x490c <main+0x238>
					{
					case '1':
						Set_Time();
    48d6:	0e 94 2a 30 	call	0x6054	; 0x6054 <Set_Time>
    48da:	f7 c0       	rjmp	.+494    	; 0x4aca <main+0x3f6>
						break;

					case '2':
						Select_Mode();
    48dc:	0e 94 c0 34 	call	0x6980	; 0x6980 <Select_Mode>
    48e0:	f4 c0       	rjmp	.+488    	; 0x4aca <main+0x3f6>
						break;

					case '3':
						Set_Alarm();
    48e2:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <Set_Alarm>
    48e6:	f1 c0       	rjmp	.+482    	; 0x4aca <main+0x3f6>
						break;

					case '4':
						Get_Temp();
    48e8:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <Get_Temp>
    48ec:	ee c0       	rjmp	.+476    	; 0x4aca <main+0x3f6>
						break;

					case '*':
						CLCD_vClearScreen();
    48ee:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("Press ON to");
    48f2:	80 e6       	ldi	r24, 0x60	; 96
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(2, 1);
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	61 e0       	ldi	r22, 0x01	; 1
    48fe:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("Show Option");
    4902:	8c e6       	ldi	r24, 0x6C	; 108
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    490a:	df c0       	rjmp	.+446    	; 0x4aca <main+0x3f6>
						break;

					default:
						// Invalid choice handling
						CLCD_vClearScreen();
    490c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("wrong choice");
    4910:	86 eb       	ldi	r24, 0xB6	; 182
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    4918:	fe 01       	movw	r30, r28
    491a:	ef 53       	subi	r30, 0x3F	; 63
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	aa ef       	ldi	r26, 0xFA	; 250
    4924:	b3 e4       	ldi	r27, 0x43	; 67
    4926:	80 83       	st	Z, r24
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	a2 83       	std	Z+2, r26	; 0x02
    492c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492e:	8e 01       	movw	r16, r28
    4930:	03 54       	subi	r16, 0x43	; 67
    4932:	1f 4f       	sbci	r17, 0xFF	; 255
    4934:	fe 01       	movw	r30, r28
    4936:	ef 53       	subi	r30, 0x3F	; 63
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	4a ef       	ldi	r20, 0xFA	; 250
    4948:	54 e4       	ldi	r21, 0x44	; 68
    494a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	f8 01       	movw	r30, r16
    4954:	80 83       	st	Z, r24
    4956:	91 83       	std	Z+1, r25	; 0x01
    4958:	a2 83       	std	Z+2, r26	; 0x02
    495a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    495c:	fe 01       	movw	r30, r28
    495e:	e3 54       	subi	r30, 0x43	; 67
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	60 81       	ld	r22, Z
    4964:	71 81       	ldd	r23, Z+1	; 0x01
    4966:	82 81       	ldd	r24, Z+2	; 0x02
    4968:	93 81       	ldd	r25, Z+3	; 0x03
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	40 e8       	ldi	r20, 0x80	; 128
    4970:	5f e3       	ldi	r21, 0x3F	; 63
    4972:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4976:	88 23       	and	r24, r24
    4978:	44 f4       	brge	.+16     	; 0x498a <main+0x2b6>
		__ticks = 1;
    497a:	fe 01       	movw	r30, r28
    497c:	e5 54       	subi	r30, 0x45	; 69
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	80 83       	st	Z, r24
    4988:	64 c0       	rjmp	.+200    	; 0x4a52 <main+0x37e>
	else if (__tmp > 65535)
    498a:	fe 01       	movw	r30, r28
    498c:	e3 54       	subi	r30, 0x43	; 67
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	60 81       	ld	r22, Z
    4992:	71 81       	ldd	r23, Z+1	; 0x01
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	93 81       	ldd	r25, Z+3	; 0x03
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	3f ef       	ldi	r19, 0xFF	; 255
    499c:	4f e7       	ldi	r20, 0x7F	; 127
    499e:	57 e4       	ldi	r21, 0x47	; 71
    49a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    49a4:	18 16       	cp	r1, r24
    49a6:	0c f0       	brlt	.+2      	; 0x49aa <main+0x2d6>
    49a8:	43 c0       	rjmp	.+134    	; 0x4a30 <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49aa:	fe 01       	movw	r30, r28
    49ac:	ef 53       	subi	r30, 0x3F	; 63
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	60 81       	ld	r22, Z
    49b2:	71 81       	ldd	r23, Z+1	; 0x01
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	93 81       	ldd	r25, Z+3	; 0x03
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	40 e2       	ldi	r20, 0x20	; 32
    49be:	51 e4       	ldi	r21, 0x41	; 65
    49c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	8e 01       	movw	r16, r28
    49ca:	05 54       	subi	r16, 0x45	; 69
    49cc:	1f 4f       	sbci	r17, 0xFF	; 255
    49ce:	bc 01       	movw	r22, r24
    49d0:	cd 01       	movw	r24, r26
    49d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	f8 01       	movw	r30, r16
    49dc:	91 83       	std	Z+1, r25	; 0x01
    49de:	80 83       	st	Z, r24
    49e0:	1f c0       	rjmp	.+62     	; 0x4a20 <main+0x34c>
    49e2:	fe 01       	movw	r30, r28
    49e4:	e7 54       	subi	r30, 0x47	; 71
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	88 ec       	ldi	r24, 0xC8	; 200
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	91 83       	std	Z+1, r25	; 0x01
    49ee:	80 83       	st	Z, r24
    49f0:	fe 01       	movw	r30, r28
    49f2:	e7 54       	subi	r30, 0x47	; 71
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	80 81       	ld	r24, Z
    49f8:	91 81       	ldd	r25, Z+1	; 0x01
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	f1 f7       	brne	.-4      	; 0x49fa <main+0x326>
    49fe:	fe 01       	movw	r30, r28
    4a00:	e7 54       	subi	r30, 0x47	; 71
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	91 83       	std	Z+1, r25	; 0x01
    4a06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a08:	de 01       	movw	r26, r28
    4a0a:	a5 54       	subi	r26, 0x45	; 69
    4a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e5 54       	subi	r30, 0x45	; 69
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	80 81       	ld	r24, Z
    4a16:	91 81       	ldd	r25, Z+1	; 0x01
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	11 96       	adiw	r26, 0x01	; 1
    4a1c:	9c 93       	st	X, r25
    4a1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a20:	fe 01       	movw	r30, r28
    4a22:	e5 54       	subi	r30, 0x45	; 69
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	80 81       	ld	r24, Z
    4a28:	91 81       	ldd	r25, Z+1	; 0x01
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	d1 f6       	brne	.-76     	; 0x49e2 <main+0x30e>
    4a2e:	27 c0       	rjmp	.+78     	; 0x4a7e <main+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a30:	8e 01       	movw	r16, r28
    4a32:	05 54       	subi	r16, 0x45	; 69
    4a34:	1f 4f       	sbci	r17, 0xFF	; 255
    4a36:	fe 01       	movw	r30, r28
    4a38:	e3 54       	subi	r30, 0x43	; 67
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	60 81       	ld	r22, Z
    4a3e:	71 81       	ldd	r23, Z+1	; 0x01
    4a40:	82 81       	ldd	r24, Z+2	; 0x02
    4a42:	93 81       	ldd	r25, Z+3	; 0x03
    4a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	f8 01       	movw	r30, r16
    4a4e:	91 83       	std	Z+1, r25	; 0x01
    4a50:	80 83       	st	Z, r24
    4a52:	de 01       	movw	r26, r28
    4a54:	a9 54       	subi	r26, 0x49	; 73
    4a56:	bf 4f       	sbci	r27, 0xFF	; 255
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e5 54       	subi	r30, 0x45	; 69
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	91 81       	ldd	r25, Z+1	; 0x01
    4a62:	8d 93       	st	X+, r24
    4a64:	9c 93       	st	X, r25
    4a66:	fe 01       	movw	r30, r28
    4a68:	e9 54       	subi	r30, 0x49	; 73
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 81       	ld	r24, Z
    4a6e:	91 81       	ldd	r25, Z+1	; 0x01
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	f1 f7       	brne	.-4      	; 0x4a70 <main+0x39c>
    4a74:	fe 01       	movw	r30, r28
    4a76:	e9 54       	subi	r30, 0x49	; 73
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_vClearScreen();
    4a7e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("1 - set time");
    4a82:	83 ec       	ldi	r24, 0xC3	; 195
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(2, 1);
    4a8a:	82 e0       	ldi	r24, 0x02	; 2
    4a8c:	61 e0       	ldi	r22, 0x01	; 1
    4a8e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("2 - select mode");
    4a92:	80 ed       	ldi	r24, 0xD0	; 208
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(3, 1);
    4a9a:	83 e0       	ldi	r24, 0x03	; 3
    4a9c:	61 e0       	ldi	r22, 0x01	; 1
    4a9e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("3 - Set Alarm");
    4aa2:	85 e9       	ldi	r24, 0x95	; 149
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(4, 1);
    4aaa:	84 e0       	ldi	r24, 0x04	; 4
    4aac:	61 e0       	ldi	r22, 0x01	; 1
    4aae:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("4 - Weather");
    4ab2:	83 ea       	ldi	r24, 0xA3	; 163
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(4, 15);
    4aba:	84 e0       	ldi	r24, 0x04	; 4
    4abc:	6f e0       	ldi	r22, 0x0F	; 15
    4abe:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("X:EXIT");
    4ac2:	8f ea       	ldi	r24, 0xAF	; 175
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						break;
					}
				}
			} while (KPD_Press != '*');
    4aca:	80 91 9a 03 	lds	r24, 0x039A
    4ace:	8a 32       	cpi	r24, 0x2A	; 42
    4ad0:	09 f0       	breq	.+2      	; 0x4ad4 <main+0x400>
    4ad2:	b6 ce       	rjmp	.-660    	; 0x4840 <main+0x16c>
		}
		/* Display time on seven-segment displays using POV theorem */

		// Display seconds (units)
		SSD_vDisable(seven_seg5);
    4ad4:	40 91 6f 03 	lds	r20, 0x036F
    4ad8:	50 91 70 03 	lds	r21, 0x0370
    4adc:	60 91 71 03 	lds	r22, 0x0371
    4ae0:	70 91 72 03 	lds	r23, 0x0372
    4ae4:	80 91 73 03 	lds	r24, 0x0373
    4ae8:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg0);
    4aec:	40 91 56 03 	lds	r20, 0x0356
    4af0:	50 91 57 03 	lds	r21, 0x0357
    4af4:	60 91 58 03 	lds	r22, 0x0358
    4af8:	70 91 59 03 	lds	r23, 0x0359
    4afc:	80 91 5a 03 	lds	r24, 0x035A
    4b00:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg0, Time_Second % 10);
    4b04:	80 91 97 03 	lds	r24, 0x0397
    4b08:	9a e0       	ldi	r25, 0x0A	; 10
    4b0a:	69 2f       	mov	r22, r25
    4b0c:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    4b10:	89 2f       	mov	r24, r25
    4b12:	98 2f       	mov	r25, r24
    4b14:	40 91 56 03 	lds	r20, 0x0356
    4b18:	50 91 57 03 	lds	r21, 0x0357
    4b1c:	60 91 58 03 	lds	r22, 0x0358
    4b20:	70 91 59 03 	lds	r23, 0x0359
    4b24:	80 91 5a 03 	lds	r24, 0x035A
    4b28:	29 2f       	mov	r18, r25
    4b2a:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4b2e:	fe 01       	movw	r30, r28
    4b30:	ed 54       	subi	r30, 0x4D	; 77
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	a0 ea       	ldi	r26, 0xA0	; 160
    4b3a:	b0 e4       	ldi	r27, 0x40	; 64
    4b3c:	80 83       	st	Z, r24
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	a2 83       	std	Z+2, r26	; 0x02
    4b42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b44:	8e 01       	movw	r16, r28
    4b46:	01 55       	subi	r16, 0x51	; 81
    4b48:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	ed 54       	subi	r30, 0x4D	; 77
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	4a ef       	ldi	r20, 0xFA	; 250
    4b5e:	54 e4       	ldi	r21, 0x44	; 68
    4b60:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	f8 01       	movw	r30, r16
    4b6a:	80 83       	st	Z, r24
    4b6c:	91 83       	std	Z+1, r25	; 0x01
    4b6e:	a2 83       	std	Z+2, r26	; 0x02
    4b70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b72:	fe 01       	movw	r30, r28
    4b74:	e1 55       	subi	r30, 0x51	; 81
    4b76:	ff 4f       	sbci	r31, 0xFF	; 255
    4b78:	60 81       	ld	r22, Z
    4b7a:	71 81       	ldd	r23, Z+1	; 0x01
    4b7c:	82 81       	ldd	r24, Z+2	; 0x02
    4b7e:	93 81       	ldd	r25, Z+3	; 0x03
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e8       	ldi	r20, 0x80	; 128
    4b86:	5f e3       	ldi	r21, 0x3F	; 63
    4b88:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4b8c:	88 23       	and	r24, r24
    4b8e:	44 f4       	brge	.+16     	; 0x4ba0 <main+0x4cc>
		__ticks = 1;
    4b90:	fe 01       	movw	r30, r28
    4b92:	e3 55       	subi	r30, 0x53	; 83
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	91 83       	std	Z+1, r25	; 0x01
    4b9c:	80 83       	st	Z, r24
    4b9e:	64 c0       	rjmp	.+200    	; 0x4c68 <main+0x594>
	else if (__tmp > 65535)
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e1 55       	subi	r30, 0x51	; 81
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	60 81       	ld	r22, Z
    4ba8:	71 81       	ldd	r23, Z+1	; 0x01
    4baa:	82 81       	ldd	r24, Z+2	; 0x02
    4bac:	93 81       	ldd	r25, Z+3	; 0x03
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	3f ef       	ldi	r19, 0xFF	; 255
    4bb2:	4f e7       	ldi	r20, 0x7F	; 127
    4bb4:	57 e4       	ldi	r21, 0x47	; 71
    4bb6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4bba:	18 16       	cp	r1, r24
    4bbc:	0c f0       	brlt	.+2      	; 0x4bc0 <main+0x4ec>
    4bbe:	43 c0       	rjmp	.+134    	; 0x4c46 <main+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ed 54       	subi	r30, 0x4D	; 77
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	60 81       	ld	r22, Z
    4bc8:	71 81       	ldd	r23, Z+1	; 0x01
    4bca:	82 81       	ldd	r24, Z+2	; 0x02
    4bcc:	93 81       	ldd	r25, Z+3	; 0x03
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	40 e2       	ldi	r20, 0x20	; 32
    4bd4:	51 e4       	ldi	r21, 0x41	; 65
    4bd6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	8e 01       	movw	r16, r28
    4be0:	03 55       	subi	r16, 0x53	; 83
    4be2:	1f 4f       	sbci	r17, 0xFF	; 255
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	91 83       	std	Z+1, r25	; 0x01
    4bf4:	80 83       	st	Z, r24
    4bf6:	1f c0       	rjmp	.+62     	; 0x4c36 <main+0x562>
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e5 55       	subi	r30, 0x55	; 85
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	88 ec       	ldi	r24, 0xC8	; 200
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	91 83       	std	Z+1, r25	; 0x01
    4c04:	80 83       	st	Z, r24
    4c06:	fe 01       	movw	r30, r28
    4c08:	e5 55       	subi	r30, 0x55	; 85
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <main+0x53c>
    4c14:	fe 01       	movw	r30, r28
    4c16:	e5 55       	subi	r30, 0x55	; 85
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1e:	de 01       	movw	r26, r28
    4c20:	a3 55       	subi	r26, 0x53	; 83
    4c22:	bf 4f       	sbci	r27, 0xFF	; 255
    4c24:	fe 01       	movw	r30, r28
    4c26:	e3 55       	subi	r30, 0x53	; 83
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 81       	ld	r24, Z
    4c2c:	91 81       	ldd	r25, Z+1	; 0x01
    4c2e:	01 97       	sbiw	r24, 0x01	; 1
    4c30:	11 96       	adiw	r26, 0x01	; 1
    4c32:	9c 93       	st	X, r25
    4c34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c36:	fe 01       	movw	r30, r28
    4c38:	e3 55       	subi	r30, 0x53	; 83
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	80 81       	ld	r24, Z
    4c3e:	91 81       	ldd	r25, Z+1	; 0x01
    4c40:	00 97       	sbiw	r24, 0x00	; 0
    4c42:	d1 f6       	brne	.-76     	; 0x4bf8 <main+0x524>
    4c44:	27 c0       	rjmp	.+78     	; 0x4c94 <main+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c46:	8e 01       	movw	r16, r28
    4c48:	03 55       	subi	r16, 0x53	; 83
    4c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	e1 55       	subi	r30, 0x51	; 81
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	60 81       	ld	r22, Z
    4c54:	71 81       	ldd	r23, Z+1	; 0x01
    4c56:	82 81       	ldd	r24, Z+2	; 0x02
    4c58:	93 81       	ldd	r25, Z+3	; 0x03
    4c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	f8 01       	movw	r30, r16
    4c64:	91 83       	std	Z+1, r25	; 0x01
    4c66:	80 83       	st	Z, r24
    4c68:	de 01       	movw	r26, r28
    4c6a:	a7 55       	subi	r26, 0x57	; 87
    4c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e3 55       	subi	r30, 0x53	; 83
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	80 81       	ld	r24, Z
    4c76:	91 81       	ldd	r25, Z+1	; 0x01
    4c78:	8d 93       	st	X+, r24
    4c7a:	9c 93       	st	X, r25
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	e7 55       	subi	r30, 0x57	; 87
    4c80:	ff 4f       	sbci	r31, 0xFF	; 255
    4c82:	80 81       	ld	r24, Z
    4c84:	91 81       	ldd	r25, Z+1	; 0x01
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	f1 f7       	brne	.-4      	; 0x4c86 <main+0x5b2>
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e7 55       	subi	r30, 0x57	; 87
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display seconds (tens)
		SSD_vDisable(seven_seg0);
    4c94:	40 91 56 03 	lds	r20, 0x0356
    4c98:	50 91 57 03 	lds	r21, 0x0357
    4c9c:	60 91 58 03 	lds	r22, 0x0358
    4ca0:	70 91 59 03 	lds	r23, 0x0359
    4ca4:	80 91 5a 03 	lds	r24, 0x035A
    4ca8:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg1);
    4cac:	40 91 5b 03 	lds	r20, 0x035B
    4cb0:	50 91 5c 03 	lds	r21, 0x035C
    4cb4:	60 91 5d 03 	lds	r22, 0x035D
    4cb8:	70 91 5e 03 	lds	r23, 0x035E
    4cbc:	80 91 5f 03 	lds	r24, 0x035F
    4cc0:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg1, Time_Second / 10);
    4cc4:	80 91 97 03 	lds	r24, 0x0397
    4cc8:	9a e0       	ldi	r25, 0x0A	; 10
    4cca:	69 2f       	mov	r22, r25
    4ccc:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    4cd0:	98 2f       	mov	r25, r24
    4cd2:	40 91 5b 03 	lds	r20, 0x035B
    4cd6:	50 91 5c 03 	lds	r21, 0x035C
    4cda:	60 91 5d 03 	lds	r22, 0x035D
    4cde:	70 91 5e 03 	lds	r23, 0x035E
    4ce2:	80 91 5f 03 	lds	r24, 0x035F
    4ce6:	29 2f       	mov	r18, r25
    4ce8:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4cec:	fe 01       	movw	r30, r28
    4cee:	eb 55       	subi	r30, 0x5B	; 91
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	80 e0       	ldi	r24, 0x00	; 0
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	a0 ea       	ldi	r26, 0xA0	; 160
    4cf8:	b0 e4       	ldi	r27, 0x40	; 64
    4cfa:	80 83       	st	Z, r24
    4cfc:	91 83       	std	Z+1, r25	; 0x01
    4cfe:	a2 83       	std	Z+2, r26	; 0x02
    4d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d02:	8e 01       	movw	r16, r28
    4d04:	0f 55       	subi	r16, 0x5F	; 95
    4d06:	1f 4f       	sbci	r17, 0xFF	; 255
    4d08:	fe 01       	movw	r30, r28
    4d0a:	eb 55       	subi	r30, 0x5B	; 91
    4d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0e:	60 81       	ld	r22, Z
    4d10:	71 81       	ldd	r23, Z+1	; 0x01
    4d12:	82 81       	ldd	r24, Z+2	; 0x02
    4d14:	93 81       	ldd	r25, Z+3	; 0x03
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	4a ef       	ldi	r20, 0xFA	; 250
    4d1c:	54 e4       	ldi	r21, 0x44	; 68
    4d1e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d22:	dc 01       	movw	r26, r24
    4d24:	cb 01       	movw	r24, r22
    4d26:	f8 01       	movw	r30, r16
    4d28:	80 83       	st	Z, r24
    4d2a:	91 83       	std	Z+1, r25	; 0x01
    4d2c:	a2 83       	std	Z+2, r26	; 0x02
    4d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d30:	fe 01       	movw	r30, r28
    4d32:	ef 55       	subi	r30, 0x5F	; 95
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	60 81       	ld	r22, Z
    4d38:	71 81       	ldd	r23, Z+1	; 0x01
    4d3a:	82 81       	ldd	r24, Z+2	; 0x02
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	40 e8       	ldi	r20, 0x80	; 128
    4d44:	5f e3       	ldi	r21, 0x3F	; 63
    4d46:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4d4a:	88 23       	and	r24, r24
    4d4c:	44 f4       	brge	.+16     	; 0x4d5e <main+0x68a>
		__ticks = 1;
    4d4e:	fe 01       	movw	r30, r28
    4d50:	e1 56       	subi	r30, 0x61	; 97
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	91 83       	std	Z+1, r25	; 0x01
    4d5a:	80 83       	st	Z, r24
    4d5c:	64 c0       	rjmp	.+200    	; 0x4e26 <main+0x752>
	else if (__tmp > 65535)
    4d5e:	fe 01       	movw	r30, r28
    4d60:	ef 55       	subi	r30, 0x5F	; 95
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	60 81       	ld	r22, Z
    4d66:	71 81       	ldd	r23, Z+1	; 0x01
    4d68:	82 81       	ldd	r24, Z+2	; 0x02
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	3f ef       	ldi	r19, 0xFF	; 255
    4d70:	4f e7       	ldi	r20, 0x7F	; 127
    4d72:	57 e4       	ldi	r21, 0x47	; 71
    4d74:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4d78:	18 16       	cp	r1, r24
    4d7a:	0c f0       	brlt	.+2      	; 0x4d7e <main+0x6aa>
    4d7c:	43 c0       	rjmp	.+134    	; 0x4e04 <main+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d7e:	fe 01       	movw	r30, r28
    4d80:	eb 55       	subi	r30, 0x5B	; 91
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	60 81       	ld	r22, Z
    4d86:	71 81       	ldd	r23, Z+1	; 0x01
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e2       	ldi	r20, 0x20	; 32
    4d92:	51 e4       	ldi	r21, 0x41	; 65
    4d94:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	8e 01       	movw	r16, r28
    4d9e:	01 56       	subi	r16, 0x61	; 97
    4da0:	1f 4f       	sbci	r17, 0xFF	; 255
    4da2:	bc 01       	movw	r22, r24
    4da4:	cd 01       	movw	r24, r26
    4da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4daa:	dc 01       	movw	r26, r24
    4dac:	cb 01       	movw	r24, r22
    4dae:	f8 01       	movw	r30, r16
    4db0:	91 83       	std	Z+1, r25	; 0x01
    4db2:	80 83       	st	Z, r24
    4db4:	1f c0       	rjmp	.+62     	; 0x4df4 <main+0x720>
    4db6:	fe 01       	movw	r30, r28
    4db8:	e3 56       	subi	r30, 0x63	; 99
    4dba:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbc:	88 ec       	ldi	r24, 0xC8	; 200
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	91 83       	std	Z+1, r25	; 0x01
    4dc2:	80 83       	st	Z, r24
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	e3 56       	subi	r30, 0x63	; 99
    4dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dca:	80 81       	ld	r24, Z
    4dcc:	91 81       	ldd	r25, Z+1	; 0x01
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	f1 f7       	brne	.-4      	; 0x4dce <main+0x6fa>
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e3 56       	subi	r30, 0x63	; 99
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	91 83       	std	Z+1, r25	; 0x01
    4dda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ddc:	de 01       	movw	r26, r28
    4dde:	a1 56       	subi	r26, 0x61	; 97
    4de0:	bf 4f       	sbci	r27, 0xFF	; 255
    4de2:	fe 01       	movw	r30, r28
    4de4:	e1 56       	subi	r30, 0x61	; 97
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 81       	ld	r24, Z
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	01 97       	sbiw	r24, 0x01	; 1
    4dee:	11 96       	adiw	r26, 0x01	; 1
    4df0:	9c 93       	st	X, r25
    4df2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df4:	fe 01       	movw	r30, r28
    4df6:	e1 56       	subi	r30, 0x61	; 97
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 81       	ld	r24, Z
    4dfc:	91 81       	ldd	r25, Z+1	; 0x01
    4dfe:	00 97       	sbiw	r24, 0x00	; 0
    4e00:	d1 f6       	brne	.-76     	; 0x4db6 <main+0x6e2>
    4e02:	27 c0       	rjmp	.+78     	; 0x4e52 <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e04:	8e 01       	movw	r16, r28
    4e06:	01 56       	subi	r16, 0x61	; 97
    4e08:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	ef 55       	subi	r30, 0x5F	; 95
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	60 81       	ld	r22, Z
    4e12:	71 81       	ldd	r23, Z+1	; 0x01
    4e14:	82 81       	ldd	r24, Z+2	; 0x02
    4e16:	93 81       	ldd	r25, Z+3	; 0x03
    4e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	cb 01       	movw	r24, r22
    4e20:	f8 01       	movw	r30, r16
    4e22:	91 83       	std	Z+1, r25	; 0x01
    4e24:	80 83       	st	Z, r24
    4e26:	de 01       	movw	r26, r28
    4e28:	a5 56       	subi	r26, 0x65	; 101
    4e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	e1 56       	subi	r30, 0x61	; 97
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	80 81       	ld	r24, Z
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	8d 93       	st	X+, r24
    4e38:	9c 93       	st	X, r25
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e5 56       	subi	r30, 0x65	; 101
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 81       	ld	r24, Z
    4e42:	91 81       	ldd	r25, Z+1	; 0x01
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	f1 f7       	brne	.-4      	; 0x4e44 <main+0x770>
    4e48:	fe 01       	movw	r30, r28
    4e4a:	e5 56       	subi	r30, 0x65	; 101
    4e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4e:	91 83       	std	Z+1, r25	; 0x01
    4e50:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (units)
		SSD_vDisable(seven_seg1);
    4e52:	40 91 5b 03 	lds	r20, 0x035B
    4e56:	50 91 5c 03 	lds	r21, 0x035C
    4e5a:	60 91 5d 03 	lds	r22, 0x035D
    4e5e:	70 91 5e 03 	lds	r23, 0x035E
    4e62:	80 91 5f 03 	lds	r24, 0x035F
    4e66:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg2);
    4e6a:	40 91 60 03 	lds	r20, 0x0360
    4e6e:	50 91 61 03 	lds	r21, 0x0361
    4e72:	60 91 62 03 	lds	r22, 0x0362
    4e76:	70 91 63 03 	lds	r23, 0x0363
    4e7a:	80 91 64 03 	lds	r24, 0x0364
    4e7e:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg2, Time_Minute % 10);
    4e82:	80 91 96 03 	lds	r24, 0x0396
    4e86:	9a e0       	ldi	r25, 0x0A	; 10
    4e88:	69 2f       	mov	r22, r25
    4e8a:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    4e8e:	89 2f       	mov	r24, r25
    4e90:	98 2f       	mov	r25, r24
    4e92:	40 91 60 03 	lds	r20, 0x0360
    4e96:	50 91 61 03 	lds	r21, 0x0361
    4e9a:	60 91 62 03 	lds	r22, 0x0362
    4e9e:	70 91 63 03 	lds	r23, 0x0363
    4ea2:	80 91 64 03 	lds	r24, 0x0364
    4ea6:	29 2f       	mov	r18, r25
    4ea8:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4eac:	fe 01       	movw	r30, r28
    4eae:	e9 56       	subi	r30, 0x69	; 105
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	a0 ea       	ldi	r26, 0xA0	; 160
    4eb8:	b0 e4       	ldi	r27, 0x40	; 64
    4eba:	80 83       	st	Z, r24
    4ebc:	91 83       	std	Z+1, r25	; 0x01
    4ebe:	a2 83       	std	Z+2, r26	; 0x02
    4ec0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ec2:	8e 01       	movw	r16, r28
    4ec4:	0d 56       	subi	r16, 0x6D	; 109
    4ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec8:	fe 01       	movw	r30, r28
    4eca:	e9 56       	subi	r30, 0x69	; 105
    4ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ece:	60 81       	ld	r22, Z
    4ed0:	71 81       	ldd	r23, Z+1	; 0x01
    4ed2:	82 81       	ldd	r24, Z+2	; 0x02
    4ed4:	93 81       	ldd	r25, Z+3	; 0x03
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	4a ef       	ldi	r20, 0xFA	; 250
    4edc:	54 e4       	ldi	r21, 0x44	; 68
    4ede:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	80 83       	st	Z, r24
    4eea:	91 83       	std	Z+1, r25	; 0x01
    4eec:	a2 83       	std	Z+2, r26	; 0x02
    4eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ef0:	fe 01       	movw	r30, r28
    4ef2:	ed 56       	subi	r30, 0x6D	; 109
    4ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef6:	60 81       	ld	r22, Z
    4ef8:	71 81       	ldd	r23, Z+1	; 0x01
    4efa:	82 81       	ldd	r24, Z+2	; 0x02
    4efc:	93 81       	ldd	r25, Z+3	; 0x03
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	40 e8       	ldi	r20, 0x80	; 128
    4f04:	5f e3       	ldi	r21, 0x3F	; 63
    4f06:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4f0a:	88 23       	and	r24, r24
    4f0c:	44 f4       	brge	.+16     	; 0x4f1e <main+0x84a>
		__ticks = 1;
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ef 56       	subi	r30, 0x6F	; 111
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	91 83       	std	Z+1, r25	; 0x01
    4f1a:	80 83       	st	Z, r24
    4f1c:	64 c0       	rjmp	.+200    	; 0x4fe6 <main+0x912>
	else if (__tmp > 65535)
    4f1e:	fe 01       	movw	r30, r28
    4f20:	ed 56       	subi	r30, 0x6D	; 109
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	60 81       	ld	r22, Z
    4f26:	71 81       	ldd	r23, Z+1	; 0x01
    4f28:	82 81       	ldd	r24, Z+2	; 0x02
    4f2a:	93 81       	ldd	r25, Z+3	; 0x03
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	3f ef       	ldi	r19, 0xFF	; 255
    4f30:	4f e7       	ldi	r20, 0x7F	; 127
    4f32:	57 e4       	ldi	r21, 0x47	; 71
    4f34:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4f38:	18 16       	cp	r1, r24
    4f3a:	0c f0       	brlt	.+2      	; 0x4f3e <main+0x86a>
    4f3c:	43 c0       	rjmp	.+134    	; 0x4fc4 <main+0x8f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e9 56       	subi	r30, 0x69	; 105
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	60 81       	ld	r22, Z
    4f46:	71 81       	ldd	r23, Z+1	; 0x01
    4f48:	82 81       	ldd	r24, Z+2	; 0x02
    4f4a:	93 81       	ldd	r25, Z+3	; 0x03
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e2       	ldi	r20, 0x20	; 32
    4f52:	51 e4       	ldi	r21, 0x41	; 65
    4f54:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	8e 01       	movw	r16, r28
    4f5e:	0f 56       	subi	r16, 0x6F	; 111
    4f60:	1f 4f       	sbci	r17, 0xFF	; 255
    4f62:	bc 01       	movw	r22, r24
    4f64:	cd 01       	movw	r24, r26
    4f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	f8 01       	movw	r30, r16
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	80 83       	st	Z, r24
    4f74:	1f c0       	rjmp	.+62     	; 0x4fb4 <main+0x8e0>
    4f76:	fe 01       	movw	r30, r28
    4f78:	e1 57       	subi	r30, 0x71	; 113
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	88 ec       	ldi	r24, 0xC8	; 200
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	91 83       	std	Z+1, r25	; 0x01
    4f82:	80 83       	st	Z, r24
    4f84:	fe 01       	movw	r30, r28
    4f86:	e1 57       	subi	r30, 0x71	; 113
    4f88:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8a:	80 81       	ld	r24, Z
    4f8c:	91 81       	ldd	r25, Z+1	; 0x01
    4f8e:	01 97       	sbiw	r24, 0x01	; 1
    4f90:	f1 f7       	brne	.-4      	; 0x4f8e <main+0x8ba>
    4f92:	fe 01       	movw	r30, r28
    4f94:	e1 57       	subi	r30, 0x71	; 113
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	91 83       	std	Z+1, r25	; 0x01
    4f9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f9c:	de 01       	movw	r26, r28
    4f9e:	af 56       	subi	r26, 0x6F	; 111
    4fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	ef 56       	subi	r30, 0x6F	; 111
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	11 96       	adiw	r26, 0x01	; 1
    4fb0:	9c 93       	st	X, r25
    4fb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb4:	fe 01       	movw	r30, r28
    4fb6:	ef 56       	subi	r30, 0x6F	; 111
    4fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fba:	80 81       	ld	r24, Z
    4fbc:	91 81       	ldd	r25, Z+1	; 0x01
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	d1 f6       	brne	.-76     	; 0x4f76 <main+0x8a2>
    4fc2:	27 c0       	rjmp	.+78     	; 0x5012 <main+0x93e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc4:	8e 01       	movw	r16, r28
    4fc6:	0f 56       	subi	r16, 0x6F	; 111
    4fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fca:	fe 01       	movw	r30, r28
    4fcc:	ed 56       	subi	r30, 0x6D	; 109
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	60 81       	ld	r22, Z
    4fd2:	71 81       	ldd	r23, Z+1	; 0x01
    4fd4:	82 81       	ldd	r24, Z+2	; 0x02
    4fd6:	93 81       	ldd	r25, Z+3	; 0x03
    4fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	f8 01       	movw	r30, r16
    4fe2:	91 83       	std	Z+1, r25	; 0x01
    4fe4:	80 83       	st	Z, r24
    4fe6:	de 01       	movw	r26, r28
    4fe8:	a3 57       	subi	r26, 0x73	; 115
    4fea:	bf 4f       	sbci	r27, 0xFF	; 255
    4fec:	fe 01       	movw	r30, r28
    4fee:	ef 56       	subi	r30, 0x6F	; 111
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	80 81       	ld	r24, Z
    4ff4:	91 81       	ldd	r25, Z+1	; 0x01
    4ff6:	8d 93       	st	X+, r24
    4ff8:	9c 93       	st	X, r25
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	e3 57       	subi	r30, 0x73	; 115
    4ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    5000:	80 81       	ld	r24, Z
    5002:	91 81       	ldd	r25, Z+1	; 0x01
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	f1 f7       	brne	.-4      	; 0x5004 <main+0x930>
    5008:	fe 01       	movw	r30, r28
    500a:	e3 57       	subi	r30, 0x73	; 115
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (tens)
		SSD_vDisable(seven_seg2);
    5012:	40 91 60 03 	lds	r20, 0x0360
    5016:	50 91 61 03 	lds	r21, 0x0361
    501a:	60 91 62 03 	lds	r22, 0x0362
    501e:	70 91 63 03 	lds	r23, 0x0363
    5022:	80 91 64 03 	lds	r24, 0x0364
    5026:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg3);
    502a:	40 91 65 03 	lds	r20, 0x0365
    502e:	50 91 66 03 	lds	r21, 0x0366
    5032:	60 91 67 03 	lds	r22, 0x0367
    5036:	70 91 68 03 	lds	r23, 0x0368
    503a:	80 91 69 03 	lds	r24, 0x0369
    503e:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg3, Time_Minute / 10);
    5042:	80 91 96 03 	lds	r24, 0x0396
    5046:	9a e0       	ldi	r25, 0x0A	; 10
    5048:	69 2f       	mov	r22, r25
    504a:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    504e:	98 2f       	mov	r25, r24
    5050:	40 91 65 03 	lds	r20, 0x0365
    5054:	50 91 66 03 	lds	r21, 0x0366
    5058:	60 91 67 03 	lds	r22, 0x0367
    505c:	70 91 68 03 	lds	r23, 0x0368
    5060:	80 91 69 03 	lds	r24, 0x0369
    5064:	29 2f       	mov	r18, r25
    5066:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    506a:	fe 01       	movw	r30, r28
    506c:	e7 57       	subi	r30, 0x77	; 119
    506e:	ff 4f       	sbci	r31, 0xFF	; 255
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	a0 ea       	ldi	r26, 0xA0	; 160
    5076:	b0 e4       	ldi	r27, 0x40	; 64
    5078:	80 83       	st	Z, r24
    507a:	91 83       	std	Z+1, r25	; 0x01
    507c:	a2 83       	std	Z+2, r26	; 0x02
    507e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5080:	8e 01       	movw	r16, r28
    5082:	0b 57       	subi	r16, 0x7B	; 123
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	fe 01       	movw	r30, r28
    5088:	e7 57       	subi	r30, 0x77	; 119
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	60 81       	ld	r22, Z
    508e:	71 81       	ldd	r23, Z+1	; 0x01
    5090:	82 81       	ldd	r24, Z+2	; 0x02
    5092:	93 81       	ldd	r25, Z+3	; 0x03
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	4a ef       	ldi	r20, 0xFA	; 250
    509a:	54 e4       	ldi	r21, 0x44	; 68
    509c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	f8 01       	movw	r30, r16
    50a6:	80 83       	st	Z, r24
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	a2 83       	std	Z+2, r26	; 0x02
    50ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ae:	fe 01       	movw	r30, r28
    50b0:	eb 57       	subi	r30, 0x7B	; 123
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e8       	ldi	r20, 0x80	; 128
    50c2:	5f e3       	ldi	r21, 0x3F	; 63
    50c4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    50c8:	88 23       	and	r24, r24
    50ca:	44 f4       	brge	.+16     	; 0x50dc <main+0xa08>
		__ticks = 1;
    50cc:	fe 01       	movw	r30, r28
    50ce:	ed 57       	subi	r30, 0x7D	; 125
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
    50da:	64 c0       	rjmp	.+200    	; 0x51a4 <main+0xad0>
	else if (__tmp > 65535)
    50dc:	fe 01       	movw	r30, r28
    50de:	eb 57       	subi	r30, 0x7B	; 123
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	60 81       	ld	r22, Z
    50e4:	71 81       	ldd	r23, Z+1	; 0x01
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	3f ef       	ldi	r19, 0xFF	; 255
    50ee:	4f e7       	ldi	r20, 0x7F	; 127
    50f0:	57 e4       	ldi	r21, 0x47	; 71
    50f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    50f6:	18 16       	cp	r1, r24
    50f8:	0c f0       	brlt	.+2      	; 0x50fc <main+0xa28>
    50fa:	43 c0       	rjmp	.+134    	; 0x5182 <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fc:	fe 01       	movw	r30, r28
    50fe:	e7 57       	subi	r30, 0x77	; 119
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e2       	ldi	r20, 0x20	; 32
    5110:	51 e4       	ldi	r21, 0x41	; 65
    5112:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	8e 01       	movw	r16, r28
    511c:	0d 57       	subi	r16, 0x7D	; 125
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	bc 01       	movw	r22, r24
    5122:	cd 01       	movw	r24, r26
    5124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	f8 01       	movw	r30, r16
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	80 83       	st	Z, r24
    5132:	1f c0       	rjmp	.+62     	; 0x5172 <main+0xa9e>
    5134:	fe 01       	movw	r30, r28
    5136:	ef 57       	subi	r30, 0x7F	; 127
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	88 ec       	ldi	r24, 0xC8	; 200
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24
    5142:	fe 01       	movw	r30, r28
    5144:	ef 57       	subi	r30, 0x7F	; 127
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 81       	ld	r24, Z
    514a:	91 81       	ldd	r25, Z+1	; 0x01
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <main+0xa78>
    5150:	fe 01       	movw	r30, r28
    5152:	ef 57       	subi	r30, 0x7F	; 127
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	91 83       	std	Z+1, r25	; 0x01
    5158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515a:	de 01       	movw	r26, r28
    515c:	ad 57       	subi	r26, 0x7D	; 125
    515e:	bf 4f       	sbci	r27, 0xFF	; 255
    5160:	fe 01       	movw	r30, r28
    5162:	ed 57       	subi	r30, 0x7D	; 125
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	80 81       	ld	r24, Z
    5168:	91 81       	ldd	r25, Z+1	; 0x01
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	11 96       	adiw	r26, 0x01	; 1
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5172:	fe 01       	movw	r30, r28
    5174:	ed 57       	subi	r30, 0x7D	; 125
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	91 81       	ldd	r25, Z+1	; 0x01
    517c:	00 97       	sbiw	r24, 0x00	; 0
    517e:	d1 f6       	brne	.-76     	; 0x5134 <main+0xa60>
    5180:	27 c0       	rjmp	.+78     	; 0x51d0 <main+0xafc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5182:	8e 01       	movw	r16, r28
    5184:	0d 57       	subi	r16, 0x7D	; 125
    5186:	1f 4f       	sbci	r17, 0xFF	; 255
    5188:	fe 01       	movw	r30, r28
    518a:	eb 57       	subi	r30, 0x7B	; 123
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	f8 01       	movw	r30, r16
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	80 83       	st	Z, r24
    51a4:	de 01       	movw	r26, r28
    51a6:	a1 58       	subi	r26, 0x81	; 129
    51a8:	bf 4f       	sbci	r27, 0xFF	; 255
    51aa:	fe 01       	movw	r30, r28
    51ac:	ed 57       	subi	r30, 0x7D	; 125
    51ae:	ff 4f       	sbci	r31, 0xFF	; 255
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	8d 93       	st	X+, r24
    51b6:	9c 93       	st	X, r25
    51b8:	fe 01       	movw	r30, r28
    51ba:	e1 58       	subi	r30, 0x81	; 129
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	80 81       	ld	r24, Z
    51c0:	91 81       	ldd	r25, Z+1	; 0x01
    51c2:	01 97       	sbiw	r24, 0x01	; 1
    51c4:	f1 f7       	brne	.-4      	; 0x51c2 <main+0xaee>
    51c6:	fe 01       	movw	r30, r28
    51c8:	e1 58       	subi	r30, 0x81	; 129
    51ca:	ff 4f       	sbci	r31, 0xFF	; 255
    51cc:	91 83       	std	Z+1, r25	; 0x01
    51ce:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (units)
		SSD_vDisable(seven_seg3);
    51d0:	40 91 65 03 	lds	r20, 0x0365
    51d4:	50 91 66 03 	lds	r21, 0x0366
    51d8:	60 91 67 03 	lds	r22, 0x0367
    51dc:	70 91 68 03 	lds	r23, 0x0368
    51e0:	80 91 69 03 	lds	r24, 0x0369
    51e4:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg4);
    51e8:	40 91 6a 03 	lds	r20, 0x036A
    51ec:	50 91 6b 03 	lds	r21, 0x036B
    51f0:	60 91 6c 03 	lds	r22, 0x036C
    51f4:	70 91 6d 03 	lds	r23, 0x036D
    51f8:	80 91 6e 03 	lds	r24, 0x036E
    51fc:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg4, Time_Hour % 10);
    5200:	80 91 54 03 	lds	r24, 0x0354
    5204:	9a e0       	ldi	r25, 0x0A	; 10
    5206:	69 2f       	mov	r22, r25
    5208:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    520c:	89 2f       	mov	r24, r25
    520e:	98 2f       	mov	r25, r24
    5210:	40 91 6a 03 	lds	r20, 0x036A
    5214:	50 91 6b 03 	lds	r21, 0x036B
    5218:	60 91 6c 03 	lds	r22, 0x036C
    521c:	70 91 6d 03 	lds	r23, 0x036D
    5220:	80 91 6e 03 	lds	r24, 0x036E
    5224:	29 2f       	mov	r18, r25
    5226:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    522a:	fe 01       	movw	r30, r28
    522c:	e5 58       	subi	r30, 0x85	; 133
    522e:	ff 4f       	sbci	r31, 0xFF	; 255
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	a0 ea       	ldi	r26, 0xA0	; 160
    5236:	b0 e4       	ldi	r27, 0x40	; 64
    5238:	80 83       	st	Z, r24
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	a2 83       	std	Z+2, r26	; 0x02
    523e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5240:	8e 01       	movw	r16, r28
    5242:	09 58       	subi	r16, 0x89	; 137
    5244:	1f 4f       	sbci	r17, 0xFF	; 255
    5246:	fe 01       	movw	r30, r28
    5248:	e5 58       	subi	r30, 0x85	; 133
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	60 81       	ld	r22, Z
    524e:	71 81       	ldd	r23, Z+1	; 0x01
    5250:	82 81       	ldd	r24, Z+2	; 0x02
    5252:	93 81       	ldd	r25, Z+3	; 0x03
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	4a ef       	ldi	r20, 0xFA	; 250
    525a:	54 e4       	ldi	r21, 0x44	; 68
    525c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5260:	dc 01       	movw	r26, r24
    5262:	cb 01       	movw	r24, r22
    5264:	f8 01       	movw	r30, r16
    5266:	80 83       	st	Z, r24
    5268:	91 83       	std	Z+1, r25	; 0x01
    526a:	a2 83       	std	Z+2, r26	; 0x02
    526c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    526e:	fe 01       	movw	r30, r28
    5270:	e9 58       	subi	r30, 0x89	; 137
    5272:	ff 4f       	sbci	r31, 0xFF	; 255
    5274:	60 81       	ld	r22, Z
    5276:	71 81       	ldd	r23, Z+1	; 0x01
    5278:	82 81       	ldd	r24, Z+2	; 0x02
    527a:	93 81       	ldd	r25, Z+3	; 0x03
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	40 e8       	ldi	r20, 0x80	; 128
    5282:	5f e3       	ldi	r21, 0x3F	; 63
    5284:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5288:	88 23       	and	r24, r24
    528a:	44 f4       	brge	.+16     	; 0x529c <main+0xbc8>
		__ticks = 1;
    528c:	fe 01       	movw	r30, r28
    528e:	eb 58       	subi	r30, 0x8B	; 139
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	91 83       	std	Z+1, r25	; 0x01
    5298:	80 83       	st	Z, r24
    529a:	64 c0       	rjmp	.+200    	; 0x5364 <main+0xc90>
	else if (__tmp > 65535)
    529c:	fe 01       	movw	r30, r28
    529e:	e9 58       	subi	r30, 0x89	; 137
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	60 81       	ld	r22, Z
    52a4:	71 81       	ldd	r23, Z+1	; 0x01
    52a6:	82 81       	ldd	r24, Z+2	; 0x02
    52a8:	93 81       	ldd	r25, Z+3	; 0x03
    52aa:	20 e0       	ldi	r18, 0x00	; 0
    52ac:	3f ef       	ldi	r19, 0xFF	; 255
    52ae:	4f e7       	ldi	r20, 0x7F	; 127
    52b0:	57 e4       	ldi	r21, 0x47	; 71
    52b2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    52b6:	18 16       	cp	r1, r24
    52b8:	0c f0       	brlt	.+2      	; 0x52bc <main+0xbe8>
    52ba:	43 c0       	rjmp	.+134    	; 0x5342 <main+0xc6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52bc:	fe 01       	movw	r30, r28
    52be:	e5 58       	subi	r30, 0x85	; 133
    52c0:	ff 4f       	sbci	r31, 0xFF	; 255
    52c2:	60 81       	ld	r22, Z
    52c4:	71 81       	ldd	r23, Z+1	; 0x01
    52c6:	82 81       	ldd	r24, Z+2	; 0x02
    52c8:	93 81       	ldd	r25, Z+3	; 0x03
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	40 e2       	ldi	r20, 0x20	; 32
    52d0:	51 e4       	ldi	r21, 0x41	; 65
    52d2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52d6:	dc 01       	movw	r26, r24
    52d8:	cb 01       	movw	r24, r22
    52da:	8e 01       	movw	r16, r28
    52dc:	0b 58       	subi	r16, 0x8B	; 139
    52de:	1f 4f       	sbci	r17, 0xFF	; 255
    52e0:	bc 01       	movw	r22, r24
    52e2:	cd 01       	movw	r24, r26
    52e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	f8 01       	movw	r30, r16
    52ee:	91 83       	std	Z+1, r25	; 0x01
    52f0:	80 83       	st	Z, r24
    52f2:	1f c0       	rjmp	.+62     	; 0x5332 <main+0xc5e>
    52f4:	fe 01       	movw	r30, r28
    52f6:	ed 58       	subi	r30, 0x8D	; 141
    52f8:	ff 4f       	sbci	r31, 0xFF	; 255
    52fa:	88 ec       	ldi	r24, 0xC8	; 200
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	91 83       	std	Z+1, r25	; 0x01
    5300:	80 83       	st	Z, r24
    5302:	fe 01       	movw	r30, r28
    5304:	ed 58       	subi	r30, 0x8D	; 141
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	80 81       	ld	r24, Z
    530a:	91 81       	ldd	r25, Z+1	; 0x01
    530c:	01 97       	sbiw	r24, 0x01	; 1
    530e:	f1 f7       	brne	.-4      	; 0x530c <main+0xc38>
    5310:	fe 01       	movw	r30, r28
    5312:	ed 58       	subi	r30, 0x8D	; 141
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	91 83       	std	Z+1, r25	; 0x01
    5318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    531a:	de 01       	movw	r26, r28
    531c:	ab 58       	subi	r26, 0x8B	; 139
    531e:	bf 4f       	sbci	r27, 0xFF	; 255
    5320:	fe 01       	movw	r30, r28
    5322:	eb 58       	subi	r30, 0x8B	; 139
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	80 81       	ld	r24, Z
    5328:	91 81       	ldd	r25, Z+1	; 0x01
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	11 96       	adiw	r26, 0x01	; 1
    532e:	9c 93       	st	X, r25
    5330:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5332:	fe 01       	movw	r30, r28
    5334:	eb 58       	subi	r30, 0x8B	; 139
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	d1 f6       	brne	.-76     	; 0x52f4 <main+0xc20>
    5340:	27 c0       	rjmp	.+78     	; 0x5390 <main+0xcbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5342:	8e 01       	movw	r16, r28
    5344:	0b 58       	subi	r16, 0x8B	; 139
    5346:	1f 4f       	sbci	r17, 0xFF	; 255
    5348:	fe 01       	movw	r30, r28
    534a:	e9 58       	subi	r30, 0x89	; 137
    534c:	ff 4f       	sbci	r31, 0xFF	; 255
    534e:	60 81       	ld	r22, Z
    5350:	71 81       	ldd	r23, Z+1	; 0x01
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	93 81       	ldd	r25, Z+3	; 0x03
    5356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    535a:	dc 01       	movw	r26, r24
    535c:	cb 01       	movw	r24, r22
    535e:	f8 01       	movw	r30, r16
    5360:	91 83       	std	Z+1, r25	; 0x01
    5362:	80 83       	st	Z, r24
    5364:	de 01       	movw	r26, r28
    5366:	af 58       	subi	r26, 0x8F	; 143
    5368:	bf 4f       	sbci	r27, 0xFF	; 255
    536a:	fe 01       	movw	r30, r28
    536c:	eb 58       	subi	r30, 0x8B	; 139
    536e:	ff 4f       	sbci	r31, 0xFF	; 255
    5370:	80 81       	ld	r24, Z
    5372:	91 81       	ldd	r25, Z+1	; 0x01
    5374:	8d 93       	st	X+, r24
    5376:	9c 93       	st	X, r25
    5378:	fe 01       	movw	r30, r28
    537a:	ef 58       	subi	r30, 0x8F	; 143
    537c:	ff 4f       	sbci	r31, 0xFF	; 255
    537e:	80 81       	ld	r24, Z
    5380:	91 81       	ldd	r25, Z+1	; 0x01
    5382:	01 97       	sbiw	r24, 0x01	; 1
    5384:	f1 f7       	brne	.-4      	; 0x5382 <main+0xcae>
    5386:	fe 01       	movw	r30, r28
    5388:	ef 58       	subi	r30, 0x8F	; 143
    538a:	ff 4f       	sbci	r31, 0xFF	; 255
    538c:	91 83       	std	Z+1, r25	; 0x01
    538e:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (tens)
		SSD_vDisable(seven_seg4);
    5390:	40 91 6a 03 	lds	r20, 0x036A
    5394:	50 91 6b 03 	lds	r21, 0x036B
    5398:	60 91 6c 03 	lds	r22, 0x036C
    539c:	70 91 6d 03 	lds	r23, 0x036D
    53a0:	80 91 6e 03 	lds	r24, 0x036E
    53a4:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg5);
    53a8:	40 91 6f 03 	lds	r20, 0x036F
    53ac:	50 91 70 03 	lds	r21, 0x0370
    53b0:	60 91 71 03 	lds	r22, 0x0371
    53b4:	70 91 72 03 	lds	r23, 0x0372
    53b8:	80 91 73 03 	lds	r24, 0x0373
    53bc:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg5, Time_Hour / 10);
    53c0:	80 91 54 03 	lds	r24, 0x0354
    53c4:	9a e0       	ldi	r25, 0x0A	; 10
    53c6:	69 2f       	mov	r22, r25
    53c8:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    53cc:	98 2f       	mov	r25, r24
    53ce:	40 91 6f 03 	lds	r20, 0x036F
    53d2:	50 91 70 03 	lds	r21, 0x0370
    53d6:	60 91 71 03 	lds	r22, 0x0371
    53da:	70 91 72 03 	lds	r23, 0x0372
    53de:	80 91 73 03 	lds	r24, 0x0373
    53e2:	29 2f       	mov	r18, r25
    53e4:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    53e8:	fe 01       	movw	r30, r28
    53ea:	e3 59       	subi	r30, 0x93	; 147
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	a0 ea       	ldi	r26, 0xA0	; 160
    53f4:	b0 e4       	ldi	r27, 0x40	; 64
    53f6:	80 83       	st	Z, r24
    53f8:	91 83       	std	Z+1, r25	; 0x01
    53fa:	a2 83       	std	Z+2, r26	; 0x02
    53fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fe:	8e 01       	movw	r16, r28
    5400:	07 59       	subi	r16, 0x97	; 151
    5402:	1f 4f       	sbci	r17, 0xFF	; 255
    5404:	fe 01       	movw	r30, r28
    5406:	e3 59       	subi	r30, 0x93	; 147
    5408:	ff 4f       	sbci	r31, 0xFF	; 255
    540a:	60 81       	ld	r22, Z
    540c:	71 81       	ldd	r23, Z+1	; 0x01
    540e:	82 81       	ldd	r24, Z+2	; 0x02
    5410:	93 81       	ldd	r25, Z+3	; 0x03
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	4a ef       	ldi	r20, 0xFA	; 250
    5418:	54 e4       	ldi	r21, 0x44	; 68
    541a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	f8 01       	movw	r30, r16
    5424:	80 83       	st	Z, r24
    5426:	91 83       	std	Z+1, r25	; 0x01
    5428:	a2 83       	std	Z+2, r26	; 0x02
    542a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    542c:	fe 01       	movw	r30, r28
    542e:	e7 59       	subi	r30, 0x97	; 151
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	40 e8       	ldi	r20, 0x80	; 128
    5440:	5f e3       	ldi	r21, 0x3F	; 63
    5442:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5446:	88 23       	and	r24, r24
    5448:	44 f4       	brge	.+16     	; 0x545a <main+0xd86>
		__ticks = 1;
    544a:	fe 01       	movw	r30, r28
    544c:	e9 59       	subi	r30, 0x99	; 153
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	91 83       	std	Z+1, r25	; 0x01
    5456:	80 83       	st	Z, r24
    5458:	64 c0       	rjmp	.+200    	; 0x5522 <main+0xe4e>
	else if (__tmp > 65535)
    545a:	fe 01       	movw	r30, r28
    545c:	e7 59       	subi	r30, 0x97	; 151
    545e:	ff 4f       	sbci	r31, 0xFF	; 255
    5460:	60 81       	ld	r22, Z
    5462:	71 81       	ldd	r23, Z+1	; 0x01
    5464:	82 81       	ldd	r24, Z+2	; 0x02
    5466:	93 81       	ldd	r25, Z+3	; 0x03
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	3f ef       	ldi	r19, 0xFF	; 255
    546c:	4f e7       	ldi	r20, 0x7F	; 127
    546e:	57 e4       	ldi	r21, 0x47	; 71
    5470:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5474:	18 16       	cp	r1, r24
    5476:	0c f0       	brlt	.+2      	; 0x547a <main+0xda6>
    5478:	43 c0       	rjmp	.+134    	; 0x5500 <main+0xe2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    547a:	fe 01       	movw	r30, r28
    547c:	e3 59       	subi	r30, 0x93	; 147
    547e:	ff 4f       	sbci	r31, 0xFF	; 255
    5480:	60 81       	ld	r22, Z
    5482:	71 81       	ldd	r23, Z+1	; 0x01
    5484:	82 81       	ldd	r24, Z+2	; 0x02
    5486:	93 81       	ldd	r25, Z+3	; 0x03
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	40 e2       	ldi	r20, 0x20	; 32
    548e:	51 e4       	ldi	r21, 0x41	; 65
    5490:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	8e 01       	movw	r16, r28
    549a:	09 59       	subi	r16, 0x99	; 153
    549c:	1f 4f       	sbci	r17, 0xFF	; 255
    549e:	bc 01       	movw	r22, r24
    54a0:	cd 01       	movw	r24, r26
    54a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a6:	dc 01       	movw	r26, r24
    54a8:	cb 01       	movw	r24, r22
    54aa:	f8 01       	movw	r30, r16
    54ac:	91 83       	std	Z+1, r25	; 0x01
    54ae:	80 83       	st	Z, r24
    54b0:	1f c0       	rjmp	.+62     	; 0x54f0 <main+0xe1c>
    54b2:	fe 01       	movw	r30, r28
    54b4:	eb 59       	subi	r30, 0x9B	; 155
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	88 ec       	ldi	r24, 0xC8	; 200
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	91 83       	std	Z+1, r25	; 0x01
    54be:	80 83       	st	Z, r24
    54c0:	fe 01       	movw	r30, r28
    54c2:	eb 59       	subi	r30, 0x9B	; 155
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	80 81       	ld	r24, Z
    54c8:	91 81       	ldd	r25, Z+1	; 0x01
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	f1 f7       	brne	.-4      	; 0x54ca <main+0xdf6>
    54ce:	fe 01       	movw	r30, r28
    54d0:	eb 59       	subi	r30, 0x9B	; 155
    54d2:	ff 4f       	sbci	r31, 0xFF	; 255
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54d8:	de 01       	movw	r26, r28
    54da:	a9 59       	subi	r26, 0x99	; 153
    54dc:	bf 4f       	sbci	r27, 0xFF	; 255
    54de:	fe 01       	movw	r30, r28
    54e0:	e9 59       	subi	r30, 0x99	; 153
    54e2:	ff 4f       	sbci	r31, 0xFF	; 255
    54e4:	80 81       	ld	r24, Z
    54e6:	91 81       	ldd	r25, Z+1	; 0x01
    54e8:	01 97       	sbiw	r24, 0x01	; 1
    54ea:	11 96       	adiw	r26, 0x01	; 1
    54ec:	9c 93       	st	X, r25
    54ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f0:	fe 01       	movw	r30, r28
    54f2:	e9 59       	subi	r30, 0x99	; 153
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	80 81       	ld	r24, Z
    54f8:	91 81       	ldd	r25, Z+1	; 0x01
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	d1 f6       	brne	.-76     	; 0x54b2 <main+0xdde>
    54fe:	28 c0       	rjmp	.+80     	; 0x5550 <main+0xe7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	8e 01       	movw	r16, r28
    5502:	09 59       	subi	r16, 0x99	; 153
    5504:	1f 4f       	sbci	r17, 0xFF	; 255
    5506:	fe 01       	movw	r30, r28
    5508:	e7 59       	subi	r30, 0x97	; 151
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5518:	dc 01       	movw	r26, r24
    551a:	cb 01       	movw	r24, r22
    551c:	f8 01       	movw	r30, r16
    551e:	91 83       	std	Z+1, r25	; 0x01
    5520:	80 83       	st	Z, r24
    5522:	de 01       	movw	r26, r28
    5524:	ad 59       	subi	r26, 0x9D	; 157
    5526:	bf 4f       	sbci	r27, 0xFF	; 255
    5528:	fe 01       	movw	r30, r28
    552a:	e9 59       	subi	r30, 0x99	; 153
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	11 96       	adiw	r26, 0x01	; 1
    5534:	9c 93       	st	X, r25
    5536:	8e 93       	st	-X, r24
    5538:	fe 01       	movw	r30, r28
    553a:	ed 59       	subi	r30, 0x9D	; 157
    553c:	ff 4f       	sbci	r31, 0xFF	; 255
    553e:	80 81       	ld	r24, Z
    5540:	91 81       	ldd	r25, Z+1	; 0x01
    5542:	01 97       	sbiw	r24, 0x01	; 1
    5544:	f1 f7       	brne	.-4      	; 0x5542 <main+0xe6e>
    5546:	fe 01       	movw	r30, r28
    5548:	ed 59       	subi	r30, 0x9D	; 157
    554a:	ff 4f       	sbci	r31, 0xFF	; 255
    554c:	91 83       	std	Z+1, r25	; 0x01
    554e:	80 83       	st	Z, r24
		_delay_ms(5);

		/* When Alarm is Ring */
		if (Time_Hour == Alarm_Hour && Time_Minute == Alarm_Minutes && Time_Second == 0 && Alarm_Status == Alarm_EN && READ_BIT(PORTA_REG, DIO_PIN3) == Alarm_DayTime)
    5550:	90 91 54 03 	lds	r25, 0x0354
    5554:	80 91 98 03 	lds	r24, 0x0398
    5558:	98 17       	cp	r25, r24
    555a:	09 f0       	breq	.+2      	; 0x555e <main+0xe8a>
    555c:	42 c9       	rjmp	.-3452   	; 0x47e2 <main+0x10e>
    555e:	90 91 96 03 	lds	r25, 0x0396
    5562:	80 91 9b 03 	lds	r24, 0x039B
    5566:	98 17       	cp	r25, r24
    5568:	09 f0       	breq	.+2      	; 0x556c <main+0xe98>
    556a:	3b c9       	rjmp	.-3466   	; 0x47e2 <main+0x10e>
    556c:	80 91 97 03 	lds	r24, 0x0397
    5570:	88 23       	and	r24, r24
    5572:	09 f0       	breq	.+2      	; 0x5576 <main+0xea2>
    5574:	36 c9       	rjmp	.-3476   	; 0x47e2 <main+0x10e>
    5576:	80 91 95 03 	lds	r24, 0x0395
    557a:	81 30       	cpi	r24, 0x01	; 1
    557c:	09 f0       	breq	.+2      	; 0x5580 <main+0xeac>
    557e:	31 c9       	rjmp	.-3486   	; 0x47e2 <main+0x10e>
    5580:	eb e3       	ldi	r30, 0x3B	; 59
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	80 81       	ld	r24, Z
    5586:	88 2f       	mov	r24, r24
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	88 70       	andi	r24, 0x08	; 8
    558c:	90 70       	andi	r25, 0x00	; 0
    558e:	9c 01       	movw	r18, r24
    5590:	35 95       	asr	r19
    5592:	27 95       	ror	r18
    5594:	35 95       	asr	r19
    5596:	27 95       	ror	r18
    5598:	35 95       	asr	r19
    559a:	27 95       	ror	r18
    559c:	80 91 94 03 	lds	r24, 0x0394
    55a0:	88 2f       	mov	r24, r24
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	28 17       	cp	r18, r24
    55a6:	39 07       	cpc	r19, r25
    55a8:	09 f0       	breq	.+2      	; 0x55ac <main+0xed8>
    55aa:	1b c9       	rjmp	.-3530   	; 0x47e2 <main+0x10e>
		{
			CLCD_vClearScreen();
    55ac:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSetPosition(1, 8);
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	68 e0       	ldi	r22, 0x08	; 8
    55b4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Alarm");
    55b8:	80 ee       	ldi	r24, 0xE0	; 224
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

			CLCD_vSetPosition(2, 6);
    55c0:	82 e0       	ldi	r24, 0x02	; 2
    55c2:	66 e0       	ldi	r22, 0x06	; 6
    55c4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData((Alarm_Hour / 10) + 48);
    55c8:	80 91 98 03 	lds	r24, 0x0398
    55cc:	9a e0       	ldi	r25, 0x0A	; 10
    55ce:	69 2f       	mov	r22, r25
    55d0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    55d4:	80 5d       	subi	r24, 0xD0	; 208
    55d6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Alarm_Hour % 10) + 48);
    55da:	80 91 98 03 	lds	r24, 0x0398
    55de:	9a e0       	ldi	r25, 0x0A	; 10
    55e0:	69 2f       	mov	r22, r25
    55e2:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    55e6:	89 2f       	mov	r24, r25
    55e8:	80 5d       	subi	r24, 0xD0	; 208
    55ea:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendString(" : ");
    55ee:	86 ee       	ldi	r24, 0xE6	; 230
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSendData((Alarm_Minutes / 10) + 48);
    55f6:	80 91 9b 03 	lds	r24, 0x039B
    55fa:	9a e0       	ldi	r25, 0x0A	; 10
    55fc:	69 2f       	mov	r22, r25
    55fe:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5602:	80 5d       	subi	r24, 0xD0	; 208
    5604:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Alarm_Minutes % 10) + 48);
    5608:	80 91 9b 03 	lds	r24, 0x039B
    560c:	9a e0       	ldi	r25, 0x0A	; 10
    560e:	69 2f       	mov	r22, r25
    5610:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5614:	89 2f       	mov	r24, r25
    5616:	80 5d       	subi	r24, 0xD0	; 208
    5618:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			switch (Alarm_DayTime)
    561c:	80 91 94 03 	lds	r24, 0x0394
    5620:	28 2f       	mov	r18, r24
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	cb 53       	subi	r28, 0x3B	; 59
    5626:	df 4f       	sbci	r29, 0xFF	; 255
    5628:	39 83       	std	Y+1, r19	; 0x01
    562a:	28 83       	st	Y, r18
    562c:	c5 5c       	subi	r28, 0xC5	; 197
    562e:	d0 40       	sbci	r29, 0x00	; 0
    5630:	cb 53       	subi	r28, 0x3B	; 59
    5632:	df 4f       	sbci	r29, 0xFF	; 255
    5634:	88 81       	ld	r24, Y
    5636:	99 81       	ldd	r25, Y+1	; 0x01
    5638:	c5 5c       	subi	r28, 0xC5	; 197
    563a:	d0 40       	sbci	r29, 0x00	; 0
    563c:	00 97       	sbiw	r24, 0x00	; 0
    563e:	71 f0       	breq	.+28     	; 0x565c <main+0xf88>
    5640:	cb 53       	subi	r28, 0x3B	; 59
    5642:	df 4f       	sbci	r29, 0xFF	; 255
    5644:	e8 81       	ld	r30, Y
    5646:	f9 81       	ldd	r31, Y+1	; 0x01
    5648:	c5 5c       	subi	r28, 0xC5	; 197
    564a:	d0 40       	sbci	r29, 0x00	; 0
    564c:	e1 30       	cpi	r30, 0x01	; 1
    564e:	f1 05       	cpc	r31, r1
    5650:	49 f4       	brne	.+18     	; 0x5664 <main+0xf90>
			{
			case 1:
				CLCD_vSendString(" AM");
    5652:	8a ee       	ldi	r24, 0xEA	; 234
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    565a:	04 c0       	rjmp	.+8      	; 0x5664 <main+0xf90>
				break;
			case 0:
				CLCD_vSendString(" PM");
    565c:	8e ee       	ldi	r24, 0xEE	; 238
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				break;
			}
			CLCD_vSetPosition(3, 1);
    5664:	83 e0       	ldi	r24, 0x03	; 3
    5666:	61 e0       	ldi	r22, 0x01	; 1
    5668:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Press any key");
    566c:	82 ef       	ldi	r24, 0xF2	; 242
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    5674:	84 e0       	ldi	r24, 0x04	; 4
    5676:	61 e0       	ldi	r22, 0x01	; 1
    5678:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("to close");
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	91 e0       	ldi	r25, 0x01	; 1
    5680:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

			while (1)
			{
				KPD_Press = KPD_u8GetPressed();
    5684:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    5688:	80 93 9a 03 	sts	0x039A, r24
				if (KPD_Press != NOTPRESSED)
    568c:	80 91 9a 03 	lds	r24, 0x039A
    5690:	8f 3f       	cpi	r24, 0xFF	; 255
    5692:	09 f0       	breq	.+2      	; 0x5696 <main+0xfc2>
    5694:	c7 c4       	rjmp	.+2446   	; 0x6024 <main+0x1950>
					break;
				}
				/* Display time on seven-segment displays using POV theorem */

				// Display seconds (units)
				SSD_vDisable(seven_seg5);
    5696:	40 91 6f 03 	lds	r20, 0x036F
    569a:	50 91 70 03 	lds	r21, 0x0370
    569e:	60 91 71 03 	lds	r22, 0x0371
    56a2:	70 91 72 03 	lds	r23, 0x0372
    56a6:	80 91 73 03 	lds	r24, 0x0373
    56aa:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg0);
    56ae:	40 91 56 03 	lds	r20, 0x0356
    56b2:	50 91 57 03 	lds	r21, 0x0357
    56b6:	60 91 58 03 	lds	r22, 0x0358
    56ba:	70 91 59 03 	lds	r23, 0x0359
    56be:	80 91 5a 03 	lds	r24, 0x035A
    56c2:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg0, Time_Second % 10);
    56c6:	80 91 97 03 	lds	r24, 0x0397
    56ca:	9a e0       	ldi	r25, 0x0A	; 10
    56cc:	69 2f       	mov	r22, r25
    56ce:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    56d2:	89 2f       	mov	r24, r25
    56d4:	98 2f       	mov	r25, r24
    56d6:	40 91 56 03 	lds	r20, 0x0356
    56da:	50 91 57 03 	lds	r21, 0x0357
    56de:	60 91 58 03 	lds	r22, 0x0358
    56e2:	70 91 59 03 	lds	r23, 0x0359
    56e6:	80 91 5a 03 	lds	r24, 0x035A
    56ea:	29 2f       	mov	r18, r25
    56ec:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    56f0:	fe 01       	movw	r30, r28
    56f2:	e1 5a       	subi	r30, 0xA1	; 161
    56f4:	ff 4f       	sbci	r31, 0xFF	; 255
    56f6:	80 e0       	ldi	r24, 0x00	; 0
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	a0 ea       	ldi	r26, 0xA0	; 160
    56fc:	b0 e4       	ldi	r27, 0x40	; 64
    56fe:	80 83       	st	Z, r24
    5700:	91 83       	std	Z+1, r25	; 0x01
    5702:	a2 83       	std	Z+2, r26	; 0x02
    5704:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5706:	8e 01       	movw	r16, r28
    5708:	05 5a       	subi	r16, 0xA5	; 165
    570a:	1f 4f       	sbci	r17, 0xFF	; 255
    570c:	fe 01       	movw	r30, r28
    570e:	e1 5a       	subi	r30, 0xA1	; 161
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	60 81       	ld	r22, Z
    5714:	71 81       	ldd	r23, Z+1	; 0x01
    5716:	82 81       	ldd	r24, Z+2	; 0x02
    5718:	93 81       	ldd	r25, Z+3	; 0x03
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	4a ef       	ldi	r20, 0xFA	; 250
    5720:	54 e4       	ldi	r21, 0x44	; 68
    5722:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5726:	dc 01       	movw	r26, r24
    5728:	cb 01       	movw	r24, r22
    572a:	f8 01       	movw	r30, r16
    572c:	80 83       	st	Z, r24
    572e:	91 83       	std	Z+1, r25	; 0x01
    5730:	a2 83       	std	Z+2, r26	; 0x02
    5732:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5734:	fe 01       	movw	r30, r28
    5736:	e5 5a       	subi	r30, 0xA5	; 165
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	60 81       	ld	r22, Z
    573c:	71 81       	ldd	r23, Z+1	; 0x01
    573e:	82 81       	ldd	r24, Z+2	; 0x02
    5740:	93 81       	ldd	r25, Z+3	; 0x03
    5742:	20 e0       	ldi	r18, 0x00	; 0
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	40 e8       	ldi	r20, 0x80	; 128
    5748:	5f e3       	ldi	r21, 0x3F	; 63
    574a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    574e:	88 23       	and	r24, r24
    5750:	44 f4       	brge	.+16     	; 0x5762 <main+0x108e>
		__ticks = 1;
    5752:	fe 01       	movw	r30, r28
    5754:	e7 5a       	subi	r30, 0xA7	; 167
    5756:	ff 4f       	sbci	r31, 0xFF	; 255
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	91 83       	std	Z+1, r25	; 0x01
    575e:	80 83       	st	Z, r24
    5760:	64 c0       	rjmp	.+200    	; 0x582a <main+0x1156>
	else if (__tmp > 65535)
    5762:	fe 01       	movw	r30, r28
    5764:	e5 5a       	subi	r30, 0xA5	; 165
    5766:	ff 4f       	sbci	r31, 0xFF	; 255
    5768:	60 81       	ld	r22, Z
    576a:	71 81       	ldd	r23, Z+1	; 0x01
    576c:	82 81       	ldd	r24, Z+2	; 0x02
    576e:	93 81       	ldd	r25, Z+3	; 0x03
    5770:	20 e0       	ldi	r18, 0x00	; 0
    5772:	3f ef       	ldi	r19, 0xFF	; 255
    5774:	4f e7       	ldi	r20, 0x7F	; 127
    5776:	57 e4       	ldi	r21, 0x47	; 71
    5778:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    577c:	18 16       	cp	r1, r24
    577e:	0c f0       	brlt	.+2      	; 0x5782 <main+0x10ae>
    5780:	43 c0       	rjmp	.+134    	; 0x5808 <main+0x1134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5782:	fe 01       	movw	r30, r28
    5784:	e1 5a       	subi	r30, 0xA1	; 161
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	60 81       	ld	r22, Z
    578a:	71 81       	ldd	r23, Z+1	; 0x01
    578c:	82 81       	ldd	r24, Z+2	; 0x02
    578e:	93 81       	ldd	r25, Z+3	; 0x03
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	40 e2       	ldi	r20, 0x20	; 32
    5796:	51 e4       	ldi	r21, 0x41	; 65
    5798:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    579c:	dc 01       	movw	r26, r24
    579e:	cb 01       	movw	r24, r22
    57a0:	8e 01       	movw	r16, r28
    57a2:	07 5a       	subi	r16, 0xA7	; 167
    57a4:	1f 4f       	sbci	r17, 0xFF	; 255
    57a6:	bc 01       	movw	r22, r24
    57a8:	cd 01       	movw	r24, r26
    57aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	f8 01       	movw	r30, r16
    57b4:	91 83       	std	Z+1, r25	; 0x01
    57b6:	80 83       	st	Z, r24
    57b8:	1f c0       	rjmp	.+62     	; 0x57f8 <main+0x1124>
    57ba:	fe 01       	movw	r30, r28
    57bc:	e9 5a       	subi	r30, 0xA9	; 169
    57be:	ff 4f       	sbci	r31, 0xFF	; 255
    57c0:	88 ec       	ldi	r24, 0xC8	; 200
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	91 83       	std	Z+1, r25	; 0x01
    57c6:	80 83       	st	Z, r24
    57c8:	fe 01       	movw	r30, r28
    57ca:	e9 5a       	subi	r30, 0xA9	; 169
    57cc:	ff 4f       	sbci	r31, 0xFF	; 255
    57ce:	80 81       	ld	r24, Z
    57d0:	91 81       	ldd	r25, Z+1	; 0x01
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	f1 f7       	brne	.-4      	; 0x57d2 <main+0x10fe>
    57d6:	fe 01       	movw	r30, r28
    57d8:	e9 5a       	subi	r30, 0xA9	; 169
    57da:	ff 4f       	sbci	r31, 0xFF	; 255
    57dc:	91 83       	std	Z+1, r25	; 0x01
    57de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57e0:	de 01       	movw	r26, r28
    57e2:	a7 5a       	subi	r26, 0xA7	; 167
    57e4:	bf 4f       	sbci	r27, 0xFF	; 255
    57e6:	fe 01       	movw	r30, r28
    57e8:	e7 5a       	subi	r30, 0xA7	; 167
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	80 81       	ld	r24, Z
    57ee:	91 81       	ldd	r25, Z+1	; 0x01
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	11 96       	adiw	r26, 0x01	; 1
    57f4:	9c 93       	st	X, r25
    57f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57f8:	fe 01       	movw	r30, r28
    57fa:	e7 5a       	subi	r30, 0xA7	; 167
    57fc:	ff 4f       	sbci	r31, 0xFF	; 255
    57fe:	80 81       	ld	r24, Z
    5800:	91 81       	ldd	r25, Z+1	; 0x01
    5802:	00 97       	sbiw	r24, 0x00	; 0
    5804:	d1 f6       	brne	.-76     	; 0x57ba <main+0x10e6>
    5806:	27 c0       	rjmp	.+78     	; 0x5856 <main+0x1182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5808:	8e 01       	movw	r16, r28
    580a:	07 5a       	subi	r16, 0xA7	; 167
    580c:	1f 4f       	sbci	r17, 0xFF	; 255
    580e:	fe 01       	movw	r30, r28
    5810:	e5 5a       	subi	r30, 0xA5	; 165
    5812:	ff 4f       	sbci	r31, 0xFF	; 255
    5814:	60 81       	ld	r22, Z
    5816:	71 81       	ldd	r23, Z+1	; 0x01
    5818:	82 81       	ldd	r24, Z+2	; 0x02
    581a:	93 81       	ldd	r25, Z+3	; 0x03
    581c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5820:	dc 01       	movw	r26, r24
    5822:	cb 01       	movw	r24, r22
    5824:	f8 01       	movw	r30, r16
    5826:	91 83       	std	Z+1, r25	; 0x01
    5828:	80 83       	st	Z, r24
    582a:	de 01       	movw	r26, r28
    582c:	ab 5a       	subi	r26, 0xAB	; 171
    582e:	bf 4f       	sbci	r27, 0xFF	; 255
    5830:	fe 01       	movw	r30, r28
    5832:	e7 5a       	subi	r30, 0xA7	; 167
    5834:	ff 4f       	sbci	r31, 0xFF	; 255
    5836:	80 81       	ld	r24, Z
    5838:	91 81       	ldd	r25, Z+1	; 0x01
    583a:	8d 93       	st	X+, r24
    583c:	9c 93       	st	X, r25
    583e:	fe 01       	movw	r30, r28
    5840:	eb 5a       	subi	r30, 0xAB	; 171
    5842:	ff 4f       	sbci	r31, 0xFF	; 255
    5844:	80 81       	ld	r24, Z
    5846:	91 81       	ldd	r25, Z+1	; 0x01
    5848:	01 97       	sbiw	r24, 0x01	; 1
    584a:	f1 f7       	brne	.-4      	; 0x5848 <main+0x1174>
    584c:	fe 01       	movw	r30, r28
    584e:	eb 5a       	subi	r30, 0xAB	; 171
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	91 83       	std	Z+1, r25	; 0x01
    5854:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display seconds (tens)
				SSD_vDisable(seven_seg0);
    5856:	40 91 56 03 	lds	r20, 0x0356
    585a:	50 91 57 03 	lds	r21, 0x0357
    585e:	60 91 58 03 	lds	r22, 0x0358
    5862:	70 91 59 03 	lds	r23, 0x0359
    5866:	80 91 5a 03 	lds	r24, 0x035A
    586a:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg1);
    586e:	40 91 5b 03 	lds	r20, 0x035B
    5872:	50 91 5c 03 	lds	r21, 0x035C
    5876:	60 91 5d 03 	lds	r22, 0x035D
    587a:	70 91 5e 03 	lds	r23, 0x035E
    587e:	80 91 5f 03 	lds	r24, 0x035F
    5882:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg1, Time_Second / 10);
    5886:	80 91 97 03 	lds	r24, 0x0397
    588a:	9a e0       	ldi	r25, 0x0A	; 10
    588c:	69 2f       	mov	r22, r25
    588e:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5892:	98 2f       	mov	r25, r24
    5894:	40 91 5b 03 	lds	r20, 0x035B
    5898:	50 91 5c 03 	lds	r21, 0x035C
    589c:	60 91 5d 03 	lds	r22, 0x035D
    58a0:	70 91 5e 03 	lds	r23, 0x035E
    58a4:	80 91 5f 03 	lds	r24, 0x035F
    58a8:	29 2f       	mov	r18, r25
    58aa:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    58ae:	fe 01       	movw	r30, r28
    58b0:	ef 5a       	subi	r30, 0xAF	; 175
    58b2:	ff 4f       	sbci	r31, 0xFF	; 255
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	a0 ea       	ldi	r26, 0xA0	; 160
    58ba:	b0 e4       	ldi	r27, 0x40	; 64
    58bc:	80 83       	st	Z, r24
    58be:	91 83       	std	Z+1, r25	; 0x01
    58c0:	a2 83       	std	Z+2, r26	; 0x02
    58c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58c4:	8e 01       	movw	r16, r28
    58c6:	03 5b       	subi	r16, 0xB3	; 179
    58c8:	1f 4f       	sbci	r17, 0xFF	; 255
    58ca:	fe 01       	movw	r30, r28
    58cc:	ef 5a       	subi	r30, 0xAF	; 175
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	60 81       	ld	r22, Z
    58d2:	71 81       	ldd	r23, Z+1	; 0x01
    58d4:	82 81       	ldd	r24, Z+2	; 0x02
    58d6:	93 81       	ldd	r25, Z+3	; 0x03
    58d8:	20 e0       	ldi	r18, 0x00	; 0
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	4a ef       	ldi	r20, 0xFA	; 250
    58de:	54 e4       	ldi	r21, 0x44	; 68
    58e0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	f8 01       	movw	r30, r16
    58ea:	80 83       	st	Z, r24
    58ec:	91 83       	std	Z+1, r25	; 0x01
    58ee:	a2 83       	std	Z+2, r26	; 0x02
    58f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58f2:	fe 01       	movw	r30, r28
    58f4:	e3 5b       	subi	r30, 0xB3	; 179
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	60 81       	ld	r22, Z
    58fa:	71 81       	ldd	r23, Z+1	; 0x01
    58fc:	82 81       	ldd	r24, Z+2	; 0x02
    58fe:	93 81       	ldd	r25, Z+3	; 0x03
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	40 e8       	ldi	r20, 0x80	; 128
    5906:	5f e3       	ldi	r21, 0x3F	; 63
    5908:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    590c:	88 23       	and	r24, r24
    590e:	44 f4       	brge	.+16     	; 0x5920 <main+0x124c>
		__ticks = 1;
    5910:	fe 01       	movw	r30, r28
    5912:	e5 5b       	subi	r30, 0xB5	; 181
    5914:	ff 4f       	sbci	r31, 0xFF	; 255
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	91 83       	std	Z+1, r25	; 0x01
    591c:	80 83       	st	Z, r24
    591e:	64 c0       	rjmp	.+200    	; 0x59e8 <main+0x1314>
	else if (__tmp > 65535)
    5920:	fe 01       	movw	r30, r28
    5922:	e3 5b       	subi	r30, 0xB3	; 179
    5924:	ff 4f       	sbci	r31, 0xFF	; 255
    5926:	60 81       	ld	r22, Z
    5928:	71 81       	ldd	r23, Z+1	; 0x01
    592a:	82 81       	ldd	r24, Z+2	; 0x02
    592c:	93 81       	ldd	r25, Z+3	; 0x03
    592e:	20 e0       	ldi	r18, 0x00	; 0
    5930:	3f ef       	ldi	r19, 0xFF	; 255
    5932:	4f e7       	ldi	r20, 0x7F	; 127
    5934:	57 e4       	ldi	r21, 0x47	; 71
    5936:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    593a:	18 16       	cp	r1, r24
    593c:	0c f0       	brlt	.+2      	; 0x5940 <main+0x126c>
    593e:	43 c0       	rjmp	.+134    	; 0x59c6 <main+0x12f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5940:	fe 01       	movw	r30, r28
    5942:	ef 5a       	subi	r30, 0xAF	; 175
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	60 81       	ld	r22, Z
    5948:	71 81       	ldd	r23, Z+1	; 0x01
    594a:	82 81       	ldd	r24, Z+2	; 0x02
    594c:	93 81       	ldd	r25, Z+3	; 0x03
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	40 e2       	ldi	r20, 0x20	; 32
    5954:	51 e4       	ldi	r21, 0x41	; 65
    5956:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	8e 01       	movw	r16, r28
    5960:	05 5b       	subi	r16, 0xB5	; 181
    5962:	1f 4f       	sbci	r17, 0xFF	; 255
    5964:	bc 01       	movw	r22, r24
    5966:	cd 01       	movw	r24, r26
    5968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	f8 01       	movw	r30, r16
    5972:	91 83       	std	Z+1, r25	; 0x01
    5974:	80 83       	st	Z, r24
    5976:	1f c0       	rjmp	.+62     	; 0x59b6 <main+0x12e2>
    5978:	fe 01       	movw	r30, r28
    597a:	e7 5b       	subi	r30, 0xB7	; 183
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	88 ec       	ldi	r24, 0xC8	; 200
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	91 83       	std	Z+1, r25	; 0x01
    5984:	80 83       	st	Z, r24
    5986:	fe 01       	movw	r30, r28
    5988:	e7 5b       	subi	r30, 0xB7	; 183
    598a:	ff 4f       	sbci	r31, 0xFF	; 255
    598c:	80 81       	ld	r24, Z
    598e:	91 81       	ldd	r25, Z+1	; 0x01
    5990:	01 97       	sbiw	r24, 0x01	; 1
    5992:	f1 f7       	brne	.-4      	; 0x5990 <main+0x12bc>
    5994:	fe 01       	movw	r30, r28
    5996:	e7 5b       	subi	r30, 0xB7	; 183
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	91 83       	std	Z+1, r25	; 0x01
    599c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    599e:	de 01       	movw	r26, r28
    59a0:	a5 5b       	subi	r26, 0xB5	; 181
    59a2:	bf 4f       	sbci	r27, 0xFF	; 255
    59a4:	fe 01       	movw	r30, r28
    59a6:	e5 5b       	subi	r30, 0xB5	; 181
    59a8:	ff 4f       	sbci	r31, 0xFF	; 255
    59aa:	80 81       	ld	r24, Z
    59ac:	91 81       	ldd	r25, Z+1	; 0x01
    59ae:	01 97       	sbiw	r24, 0x01	; 1
    59b0:	11 96       	adiw	r26, 0x01	; 1
    59b2:	9c 93       	st	X, r25
    59b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b6:	fe 01       	movw	r30, r28
    59b8:	e5 5b       	subi	r30, 0xB5	; 181
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	80 81       	ld	r24, Z
    59be:	91 81       	ldd	r25, Z+1	; 0x01
    59c0:	00 97       	sbiw	r24, 0x00	; 0
    59c2:	d1 f6       	brne	.-76     	; 0x5978 <main+0x12a4>
    59c4:	27 c0       	rjmp	.+78     	; 0x5a14 <main+0x1340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c6:	8e 01       	movw	r16, r28
    59c8:	05 5b       	subi	r16, 0xB5	; 181
    59ca:	1f 4f       	sbci	r17, 0xFF	; 255
    59cc:	fe 01       	movw	r30, r28
    59ce:	e3 5b       	subi	r30, 0xB3	; 179
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	60 81       	ld	r22, Z
    59d4:	71 81       	ldd	r23, Z+1	; 0x01
    59d6:	82 81       	ldd	r24, Z+2	; 0x02
    59d8:	93 81       	ldd	r25, Z+3	; 0x03
    59da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	f8 01       	movw	r30, r16
    59e4:	91 83       	std	Z+1, r25	; 0x01
    59e6:	80 83       	st	Z, r24
    59e8:	de 01       	movw	r26, r28
    59ea:	a9 5b       	subi	r26, 0xB9	; 185
    59ec:	bf 4f       	sbci	r27, 0xFF	; 255
    59ee:	fe 01       	movw	r30, r28
    59f0:	e5 5b       	subi	r30, 0xB5	; 181
    59f2:	ff 4f       	sbci	r31, 0xFF	; 255
    59f4:	80 81       	ld	r24, Z
    59f6:	91 81       	ldd	r25, Z+1	; 0x01
    59f8:	8d 93       	st	X+, r24
    59fa:	9c 93       	st	X, r25
    59fc:	fe 01       	movw	r30, r28
    59fe:	e9 5b       	subi	r30, 0xB9	; 185
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	80 81       	ld	r24, Z
    5a04:	91 81       	ldd	r25, Z+1	; 0x01
    5a06:	01 97       	sbiw	r24, 0x01	; 1
    5a08:	f1 f7       	brne	.-4      	; 0x5a06 <main+0x1332>
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e9 5b       	subi	r30, 0xB9	; 185
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	91 83       	std	Z+1, r25	; 0x01
    5a12:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display minutes (units)
				SSD_vDisable(seven_seg1);
    5a14:	40 91 5b 03 	lds	r20, 0x035B
    5a18:	50 91 5c 03 	lds	r21, 0x035C
    5a1c:	60 91 5d 03 	lds	r22, 0x035D
    5a20:	70 91 5e 03 	lds	r23, 0x035E
    5a24:	80 91 5f 03 	lds	r24, 0x035F
    5a28:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg2);
    5a2c:	40 91 60 03 	lds	r20, 0x0360
    5a30:	50 91 61 03 	lds	r21, 0x0361
    5a34:	60 91 62 03 	lds	r22, 0x0362
    5a38:	70 91 63 03 	lds	r23, 0x0363
    5a3c:	80 91 64 03 	lds	r24, 0x0364
    5a40:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg2, Time_Minute % 10);
    5a44:	80 91 96 03 	lds	r24, 0x0396
    5a48:	9a e0       	ldi	r25, 0x0A	; 10
    5a4a:	69 2f       	mov	r22, r25
    5a4c:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5a50:	89 2f       	mov	r24, r25
    5a52:	98 2f       	mov	r25, r24
    5a54:	40 91 60 03 	lds	r20, 0x0360
    5a58:	50 91 61 03 	lds	r21, 0x0361
    5a5c:	60 91 62 03 	lds	r22, 0x0362
    5a60:	70 91 63 03 	lds	r23, 0x0363
    5a64:	80 91 64 03 	lds	r24, 0x0364
    5a68:	29 2f       	mov	r18, r25
    5a6a:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5a6e:	fe 01       	movw	r30, r28
    5a70:	ed 5b       	subi	r30, 0xBD	; 189
    5a72:	ff 4f       	sbci	r31, 0xFF	; 255
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	a0 ea       	ldi	r26, 0xA0	; 160
    5a7a:	b0 e4       	ldi	r27, 0x40	; 64
    5a7c:	80 83       	st	Z, r24
    5a7e:	91 83       	std	Z+1, r25	; 0x01
    5a80:	a2 83       	std	Z+2, r26	; 0x02
    5a82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a84:	8e 01       	movw	r16, r28
    5a86:	01 5c       	subi	r16, 0xC1	; 193
    5a88:	1f 4f       	sbci	r17, 0xFF	; 255
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	ed 5b       	subi	r30, 0xBD	; 189
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	60 81       	ld	r22, Z
    5a92:	71 81       	ldd	r23, Z+1	; 0x01
    5a94:	82 81       	ldd	r24, Z+2	; 0x02
    5a96:	93 81       	ldd	r25, Z+3	; 0x03
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	4a ef       	ldi	r20, 0xFA	; 250
    5a9e:	54 e4       	ldi	r21, 0x44	; 68
    5aa0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5aa4:	dc 01       	movw	r26, r24
    5aa6:	cb 01       	movw	r24, r22
    5aa8:	f8 01       	movw	r30, r16
    5aaa:	80 83       	st	Z, r24
    5aac:	91 83       	std	Z+1, r25	; 0x01
    5aae:	a2 83       	std	Z+2, r26	; 0x02
    5ab0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ab2:	fe 01       	movw	r30, r28
    5ab4:	ff 96       	adiw	r30, 0x3f	; 63
    5ab6:	60 81       	ld	r22, Z
    5ab8:	71 81       	ldd	r23, Z+1	; 0x01
    5aba:	82 81       	ldd	r24, Z+2	; 0x02
    5abc:	93 81       	ldd	r25, Z+3	; 0x03
    5abe:	20 e0       	ldi	r18, 0x00	; 0
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	40 e8       	ldi	r20, 0x80	; 128
    5ac4:	5f e3       	ldi	r21, 0x3F	; 63
    5ac6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5aca:	88 23       	and	r24, r24
    5acc:	2c f4       	brge	.+10     	; 0x5ad8 <main+0x1404>
		__ticks = 1;
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	9e af       	std	Y+62, r25	; 0x3e
    5ad4:	8d af       	std	Y+61, r24	; 0x3d
    5ad6:	46 c0       	rjmp	.+140    	; 0x5b64 <main+0x1490>
	else if (__tmp > 65535)
    5ad8:	fe 01       	movw	r30, r28
    5ada:	ff 96       	adiw	r30, 0x3f	; 63
    5adc:	60 81       	ld	r22, Z
    5ade:	71 81       	ldd	r23, Z+1	; 0x01
    5ae0:	82 81       	ldd	r24, Z+2	; 0x02
    5ae2:	93 81       	ldd	r25, Z+3	; 0x03
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	3f ef       	ldi	r19, 0xFF	; 255
    5ae8:	4f e7       	ldi	r20, 0x7F	; 127
    5aea:	57 e4       	ldi	r21, 0x47	; 71
    5aec:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5af0:	18 16       	cp	r1, r24
    5af2:	64 f5       	brge	.+88     	; 0x5b4c <main+0x1478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af4:	fe 01       	movw	r30, r28
    5af6:	ed 5b       	subi	r30, 0xBD	; 189
    5af8:	ff 4f       	sbci	r31, 0xFF	; 255
    5afa:	60 81       	ld	r22, Z
    5afc:	71 81       	ldd	r23, Z+1	; 0x01
    5afe:	82 81       	ldd	r24, Z+2	; 0x02
    5b00:	93 81       	ldd	r25, Z+3	; 0x03
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	40 e2       	ldi	r20, 0x20	; 32
    5b08:	51 e4       	ldi	r21, 0x41	; 65
    5b0a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	bc 01       	movw	r22, r24
    5b14:	cd 01       	movw	r24, r26
    5b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	cb 01       	movw	r24, r22
    5b1e:	9e af       	std	Y+62, r25	; 0x3e
    5b20:	8d af       	std	Y+61, r24	; 0x3d
    5b22:	0f c0       	rjmp	.+30     	; 0x5b42 <main+0x146e>
    5b24:	88 ec       	ldi	r24, 0xC8	; 200
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	9c af       	std	Y+60, r25	; 0x3c
    5b2a:	8b af       	std	Y+59, r24	; 0x3b
    5b2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	f1 f7       	brne	.-4      	; 0x5b30 <main+0x145c>
    5b34:	9c af       	std	Y+60, r25	; 0x3c
    5b36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b38:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b3c:	01 97       	sbiw	r24, 0x01	; 1
    5b3e:	9e af       	std	Y+62, r25	; 0x3e
    5b40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b42:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b44:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b46:	00 97       	sbiw	r24, 0x00	; 0
    5b48:	69 f7       	brne	.-38     	; 0x5b24 <main+0x1450>
    5b4a:	16 c0       	rjmp	.+44     	; 0x5b78 <main+0x14a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	ff 96       	adiw	r30, 0x3f	; 63
    5b50:	60 81       	ld	r22, Z
    5b52:	71 81       	ldd	r23, Z+1	; 0x01
    5b54:	82 81       	ldd	r24, Z+2	; 0x02
    5b56:	93 81       	ldd	r25, Z+3	; 0x03
    5b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	9e af       	std	Y+62, r25	; 0x3e
    5b62:	8d af       	std	Y+61, r24	; 0x3d
    5b64:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b66:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b68:	9a af       	std	Y+58, r25	; 0x3a
    5b6a:	89 af       	std	Y+57, r24	; 0x39
    5b6c:	89 ad       	ldd	r24, Y+57	; 0x39
    5b6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b70:	01 97       	sbiw	r24, 0x01	; 1
    5b72:	f1 f7       	brne	.-4      	; 0x5b70 <main+0x149c>
    5b74:	9a af       	std	Y+58, r25	; 0x3a
    5b76:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5);

				// Display minutes (tens)
				SSD_vDisable(seven_seg2);
    5b78:	40 91 60 03 	lds	r20, 0x0360
    5b7c:	50 91 61 03 	lds	r21, 0x0361
    5b80:	60 91 62 03 	lds	r22, 0x0362
    5b84:	70 91 63 03 	lds	r23, 0x0363
    5b88:	80 91 64 03 	lds	r24, 0x0364
    5b8c:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg3);
    5b90:	40 91 65 03 	lds	r20, 0x0365
    5b94:	50 91 66 03 	lds	r21, 0x0366
    5b98:	60 91 67 03 	lds	r22, 0x0367
    5b9c:	70 91 68 03 	lds	r23, 0x0368
    5ba0:	80 91 69 03 	lds	r24, 0x0369
    5ba4:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg3, Time_Minute / 10);
    5ba8:	80 91 96 03 	lds	r24, 0x0396
    5bac:	9a e0       	ldi	r25, 0x0A	; 10
    5bae:	69 2f       	mov	r22, r25
    5bb0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5bb4:	98 2f       	mov	r25, r24
    5bb6:	40 91 65 03 	lds	r20, 0x0365
    5bba:	50 91 66 03 	lds	r21, 0x0366
    5bbe:	60 91 67 03 	lds	r22, 0x0367
    5bc2:	70 91 68 03 	lds	r23, 0x0368
    5bc6:	80 91 69 03 	lds	r24, 0x0369
    5bca:	29 2f       	mov	r18, r25
    5bcc:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	a0 ea       	ldi	r26, 0xA0	; 160
    5bd6:	b0 e4       	ldi	r27, 0x40	; 64
    5bd8:	8d ab       	std	Y+53, r24	; 0x35
    5bda:	9e ab       	std	Y+54, r25	; 0x36
    5bdc:	af ab       	std	Y+55, r26	; 0x37
    5bde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5be0:	6d a9       	ldd	r22, Y+53	; 0x35
    5be2:	7e a9       	ldd	r23, Y+54	; 0x36
    5be4:	8f a9       	ldd	r24, Y+55	; 0x37
    5be6:	98 ad       	ldd	r25, Y+56	; 0x38
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	4a ef       	ldi	r20, 0xFA	; 250
    5bee:	54 e4       	ldi	r21, 0x44	; 68
    5bf0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	89 ab       	std	Y+49, r24	; 0x31
    5bfa:	9a ab       	std	Y+50, r25	; 0x32
    5bfc:	ab ab       	std	Y+51, r26	; 0x33
    5bfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5c00:	69 a9       	ldd	r22, Y+49	; 0x31
    5c02:	7a a9       	ldd	r23, Y+50	; 0x32
    5c04:	8b a9       	ldd	r24, Y+51	; 0x33
    5c06:	9c a9       	ldd	r25, Y+52	; 0x34
    5c08:	20 e0       	ldi	r18, 0x00	; 0
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	40 e8       	ldi	r20, 0x80	; 128
    5c0e:	5f e3       	ldi	r21, 0x3F	; 63
    5c10:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5c14:	88 23       	and	r24, r24
    5c16:	2c f4       	brge	.+10     	; 0x5c22 <main+0x154e>
		__ticks = 1;
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	98 ab       	std	Y+48, r25	; 0x30
    5c1e:	8f a7       	std	Y+47, r24	; 0x2f
    5c20:	3f c0       	rjmp	.+126    	; 0x5ca0 <main+0x15cc>
	else if (__tmp > 65535)
    5c22:	69 a9       	ldd	r22, Y+49	; 0x31
    5c24:	7a a9       	ldd	r23, Y+50	; 0x32
    5c26:	8b a9       	ldd	r24, Y+51	; 0x33
    5c28:	9c a9       	ldd	r25, Y+52	; 0x34
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	3f ef       	ldi	r19, 0xFF	; 255
    5c2e:	4f e7       	ldi	r20, 0x7F	; 127
    5c30:	57 e4       	ldi	r21, 0x47	; 71
    5c32:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5c36:	18 16       	cp	r1, r24
    5c38:	4c f5       	brge	.+82     	; 0x5c8c <main+0x15b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3a:	6d a9       	ldd	r22, Y+53	; 0x35
    5c3c:	7e a9       	ldd	r23, Y+54	; 0x36
    5c3e:	8f a9       	ldd	r24, Y+55	; 0x37
    5c40:	98 ad       	ldd	r25, Y+56	; 0x38
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	40 e2       	ldi	r20, 0x20	; 32
    5c48:	51 e4       	ldi	r21, 0x41	; 65
    5c4a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c4e:	dc 01       	movw	r26, r24
    5c50:	cb 01       	movw	r24, r22
    5c52:	bc 01       	movw	r22, r24
    5c54:	cd 01       	movw	r24, r26
    5c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	cb 01       	movw	r24, r22
    5c5e:	98 ab       	std	Y+48, r25	; 0x30
    5c60:	8f a7       	std	Y+47, r24	; 0x2f
    5c62:	0f c0       	rjmp	.+30     	; 0x5c82 <main+0x15ae>
    5c64:	88 ec       	ldi	r24, 0xC8	; 200
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	9e a7       	std	Y+46, r25	; 0x2e
    5c6a:	8d a7       	std	Y+45, r24	; 0x2d
    5c6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c70:	01 97       	sbiw	r24, 0x01	; 1
    5c72:	f1 f7       	brne	.-4      	; 0x5c70 <main+0x159c>
    5c74:	9e a7       	std	Y+46, r25	; 0x2e
    5c76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    5c7c:	01 97       	sbiw	r24, 0x01	; 1
    5c7e:	98 ab       	std	Y+48, r25	; 0x30
    5c80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c84:	98 a9       	ldd	r25, Y+48	; 0x30
    5c86:	00 97       	sbiw	r24, 0x00	; 0
    5c88:	69 f7       	brne	.-38     	; 0x5c64 <main+0x1590>
    5c8a:	14 c0       	rjmp	.+40     	; 0x5cb4 <main+0x15e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c8c:	69 a9       	ldd	r22, Y+49	; 0x31
    5c8e:	7a a9       	ldd	r23, Y+50	; 0x32
    5c90:	8b a9       	ldd	r24, Y+51	; 0x33
    5c92:	9c a9       	ldd	r25, Y+52	; 0x34
    5c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c98:	dc 01       	movw	r26, r24
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	98 ab       	std	Y+48, r25	; 0x30
    5c9e:	8f a7       	std	Y+47, r24	; 0x2f
    5ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    5ca4:	9c a7       	std	Y+44, r25	; 0x2c
    5ca6:	8b a7       	std	Y+43, r24	; 0x2b
    5ca8:	8b a5       	ldd	r24, Y+43	; 0x2b
    5caa:	9c a5       	ldd	r25, Y+44	; 0x2c
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	f1 f7       	brne	.-4      	; 0x5cac <main+0x15d8>
    5cb0:	9c a7       	std	Y+44, r25	; 0x2c
    5cb2:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5);

				// Display hours (units)
				SSD_vDisable(seven_seg3);
    5cb4:	40 91 65 03 	lds	r20, 0x0365
    5cb8:	50 91 66 03 	lds	r21, 0x0366
    5cbc:	60 91 67 03 	lds	r22, 0x0367
    5cc0:	70 91 68 03 	lds	r23, 0x0368
    5cc4:	80 91 69 03 	lds	r24, 0x0369
    5cc8:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg4);
    5ccc:	40 91 6a 03 	lds	r20, 0x036A
    5cd0:	50 91 6b 03 	lds	r21, 0x036B
    5cd4:	60 91 6c 03 	lds	r22, 0x036C
    5cd8:	70 91 6d 03 	lds	r23, 0x036D
    5cdc:	80 91 6e 03 	lds	r24, 0x036E
    5ce0:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg4, Time_Hour % 10);
    5ce4:	80 91 54 03 	lds	r24, 0x0354
    5ce8:	9a e0       	ldi	r25, 0x0A	; 10
    5cea:	69 2f       	mov	r22, r25
    5cec:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5cf0:	89 2f       	mov	r24, r25
    5cf2:	98 2f       	mov	r25, r24
    5cf4:	40 91 6a 03 	lds	r20, 0x036A
    5cf8:	50 91 6b 03 	lds	r21, 0x036B
    5cfc:	60 91 6c 03 	lds	r22, 0x036C
    5d00:	70 91 6d 03 	lds	r23, 0x036D
    5d04:	80 91 6e 03 	lds	r24, 0x036E
    5d08:	29 2f       	mov	r18, r25
    5d0a:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	a0 ea       	ldi	r26, 0xA0	; 160
    5d14:	b0 e4       	ldi	r27, 0x40	; 64
    5d16:	8f a3       	std	Y+39, r24	; 0x27
    5d18:	98 a7       	std	Y+40, r25	; 0x28
    5d1a:	a9 a7       	std	Y+41, r26	; 0x29
    5d1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    5d20:	78 a5       	ldd	r23, Y+40	; 0x28
    5d22:	89 a5       	ldd	r24, Y+41	; 0x29
    5d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d26:	20 e0       	ldi	r18, 0x00	; 0
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	4a ef       	ldi	r20, 0xFA	; 250
    5d2c:	54 e4       	ldi	r21, 0x44	; 68
    5d2e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5d32:	dc 01       	movw	r26, r24
    5d34:	cb 01       	movw	r24, r22
    5d36:	8b a3       	std	Y+35, r24	; 0x23
    5d38:	9c a3       	std	Y+36, r25	; 0x24
    5d3a:	ad a3       	std	Y+37, r26	; 0x25
    5d3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    5d40:	7c a1       	ldd	r23, Y+36	; 0x24
    5d42:	8d a1       	ldd	r24, Y+37	; 0x25
    5d44:	9e a1       	ldd	r25, Y+38	; 0x26
    5d46:	20 e0       	ldi	r18, 0x00	; 0
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	40 e8       	ldi	r20, 0x80	; 128
    5d4c:	5f e3       	ldi	r21, 0x3F	; 63
    5d4e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5d52:	88 23       	and	r24, r24
    5d54:	2c f4       	brge	.+10     	; 0x5d60 <main+0x168c>
		__ticks = 1;
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	9a a3       	std	Y+34, r25	; 0x22
    5d5c:	89 a3       	std	Y+33, r24	; 0x21
    5d5e:	3f c0       	rjmp	.+126    	; 0x5dde <main+0x170a>
	else if (__tmp > 65535)
    5d60:	6b a1       	ldd	r22, Y+35	; 0x23
    5d62:	7c a1       	ldd	r23, Y+36	; 0x24
    5d64:	8d a1       	ldd	r24, Y+37	; 0x25
    5d66:	9e a1       	ldd	r25, Y+38	; 0x26
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	3f ef       	ldi	r19, 0xFF	; 255
    5d6c:	4f e7       	ldi	r20, 0x7F	; 127
    5d6e:	57 e4       	ldi	r21, 0x47	; 71
    5d70:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5d74:	18 16       	cp	r1, r24
    5d76:	4c f5       	brge	.+82     	; 0x5dca <main+0x16f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d78:	6f a1       	ldd	r22, Y+39	; 0x27
    5d7a:	78 a5       	ldd	r23, Y+40	; 0x28
    5d7c:	89 a5       	ldd	r24, Y+41	; 0x29
    5d7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	40 e2       	ldi	r20, 0x20	; 32
    5d86:	51 e4       	ldi	r21, 0x41	; 65
    5d88:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	bc 01       	movw	r22, r24
    5d92:	cd 01       	movw	r24, r26
    5d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d98:	dc 01       	movw	r26, r24
    5d9a:	cb 01       	movw	r24, r22
    5d9c:	9a a3       	std	Y+34, r25	; 0x22
    5d9e:	89 a3       	std	Y+33, r24	; 0x21
    5da0:	0f c0       	rjmp	.+30     	; 0x5dc0 <main+0x16ec>
    5da2:	88 ec       	ldi	r24, 0xC8	; 200
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	98 a3       	std	Y+32, r25	; 0x20
    5da8:	8f 8f       	std	Y+31, r24	; 0x1f
    5daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5dac:	98 a1       	ldd	r25, Y+32	; 0x20
    5dae:	01 97       	sbiw	r24, 0x01	; 1
    5db0:	f1 f7       	brne	.-4      	; 0x5dae <main+0x16da>
    5db2:	98 a3       	std	Y+32, r25	; 0x20
    5db4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5db6:	89 a1       	ldd	r24, Y+33	; 0x21
    5db8:	9a a1       	ldd	r25, Y+34	; 0x22
    5dba:	01 97       	sbiw	r24, 0x01	; 1
    5dbc:	9a a3       	std	Y+34, r25	; 0x22
    5dbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    5dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    5dc4:	00 97       	sbiw	r24, 0x00	; 0
    5dc6:	69 f7       	brne	.-38     	; 0x5da2 <main+0x16ce>
    5dc8:	14 c0       	rjmp	.+40     	; 0x5df2 <main+0x171e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dca:	6b a1       	ldd	r22, Y+35	; 0x23
    5dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    5dce:	8d a1       	ldd	r24, Y+37	; 0x25
    5dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    5dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dd6:	dc 01       	movw	r26, r24
    5dd8:	cb 01       	movw	r24, r22
    5dda:	9a a3       	std	Y+34, r25	; 0x22
    5ddc:	89 a3       	std	Y+33, r24	; 0x21
    5dde:	89 a1       	ldd	r24, Y+33	; 0x21
    5de0:	9a a1       	ldd	r25, Y+34	; 0x22
    5de2:	9e 8f       	std	Y+30, r25	; 0x1e
    5de4:	8d 8f       	std	Y+29, r24	; 0x1d
    5de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5dea:	01 97       	sbiw	r24, 0x01	; 1
    5dec:	f1 f7       	brne	.-4      	; 0x5dea <main+0x1716>
    5dee:	9e 8f       	std	Y+30, r25	; 0x1e
    5df0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5);

				// Display hours (tens)
				SSD_vDisable(seven_seg4);
    5df2:	40 91 6a 03 	lds	r20, 0x036A
    5df6:	50 91 6b 03 	lds	r21, 0x036B
    5dfa:	60 91 6c 03 	lds	r22, 0x036C
    5dfe:	70 91 6d 03 	lds	r23, 0x036D
    5e02:	80 91 6e 03 	lds	r24, 0x036E
    5e06:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg5);
    5e0a:	40 91 6f 03 	lds	r20, 0x036F
    5e0e:	50 91 70 03 	lds	r21, 0x0370
    5e12:	60 91 71 03 	lds	r22, 0x0371
    5e16:	70 91 72 03 	lds	r23, 0x0372
    5e1a:	80 91 73 03 	lds	r24, 0x0373
    5e1e:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg5, Time_Hour / 10);
    5e22:	80 91 54 03 	lds	r24, 0x0354
    5e26:	9a e0       	ldi	r25, 0x0A	; 10
    5e28:	69 2f       	mov	r22, r25
    5e2a:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    5e2e:	98 2f       	mov	r25, r24
    5e30:	40 91 6f 03 	lds	r20, 0x036F
    5e34:	50 91 70 03 	lds	r21, 0x0370
    5e38:	60 91 71 03 	lds	r22, 0x0371
    5e3c:	70 91 72 03 	lds	r23, 0x0372
    5e40:	80 91 73 03 	lds	r24, 0x0373
    5e44:	29 2f       	mov	r18, r25
    5e46:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5e4a:	80 e0       	ldi	r24, 0x00	; 0
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	a0 ea       	ldi	r26, 0xA0	; 160
    5e50:	b0 e4       	ldi	r27, 0x40	; 64
    5e52:	89 8f       	std	Y+25, r24	; 0x19
    5e54:	9a 8f       	std	Y+26, r25	; 0x1a
    5e56:	ab 8f       	std	Y+27, r26	; 0x1b
    5e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    5e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e62:	20 e0       	ldi	r18, 0x00	; 0
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	4a ef       	ldi	r20, 0xFA	; 250
    5e68:	54 e4       	ldi	r21, 0x44	; 68
    5e6a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5e6e:	dc 01       	movw	r26, r24
    5e70:	cb 01       	movw	r24, r22
    5e72:	8d 8b       	std	Y+21, r24	; 0x15
    5e74:	9e 8b       	std	Y+22, r25	; 0x16
    5e76:	af 8b       	std	Y+23, r26	; 0x17
    5e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    5e80:	98 8d       	ldd	r25, Y+24	; 0x18
    5e82:	20 e0       	ldi	r18, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	40 e8       	ldi	r20, 0x80	; 128
    5e88:	5f e3       	ldi	r21, 0x3F	; 63
    5e8a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5e8e:	88 23       	and	r24, r24
    5e90:	2c f4       	brge	.+10     	; 0x5e9c <main+0x17c8>
		__ticks = 1;
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	9c 8b       	std	Y+20, r25	; 0x14
    5e98:	8b 8b       	std	Y+19, r24	; 0x13
    5e9a:	3f c0       	rjmp	.+126    	; 0x5f1a <main+0x1846>
	else if (__tmp > 65535)
    5e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ea4:	20 e0       	ldi	r18, 0x00	; 0
    5ea6:	3f ef       	ldi	r19, 0xFF	; 255
    5ea8:	4f e7       	ldi	r20, 0x7F	; 127
    5eaa:	57 e4       	ldi	r21, 0x47	; 71
    5eac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5eb0:	18 16       	cp	r1, r24
    5eb2:	4c f5       	brge	.+82     	; 0x5f06 <main+0x1832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    5eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ebc:	20 e0       	ldi	r18, 0x00	; 0
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	40 e2       	ldi	r20, 0x20	; 32
    5ec2:	51 e4       	ldi	r21, 0x41	; 65
    5ec4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5ec8:	dc 01       	movw	r26, r24
    5eca:	cb 01       	movw	r24, r22
    5ecc:	bc 01       	movw	r22, r24
    5ece:	cd 01       	movw	r24, r26
    5ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	9c 8b       	std	Y+20, r25	; 0x14
    5eda:	8b 8b       	std	Y+19, r24	; 0x13
    5edc:	0f c0       	rjmp	.+30     	; 0x5efc <main+0x1828>
    5ede:	88 ec       	ldi	r24, 0xC8	; 200
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	9a 8b       	std	Y+18, r25	; 0x12
    5ee4:	89 8b       	std	Y+17, r24	; 0x11
    5ee6:	89 89       	ldd	r24, Y+17	; 0x11
    5ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    5eea:	01 97       	sbiw	r24, 0x01	; 1
    5eec:	f1 f7       	brne	.-4      	; 0x5eea <main+0x1816>
    5eee:	9a 8b       	std	Y+18, r25	; 0x12
    5ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ef6:	01 97       	sbiw	r24, 0x01	; 1
    5ef8:	9c 8b       	std	Y+20, r25	; 0x14
    5efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5efc:	8b 89       	ldd	r24, Y+19	; 0x13
    5efe:	9c 89       	ldd	r25, Y+20	; 0x14
    5f00:	00 97       	sbiw	r24, 0x00	; 0
    5f02:	69 f7       	brne	.-38     	; 0x5ede <main+0x180a>
    5f04:	14 c0       	rjmp	.+40     	; 0x5f2e <main+0x185a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f06:	6d 89       	ldd	r22, Y+21	; 0x15
    5f08:	7e 89       	ldd	r23, Y+22	; 0x16
    5f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    5f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    5f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f12:	dc 01       	movw	r26, r24
    5f14:	cb 01       	movw	r24, r22
    5f16:	9c 8b       	std	Y+20, r25	; 0x14
    5f18:	8b 8b       	std	Y+19, r24	; 0x13
    5f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    5f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f1e:	98 8b       	std	Y+16, r25	; 0x10
    5f20:	8f 87       	std	Y+15, r24	; 0x0f
    5f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f24:	98 89       	ldd	r25, Y+16	; 0x10
    5f26:	01 97       	sbiw	r24, 0x01	; 1
    5f28:	f1 f7       	brne	.-4      	; 0x5f26 <main+0x1852>
    5f2a:	98 8b       	std	Y+16, r25	; 0x10
    5f2c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5);

				BUZ_vTog(BUZ0);
    5f2e:	60 91 77 03 	lds	r22, 0x0377
    5f32:	70 91 78 03 	lds	r23, 0x0378
    5f36:	80 91 79 03 	lds	r24, 0x0379
    5f3a:	0e 94 a8 22 	call	0x4550	; 0x4550 <BUZ_vTog>
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	a0 e2       	ldi	r26, 0x20	; 32
    5f44:	b1 e4       	ldi	r27, 0x41	; 65
    5f46:	8b 87       	std	Y+11, r24	; 0x0b
    5f48:	9c 87       	std	Y+12, r25	; 0x0c
    5f4a:	ad 87       	std	Y+13, r26	; 0x0d
    5f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f56:	20 e0       	ldi	r18, 0x00	; 0
    5f58:	30 e0       	ldi	r19, 0x00	; 0
    5f5a:	4a ef       	ldi	r20, 0xFA	; 250
    5f5c:	54 e4       	ldi	r21, 0x44	; 68
    5f5e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5f62:	dc 01       	movw	r26, r24
    5f64:	cb 01       	movw	r24, r22
    5f66:	8f 83       	std	Y+7, r24	; 0x07
    5f68:	98 87       	std	Y+8, r25	; 0x08
    5f6a:	a9 87       	std	Y+9, r26	; 0x09
    5f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f70:	78 85       	ldd	r23, Y+8	; 0x08
    5f72:	89 85       	ldd	r24, Y+9	; 0x09
    5f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f76:	20 e0       	ldi	r18, 0x00	; 0
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	40 e8       	ldi	r20, 0x80	; 128
    5f7c:	5f e3       	ldi	r21, 0x3F	; 63
    5f7e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5f82:	88 23       	and	r24, r24
    5f84:	2c f4       	brge	.+10     	; 0x5f90 <main+0x18bc>
		__ticks = 1;
    5f86:	81 e0       	ldi	r24, 0x01	; 1
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	9e 83       	std	Y+6, r25	; 0x06
    5f8c:	8d 83       	std	Y+5, r24	; 0x05
    5f8e:	3f c0       	rjmp	.+126    	; 0x600e <main+0x193a>
	else if (__tmp > 65535)
    5f90:	6f 81       	ldd	r22, Y+7	; 0x07
    5f92:	78 85       	ldd	r23, Y+8	; 0x08
    5f94:	89 85       	ldd	r24, Y+9	; 0x09
    5f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f98:	20 e0       	ldi	r18, 0x00	; 0
    5f9a:	3f ef       	ldi	r19, 0xFF	; 255
    5f9c:	4f e7       	ldi	r20, 0x7F	; 127
    5f9e:	57 e4       	ldi	r21, 0x47	; 71
    5fa0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5fa4:	18 16       	cp	r1, r24
    5fa6:	4c f5       	brge	.+82     	; 0x5ffa <main+0x1926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fb0:	20 e0       	ldi	r18, 0x00	; 0
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	40 e2       	ldi	r20, 0x20	; 32
    5fb6:	51 e4       	ldi	r21, 0x41	; 65
    5fb8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5fbc:	dc 01       	movw	r26, r24
    5fbe:	cb 01       	movw	r24, r22
    5fc0:	bc 01       	movw	r22, r24
    5fc2:	cd 01       	movw	r24, r26
    5fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fc8:	dc 01       	movw	r26, r24
    5fca:	cb 01       	movw	r24, r22
    5fcc:	9e 83       	std	Y+6, r25	; 0x06
    5fce:	8d 83       	std	Y+5, r24	; 0x05
    5fd0:	0f c0       	rjmp	.+30     	; 0x5ff0 <main+0x191c>
    5fd2:	88 ec       	ldi	r24, 0xC8	; 200
    5fd4:	90 e0       	ldi	r25, 0x00	; 0
    5fd6:	9c 83       	std	Y+4, r25	; 0x04
    5fd8:	8b 83       	std	Y+3, r24	; 0x03
    5fda:	8b 81       	ldd	r24, Y+3	; 0x03
    5fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	f1 f7       	brne	.-4      	; 0x5fde <main+0x190a>
    5fe2:	9c 83       	std	Y+4, r25	; 0x04
    5fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    5fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    5fea:	01 97       	sbiw	r24, 0x01	; 1
    5fec:	9e 83       	std	Y+6, r25	; 0x06
    5fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ff4:	00 97       	sbiw	r24, 0x00	; 0
    5ff6:	69 f7       	brne	.-38     	; 0x5fd2 <main+0x18fe>
    5ff8:	45 cb       	rjmp	.-2422   	; 0x5684 <main+0xfb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    5ffc:	78 85       	ldd	r23, Y+8	; 0x08
    5ffe:	89 85       	ldd	r24, Y+9	; 0x09
    6000:	9a 85       	ldd	r25, Y+10	; 0x0a
    6002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6006:	dc 01       	movw	r26, r24
    6008:	cb 01       	movw	r24, r22
    600a:	9e 83       	std	Y+6, r25	; 0x06
    600c:	8d 83       	std	Y+5, r24	; 0x05
    600e:	8d 81       	ldd	r24, Y+5	; 0x05
    6010:	9e 81       	ldd	r25, Y+6	; 0x06
    6012:	9a 83       	std	Y+2, r25	; 0x02
    6014:	89 83       	std	Y+1, r24	; 0x01
    6016:	89 81       	ldd	r24, Y+1	; 0x01
    6018:	9a 81       	ldd	r25, Y+2	; 0x02
    601a:	01 97       	sbiw	r24, 0x01	; 1
    601c:	f1 f7       	brne	.-4      	; 0x601a <main+0x1946>
    601e:	9a 83       	std	Y+2, r25	; 0x02
    6020:	89 83       	std	Y+1, r24	; 0x01
    6022:	30 cb       	rjmp	.-2464   	; 0x5684 <main+0xfb0>
				_delay_ms(10);
			}
			BUZ_vOff(BUZ0);
    6024:	60 91 77 03 	lds	r22, 0x0377
    6028:	70 91 78 03 	lds	r23, 0x0378
    602c:	80 91 79 03 	lds	r24, 0x0379
    6030:	0e 94 86 22 	call	0x450c	; 0x450c <BUZ_vOff>
			CLCD_vClearScreen();
    6034:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Press ON to");
    6038:	80 e6       	ldi	r24, 0x60	; 96
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6040:	82 e0       	ldi	r24, 0x02	; 2
    6042:	61 e0       	ldi	r22, 0x01	; 1
    6044:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Show Option");
    6048:	8c e6       	ldi	r24, 0x6C	; 108
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6050:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <main+0x10e>

00006054 <Set_Time>:

//======================================================================================================================================//

// Function to set time
void Set_Time()
{
    6054:	df 93       	push	r29
    6056:	cf 93       	push	r28
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	aa 97       	sbiw	r28, 0x2a	; 42
    605e:	0f b6       	in	r0, 0x3f	; 63
    6060:	f8 94       	cli
    6062:	de bf       	out	0x3e, r29	; 62
    6064:	0f be       	out	0x3f, r0	; 63
    6066:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    6068:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    606c:	89 e0       	ldi	r24, 0x09	; 9
    606e:	91 e0       	ldi	r25, 0x01	; 1
    6070:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6074:	82 e0       	ldi	r24, 0x02	; 2
    6076:	61 e0       	ldi	r22, 0x01	; 1
    6078:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    607c:	8a e1       	ldi	r24, 0x1A	; 26
    607e:	91 e0       	ldi	r25, 0x01	; 1
    6080:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	/* Select time mode: 12 Hours or 24 Hours */
	do
	{
		/*___________________________________________________________________________________________________________________*/

		Time_Mode = KPD_u8GetPressed();
    6084:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6088:	80 93 55 03 	sts	0x0355, r24

		if (Time_Mode != NOTPRESSED && (Time_Mode != Time_Mode12Hours && Time_Mode != Time_Mode24Hours))
    608c:	80 91 55 03 	lds	r24, 0x0355
    6090:	8f 3f       	cpi	r24, 0xFF	; 255
    6092:	09 f4       	brne	.+2      	; 0x6096 <Set_Time+0x42>
    6094:	90 c0       	rjmp	.+288    	; 0x61b6 <Set_Time+0x162>
    6096:	80 91 55 03 	lds	r24, 0x0355
    609a:	81 33       	cpi	r24, 0x31	; 49
    609c:	09 f4       	brne	.+2      	; 0x60a0 <Set_Time+0x4c>
    609e:	8b c0       	rjmp	.+278    	; 0x61b6 <Set_Time+0x162>
    60a0:	80 91 55 03 	lds	r24, 0x0355
    60a4:	82 33       	cpi	r24, 0x32	; 50
    60a6:	09 f4       	brne	.+2      	; 0x60aa <Set_Time+0x56>
    60a8:	86 c0       	rjmp	.+268    	; 0x61b6 <Set_Time+0x162>
		{
			// Handle wrong input
			CLCD_vClearScreen();
    60aa:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("wrong choise");
    60ae:	8b e2       	ldi	r24, 0x2B	; 43
    60b0:	91 e0       	ldi	r25, 0x01	; 1
    60b2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    60b6:	80 e0       	ldi	r24, 0x00	; 0
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	aa ef       	ldi	r26, 0xFA	; 250
    60bc:	b3 e4       	ldi	r27, 0x43	; 67
    60be:	8f a3       	std	Y+39, r24	; 0x27
    60c0:	98 a7       	std	Y+40, r25	; 0x28
    60c2:	a9 a7       	std	Y+41, r26	; 0x29
    60c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60c6:	6f a1       	ldd	r22, Y+39	; 0x27
    60c8:	78 a5       	ldd	r23, Y+40	; 0x28
    60ca:	89 a5       	ldd	r24, Y+41	; 0x29
    60cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    60ce:	20 e0       	ldi	r18, 0x00	; 0
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	4a ef       	ldi	r20, 0xFA	; 250
    60d4:	54 e4       	ldi	r21, 0x44	; 68
    60d6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    60da:	dc 01       	movw	r26, r24
    60dc:	cb 01       	movw	r24, r22
    60de:	8b a3       	std	Y+35, r24	; 0x23
    60e0:	9c a3       	std	Y+36, r25	; 0x24
    60e2:	ad a3       	std	Y+37, r26	; 0x25
    60e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    60e6:	6b a1       	ldd	r22, Y+35	; 0x23
    60e8:	7c a1       	ldd	r23, Y+36	; 0x24
    60ea:	8d a1       	ldd	r24, Y+37	; 0x25
    60ec:	9e a1       	ldd	r25, Y+38	; 0x26
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	40 e8       	ldi	r20, 0x80	; 128
    60f4:	5f e3       	ldi	r21, 0x3F	; 63
    60f6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    60fa:	88 23       	and	r24, r24
    60fc:	2c f4       	brge	.+10     	; 0x6108 <Set_Time+0xb4>
		__ticks = 1;
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	9a a3       	std	Y+34, r25	; 0x22
    6104:	89 a3       	std	Y+33, r24	; 0x21
    6106:	3f c0       	rjmp	.+126    	; 0x6186 <Set_Time+0x132>
	else if (__tmp > 65535)
    6108:	6b a1       	ldd	r22, Y+35	; 0x23
    610a:	7c a1       	ldd	r23, Y+36	; 0x24
    610c:	8d a1       	ldd	r24, Y+37	; 0x25
    610e:	9e a1       	ldd	r25, Y+38	; 0x26
    6110:	20 e0       	ldi	r18, 0x00	; 0
    6112:	3f ef       	ldi	r19, 0xFF	; 255
    6114:	4f e7       	ldi	r20, 0x7F	; 127
    6116:	57 e4       	ldi	r21, 0x47	; 71
    6118:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    611c:	18 16       	cp	r1, r24
    611e:	4c f5       	brge	.+82     	; 0x6172 <Set_Time+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6120:	6f a1       	ldd	r22, Y+39	; 0x27
    6122:	78 a5       	ldd	r23, Y+40	; 0x28
    6124:	89 a5       	ldd	r24, Y+41	; 0x29
    6126:	9a a5       	ldd	r25, Y+42	; 0x2a
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	30 e0       	ldi	r19, 0x00	; 0
    612c:	40 e2       	ldi	r20, 0x20	; 32
    612e:	51 e4       	ldi	r21, 0x41	; 65
    6130:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6134:	dc 01       	movw	r26, r24
    6136:	cb 01       	movw	r24, r22
    6138:	bc 01       	movw	r22, r24
    613a:	cd 01       	movw	r24, r26
    613c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6140:	dc 01       	movw	r26, r24
    6142:	cb 01       	movw	r24, r22
    6144:	9a a3       	std	Y+34, r25	; 0x22
    6146:	89 a3       	std	Y+33, r24	; 0x21
    6148:	0f c0       	rjmp	.+30     	; 0x6168 <Set_Time+0x114>
    614a:	88 ec       	ldi	r24, 0xC8	; 200
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	98 a3       	std	Y+32, r25	; 0x20
    6150:	8f 8f       	std	Y+31, r24	; 0x1f
    6152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6154:	98 a1       	ldd	r25, Y+32	; 0x20
    6156:	01 97       	sbiw	r24, 0x01	; 1
    6158:	f1 f7       	brne	.-4      	; 0x6156 <Set_Time+0x102>
    615a:	98 a3       	std	Y+32, r25	; 0x20
    615c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    615e:	89 a1       	ldd	r24, Y+33	; 0x21
    6160:	9a a1       	ldd	r25, Y+34	; 0x22
    6162:	01 97       	sbiw	r24, 0x01	; 1
    6164:	9a a3       	std	Y+34, r25	; 0x22
    6166:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6168:	89 a1       	ldd	r24, Y+33	; 0x21
    616a:	9a a1       	ldd	r25, Y+34	; 0x22
    616c:	00 97       	sbiw	r24, 0x00	; 0
    616e:	69 f7       	brne	.-38     	; 0x614a <Set_Time+0xf6>
    6170:	14 c0       	rjmp	.+40     	; 0x619a <Set_Time+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6172:	6b a1       	ldd	r22, Y+35	; 0x23
    6174:	7c a1       	ldd	r23, Y+36	; 0x24
    6176:	8d a1       	ldd	r24, Y+37	; 0x25
    6178:	9e a1       	ldd	r25, Y+38	; 0x26
    617a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    617e:	dc 01       	movw	r26, r24
    6180:	cb 01       	movw	r24, r22
    6182:	9a a3       	std	Y+34, r25	; 0x22
    6184:	89 a3       	std	Y+33, r24	; 0x21
    6186:	89 a1       	ldd	r24, Y+33	; 0x21
    6188:	9a a1       	ldd	r25, Y+34	; 0x22
    618a:	9e 8f       	std	Y+30, r25	; 0x1e
    618c:	8d 8f       	std	Y+29, r24	; 0x1d
    618e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6192:	01 97       	sbiw	r24, 0x01	; 1
    6194:	f1 f7       	brne	.-4      	; 0x6192 <Set_Time+0x13e>
    6196:	9e 8f       	std	Y+30, r25	; 0x1e
    6198:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			CLCD_vClearScreen();
    619a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    619e:	89 e0       	ldi	r24, 0x09	; 9
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    61a6:	82 e0       	ldi	r24, 0x02	; 2
    61a8:	61 e0       	ldi	r22, 0x01	; 1
    61aa:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    61ae:	8a e1       	ldi	r24, 0x1A	; 26
    61b0:	91 e0       	ldi	r25, 0x01	; 1
    61b2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	} while (Time_Mode == NOTPRESSED || (Time_Mode != Time_Mode12Hours && Time_Mode != Time_Mode24Hours));
    61b6:	80 91 55 03 	lds	r24, 0x0355
    61ba:	8f 3f       	cpi	r24, 0xFF	; 255
    61bc:	09 f4       	brne	.+2      	; 0x61c0 <Set_Time+0x16c>
    61be:	62 cf       	rjmp	.-316    	; 0x6084 <Set_Time+0x30>
    61c0:	80 91 55 03 	lds	r24, 0x0355
    61c4:	81 33       	cpi	r24, 0x31	; 49
    61c6:	29 f0       	breq	.+10     	; 0x61d2 <Set_Time+0x17e>
    61c8:	80 91 55 03 	lds	r24, 0x0355
    61cc:	82 33       	cpi	r24, 0x32	; 50
    61ce:	09 f0       	breq	.+2      	; 0x61d2 <Set_Time+0x17e>
    61d0:	59 cf       	rjmp	.-334    	; 0x6084 <Set_Time+0x30>

	/*___________________________________________________________________________________________________________________*/

	// Set AM or PM flag based on selected mode
	if (Time_Mode == Time_Mode12Hours)
    61d2:	80 91 55 03 	lds	r24, 0x0355
    61d6:	81 33       	cpi	r24, 0x31	; 49
    61d8:	21 f4       	brne	.+8      	; 0x61e2 <Set_Time+0x18e>
	{
		Time_ModeFlag = 1;
    61da:	81 e0       	ldi	r24, 0x01	; 1
    61dc:	80 93 53 03 	sts	0x0353, r24
    61e0:	06 c0       	rjmp	.+12     	; 0x61ee <Set_Time+0x19a>
	}
	else if (Time_Mode == Time_Mode24Hours)
    61e2:	80 91 55 03 	lds	r24, 0x0355
    61e6:	82 33       	cpi	r24, 0x32	; 50
    61e8:	11 f4       	brne	.+4      	; 0x61ee <Set_Time+0x19a>
	{
		Time_ModeFlag = 0;
    61ea:	10 92 53 03 	sts	0x0353, r1

	}

	/*___________________________________________________________________________________________________________________*/

	CLCD_vClearScreen();
    61ee:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>

	/*___________________________________________________________________________________________________________________*/

	// Display the current time on the CLCD
	CLCD_vSendData(Time_Hour / 10 + 48);
    61f2:	80 91 54 03 	lds	r24, 0x0354
    61f6:	9a e0       	ldi	r25, 0x0A	; 10
    61f8:	69 2f       	mov	r22, r25
    61fa:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    61fe:	80 5d       	subi	r24, 0xD0	; 208
    6200:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Time_Hour % 10 + 48);
    6204:	80 91 54 03 	lds	r24, 0x0354
    6208:	9a e0       	ldi	r25, 0x0A	; 10
    620a:	69 2f       	mov	r22, r25
    620c:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6210:	89 2f       	mov	r24, r25
    6212:	80 5d       	subi	r24, 0xD0	; 208
    6214:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    6218:	86 ee       	ldi	r24, 0xE6	; 230
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSendData(Time_Minute / 10 + 48);
    6220:	80 91 96 03 	lds	r24, 0x0396
    6224:	9a e0       	ldi	r25, 0x0A	; 10
    6226:	69 2f       	mov	r22, r25
    6228:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    622c:	80 5d       	subi	r24, 0xD0	; 208
    622e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Time_Minute % 10 + 48);
    6232:	80 91 96 03 	lds	r24, 0x0396
    6236:	9a e0       	ldi	r25, 0x0A	; 10
    6238:	69 2f       	mov	r22, r25
    623a:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    623e:	89 2f       	mov	r24, r25
    6240:	80 5d       	subi	r24, 0xD0	; 208
    6242:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    6246:	86 ee       	ldi	r24, 0xE6	; 230
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSendData(Time_Second / 10 + 48);
    624e:	80 91 97 03 	lds	r24, 0x0397
    6252:	9a e0       	ldi	r25, 0x0A	; 10
    6254:	69 2f       	mov	r22, r25
    6256:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    625a:	80 5d       	subi	r24, 0xD0	; 208
    625c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Time_Second % 10 + 48);
    6260:	80 91 97 03 	lds	r24, 0x0397
    6264:	9a e0       	ldi	r25, 0x0A	; 10
    6266:	69 2f       	mov	r22, r25
    6268:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    626c:	89 2f       	mov	r24, r25
    626e:	80 5d       	subi	r24, 0xD0	; 208
    6270:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(' ');
    6274:	80 e2       	ldi	r24, 0x20	; 32
    6276:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	// Display AM/PM if in 12-hour mode
	if (Time_Mode == Time_Mode12Hours)
    627a:	80 91 55 03 	lds	r24, 0x0355
    627e:	81 33       	cpi	r24, 0x31	; 49
    6280:	c9 f4       	brne	.+50     	; 0x62b4 <Set_Time+0x260>
	{
		if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6282:	eb e3       	ldi	r30, 0x3B	; 59
    6284:	f0 e0       	ldi	r31, 0x00	; 0
    6286:	80 81       	ld	r24, Z
    6288:	88 2f       	mov	r24, r24
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	88 70       	andi	r24, 0x08	; 8
    628e:	90 70       	andi	r25, 0x00	; 0
    6290:	95 95       	asr	r25
    6292:	87 95       	ror	r24
    6294:	95 95       	asr	r25
    6296:	87 95       	ror	r24
    6298:	95 95       	asr	r25
    629a:	87 95       	ror	r24
    629c:	81 30       	cpi	r24, 0x01	; 1
    629e:	91 05       	cpc	r25, r1
    62a0:	29 f4       	brne	.+10     	; 0x62ac <Set_Time+0x258>
		{
			CLCD_vSendString("AM");
    62a2:	88 e3       	ldi	r24, 0x38	; 56
    62a4:	91 e0       	ldi	r25, 0x01	; 1
    62a6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    62aa:	04 c0       	rjmp	.+8      	; 0x62b4 <Set_Time+0x260>
		}
		else
		{
			CLCD_vSendString("PM");
    62ac:	8b e3       	ldi	r24, 0x3B	; 59
    62ae:	91 e0       	ldi	r25, 0x01	; 1
    62b0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	}

	/*___________________________________________________________________________________________________________________*/

	/* Change Time */
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    62b4:	8e e0       	ldi	r24, 0x0E	; 14
    62b6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
	CLCD_vSetPosition(1, 1);
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	61 e0       	ldi	r22, 0x01	; 1
    62be:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

	/* Set hours */
	// First Digit
	do
	{
		KPD_Press = KPD_u8GetPressed();
    62c2:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    62c6:	80 93 9a 03 	sts	0x039A, r24
	} while (KPD_Press == NOTPRESSED);
    62ca:	80 91 9a 03 	lds	r24, 0x039A
    62ce:	8f 3f       	cpi	r24, 0xFF	; 255
    62d0:	c1 f3       	breq	.-16     	; 0x62c2 <Set_Time+0x26e>
	CLCD_vSetPosition(1, 1);
    62d2:	81 e0       	ldi	r24, 0x01	; 1
    62d4:	61 e0       	ldi	r22, 0x01	; 1
    62d6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendData(KPD_Press);
    62da:	80 91 9a 03 	lds	r24, 0x039A
    62de:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Time_Hour = (KPD_Press - 48) * 10;
    62e2:	80 91 9a 03 	lds	r24, 0x039A
    62e6:	88 2f       	mov	r24, r24
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	9c 01       	movw	r18, r24
    62ec:	22 0f       	add	r18, r18
    62ee:	33 1f       	adc	r19, r19
    62f0:	c9 01       	movw	r24, r18
    62f2:	88 0f       	add	r24, r24
    62f4:	99 1f       	adc	r25, r25
    62f6:	88 0f       	add	r24, r24
    62f8:	99 1f       	adc	r25, r25
    62fa:	82 0f       	add	r24, r18
    62fc:	93 1f       	adc	r25, r19
    62fe:	80 5e       	subi	r24, 0xE0	; 224
    6300:	80 93 54 03 	sts	0x0354, r24

	// Second Digit
	do
	{
		KPD_Press = KPD_u8GetPressed();
    6304:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6308:	80 93 9a 03 	sts	0x039A, r24
	} while (KPD_Press == NOTPRESSED);
    630c:	80 91 9a 03 	lds	r24, 0x039A
    6310:	8f 3f       	cpi	r24, 0xFF	; 255
    6312:	c1 f3       	breq	.-16     	; 0x6304 <Set_Time+0x2b0>
	CLCD_vSendData(KPD_Press);
    6314:	80 91 9a 03 	lds	r24, 0x039A
    6318:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	// Calculate total hours
	Time_Hour += (KPD_Press - 48);
    631c:	90 91 9a 03 	lds	r25, 0x039A
    6320:	80 91 54 03 	lds	r24, 0x0354
    6324:	89 0f       	add	r24, r25
    6326:	80 53       	subi	r24, 0x30	; 48
    6328:	80 93 54 03 	sts	0x0354, r24
	 * ==> if mode is 12 hours --> hour is less than 12
	 */

	/*___________________________________________________________________________________________________________________*/

	if (Time_Mode == Time_Mode12Hours)
    632c:	80 91 55 03 	lds	r24, 0x0355
    6330:	81 33       	cpi	r24, 0x31	; 49
    6332:	21 f5       	brne	.+72     	; 0x637c <Set_Time+0x328>
	{
		if (Time_Hour > 12 || Time_Hour == 0)
    6334:	80 91 54 03 	lds	r24, 0x0354
    6338:	8d 30       	cpi	r24, 0x0D	; 13
    633a:	28 f4       	brcc	.+10     	; 0x6346 <Set_Time+0x2f2>
    633c:	80 91 54 03 	lds	r24, 0x0354
    6340:	88 23       	and	r24, r24
    6342:	09 f0       	breq	.+2      	; 0x6346 <Set_Time+0x2f2>
    6344:	47 c0       	rjmp	.+142    	; 0x63d4 <Set_Time+0x380>
		{
			Time_Hour = 12;
    6346:	8c e0       	ldi	r24, 0x0C	; 12
    6348:	80 93 54 03 	sts	0x0354, r24
			CLCD_vSetPosition(1, 1);
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	61 e0       	ldi	r22, 0x01	; 1
    6350:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData(Time_Hour / 10 + 48);
    6354:	80 91 54 03 	lds	r24, 0x0354
    6358:	9a e0       	ldi	r25, 0x0A	; 10
    635a:	69 2f       	mov	r22, r25
    635c:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6360:	80 5d       	subi	r24, 0xD0	; 208
    6362:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData(Time_Hour % 10 + 48);
    6366:	80 91 54 03 	lds	r24, 0x0354
    636a:	9a e0       	ldi	r25, 0x0A	; 10
    636c:	69 2f       	mov	r22, r25
    636e:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6372:	89 2f       	mov	r24, r25
    6374:	80 5d       	subi	r24, 0xD0	; 208
    6376:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    637a:	2c c0       	rjmp	.+88     	; 0x63d4 <Set_Time+0x380>
		}
		else
		{
		}
	}
	else if (Time_Mode == Time_Mode24Hours)
    637c:	80 91 55 03 	lds	r24, 0x0355
    6380:	82 33       	cpi	r24, 0x32	; 50
    6382:	41 f5       	brne	.+80     	; 0x63d4 <Set_Time+0x380>
	{
		if (Time_Hour > 23)
    6384:	80 91 54 03 	lds	r24, 0x0354
    6388:	88 31       	cpi	r24, 0x18	; 24
    638a:	c8 f0       	brcs	.+50     	; 0x63be <Set_Time+0x36a>
		{
			Time_Hour = 0;
    638c:	10 92 54 03 	sts	0x0354, r1
			CLCD_vSetPosition(1, 1);
    6390:	81 e0       	ldi	r24, 0x01	; 1
    6392:	61 e0       	ldi	r22, 0x01	; 1
    6394:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData(Time_Hour / 10 + 48);
    6398:	80 91 54 03 	lds	r24, 0x0354
    639c:	9a e0       	ldi	r25, 0x0A	; 10
    639e:	69 2f       	mov	r22, r25
    63a0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    63a4:	80 5d       	subi	r24, 0xD0	; 208
    63a6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData(Time_Hour % 10 + 48);
    63aa:	80 91 54 03 	lds	r24, 0x0354
    63ae:	9a e0       	ldi	r25, 0x0A	; 10
    63b0:	69 2f       	mov	r22, r25
    63b2:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    63b6:	89 2f       	mov	r24, r25
    63b8:	80 5d       	subi	r24, 0xD0	; 208
    63ba:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		}
		else
		{
		}
		if (Time_Hour == 12)
    63be:	80 91 54 03 	lds	r24, 0x0354
    63c2:	8c 30       	cpi	r24, 0x0C	; 12
    63c4:	39 f4       	brne	.+14     	; 0x63d4 <Set_Time+0x380>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    63c6:	ab e3       	ldi	r26, 0x3B	; 59
    63c8:	b0 e0       	ldi	r27, 0x00	; 0
    63ca:	eb e3       	ldi	r30, 0x3B	; 59
    63cc:	f0 e0       	ldi	r31, 0x00	; 0
    63ce:	80 81       	ld	r24, Z
    63d0:	87 7f       	andi	r24, 0xF7	; 247
    63d2:	8c 93       	st	X, r24
	/*___________________________________________________________________________________________________________________*/

	/* Set minutes and seconds similar to hours */

	// Set minutes
	CLCD_vSetPosition(1, 6);
    63d4:	81 e0       	ldi	r24, 0x01	; 1
    63d6:	66 e0       	ldi	r22, 0x06	; 6
    63d8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	do
	{
		KPD_Press = KPD_u8GetPressed();
    63dc:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    63e0:	80 93 9a 03 	sts	0x039A, r24
	} while (KPD_Press == NOTPRESSED);
    63e4:	80 91 9a 03 	lds	r24, 0x039A
    63e8:	8f 3f       	cpi	r24, 0xFF	; 255
    63ea:	c1 f3       	breq	.-16     	; 0x63dc <Set_Time+0x388>
	CLCD_vSendData(KPD_Press);
    63ec:	80 91 9a 03 	lds	r24, 0x039A
    63f0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Time_Minute = (KPD_Press - 48) * 10;
    63f4:	80 91 9a 03 	lds	r24, 0x039A
    63f8:	88 2f       	mov	r24, r24
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	9c 01       	movw	r18, r24
    63fe:	22 0f       	add	r18, r18
    6400:	33 1f       	adc	r19, r19
    6402:	c9 01       	movw	r24, r18
    6404:	88 0f       	add	r24, r24
    6406:	99 1f       	adc	r25, r25
    6408:	88 0f       	add	r24, r24
    640a:	99 1f       	adc	r25, r25
    640c:	82 0f       	add	r24, r18
    640e:	93 1f       	adc	r25, r19
    6410:	80 5e       	subi	r24, 0xE0	; 224
    6412:	80 93 96 03 	sts	0x0396, r24

	do
	{
		KPD_Press = KPD_u8GetPressed();
    6416:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    641a:	80 93 9a 03 	sts	0x039A, r24

	} while (KPD_Press == NOTPRESSED);
    641e:	80 91 9a 03 	lds	r24, 0x039A
    6422:	8f 3f       	cpi	r24, 0xFF	; 255
    6424:	c1 f3       	breq	.-16     	; 0x6416 <Set_Time+0x3c2>
	CLCD_vSendData(KPD_Press);
    6426:	80 91 9a 03 	lds	r24, 0x039A
    642a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	Time_Minute += (KPD_Press - 48);
    642e:	90 91 9a 03 	lds	r25, 0x039A
    6432:	80 91 96 03 	lds	r24, 0x0396
    6436:	89 0f       	add	r24, r25
    6438:	80 53       	subi	r24, 0x30	; 48
    643a:	80 93 96 03 	sts	0x0396, r24

	if (Time_Minute > 59)
    643e:	80 91 96 03 	lds	r24, 0x0396
    6442:	8c 33       	cpi	r24, 0x3C	; 60
    6444:	c8 f0       	brcs	.+50     	; 0x6478 <Set_Time+0x424>
	{
		Time_Minute = 0;
    6446:	10 92 96 03 	sts	0x0396, r1
		CLCD_vSetPosition(1, 6);
    644a:	81 e0       	ldi	r24, 0x01	; 1
    644c:	66 e0       	ldi	r22, 0x06	; 6
    644e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendData(Time_Minute / 10 + 48);
    6452:	80 91 96 03 	lds	r24, 0x0396
    6456:	9a e0       	ldi	r25, 0x0A	; 10
    6458:	69 2f       	mov	r22, r25
    645a:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    645e:	80 5d       	subi	r24, 0xD0	; 208
    6460:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		CLCD_vSendData(Time_Minute % 10 + 48);
    6464:	80 91 96 03 	lds	r24, 0x0396
    6468:	9a e0       	ldi	r25, 0x0A	; 10
    646a:	69 2f       	mov	r22, r25
    646c:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6470:	89 2f       	mov	r24, r25
    6472:	80 5d       	subi	r24, 0xD0	; 208
    6474:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	}

	/*___________________________________________________________________________________________________________________*/

	// Set seconds
	CLCD_vSetPosition(1, 11);
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	6b e0       	ldi	r22, 0x0B	; 11
    647c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	do
	{
		KPD_Press = KPD_u8GetPressed();
    6480:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6484:	80 93 9a 03 	sts	0x039A, r24

	} while (KPD_Press == NOTPRESSED);
    6488:	80 91 9a 03 	lds	r24, 0x039A
    648c:	8f 3f       	cpi	r24, 0xFF	; 255
    648e:	c1 f3       	breq	.-16     	; 0x6480 <Set_Time+0x42c>
	CLCD_vSendData(KPD_Press);
    6490:	80 91 9a 03 	lds	r24, 0x039A
    6494:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Time_Second = (KPD_Press - 48) * 10;
    6498:	80 91 9a 03 	lds	r24, 0x039A
    649c:	88 2f       	mov	r24, r24
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	9c 01       	movw	r18, r24
    64a2:	22 0f       	add	r18, r18
    64a4:	33 1f       	adc	r19, r19
    64a6:	c9 01       	movw	r24, r18
    64a8:	88 0f       	add	r24, r24
    64aa:	99 1f       	adc	r25, r25
    64ac:	88 0f       	add	r24, r24
    64ae:	99 1f       	adc	r25, r25
    64b0:	82 0f       	add	r24, r18
    64b2:	93 1f       	adc	r25, r19
    64b4:	80 5e       	subi	r24, 0xE0	; 224
    64b6:	80 93 97 03 	sts	0x0397, r24

	do
	{
		KPD_Press = KPD_u8GetPressed();
    64ba:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    64be:	80 93 9a 03 	sts	0x039A, r24

	} while (KPD_Press == NOTPRESSED);
    64c2:	80 91 9a 03 	lds	r24, 0x039A
    64c6:	8f 3f       	cpi	r24, 0xFF	; 255
    64c8:	c1 f3       	breq	.-16     	; 0x64ba <Set_Time+0x466>
	CLCD_vSendData(KPD_Press);
    64ca:	80 91 9a 03 	lds	r24, 0x039A
    64ce:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	Time_Second += (KPD_Press - 48);
    64d2:	90 91 9a 03 	lds	r25, 0x039A
    64d6:	80 91 97 03 	lds	r24, 0x0397
    64da:	89 0f       	add	r24, r25
    64dc:	80 53       	subi	r24, 0x30	; 48
    64de:	80 93 97 03 	sts	0x0397, r24

	if (Time_Second > 59)
    64e2:	80 91 97 03 	lds	r24, 0x0397
    64e6:	8c 33       	cpi	r24, 0x3C	; 60
    64e8:	c8 f0       	brcs	.+50     	; 0x651c <Set_Time+0x4c8>
	{
		Time_Second = 0;
    64ea:	10 92 97 03 	sts	0x0397, r1
		CLCD_vSetPosition(1, 11);
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	6b e0       	ldi	r22, 0x0B	; 11
    64f2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendData(Time_Second / 10 + 48);
    64f6:	80 91 97 03 	lds	r24, 0x0397
    64fa:	9a e0       	ldi	r25, 0x0A	; 10
    64fc:	69 2f       	mov	r22, r25
    64fe:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6502:	80 5d       	subi	r24, 0xD0	; 208
    6504:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		CLCD_vSendData(Time_Second % 10 + 48);
    6508:	80 91 97 03 	lds	r24, 0x0397
    650c:	9a e0       	ldi	r25, 0x0A	; 10
    650e:	69 2f       	mov	r22, r25
    6510:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6514:	89 2f       	mov	r24, r25
    6516:	80 5d       	subi	r24, 0xD0	; 208
    6518:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	}

	/*___________________________________________________________________________________________________________________*/

	//display AM or PM when mode is 12 Hour
	if (Time_Mode == Time_Mode12Hours)
    651c:	80 91 55 03 	lds	r24, 0x0355
    6520:	81 33       	cpi	r24, 0x31	; 49
    6522:	09 f0       	breq	.+2      	; 0x6526 <Set_Time+0x4d2>
    6524:	20 c1       	rjmp	.+576    	; 0x6766 <Set_Time+0x712>
	{
		/* Select AM or PM if mode is 12-hour */
		CLCD_vSetPosition(2, 1);
    6526:	82 e0       	ldi	r24, 0x02	; 2
    6528:	61 e0       	ldi	r22, 0x01	; 1
    652a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("1 : AM    2 : PM");
    652e:	8e e3       	ldi	r24, 0x3E	; 62
    6530:	91 e0       	ldi	r25, 0x01	; 1
    6532:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		do
		{
			Time_DayFlag = KPD_u8GetPressed();
    6536:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    653a:	80 93 99 03 	sts	0x0399, r24
			// Handle wrong input
			if (Time_DayFlag != NOTPRESSED && (Time_DayFlag != '1' && Time_DayFlag != '2'))
    653e:	80 91 99 03 	lds	r24, 0x0399
    6542:	8f 3f       	cpi	r24, 0xFF	; 255
    6544:	09 f4       	brne	.+2      	; 0x6548 <Set_Time+0x4f4>
    6546:	ea c0       	rjmp	.+468    	; 0x671c <Set_Time+0x6c8>
    6548:	80 91 99 03 	lds	r24, 0x0399
    654c:	81 33       	cpi	r24, 0x31	; 49
    654e:	09 f4       	brne	.+2      	; 0x6552 <Set_Time+0x4fe>
    6550:	e5 c0       	rjmp	.+458    	; 0x671c <Set_Time+0x6c8>
    6552:	80 91 99 03 	lds	r24, 0x0399
    6556:	82 33       	cpi	r24, 0x32	; 50
    6558:	09 f4       	brne	.+2      	; 0x655c <Set_Time+0x508>
    655a:	e0 c0       	rjmp	.+448    	; 0x671c <Set_Time+0x6c8>
			{
				CLCD_vClearScreen();
    655c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSendString("Wrong Choise");
    6560:	8f e4       	ldi	r24, 0x4F	; 79
    6562:	91 e0       	ldi	r25, 0x01	; 1
    6564:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6568:	80 e0       	ldi	r24, 0x00	; 0
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	aa ef       	ldi	r26, 0xFA	; 250
    656e:	b3 e4       	ldi	r27, 0x43	; 67
    6570:	89 8f       	std	Y+25, r24	; 0x19
    6572:	9a 8f       	std	Y+26, r25	; 0x1a
    6574:	ab 8f       	std	Y+27, r26	; 0x1b
    6576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6578:	69 8d       	ldd	r22, Y+25	; 0x19
    657a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    657c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    657e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6580:	20 e0       	ldi	r18, 0x00	; 0
    6582:	30 e0       	ldi	r19, 0x00	; 0
    6584:	4a ef       	ldi	r20, 0xFA	; 250
    6586:	54 e4       	ldi	r21, 0x44	; 68
    6588:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    658c:	dc 01       	movw	r26, r24
    658e:	cb 01       	movw	r24, r22
    6590:	8d 8b       	std	Y+21, r24	; 0x15
    6592:	9e 8b       	std	Y+22, r25	; 0x16
    6594:	af 8b       	std	Y+23, r26	; 0x17
    6596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6598:	6d 89       	ldd	r22, Y+21	; 0x15
    659a:	7e 89       	ldd	r23, Y+22	; 0x16
    659c:	8f 89       	ldd	r24, Y+23	; 0x17
    659e:	98 8d       	ldd	r25, Y+24	; 0x18
    65a0:	20 e0       	ldi	r18, 0x00	; 0
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	40 e8       	ldi	r20, 0x80	; 128
    65a6:	5f e3       	ldi	r21, 0x3F	; 63
    65a8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    65ac:	88 23       	and	r24, r24
    65ae:	2c f4       	brge	.+10     	; 0x65ba <Set_Time+0x566>
		__ticks = 1;
    65b0:	81 e0       	ldi	r24, 0x01	; 1
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	9c 8b       	std	Y+20, r25	; 0x14
    65b6:	8b 8b       	std	Y+19, r24	; 0x13
    65b8:	3f c0       	rjmp	.+126    	; 0x6638 <Set_Time+0x5e4>
	else if (__tmp > 65535)
    65ba:	6d 89       	ldd	r22, Y+21	; 0x15
    65bc:	7e 89       	ldd	r23, Y+22	; 0x16
    65be:	8f 89       	ldd	r24, Y+23	; 0x17
    65c0:	98 8d       	ldd	r25, Y+24	; 0x18
    65c2:	20 e0       	ldi	r18, 0x00	; 0
    65c4:	3f ef       	ldi	r19, 0xFF	; 255
    65c6:	4f e7       	ldi	r20, 0x7F	; 127
    65c8:	57 e4       	ldi	r21, 0x47	; 71
    65ca:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    65ce:	18 16       	cp	r1, r24
    65d0:	4c f5       	brge	.+82     	; 0x6624 <Set_Time+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65d2:	69 8d       	ldd	r22, Y+25	; 0x19
    65d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    65d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65da:	20 e0       	ldi	r18, 0x00	; 0
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	40 e2       	ldi	r20, 0x20	; 32
    65e0:	51 e4       	ldi	r21, 0x41	; 65
    65e2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    65e6:	dc 01       	movw	r26, r24
    65e8:	cb 01       	movw	r24, r22
    65ea:	bc 01       	movw	r22, r24
    65ec:	cd 01       	movw	r24, r26
    65ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65f2:	dc 01       	movw	r26, r24
    65f4:	cb 01       	movw	r24, r22
    65f6:	9c 8b       	std	Y+20, r25	; 0x14
    65f8:	8b 8b       	std	Y+19, r24	; 0x13
    65fa:	0f c0       	rjmp	.+30     	; 0x661a <Set_Time+0x5c6>
    65fc:	88 ec       	ldi	r24, 0xC8	; 200
    65fe:	90 e0       	ldi	r25, 0x00	; 0
    6600:	9a 8b       	std	Y+18, r25	; 0x12
    6602:	89 8b       	std	Y+17, r24	; 0x11
    6604:	89 89       	ldd	r24, Y+17	; 0x11
    6606:	9a 89       	ldd	r25, Y+18	; 0x12
    6608:	01 97       	sbiw	r24, 0x01	; 1
    660a:	f1 f7       	brne	.-4      	; 0x6608 <Set_Time+0x5b4>
    660c:	9a 8b       	std	Y+18, r25	; 0x12
    660e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6610:	8b 89       	ldd	r24, Y+19	; 0x13
    6612:	9c 89       	ldd	r25, Y+20	; 0x14
    6614:	01 97       	sbiw	r24, 0x01	; 1
    6616:	9c 8b       	std	Y+20, r25	; 0x14
    6618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    661a:	8b 89       	ldd	r24, Y+19	; 0x13
    661c:	9c 89       	ldd	r25, Y+20	; 0x14
    661e:	00 97       	sbiw	r24, 0x00	; 0
    6620:	69 f7       	brne	.-38     	; 0x65fc <Set_Time+0x5a8>
    6622:	14 c0       	rjmp	.+40     	; 0x664c <Set_Time+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6624:	6d 89       	ldd	r22, Y+21	; 0x15
    6626:	7e 89       	ldd	r23, Y+22	; 0x16
    6628:	8f 89       	ldd	r24, Y+23	; 0x17
    662a:	98 8d       	ldd	r25, Y+24	; 0x18
    662c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6630:	dc 01       	movw	r26, r24
    6632:	cb 01       	movw	r24, r22
    6634:	9c 8b       	std	Y+20, r25	; 0x14
    6636:	8b 8b       	std	Y+19, r24	; 0x13
    6638:	8b 89       	ldd	r24, Y+19	; 0x13
    663a:	9c 89       	ldd	r25, Y+20	; 0x14
    663c:	98 8b       	std	Y+16, r25	; 0x10
    663e:	8f 87       	std	Y+15, r24	; 0x0f
    6640:	8f 85       	ldd	r24, Y+15	; 0x0f
    6642:	98 89       	ldd	r25, Y+16	; 0x10
    6644:	01 97       	sbiw	r24, 0x01	; 1
    6646:	f1 f7       	brne	.-4      	; 0x6644 <Set_Time+0x5f0>
    6648:	98 8b       	std	Y+16, r25	; 0x10
    664a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				CLCD_vClearScreen();
    664c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSetPosition(1, 1);
    6650:	81 e0       	ldi	r24, 0x01	; 1
    6652:	61 e0       	ldi	r22, 0x01	; 1
    6654:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData(Time_Hour / 10 + 48);
    6658:	80 91 54 03 	lds	r24, 0x0354
    665c:	9a e0       	ldi	r25, 0x0A	; 10
    665e:	69 2f       	mov	r22, r25
    6660:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6664:	80 5d       	subi	r24, 0xD0	; 208
    6666:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Time_Hour % 10 + 48);
    666a:	80 91 54 03 	lds	r24, 0x0354
    666e:	9a e0       	ldi	r25, 0x0A	; 10
    6670:	69 2f       	mov	r22, r25
    6672:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6676:	89 2f       	mov	r24, r25
    6678:	80 5d       	subi	r24, 0xD0	; 208
    667a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    667e:	86 ee       	ldi	r24, 0xE6	; 230
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSendData(Time_Minute / 10 + 48);
    6686:	80 91 96 03 	lds	r24, 0x0396
    668a:	9a e0       	ldi	r25, 0x0A	; 10
    668c:	69 2f       	mov	r22, r25
    668e:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6692:	80 5d       	subi	r24, 0xD0	; 208
    6694:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Time_Minute % 10 + 48);
    6698:	80 91 96 03 	lds	r24, 0x0396
    669c:	9a e0       	ldi	r25, 0x0A	; 10
    669e:	69 2f       	mov	r22, r25
    66a0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    66a4:	89 2f       	mov	r24, r25
    66a6:	80 5d       	subi	r24, 0xD0	; 208
    66a8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    66ac:	86 ee       	ldi	r24, 0xE6	; 230
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSendData(Time_Second / 10 + 48);
    66b4:	80 91 97 03 	lds	r24, 0x0397
    66b8:	9a e0       	ldi	r25, 0x0A	; 10
    66ba:	69 2f       	mov	r22, r25
    66bc:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    66c0:	80 5d       	subi	r24, 0xD0	; 208
    66c2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Time_Second % 10 + 48);
    66c6:	80 91 97 03 	lds	r24, 0x0397
    66ca:	9a e0       	ldi	r25, 0x0A	; 10
    66cc:	69 2f       	mov	r22, r25
    66ce:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    66d2:	89 2f       	mov	r24, r25
    66d4:	80 5d       	subi	r24, 0xD0	; 208
    66d6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

				if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    66da:	eb e3       	ldi	r30, 0x3B	; 59
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	80 81       	ld	r24, Z
    66e0:	88 2f       	mov	r24, r24
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	88 70       	andi	r24, 0x08	; 8
    66e6:	90 70       	andi	r25, 0x00	; 0
    66e8:	95 95       	asr	r25
    66ea:	87 95       	ror	r24
    66ec:	95 95       	asr	r25
    66ee:	87 95       	ror	r24
    66f0:	95 95       	asr	r25
    66f2:	87 95       	ror	r24
    66f4:	81 30       	cpi	r24, 0x01	; 1
    66f6:	91 05       	cpc	r25, r1
    66f8:	29 f4       	brne	.+10     	; 0x6704 <Set_Time+0x6b0>
				{
					CLCD_vSendString(" AM");
    66fa:	8a ee       	ldi	r24, 0xEA	; 234
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6702:	04 c0       	rjmp	.+8      	; 0x670c <Set_Time+0x6b8>
				}
				else
				{
					CLCD_vSendString(" PM");
    6704:	8e ee       	ldi	r24, 0xEE	; 238
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				}
				CLCD_vSetPosition(2, 1);
    670c:	82 e0       	ldi	r24, 0x02	; 2
    670e:	61 e0       	ldi	r22, 0x01	; 1
    6710:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("1 : AM    2 : PM");
    6714:	8e e3       	ldi	r24, 0x3E	; 62
    6716:	91 e0       	ldi	r25, 0x01	; 1
    6718:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			}
			else
			{
			}
		} while (Time_DayFlag == NOTPRESSED || (Time_DayFlag != '1' && Time_DayFlag != '2'));
    671c:	80 91 99 03 	lds	r24, 0x0399
    6720:	8f 3f       	cpi	r24, 0xFF	; 255
    6722:	09 f4       	brne	.+2      	; 0x6726 <Set_Time+0x6d2>
    6724:	08 cf       	rjmp	.-496    	; 0x6536 <Set_Time+0x4e2>
    6726:	80 91 99 03 	lds	r24, 0x0399
    672a:	81 33       	cpi	r24, 0x31	; 49
    672c:	29 f0       	breq	.+10     	; 0x6738 <Set_Time+0x6e4>
    672e:	80 91 99 03 	lds	r24, 0x0399
    6732:	82 33       	cpi	r24, 0x32	; 50
    6734:	09 f0       	breq	.+2      	; 0x6738 <Set_Time+0x6e4>
    6736:	ff ce       	rjmp	.-514    	; 0x6536 <Set_Time+0x4e2>

		// if day time is AM
		if (Time_DayFlag == '1')
    6738:	80 91 99 03 	lds	r24, 0x0399
    673c:	81 33       	cpi	r24, 0x31	; 49
    673e:	41 f4       	brne	.+16     	; 0x6750 <Set_Time+0x6fc>
		{
			SET_BIT(PORTA_REG, DIO_PIN3);
    6740:	ab e3       	ldi	r26, 0x3B	; 59
    6742:	b0 e0       	ldi	r27, 0x00	; 0
    6744:	eb e3       	ldi	r30, 0x3B	; 59
    6746:	f0 e0       	ldi	r31, 0x00	; 0
    6748:	80 81       	ld	r24, Z
    674a:	88 60       	ori	r24, 0x08	; 8
    674c:	8c 93       	st	X, r24
    674e:	0b c0       	rjmp	.+22     	; 0x6766 <Set_Time+0x712>
		}
		// if day time is PM
		else if (Time_DayFlag == '2')
    6750:	80 91 99 03 	lds	r24, 0x0399
    6754:	82 33       	cpi	r24, 0x32	; 50
    6756:	39 f4       	brne	.+14     	; 0x6766 <Set_Time+0x712>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    6758:	ab e3       	ldi	r26, 0x3B	; 59
    675a:	b0 e0       	ldi	r27, 0x00	; 0
    675c:	eb e3       	ldi	r30, 0x3B	; 59
    675e:	f0 e0       	ldi	r31, 0x00	; 0
    6760:	80 81       	ld	r24, Z
    6762:	87 7f       	andi	r24, 0xF7	; 247
    6764:	8c 93       	st	X, r24
	else
	{

	}
	//to make sure that the user enter correct our or not to Re enter Clock again
	CLCD_vClearScreen();
    6766:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("Set Time ?");
    676a:	8c e5       	ldi	r24, 0x5C	; 92
    676c:	91 e0       	ldi	r25, 0x01	; 1
    676e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6772:	82 e0       	ldi	r24, 0x02	; 2
    6774:	61 e0       	ldi	r22, 0x01	; 1
    6776:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("1 : OK    2 : Cancel");
    677a:	87 e6       	ldi	r24, 0x67	; 103
    677c:	91 e0       	ldi	r25, 0x01	; 1
    677e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6782:	83 e0       	ldi	r24, 0x03	; 3
    6784:	61 e0       	ldi	r22, 0x01	; 1
    6786:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("Cancel to Set");
    678a:	8c e7       	ldi	r24, 0x7C	; 124
    678c:	91 e0       	ldi	r25, 0x01	; 1
    678e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 1);
    6792:	84 e0       	ldi	r24, 0x04	; 4
    6794:	61 e0       	ldi	r22, 0x01	; 1
    6796:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("Time Again");
    679a:	8a e8       	ldi	r24, 0x8A	; 138
    679c:	91 e0       	ldi	r25, 0x01	; 1
    679e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	do
	{
		KPD_Press = KPD_u8GetPressed();
    67a2:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    67a6:	80 93 9a 03 	sts	0x039A, r24
		//when input invalid val
		if (KPD_Press != NOTPRESSED && (KPD_Press != '1' && KPD_Press != '2'))
    67aa:	80 91 9a 03 	lds	r24, 0x039A
    67ae:	8f 3f       	cpi	r24, 0xFF	; 255
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <Set_Time+0x760>
    67b2:	a0 c0       	rjmp	.+320    	; 0x68f4 <Set_Time+0x8a0>
    67b4:	80 91 9a 03 	lds	r24, 0x039A
    67b8:	81 33       	cpi	r24, 0x31	; 49
    67ba:	09 f4       	brne	.+2      	; 0x67be <Set_Time+0x76a>
    67bc:	9b c0       	rjmp	.+310    	; 0x68f4 <Set_Time+0x8a0>
    67be:	80 91 9a 03 	lds	r24, 0x039A
    67c2:	82 33       	cpi	r24, 0x32	; 50
    67c4:	09 f4       	brne	.+2      	; 0x67c8 <Set_Time+0x774>
    67c6:	96 c0       	rjmp	.+300    	; 0x68f4 <Set_Time+0x8a0>
		{
			CLCD_vClearScreen();
    67c8:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Wrong Choise");
    67cc:	8f e4       	ldi	r24, 0x4F	; 79
    67ce:	91 e0       	ldi	r25, 0x01	; 1
    67d0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	aa ef       	ldi	r26, 0xFA	; 250
    67da:	b3 e4       	ldi	r27, 0x43	; 67
    67dc:	8b 87       	std	Y+11, r24	; 0x0b
    67de:	9c 87       	std	Y+12, r25	; 0x0c
    67e0:	ad 87       	std	Y+13, r26	; 0x0d
    67e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    67e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    67e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    67ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    67ec:	20 e0       	ldi	r18, 0x00	; 0
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	4a ef       	ldi	r20, 0xFA	; 250
    67f2:	54 e4       	ldi	r21, 0x44	; 68
    67f4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    67f8:	dc 01       	movw	r26, r24
    67fa:	cb 01       	movw	r24, r22
    67fc:	8f 83       	std	Y+7, r24	; 0x07
    67fe:	98 87       	std	Y+8, r25	; 0x08
    6800:	a9 87       	std	Y+9, r26	; 0x09
    6802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6804:	6f 81       	ldd	r22, Y+7	; 0x07
    6806:	78 85       	ldd	r23, Y+8	; 0x08
    6808:	89 85       	ldd	r24, Y+9	; 0x09
    680a:	9a 85       	ldd	r25, Y+10	; 0x0a
    680c:	20 e0       	ldi	r18, 0x00	; 0
    680e:	30 e0       	ldi	r19, 0x00	; 0
    6810:	40 e8       	ldi	r20, 0x80	; 128
    6812:	5f e3       	ldi	r21, 0x3F	; 63
    6814:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6818:	88 23       	and	r24, r24
    681a:	2c f4       	brge	.+10     	; 0x6826 <Set_Time+0x7d2>
		__ticks = 1;
    681c:	81 e0       	ldi	r24, 0x01	; 1
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	9e 83       	std	Y+6, r25	; 0x06
    6822:	8d 83       	std	Y+5, r24	; 0x05
    6824:	3f c0       	rjmp	.+126    	; 0x68a4 <Set_Time+0x850>
	else if (__tmp > 65535)
    6826:	6f 81       	ldd	r22, Y+7	; 0x07
    6828:	78 85       	ldd	r23, Y+8	; 0x08
    682a:	89 85       	ldd	r24, Y+9	; 0x09
    682c:	9a 85       	ldd	r25, Y+10	; 0x0a
    682e:	20 e0       	ldi	r18, 0x00	; 0
    6830:	3f ef       	ldi	r19, 0xFF	; 255
    6832:	4f e7       	ldi	r20, 0x7F	; 127
    6834:	57 e4       	ldi	r21, 0x47	; 71
    6836:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    683a:	18 16       	cp	r1, r24
    683c:	4c f5       	brge	.+82     	; 0x6890 <Set_Time+0x83c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    683e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6840:	7c 85       	ldd	r23, Y+12	; 0x0c
    6842:	8d 85       	ldd	r24, Y+13	; 0x0d
    6844:	9e 85       	ldd	r25, Y+14	; 0x0e
    6846:	20 e0       	ldi	r18, 0x00	; 0
    6848:	30 e0       	ldi	r19, 0x00	; 0
    684a:	40 e2       	ldi	r20, 0x20	; 32
    684c:	51 e4       	ldi	r21, 0x41	; 65
    684e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6852:	dc 01       	movw	r26, r24
    6854:	cb 01       	movw	r24, r22
    6856:	bc 01       	movw	r22, r24
    6858:	cd 01       	movw	r24, r26
    685a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    685e:	dc 01       	movw	r26, r24
    6860:	cb 01       	movw	r24, r22
    6862:	9e 83       	std	Y+6, r25	; 0x06
    6864:	8d 83       	std	Y+5, r24	; 0x05
    6866:	0f c0       	rjmp	.+30     	; 0x6886 <Set_Time+0x832>
    6868:	88 ec       	ldi	r24, 0xC8	; 200
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	9c 83       	std	Y+4, r25	; 0x04
    686e:	8b 83       	std	Y+3, r24	; 0x03
    6870:	8b 81       	ldd	r24, Y+3	; 0x03
    6872:	9c 81       	ldd	r25, Y+4	; 0x04
    6874:	01 97       	sbiw	r24, 0x01	; 1
    6876:	f1 f7       	brne	.-4      	; 0x6874 <Set_Time+0x820>
    6878:	9c 83       	std	Y+4, r25	; 0x04
    687a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    687c:	8d 81       	ldd	r24, Y+5	; 0x05
    687e:	9e 81       	ldd	r25, Y+6	; 0x06
    6880:	01 97       	sbiw	r24, 0x01	; 1
    6882:	9e 83       	std	Y+6, r25	; 0x06
    6884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6886:	8d 81       	ldd	r24, Y+5	; 0x05
    6888:	9e 81       	ldd	r25, Y+6	; 0x06
    688a:	00 97       	sbiw	r24, 0x00	; 0
    688c:	69 f7       	brne	.-38     	; 0x6868 <Set_Time+0x814>
    688e:	14 c0       	rjmp	.+40     	; 0x68b8 <Set_Time+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6890:	6f 81       	ldd	r22, Y+7	; 0x07
    6892:	78 85       	ldd	r23, Y+8	; 0x08
    6894:	89 85       	ldd	r24, Y+9	; 0x09
    6896:	9a 85       	ldd	r25, Y+10	; 0x0a
    6898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    689c:	dc 01       	movw	r26, r24
    689e:	cb 01       	movw	r24, r22
    68a0:	9e 83       	std	Y+6, r25	; 0x06
    68a2:	8d 83       	std	Y+5, r24	; 0x05
    68a4:	8d 81       	ldd	r24, Y+5	; 0x05
    68a6:	9e 81       	ldd	r25, Y+6	; 0x06
    68a8:	9a 83       	std	Y+2, r25	; 0x02
    68aa:	89 83       	std	Y+1, r24	; 0x01
    68ac:	89 81       	ldd	r24, Y+1	; 0x01
    68ae:	9a 81       	ldd	r25, Y+2	; 0x02
    68b0:	01 97       	sbiw	r24, 0x01	; 1
    68b2:	f1 f7       	brne	.-4      	; 0x68b0 <Set_Time+0x85c>
    68b4:	9a 83       	std	Y+2, r25	; 0x02
    68b6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_vClearScreen();
    68b8:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Set Time ?");
    68bc:	8c e5       	ldi	r24, 0x5C	; 92
    68be:	91 e0       	ldi	r25, 0x01	; 1
    68c0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    68c4:	82 e0       	ldi	r24, 0x02	; 2
    68c6:	61 e0       	ldi	r22, 0x01	; 1
    68c8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("1 : OK    2 : Cancel");
    68cc:	87 e6       	ldi	r24, 0x67	; 103
    68ce:	91 e0       	ldi	r25, 0x01	; 1
    68d0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    68d4:	83 e0       	ldi	r24, 0x03	; 3
    68d6:	61 e0       	ldi	r22, 0x01	; 1
    68d8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Cancel to Set");
    68dc:	8c e7       	ldi	r24, 0x7C	; 124
    68de:	91 e0       	ldi	r25, 0x01	; 1
    68e0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    68e4:	84 e0       	ldi	r24, 0x04	; 4
    68e6:	61 e0       	ldi	r22, 0x01	; 1
    68e8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Time Again");
    68ec:	8a e8       	ldi	r24, 0x8A	; 138
    68ee:	91 e0       	ldi	r25, 0x01	; 1
    68f0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	} while (KPD_Press != '1' && KPD_Press != '2');
    68f4:	80 91 9a 03 	lds	r24, 0x039A
    68f8:	81 33       	cpi	r24, 0x31	; 49
    68fa:	29 f0       	breq	.+10     	; 0x6906 <Set_Time+0x8b2>
    68fc:	80 91 9a 03 	lds	r24, 0x039A
    6900:	82 33       	cpi	r24, 0x32	; 50
    6902:	09 f0       	breq	.+2      	; 0x6906 <Set_Time+0x8b2>
    6904:	4e cf       	rjmp	.-356    	; 0x67a2 <Set_Time+0x74e>

	//when enter correct clock
	if (KPD_Press == '1')
    6906:	80 91 9a 03 	lds	r24, 0x039A
    690a:	81 33       	cpi	r24, 0x31	; 49
    690c:	51 f5       	brne	.+84     	; 0x6962 <Set_Time+0x90e>
	{
		CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    690e:	8c e0       	ldi	r24, 0x0C	; 12
    6910:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
		CLCD_vClearScreen();
    6914:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
		CLCD_vSendString("1 - set time");
    6918:	83 ec       	ldi	r24, 0xC3	; 195
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(2, 1);
    6920:	82 e0       	ldi	r24, 0x02	; 2
    6922:	61 e0       	ldi	r22, 0x01	; 1
    6924:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("2 - select mode");
    6928:	80 ed       	ldi	r24, 0xD0	; 208
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(3, 1);
    6930:	83 e0       	ldi	r24, 0x03	; 3
    6932:	61 e0       	ldi	r22, 0x01	; 1
    6934:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("3 - Set Alarm");
    6938:	85 e9       	ldi	r24, 0x95	; 149
    693a:	90 e0       	ldi	r25, 0x00	; 0
    693c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(4, 1);
    6940:	84 e0       	ldi	r24, 0x04	; 4
    6942:	61 e0       	ldi	r22, 0x01	; 1
    6944:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("4 - Weather");
    6948:	83 ea       	ldi	r24, 0xA3	; 163
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(4, 15);
    6950:	84 e0       	ldi	r24, 0x04	; 4
    6952:	6f e0       	ldi	r22, 0x0F	; 15
    6954:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("X:EXIT");
    6958:	8f ea       	ldi	r24, 0xAF	; 175
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6960:	06 c0       	rjmp	.+12     	; 0x696e <Set_Time+0x91a>
	}
	//when enter incorrect clock
	else if (KPD_Press == '2')
    6962:	80 91 9a 03 	lds	r24, 0x039A
    6966:	82 33       	cpi	r24, 0x32	; 50
    6968:	11 f4       	brne	.+4      	; 0x696e <Set_Time+0x91a>
	{
		Set_Time();
    696a:	0e 94 2a 30 	call	0x6054	; 0x6054 <Set_Time>
	}
}
    696e:	aa 96       	adiw	r28, 0x2a	; 42
    6970:	0f b6       	in	r0, 0x3f	; 63
    6972:	f8 94       	cli
    6974:	de bf       	out	0x3e, r29	; 62
    6976:	0f be       	out	0x3f, r0	; 63
    6978:	cd bf       	out	0x3d, r28	; 61
    697a:	cf 91       	pop	r28
    697c:	df 91       	pop	r29
    697e:	08 95       	ret

00006980 <Select_Mode>:
//======================================================================================================================================//

// Function to select time mode (12-hour or 24-hour)
//it is created for Every possible scenario
void Select_Mode()
{
    6980:	df 93       	push	r29
    6982:	cf 93       	push	r28
    6984:	cd b7       	in	r28, 0x3d	; 61
    6986:	de b7       	in	r29, 0x3e	; 62
    6988:	2f 97       	sbiw	r28, 0x0f	; 15
    698a:	0f b6       	in	r0, 0x3f	; 63
    698c:	f8 94       	cli
    698e:	de bf       	out	0x3e, r29	; 62
    6990:	0f be       	out	0x3f, r0	; 63
    6992:	cd bf       	out	0x3d, r28	; 61

	CLCD_vClearScreen();
    6994:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    6998:	89 e0       	ldi	r24, 0x09	; 9
    699a:	91 e0       	ldi	r25, 0x01	; 1
    699c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    69a0:	82 e0       	ldi	r24, 0x02	; 2
    69a2:	61 e0       	ldi	r22, 0x01	; 1
    69a4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    69a8:	8a e1       	ldi	r24, 0x1A	; 26
    69aa:	91 e0       	ldi	r25, 0x01	; 1
    69ac:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	//Get input from user
	do
	{
		Time_Mode = KPD_u8GetPressed();
    69b0:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    69b4:	80 93 55 03 	sts	0x0355, r24
		//if Select 12 hour mode
		if (Time_Mode == Time_Mode12Hours)
    69b8:	80 91 55 03 	lds	r24, 0x0355
    69bc:	81 33       	cpi	r24, 0x31	; 49
    69be:	a1 f5       	brne	.+104    	; 0x6a28 <Select_Mode+0xa8>
		{
			if (Time_ModeFlag == 0)
    69c0:	80 91 53 03 	lds	r24, 0x0353
    69c4:	88 23       	and	r24, r24
    69c6:	09 f0       	breq	.+2      	; 0x69ca <Select_Mode+0x4a>
    69c8:	03 c1       	rjmp	.+518    	; 0x6bd0 <Select_Mode+0x250>
			{
				if (Time_Hour > 12)
    69ca:	80 91 54 03 	lds	r24, 0x0354
    69ce:	8d 30       	cpi	r24, 0x0D	; 13
    69d0:	30 f0       	brcs	.+12     	; 0x69de <Select_Mode+0x5e>
				{
					Time_Hour -= 12;
    69d2:	80 91 54 03 	lds	r24, 0x0354
    69d6:	8c 50       	subi	r24, 0x0C	; 12
    69d8:	80 93 54 03 	sts	0x0354, r24
    69dc:	21 c0       	rjmp	.+66     	; 0x6a20 <Select_Mode+0xa0>
				}
				else if (Time_Hour == 0 && READ_BIT(PORTA_REG,DIO_PIN3) == 1)
    69de:	80 91 54 03 	lds	r24, 0x0354
    69e2:	88 23       	and	r24, r24
    69e4:	a1 f4       	brne	.+40     	; 0x6a0e <Select_Mode+0x8e>
    69e6:	eb e3       	ldi	r30, 0x3B	; 59
    69e8:	f0 e0       	ldi	r31, 0x00	; 0
    69ea:	80 81       	ld	r24, Z
    69ec:	88 2f       	mov	r24, r24
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	88 70       	andi	r24, 0x08	; 8
    69f2:	90 70       	andi	r25, 0x00	; 0
    69f4:	95 95       	asr	r25
    69f6:	87 95       	ror	r24
    69f8:	95 95       	asr	r25
    69fa:	87 95       	ror	r24
    69fc:	95 95       	asr	r25
    69fe:	87 95       	ror	r24
    6a00:	81 30       	cpi	r24, 0x01	; 1
    6a02:	91 05       	cpc	r25, r1
    6a04:	21 f4       	brne	.+8      	; 0x6a0e <Select_Mode+0x8e>
				{
					Time_Hour = 12;
    6a06:	8c e0       	ldi	r24, 0x0C	; 12
    6a08:	80 93 54 03 	sts	0x0354, r24
    6a0c:	09 c0       	rjmp	.+18     	; 0x6a20 <Select_Mode+0xa0>
				}
				else if (Time_Hour)
    6a0e:	80 91 54 03 	lds	r24, 0x0354
    6a12:	88 23       	and	r24, r24
    6a14:	29 f0       	breq	.+10     	; 0x6a20 <Select_Mode+0xa0>
				{
					Time_Hour += 12;
    6a16:	80 91 54 03 	lds	r24, 0x0354
    6a1a:	84 5f       	subi	r24, 0xF4	; 244
    6a1c:	80 93 54 03 	sts	0x0354, r24
				}
				else
				{
				}
				Time_ModeFlag = 1;
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	80 93 53 03 	sts	0x0353, r24
    6a26:	d4 c0       	rjmp	.+424    	; 0x6bd0 <Select_Mode+0x250>
			else
			{
			}
		}
		//if Select 24 hour mode
		else if (Time_Mode == Time_Mode24Hours)
    6a28:	80 91 55 03 	lds	r24, 0x0355
    6a2c:	82 33       	cpi	r24, 0x32	; 50
    6a2e:	d9 f5       	brne	.+118    	; 0x6aa6 <Select_Mode+0x126>
		{
			if (Time_ModeFlag == 1)
    6a30:	80 91 53 03 	lds	r24, 0x0353
    6a34:	81 30       	cpi	r24, 0x01	; 1
    6a36:	09 f0       	breq	.+2      	; 0x6a3a <Select_Mode+0xba>
    6a38:	cb c0       	rjmp	.+406    	; 0x6bd0 <Select_Mode+0x250>
			{
				if (Time_Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6a3a:	80 91 54 03 	lds	r24, 0x0354
    6a3e:	8c 30       	cpi	r24, 0x0C	; 12
    6a40:	99 f4       	brne	.+38     	; 0x6a68 <Select_Mode+0xe8>
    6a42:	eb e3       	ldi	r30, 0x3B	; 59
    6a44:	f0 e0       	ldi	r31, 0x00	; 0
    6a46:	80 81       	ld	r24, Z
    6a48:	88 2f       	mov	r24, r24
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	88 70       	andi	r24, 0x08	; 8
    6a4e:	90 70       	andi	r25, 0x00	; 0
    6a50:	95 95       	asr	r25
    6a52:	87 95       	ror	r24
    6a54:	95 95       	asr	r25
    6a56:	87 95       	ror	r24
    6a58:	95 95       	asr	r25
    6a5a:	87 95       	ror	r24
    6a5c:	81 30       	cpi	r24, 0x01	; 1
    6a5e:	91 05       	cpc	r25, r1
    6a60:	19 f4       	brne	.+6      	; 0x6a68 <Select_Mode+0xe8>
				{
					Time_Hour = 0;
    6a62:	10 92 54 03 	sts	0x0354, r1
    6a66:	1c c0       	rjmp	.+56     	; 0x6aa0 <Select_Mode+0x120>
				}
				else if (Time_Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3 == 0))
    6a68:	80 91 54 03 	lds	r24, 0x0354
    6a6c:	8c 30       	cpi	r24, 0x0C	; 12
    6a6e:	21 f4       	brne	.+8      	; 0x6a78 <Select_Mode+0xf8>
    6a70:	eb e3       	ldi	r30, 0x3B	; 59
    6a72:	f0 e0       	ldi	r31, 0x00	; 0
    6a74:	80 81       	ld	r24, Z
    6a76:	14 c0       	rjmp	.+40     	; 0x6aa0 <Select_Mode+0x120>
				{
				}
				else if (READ_BIT(PORTA_REG, DIO_PIN3) == 0)
    6a78:	eb e3       	ldi	r30, 0x3B	; 59
    6a7a:	f0 e0       	ldi	r31, 0x00	; 0
    6a7c:	80 81       	ld	r24, Z
    6a7e:	88 2f       	mov	r24, r24
    6a80:	90 e0       	ldi	r25, 0x00	; 0
    6a82:	88 70       	andi	r24, 0x08	; 8
    6a84:	90 70       	andi	r25, 0x00	; 0
    6a86:	95 95       	asr	r25
    6a88:	87 95       	ror	r24
    6a8a:	95 95       	asr	r25
    6a8c:	87 95       	ror	r24
    6a8e:	95 95       	asr	r25
    6a90:	87 95       	ror	r24
    6a92:	00 97       	sbiw	r24, 0x00	; 0
    6a94:	29 f4       	brne	.+10     	; 0x6aa0 <Select_Mode+0x120>
				{
					Time_Hour += 12;
    6a96:	80 91 54 03 	lds	r24, 0x0354
    6a9a:	84 5f       	subi	r24, 0xF4	; 244
    6a9c:	80 93 54 03 	sts	0x0354, r24
				}
				else
				{
				}
				Time_ModeFlag = 0;
    6aa0:	10 92 53 03 	sts	0x0353, r1
    6aa4:	95 c0       	rjmp	.+298    	; 0x6bd0 <Select_Mode+0x250>
			else
			{
			}
		}
		//when inter invalid choose
		else if (Time_Mode != NOTPRESSED && (Time_Mode != '1' && Time_Mode != '2'))
    6aa6:	80 91 55 03 	lds	r24, 0x0355
    6aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    6aac:	09 f4       	brne	.+2      	; 0x6ab0 <Select_Mode+0x130>
    6aae:	90 c0       	rjmp	.+288    	; 0x6bd0 <Select_Mode+0x250>
    6ab0:	80 91 55 03 	lds	r24, 0x0355
    6ab4:	81 33       	cpi	r24, 0x31	; 49
    6ab6:	09 f4       	brne	.+2      	; 0x6aba <Select_Mode+0x13a>
    6ab8:	8b c0       	rjmp	.+278    	; 0x6bd0 <Select_Mode+0x250>
    6aba:	80 91 55 03 	lds	r24, 0x0355
    6abe:	82 33       	cpi	r24, 0x32	; 50
    6ac0:	09 f4       	brne	.+2      	; 0x6ac4 <Select_Mode+0x144>
    6ac2:	86 c0       	rjmp	.+268    	; 0x6bd0 <Select_Mode+0x250>
		{
			CLCD_vClearScreen();
    6ac4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Wrong choise");
    6ac8:	85 e9       	ldi	r24, 0x95	; 149
    6aca:	91 e0       	ldi	r25, 0x01	; 1
    6acc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6ad0:	80 e0       	ldi	r24, 0x00	; 0
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	aa ef       	ldi	r26, 0xFA	; 250
    6ad6:	b3 e4       	ldi	r27, 0x43	; 67
    6ad8:	8b 87       	std	Y+11, r24	; 0x0b
    6ada:	9c 87       	std	Y+12, r25	; 0x0c
    6adc:	ad 87       	std	Y+13, r26	; 0x0d
    6ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ae8:	20 e0       	ldi	r18, 0x00	; 0
    6aea:	30 e0       	ldi	r19, 0x00	; 0
    6aec:	4a ef       	ldi	r20, 0xFA	; 250
    6aee:	54 e4       	ldi	r21, 0x44	; 68
    6af0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6af4:	dc 01       	movw	r26, r24
    6af6:	cb 01       	movw	r24, r22
    6af8:	8f 83       	std	Y+7, r24	; 0x07
    6afa:	98 87       	std	Y+8, r25	; 0x08
    6afc:	a9 87       	std	Y+9, r26	; 0x09
    6afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b00:	6f 81       	ldd	r22, Y+7	; 0x07
    6b02:	78 85       	ldd	r23, Y+8	; 0x08
    6b04:	89 85       	ldd	r24, Y+9	; 0x09
    6b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b08:	20 e0       	ldi	r18, 0x00	; 0
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
    6b0c:	40 e8       	ldi	r20, 0x80	; 128
    6b0e:	5f e3       	ldi	r21, 0x3F	; 63
    6b10:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6b14:	88 23       	and	r24, r24
    6b16:	2c f4       	brge	.+10     	; 0x6b22 <Select_Mode+0x1a2>
		__ticks = 1;
    6b18:	81 e0       	ldi	r24, 0x01	; 1
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	9e 83       	std	Y+6, r25	; 0x06
    6b1e:	8d 83       	std	Y+5, r24	; 0x05
    6b20:	3f c0       	rjmp	.+126    	; 0x6ba0 <Select_Mode+0x220>
	else if (__tmp > 65535)
    6b22:	6f 81       	ldd	r22, Y+7	; 0x07
    6b24:	78 85       	ldd	r23, Y+8	; 0x08
    6b26:	89 85       	ldd	r24, Y+9	; 0x09
    6b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b2a:	20 e0       	ldi	r18, 0x00	; 0
    6b2c:	3f ef       	ldi	r19, 0xFF	; 255
    6b2e:	4f e7       	ldi	r20, 0x7F	; 127
    6b30:	57 e4       	ldi	r21, 0x47	; 71
    6b32:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6b36:	18 16       	cp	r1, r24
    6b38:	4c f5       	brge	.+82     	; 0x6b8c <Select_Mode+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b42:	20 e0       	ldi	r18, 0x00	; 0
    6b44:	30 e0       	ldi	r19, 0x00	; 0
    6b46:	40 e2       	ldi	r20, 0x20	; 32
    6b48:	51 e4       	ldi	r21, 0x41	; 65
    6b4a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6b4e:	dc 01       	movw	r26, r24
    6b50:	cb 01       	movw	r24, r22
    6b52:	bc 01       	movw	r22, r24
    6b54:	cd 01       	movw	r24, r26
    6b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b5a:	dc 01       	movw	r26, r24
    6b5c:	cb 01       	movw	r24, r22
    6b5e:	9e 83       	std	Y+6, r25	; 0x06
    6b60:	8d 83       	std	Y+5, r24	; 0x05
    6b62:	0f c0       	rjmp	.+30     	; 0x6b82 <Select_Mode+0x202>
    6b64:	88 ec       	ldi	r24, 0xC8	; 200
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	9c 83       	std	Y+4, r25	; 0x04
    6b6a:	8b 83       	std	Y+3, r24	; 0x03
    6b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b70:	01 97       	sbiw	r24, 0x01	; 1
    6b72:	f1 f7       	brne	.-4      	; 0x6b70 <Select_Mode+0x1f0>
    6b74:	9c 83       	std	Y+4, r25	; 0x04
    6b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b78:	8d 81       	ldd	r24, Y+5	; 0x05
    6b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b7c:	01 97       	sbiw	r24, 0x01	; 1
    6b7e:	9e 83       	std	Y+6, r25	; 0x06
    6b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b82:	8d 81       	ldd	r24, Y+5	; 0x05
    6b84:	9e 81       	ldd	r25, Y+6	; 0x06
    6b86:	00 97       	sbiw	r24, 0x00	; 0
    6b88:	69 f7       	brne	.-38     	; 0x6b64 <Select_Mode+0x1e4>
    6b8a:	14 c0       	rjmp	.+40     	; 0x6bb4 <Select_Mode+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6b8e:	78 85       	ldd	r23, Y+8	; 0x08
    6b90:	89 85       	ldd	r24, Y+9	; 0x09
    6b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b98:	dc 01       	movw	r26, r24
    6b9a:	cb 01       	movw	r24, r22
    6b9c:	9e 83       	std	Y+6, r25	; 0x06
    6b9e:	8d 83       	std	Y+5, r24	; 0x05
    6ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ba4:	9a 83       	std	Y+2, r25	; 0x02
    6ba6:	89 83       	std	Y+1, r24	; 0x01
    6ba8:	89 81       	ldd	r24, Y+1	; 0x01
    6baa:	9a 81       	ldd	r25, Y+2	; 0x02
    6bac:	01 97       	sbiw	r24, 0x01	; 1
    6bae:	f1 f7       	brne	.-4      	; 0x6bac <Select_Mode+0x22c>
    6bb0:	9a 83       	std	Y+2, r25	; 0x02
    6bb2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_vClearScreen();
    6bb4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    6bb8:	89 e0       	ldi	r24, 0x09	; 9
    6bba:	91 e0       	ldi	r25, 0x01	; 1
    6bbc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6bc0:	82 e0       	ldi	r24, 0x02	; 2
    6bc2:	61 e0       	ldi	r22, 0x01	; 1
    6bc4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    6bc8:	8a e1       	ldi	r24, 0x1A	; 26
    6bca:	91 e0       	ldi	r25, 0x01	; 1
    6bcc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}

	} while (Time_Mode == NOTPRESSED || (Time_Mode != '1' && Time_Mode != '2'));
    6bd0:	80 91 55 03 	lds	r24, 0x0355
    6bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <Select_Mode+0x25a>
    6bd8:	eb ce       	rjmp	.-554    	; 0x69b0 <Select_Mode+0x30>
    6bda:	80 91 55 03 	lds	r24, 0x0355
    6bde:	81 33       	cpi	r24, 0x31	; 49
    6be0:	29 f0       	breq	.+10     	; 0x6bec <Select_Mode+0x26c>
    6be2:	80 91 55 03 	lds	r24, 0x0355
    6be6:	82 33       	cpi	r24, 0x32	; 50
    6be8:	09 f0       	breq	.+2      	; 0x6bec <Select_Mode+0x26c>
    6bea:	e2 ce       	rjmp	.-572    	; 0x69b0 <Select_Mode+0x30>

	//when choose any of them
	CLCD_vClearScreen();
    6bec:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - set time");
    6bf0:	83 ec       	ldi	r24, 0xC3	; 195
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6bf8:	82 e0       	ldi	r24, 0x02	; 2
    6bfa:	61 e0       	ldi	r22, 0x01	; 1
    6bfc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - select mode");
    6c00:	80 ed       	ldi	r24, 0xD0	; 208
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6c08:	83 e0       	ldi	r24, 0x03	; 3
    6c0a:	61 e0       	ldi	r22, 0x01	; 1
    6c0c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("3 - Set Alarm");
    6c10:	85 e9       	ldi	r24, 0x95	; 149
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 1);
    6c18:	84 e0       	ldi	r24, 0x04	; 4
    6c1a:	61 e0       	ldi	r22, 0x01	; 1
    6c1c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("4 - Weather");
    6c20:	83 ea       	ldi	r24, 0xA3	; 163
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 15);
    6c28:	84 e0       	ldi	r24, 0x04	; 4
    6c2a:	6f e0       	ldi	r22, 0x0F	; 15
    6c2c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("X:EXIT");
    6c30:	8f ea       	ldi	r24, 0xAF	; 175
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
}
    6c38:	2f 96       	adiw	r28, 0x0f	; 15
    6c3a:	0f b6       	in	r0, 0x3f	; 63
    6c3c:	f8 94       	cli
    6c3e:	de bf       	out	0x3e, r29	; 62
    6c40:	0f be       	out	0x3f, r0	; 63
    6c42:	cd bf       	out	0x3d, r28	; 61
    6c44:	cf 91       	pop	r28
    6c46:	df 91       	pop	r29
    6c48:	08 95       	ret

00006c4a <Set_Alarm>:

//======================================================================================================================================//

/* Fuction To set the time when Alarm is Ringing */
void Set_Alarm()
{
    6c4a:	df 93       	push	r29
    6c4c:	cf 93       	push	r28
    6c4e:	cd b7       	in	r28, 0x3d	; 61
    6c50:	de b7       	in	r29, 0x3e	; 62
    6c52:	e3 97       	sbiw	r28, 0x33	; 51
    6c54:	0f b6       	in	r0, 0x3f	; 63
    6c56:	f8 94       	cli
    6c58:	de bf       	out	0x3e, r29	; 62
    6c5a:	0f be       	out	0x3f, r0	; 63
    6c5c:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    6c5e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("ALARM");
    6c62:	82 ea       	ldi	r24, 0xA2	; 162
    6c64:	91 e0       	ldi	r25, 0x01	; 1
    6c66:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6c6a:	82 e0       	ldi	r24, 0x02	; 2
    6c6c:	61 e0       	ldi	r22, 0x01	; 1
    6c6e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("1 - Enable");
    6c72:	88 ea       	ldi	r24, 0xA8	; 168
    6c74:	91 e0       	ldi	r25, 0x01	; 1
    6c76:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6c7a:	83 e0       	ldi	r24, 0x03	; 3
    6c7c:	61 e0       	ldi	r22, 0x01	; 1
    6c7e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - Disable");
    6c82:	83 eb       	ldi	r24, 0xB3	; 179
    6c84:	91 e0       	ldi	r25, 0x01	; 1
    6c86:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

	/* Get pressed to choose if Alarm Statsu IS Enable or Disaple */
	do
	{
		KPD_Press = KPD_u8GetPressed();
    6c8a:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6c8e:	80 93 9a 03 	sts	0x039A, r24
		if (KPD_Press != NOTPRESSED && KPD_Press != '1' && KPD_Press != '2')
    6c92:	80 91 9a 03 	lds	r24, 0x039A
    6c96:	8f 3f       	cpi	r24, 0xFF	; 255
    6c98:	09 f4       	brne	.+2      	; 0x6c9c <Set_Alarm+0x52>
    6c9a:	98 c0       	rjmp	.+304    	; 0x6dcc <Set_Alarm+0x182>
    6c9c:	80 91 9a 03 	lds	r24, 0x039A
    6ca0:	81 33       	cpi	r24, 0x31	; 49
    6ca2:	09 f4       	brne	.+2      	; 0x6ca6 <Set_Alarm+0x5c>
    6ca4:	93 c0       	rjmp	.+294    	; 0x6dcc <Set_Alarm+0x182>
    6ca6:	80 91 9a 03 	lds	r24, 0x039A
    6caa:	82 33       	cpi	r24, 0x32	; 50
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <Set_Alarm+0x66>
    6cae:	8e c0       	rjmp	.+284    	; 0x6dcc <Set_Alarm+0x182>
		{
			CLCD_vClearScreen();
    6cb0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Wrong Choise");
    6cb4:	8f e4       	ldi	r24, 0x4F	; 79
    6cb6:	91 e0       	ldi	r25, 0x01	; 1
    6cb8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6cbc:	80 e0       	ldi	r24, 0x00	; 0
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	aa ef       	ldi	r26, 0xFA	; 250
    6cc2:	b3 e4       	ldi	r27, 0x43	; 67
    6cc4:	8f a3       	std	Y+39, r24	; 0x27
    6cc6:	98 a7       	std	Y+40, r25	; 0x28
    6cc8:	a9 a7       	std	Y+41, r26	; 0x29
    6cca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    6cce:	78 a5       	ldd	r23, Y+40	; 0x28
    6cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    6cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    6cd4:	20 e0       	ldi	r18, 0x00	; 0
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	4a ef       	ldi	r20, 0xFA	; 250
    6cda:	54 e4       	ldi	r21, 0x44	; 68
    6cdc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6ce0:	dc 01       	movw	r26, r24
    6ce2:	cb 01       	movw	r24, r22
    6ce4:	8b a3       	std	Y+35, r24	; 0x23
    6ce6:	9c a3       	std	Y+36, r25	; 0x24
    6ce8:	ad a3       	std	Y+37, r26	; 0x25
    6cea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6cec:	6b a1       	ldd	r22, Y+35	; 0x23
    6cee:	7c a1       	ldd	r23, Y+36	; 0x24
    6cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    6cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    6cf4:	20 e0       	ldi	r18, 0x00	; 0
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
    6cf8:	40 e8       	ldi	r20, 0x80	; 128
    6cfa:	5f e3       	ldi	r21, 0x3F	; 63
    6cfc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6d00:	88 23       	and	r24, r24
    6d02:	2c f4       	brge	.+10     	; 0x6d0e <Set_Alarm+0xc4>
		__ticks = 1;
    6d04:	81 e0       	ldi	r24, 0x01	; 1
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	9a a3       	std	Y+34, r25	; 0x22
    6d0a:	89 a3       	std	Y+33, r24	; 0x21
    6d0c:	3f c0       	rjmp	.+126    	; 0x6d8c <Set_Alarm+0x142>
	else if (__tmp > 65535)
    6d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    6d10:	7c a1       	ldd	r23, Y+36	; 0x24
    6d12:	8d a1       	ldd	r24, Y+37	; 0x25
    6d14:	9e a1       	ldd	r25, Y+38	; 0x26
    6d16:	20 e0       	ldi	r18, 0x00	; 0
    6d18:	3f ef       	ldi	r19, 0xFF	; 255
    6d1a:	4f e7       	ldi	r20, 0x7F	; 127
    6d1c:	57 e4       	ldi	r21, 0x47	; 71
    6d1e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6d22:	18 16       	cp	r1, r24
    6d24:	4c f5       	brge	.+82     	; 0x6d78 <Set_Alarm+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d26:	6f a1       	ldd	r22, Y+39	; 0x27
    6d28:	78 a5       	ldd	r23, Y+40	; 0x28
    6d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    6d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    6d2e:	20 e0       	ldi	r18, 0x00	; 0
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	40 e2       	ldi	r20, 0x20	; 32
    6d34:	51 e4       	ldi	r21, 0x41	; 65
    6d36:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6d3a:	dc 01       	movw	r26, r24
    6d3c:	cb 01       	movw	r24, r22
    6d3e:	bc 01       	movw	r22, r24
    6d40:	cd 01       	movw	r24, r26
    6d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d46:	dc 01       	movw	r26, r24
    6d48:	cb 01       	movw	r24, r22
    6d4a:	9a a3       	std	Y+34, r25	; 0x22
    6d4c:	89 a3       	std	Y+33, r24	; 0x21
    6d4e:	0f c0       	rjmp	.+30     	; 0x6d6e <Set_Alarm+0x124>
    6d50:	88 ec       	ldi	r24, 0xC8	; 200
    6d52:	90 e0       	ldi	r25, 0x00	; 0
    6d54:	98 a3       	std	Y+32, r25	; 0x20
    6d56:	8f 8f       	std	Y+31, r24	; 0x1f
    6d58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6d5a:	98 a1       	ldd	r25, Y+32	; 0x20
    6d5c:	01 97       	sbiw	r24, 0x01	; 1
    6d5e:	f1 f7       	brne	.-4      	; 0x6d5c <Set_Alarm+0x112>
    6d60:	98 a3       	std	Y+32, r25	; 0x20
    6d62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d64:	89 a1       	ldd	r24, Y+33	; 0x21
    6d66:	9a a1       	ldd	r25, Y+34	; 0x22
    6d68:	01 97       	sbiw	r24, 0x01	; 1
    6d6a:	9a a3       	std	Y+34, r25	; 0x22
    6d6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    6d70:	9a a1       	ldd	r25, Y+34	; 0x22
    6d72:	00 97       	sbiw	r24, 0x00	; 0
    6d74:	69 f7       	brne	.-38     	; 0x6d50 <Set_Alarm+0x106>
    6d76:	14 c0       	rjmp	.+40     	; 0x6da0 <Set_Alarm+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d78:	6b a1       	ldd	r22, Y+35	; 0x23
    6d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    6d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    6d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    6d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d84:	dc 01       	movw	r26, r24
    6d86:	cb 01       	movw	r24, r22
    6d88:	9a a3       	std	Y+34, r25	; 0x22
    6d8a:	89 a3       	std	Y+33, r24	; 0x21
    6d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    6d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    6d90:	9e 8f       	std	Y+30, r25	; 0x1e
    6d92:	8d 8f       	std	Y+29, r24	; 0x1d
    6d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6d96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6d98:	01 97       	sbiw	r24, 0x01	; 1
    6d9a:	f1 f7       	brne	.-4      	; 0x6d98 <Set_Alarm+0x14e>
    6d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    6d9e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			CLCD_vClearScreen();
    6da0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("ALARM");
    6da4:	82 ea       	ldi	r24, 0xA2	; 162
    6da6:	91 e0       	ldi	r25, 0x01	; 1
    6da8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6dac:	82 e0       	ldi	r24, 0x02	; 2
    6dae:	61 e0       	ldi	r22, 0x01	; 1
    6db0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("1 - Enable");
    6db4:	88 ea       	ldi	r24, 0xA8	; 168
    6db6:	91 e0       	ldi	r25, 0x01	; 1
    6db8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    6dbc:	83 e0       	ldi	r24, 0x03	; 3
    6dbe:	61 e0       	ldi	r22, 0x01	; 1
    6dc0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - Disable");
    6dc4:	83 eb       	ldi	r24, 0xB3	; 179
    6dc6:	91 e0       	ldi	r25, 0x01	; 1
    6dc8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	} while (KPD_Press == NOTPRESSED || (KPD_Press != '1' && KPD_Press != '2'));
    6dcc:	80 91 9a 03 	lds	r24, 0x039A
    6dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    6dd2:	09 f4       	brne	.+2      	; 0x6dd6 <Set_Alarm+0x18c>
    6dd4:	5a cf       	rjmp	.-332    	; 0x6c8a <Set_Alarm+0x40>
    6dd6:	80 91 9a 03 	lds	r24, 0x039A
    6dda:	81 33       	cpi	r24, 0x31	; 49
    6ddc:	29 f0       	breq	.+10     	; 0x6de8 <Set_Alarm+0x19e>
    6dde:	80 91 9a 03 	lds	r24, 0x039A
    6de2:	82 33       	cpi	r24, 0x32	; 50
    6de4:	09 f0       	breq	.+2      	; 0x6de8 <Set_Alarm+0x19e>
    6de6:	51 cf       	rjmp	.-350    	; 0x6c8a <Set_Alarm+0x40>

	/*___________________________________________________________________________________________________________________*/

	/* Check if chosen Alarm Status is Enable or Disaple */
	/* if user choose alarm is enable */
	if (KPD_Press == '1')
    6de8:	80 91 9a 03 	lds	r24, 0x039A
    6dec:	81 33       	cpi	r24, 0x31	; 49
    6dee:	09 f0       	breq	.+2      	; 0x6df2 <Set_Alarm+0x1a8>
    6df0:	92 c2       	rjmp	.+1316   	; 0x7316 <Set_Alarm+0x6cc>
	{
		/* Check if Alarm was Enaple or Disaple */
		switch (Alarm_Status)
    6df2:	80 91 95 03 	lds	r24, 0x0395
    6df6:	28 2f       	mov	r18, r24
    6df8:	30 e0       	ldi	r19, 0x00	; 0
    6dfa:	3b ab       	std	Y+51, r19	; 0x33
    6dfc:	2a ab       	std	Y+50, r18	; 0x32
    6dfe:	8a a9       	ldd	r24, Y+50	; 0x32
    6e00:	9b a9       	ldd	r25, Y+51	; 0x33
    6e02:	00 97       	sbiw	r24, 0x00	; 0
    6e04:	31 f0       	breq	.+12     	; 0x6e12 <Set_Alarm+0x1c8>
    6e06:	2a a9       	ldd	r18, Y+50	; 0x32
    6e08:	3b a9       	ldd	r19, Y+51	; 0x33
    6e0a:	21 30       	cpi	r18, 0x01	; 1
    6e0c:	31 05       	cpc	r19, r1
    6e0e:	e9 f0       	breq	.+58     	; 0x6e4a <Set_Alarm+0x200>
    6e10:	6c c0       	rjmp	.+216    	; 0x6eea <Set_Alarm+0x2a0>
		{
		//if Alarm was Disaple display Alarm is 12 : 00
		case Alarm_DIS:
			CLCD_vClearScreen();
    6e12:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6e16:	8f eb       	ldi	r24, 0xBF	; 191
    6e18:	91 e0       	ldi	r25, 0x01	; 1
    6e1a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6e1e:	82 e0       	ldi	r24, 0x02	; 2
    6e20:	66 e0       	ldi	r22, 0x06	; 6
    6e22:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("12 : 00");
    6e26:	8b ec       	ldi	r24, 0xCB	; 203
    6e28:	91 e0       	ldi	r25, 0x01	; 1
    6e2a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			//if Time_Mode is 12 Hours Mode display AM or PM
			if (Time_Mode == Time_Mode12Hours)
    6e2e:	80 91 55 03 	lds	r24, 0x0355
    6e32:	81 33       	cpi	r24, 0x31	; 49
    6e34:	09 f0       	breq	.+2      	; 0x6e38 <Set_Alarm+0x1ee>
    6e36:	59 c0       	rjmp	.+178    	; 0x6eea <Set_Alarm+0x2a0>
			{
				CLCD_vSetPosition(2, 14);
    6e38:	82 e0       	ldi	r24, 0x02	; 2
    6e3a:	6e e0       	ldi	r22, 0x0E	; 14
    6e3c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("AM");
    6e40:	88 e3       	ldi	r24, 0x38	; 56
    6e42:	91 e0       	ldi	r25, 0x01	; 1
    6e44:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6e48:	50 c0       	rjmp	.+160    	; 0x6eea <Set_Alarm+0x2a0>
			}
			break;
			//If Alarm was Enaple display Last Alarm
		case Alarm_EN:
			CLCD_vClearScreen();
    6e4a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6e4e:	8f eb       	ldi	r24, 0xBF	; 191
    6e50:	91 e0       	ldi	r25, 0x01	; 1
    6e52:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6e56:	82 e0       	ldi	r24, 0x02	; 2
    6e58:	66 e0       	ldi	r22, 0x06	; 6
    6e5a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData((Alarm_Hour / 10) + 48);
    6e5e:	80 91 98 03 	lds	r24, 0x0398
    6e62:	9a e0       	ldi	r25, 0x0A	; 10
    6e64:	69 2f       	mov	r22, r25
    6e66:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6e6a:	80 5d       	subi	r24, 0xD0	; 208
    6e6c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Alarm_Hour % 10) + 48);
    6e70:	80 91 98 03 	lds	r24, 0x0398
    6e74:	9a e0       	ldi	r25, 0x0A	; 10
    6e76:	69 2f       	mov	r22, r25
    6e78:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6e7c:	89 2f       	mov	r24, r25
    6e7e:	80 5d       	subi	r24, 0xD0	; 208
    6e80:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendString(" : ");
    6e84:	86 ee       	ldi	r24, 0xE6	; 230
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSendData((Alarm_Minutes / 10) + 48);
    6e8c:	80 91 9b 03 	lds	r24, 0x039B
    6e90:	9a e0       	ldi	r25, 0x0A	; 10
    6e92:	69 2f       	mov	r22, r25
    6e94:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6e98:	80 5d       	subi	r24, 0xD0	; 208
    6e9a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Alarm_Minutes % 10) + 48);
    6e9e:	80 91 9b 03 	lds	r24, 0x039B
    6ea2:	9a e0       	ldi	r25, 0x0A	; 10
    6ea4:	69 2f       	mov	r22, r25
    6ea6:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6eaa:	89 2f       	mov	r24, r25
    6eac:	80 5d       	subi	r24, 0xD0	; 208
    6eae:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

			//if Time_Mode is 12 Hours Mode display AM or PM
			if (Time_Mode == Time_Mode12Hours)
    6eb2:	80 91 55 03 	lds	r24, 0x0355
    6eb6:	81 33       	cpi	r24, 0x31	; 49
    6eb8:	c1 f4       	brne	.+48     	; 0x6eea <Set_Alarm+0x2a0>
			{
				switch (Alarm_DayTime)
    6eba:	80 91 94 03 	lds	r24, 0x0394
    6ebe:	28 2f       	mov	r18, r24
    6ec0:	30 e0       	ldi	r19, 0x00	; 0
    6ec2:	39 ab       	std	Y+49, r19	; 0x31
    6ec4:	28 ab       	std	Y+48, r18	; 0x30
    6ec6:	88 a9       	ldd	r24, Y+48	; 0x30
    6ec8:	99 a9       	ldd	r25, Y+49	; 0x31
    6eca:	00 97       	sbiw	r24, 0x00	; 0
    6ecc:	51 f0       	breq	.+20     	; 0x6ee2 <Set_Alarm+0x298>
    6ece:	28 a9       	ldd	r18, Y+48	; 0x30
    6ed0:	39 a9       	ldd	r19, Y+49	; 0x31
    6ed2:	21 30       	cpi	r18, 0x01	; 1
    6ed4:	31 05       	cpc	r19, r1
    6ed6:	49 f4       	brne	.+18     	; 0x6eea <Set_Alarm+0x2a0>
				{
				case 1:
					CLCD_vSendString(" AM");
    6ed8:	8a ee       	ldi	r24, 0xEA	; 234
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6ee0:	04 c0       	rjmp	.+8      	; 0x6eea <Set_Alarm+0x2a0>
					break;
				case 0:
					CLCD_vSendString(" PM");
    6ee2:	8e ee       	ldi	r24, 0xEE	; 238
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			}
		}

		/*___________________________________________________________________________________________________________________*/

		CLCD_vSetPosition(2, 6);
    6eea:	82 e0       	ldi	r24, 0x02	; 2
    6eec:	66 e0       	ldi	r22, 0x06	; 6
    6eee:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

		CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    6ef2:	8e e0       	ldi	r24, 0x0E	; 14
    6ef4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
		/*___________________________________________________________________________________________________________________*/

		/* Set Alarm_Hour */
		do
		{
			KPD_Press = KPD_u8GetPressed();
    6ef8:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6efc:	80 93 9a 03 	sts	0x039A, r24
		} while (KPD_Press == NOTPRESSED);
    6f00:	80 91 9a 03 	lds	r24, 0x039A
    6f04:	8f 3f       	cpi	r24, 0xFF	; 255
    6f06:	c1 f3       	breq	.-16     	; 0x6ef8 <Set_Alarm+0x2ae>

		CLCD_vSendData(KPD_Press);
    6f08:	80 91 9a 03 	lds	r24, 0x039A
    6f0c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		Alarm_Hour = (KPD_Press - 48) * 10;
    6f10:	80 91 9a 03 	lds	r24, 0x039A
    6f14:	88 2f       	mov	r24, r24
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	9c 01       	movw	r18, r24
    6f1a:	22 0f       	add	r18, r18
    6f1c:	33 1f       	adc	r19, r19
    6f1e:	c9 01       	movw	r24, r18
    6f20:	88 0f       	add	r24, r24
    6f22:	99 1f       	adc	r25, r25
    6f24:	88 0f       	add	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	82 0f       	add	r24, r18
    6f2a:	93 1f       	adc	r25, r19
    6f2c:	80 5e       	subi	r24, 0xE0	; 224
    6f2e:	80 93 98 03 	sts	0x0398, r24
		do
		{
			KPD_Press = KPD_u8GetPressed();
    6f32:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6f36:	80 93 9a 03 	sts	0x039A, r24
		} while (KPD_Press == NOTPRESSED);
    6f3a:	80 91 9a 03 	lds	r24, 0x039A
    6f3e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f40:	c1 f3       	breq	.-16     	; 0x6f32 <Set_Alarm+0x2e8>

		CLCD_vSendData(KPD_Press);
    6f42:	80 91 9a 03 	lds	r24, 0x039A
    6f46:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		Alarm_Hour += (KPD_Press - 48);
    6f4a:	90 91 9a 03 	lds	r25, 0x039A
    6f4e:	80 91 98 03 	lds	r24, 0x0398
    6f52:	89 0f       	add	r24, r25
    6f54:	80 53       	subi	r24, 0x30	; 48
    6f56:	80 93 98 03 	sts	0x0398, r24

		/* Check if it valid or not */
		switch (Time_Mode)
    6f5a:	80 91 55 03 	lds	r24, 0x0355
    6f5e:	28 2f       	mov	r18, r24
    6f60:	30 e0       	ldi	r19, 0x00	; 0
    6f62:	3f a7       	std	Y+47, r19	; 0x2f
    6f64:	2e a7       	std	Y+46, r18	; 0x2e
    6f66:	8e a5       	ldd	r24, Y+46	; 0x2e
    6f68:	9f a5       	ldd	r25, Y+47	; 0x2f
    6f6a:	81 33       	cpi	r24, 0x31	; 49
    6f6c:	91 05       	cpc	r25, r1
    6f6e:	39 f0       	breq	.+14     	; 0x6f7e <Set_Alarm+0x334>
    6f70:	2e a5       	ldd	r18, Y+46	; 0x2e
    6f72:	3f a5       	ldd	r19, Y+47	; 0x2f
    6f74:	22 33       	cpi	r18, 0x32	; 50
    6f76:	31 05       	cpc	r19, r1
    6f78:	09 f4       	brne	.+2      	; 0x6f7c <Set_Alarm+0x332>
    6f7a:	45 c0       	rjmp	.+138    	; 0x7006 <Set_Alarm+0x3bc>
    6f7c:	62 c0       	rjmp	.+196    	; 0x7042 <Set_Alarm+0x3f8>
		{
		// Check if it valid or not In case it is in 12 hour mode
		case Time_Mode12Hours:
			if (Alarm_Hour > 12 && Alarm_Hour < 24)
    6f7e:	80 91 98 03 	lds	r24, 0x0398
    6f82:	8d 30       	cpi	r24, 0x0D	; 13
    6f84:	08 f1       	brcs	.+66     	; 0x6fc8 <Set_Alarm+0x37e>
    6f86:	80 91 98 03 	lds	r24, 0x0398
    6f8a:	88 31       	cpi	r24, 0x18	; 24
    6f8c:	e8 f4       	brcc	.+58     	; 0x6fc8 <Set_Alarm+0x37e>
			{
				Alarm_Hour -= 12;
    6f8e:	80 91 98 03 	lds	r24, 0x0398
    6f92:	8c 50       	subi	r24, 0x0C	; 12
    6f94:	80 93 98 03 	sts	0x0398, r24
				CLCD_vSetPosition(2, 6);
    6f98:	82 e0       	ldi	r24, 0x02	; 2
    6f9a:	66 e0       	ldi	r22, 0x06	; 6
    6f9c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Alarm_Hour / 10) + 48);
    6fa0:	80 91 98 03 	lds	r24, 0x0398
    6fa4:	9a e0       	ldi	r25, 0x0A	; 10
    6fa6:	69 2f       	mov	r22, r25
    6fa8:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6fac:	80 5d       	subi	r24, 0xD0	; 208
    6fae:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Alarm_Hour % 10) + 48);
    6fb2:	80 91 98 03 	lds	r24, 0x0398
    6fb6:	9a e0       	ldi	r25, 0x0A	; 10
    6fb8:	69 2f       	mov	r22, r25
    6fba:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6fbe:	89 2f       	mov	r24, r25
    6fc0:	80 5d       	subi	r24, 0xD0	; 208
    6fc2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    6fc6:	3d c0       	rjmp	.+122    	; 0x7042 <Set_Alarm+0x3f8>
			}
			else if (Alarm_Hour > 23)
    6fc8:	80 91 98 03 	lds	r24, 0x0398
    6fcc:	88 31       	cpi	r24, 0x18	; 24
    6fce:	c8 f1       	brcs	.+114    	; 0x7042 <Set_Alarm+0x3f8>
			{
				Alarm_Hour = 12;
    6fd0:	8c e0       	ldi	r24, 0x0C	; 12
    6fd2:	80 93 98 03 	sts	0x0398, r24
				CLCD_vSetPosition(2, 6);
    6fd6:	82 e0       	ldi	r24, 0x02	; 2
    6fd8:	66 e0       	ldi	r22, 0x06	; 6
    6fda:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Alarm_Hour / 10) + 48);
    6fde:	80 91 98 03 	lds	r24, 0x0398
    6fe2:	9a e0       	ldi	r25, 0x0A	; 10
    6fe4:	69 2f       	mov	r22, r25
    6fe6:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6fea:	80 5d       	subi	r24, 0xD0	; 208
    6fec:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Alarm_Hour % 10) + 48);
    6ff0:	80 91 98 03 	lds	r24, 0x0398
    6ff4:	9a e0       	ldi	r25, 0x0A	; 10
    6ff6:	69 2f       	mov	r22, r25
    6ff8:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    6ffc:	89 2f       	mov	r24, r25
    6ffe:	80 5d       	subi	r24, 0xD0	; 208
    7000:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    7004:	1e c0       	rjmp	.+60     	; 0x7042 <Set_Alarm+0x3f8>
			{
			}
			break;
			// Check if it valid or not In case it is in 24 hour mode
		case Time_Mode24Hours:
			if (Alarm_Hour > 23)
    7006:	80 91 98 03 	lds	r24, 0x0398
    700a:	88 31       	cpi	r24, 0x18	; 24
    700c:	d0 f0       	brcs	.+52     	; 0x7042 <Set_Alarm+0x3f8>
			{
				Alarm_Hour = 12;
    700e:	8c e0       	ldi	r24, 0x0C	; 12
    7010:	80 93 98 03 	sts	0x0398, r24
				CLCD_vSetPosition(2, 6);
    7014:	82 e0       	ldi	r24, 0x02	; 2
    7016:	66 e0       	ldi	r22, 0x06	; 6
    7018:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Alarm_Hour / 10) + 48);
    701c:	80 91 98 03 	lds	r24, 0x0398
    7020:	9a e0       	ldi	r25, 0x0A	; 10
    7022:	69 2f       	mov	r22, r25
    7024:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7028:	80 5d       	subi	r24, 0xD0	; 208
    702a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Alarm_Hour % 10) + 48);
    702e:	80 91 98 03 	lds	r24, 0x0398
    7032:	9a e0       	ldi	r25, 0x0A	; 10
    7034:	69 2f       	mov	r22, r25
    7036:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    703a:	89 2f       	mov	r24, r25
    703c:	80 5d       	subi	r24, 0xD0	; 208
    703e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			break;
		}

		/*___________________________________________________________________________________________________________________*/

		CLCD_vSetPosition(2, 11);
    7042:	82 e0       	ldi	r24, 0x02	; 2
    7044:	6b e0       	ldi	r22, 0x0B	; 11
    7046:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

		/* Set Alarm Minutes */
		do
		{
			KPD_Press = KPD_u8GetPressed();
    704a:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    704e:	80 93 9a 03 	sts	0x039A, r24
		} while (KPD_Press == NOTPRESSED);
    7052:	80 91 9a 03 	lds	r24, 0x039A
    7056:	8f 3f       	cpi	r24, 0xFF	; 255
    7058:	c1 f3       	breq	.-16     	; 0x704a <Set_Alarm+0x400>

		CLCD_vSendData(KPD_Press);
    705a:	80 91 9a 03 	lds	r24, 0x039A
    705e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		Alarm_Minutes = (KPD_Press - 48) * 10;
    7062:	80 91 9a 03 	lds	r24, 0x039A
    7066:	88 2f       	mov	r24, r24
    7068:	90 e0       	ldi	r25, 0x00	; 0
    706a:	9c 01       	movw	r18, r24
    706c:	22 0f       	add	r18, r18
    706e:	33 1f       	adc	r19, r19
    7070:	c9 01       	movw	r24, r18
    7072:	88 0f       	add	r24, r24
    7074:	99 1f       	adc	r25, r25
    7076:	88 0f       	add	r24, r24
    7078:	99 1f       	adc	r25, r25
    707a:	82 0f       	add	r24, r18
    707c:	93 1f       	adc	r25, r19
    707e:	80 5e       	subi	r24, 0xE0	; 224
    7080:	80 93 9b 03 	sts	0x039B, r24
		do
		{
			KPD_Press = KPD_u8GetPressed();
    7084:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    7088:	80 93 9a 03 	sts	0x039A, r24
		} while (KPD_Press == NOTPRESSED);
    708c:	80 91 9a 03 	lds	r24, 0x039A
    7090:	8f 3f       	cpi	r24, 0xFF	; 255
    7092:	c1 f3       	breq	.-16     	; 0x7084 <Set_Alarm+0x43a>

		CLCD_vSendData(KPD_Press);
    7094:	80 91 9a 03 	lds	r24, 0x039A
    7098:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		Alarm_Minutes += (KPD_Press - 48);
    709c:	90 91 9a 03 	lds	r25, 0x039A
    70a0:	80 91 9b 03 	lds	r24, 0x039B
    70a4:	89 0f       	add	r24, r25
    70a6:	80 53       	subi	r24, 0x30	; 48
    70a8:	80 93 9b 03 	sts	0x039B, r24

		//Check if it valid or not
		if (Alarm_Minutes > 59)
    70ac:	80 91 9b 03 	lds	r24, 0x039B
    70b0:	8c 33       	cpi	r24, 0x3C	; 60
    70b2:	c8 f0       	brcs	.+50     	; 0x70e6 <Set_Alarm+0x49c>
		{
			Alarm_Minutes = 0;
    70b4:	10 92 9b 03 	sts	0x039B, r1
			CLCD_vSetPosition(2, 11);
    70b8:	82 e0       	ldi	r24, 0x02	; 2
    70ba:	6b e0       	ldi	r22, 0x0B	; 11
    70bc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData((Alarm_Minutes / 10) + 48);
    70c0:	80 91 9b 03 	lds	r24, 0x039B
    70c4:	9a e0       	ldi	r25, 0x0A	; 10
    70c6:	69 2f       	mov	r22, r25
    70c8:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    70cc:	80 5d       	subi	r24, 0xD0	; 208
    70ce:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Alarm_Minutes % 10) + 48);
    70d2:	80 91 9b 03 	lds	r24, 0x039B
    70d6:	9a e0       	ldi	r25, 0x0A	; 10
    70d8:	69 2f       	mov	r22, r25
    70da:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    70de:	89 2f       	mov	r24, r25
    70e0:	80 5d       	subi	r24, 0xD0	; 208
    70e2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		/*___________________________________________________________________________________________________________________*/

		/* Check time mode to display AM / PM or not and Choose the time mode */
		//if time mode is 12 hours disply AM or PM and choose between them
		if (Time_Mode == Time_Mode12Hours)
    70e6:	80 91 55 03 	lds	r24, 0x0355
    70ea:	81 33       	cpi	r24, 0x31	; 49
    70ec:	09 f0       	breq	.+2      	; 0x70f0 <Set_Alarm+0x4a6>
    70ee:	ff c0       	rjmp	.+510    	; 0x72ee <Set_Alarm+0x6a4>
		{
			CLCD_vSetPosition(3, 1);
    70f0:	83 e0       	ldi	r24, 0x03	; 3
    70f2:	61 e0       	ldi	r22, 0x01	; 1
    70f4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("1 : AM    2 : PM");
    70f8:	8e e3       	ldi	r24, 0x3E	; 62
    70fa:	91 e0       	ldi	r25, 0x01	; 1
    70fc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			do
			{
				Alarm_DayTime = KPD_u8GetPressed();
    7100:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    7104:	80 93 94 03 	sts	0x0394, r24
				//when choose invalid input
				if (Alarm_DayTime != NOTPRESSED && (Alarm_DayTime != '1' && Alarm_DayTime != '2'))
    7108:	80 91 94 03 	lds	r24, 0x0394
    710c:	8f 3f       	cpi	r24, 0xFF	; 255
    710e:	09 f4       	brne	.+2      	; 0x7112 <Set_Alarm+0x4c8>
    7110:	d6 c0       	rjmp	.+428    	; 0x72be <Set_Alarm+0x674>
    7112:	80 91 94 03 	lds	r24, 0x0394
    7116:	81 33       	cpi	r24, 0x31	; 49
    7118:	09 f4       	brne	.+2      	; 0x711c <Set_Alarm+0x4d2>
    711a:	d1 c0       	rjmp	.+418    	; 0x72be <Set_Alarm+0x674>
    711c:	80 91 94 03 	lds	r24, 0x0394
    7120:	82 33       	cpi	r24, 0x32	; 50
    7122:	09 f4       	brne	.+2      	; 0x7126 <Set_Alarm+0x4dc>
    7124:	cc c0       	rjmp	.+408    	; 0x72be <Set_Alarm+0x674>
				{
					CLCD_vClearScreen();
    7126:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
					CLCD_vSendString("Wrong Choise");
    712a:	8f e4       	ldi	r24, 0x4F	; 79
    712c:	91 e0       	ldi	r25, 0x01	; 1
    712e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    7132:	80 e0       	ldi	r24, 0x00	; 0
    7134:	90 e0       	ldi	r25, 0x00	; 0
    7136:	aa ef       	ldi	r26, 0xFA	; 250
    7138:	b3 e4       	ldi	r27, 0x43	; 67
    713a:	89 8f       	std	Y+25, r24	; 0x19
    713c:	9a 8f       	std	Y+26, r25	; 0x1a
    713e:	ab 8f       	std	Y+27, r26	; 0x1b
    7140:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7142:	69 8d       	ldd	r22, Y+25	; 0x19
    7144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    714a:	20 e0       	ldi	r18, 0x00	; 0
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	4a ef       	ldi	r20, 0xFA	; 250
    7150:	54 e4       	ldi	r21, 0x44	; 68
    7152:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7156:	dc 01       	movw	r26, r24
    7158:	cb 01       	movw	r24, r22
    715a:	8d 8b       	std	Y+21, r24	; 0x15
    715c:	9e 8b       	std	Y+22, r25	; 0x16
    715e:	af 8b       	std	Y+23, r26	; 0x17
    7160:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7162:	6d 89       	ldd	r22, Y+21	; 0x15
    7164:	7e 89       	ldd	r23, Y+22	; 0x16
    7166:	8f 89       	ldd	r24, Y+23	; 0x17
    7168:	98 8d       	ldd	r25, Y+24	; 0x18
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	40 e8       	ldi	r20, 0x80	; 128
    7170:	5f e3       	ldi	r21, 0x3F	; 63
    7172:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    7176:	88 23       	and	r24, r24
    7178:	2c f4       	brge	.+10     	; 0x7184 <Set_Alarm+0x53a>
		__ticks = 1;
    717a:	81 e0       	ldi	r24, 0x01	; 1
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	9c 8b       	std	Y+20, r25	; 0x14
    7180:	8b 8b       	std	Y+19, r24	; 0x13
    7182:	3f c0       	rjmp	.+126    	; 0x7202 <Set_Alarm+0x5b8>
	else if (__tmp > 65535)
    7184:	6d 89       	ldd	r22, Y+21	; 0x15
    7186:	7e 89       	ldd	r23, Y+22	; 0x16
    7188:	8f 89       	ldd	r24, Y+23	; 0x17
    718a:	98 8d       	ldd	r25, Y+24	; 0x18
    718c:	20 e0       	ldi	r18, 0x00	; 0
    718e:	3f ef       	ldi	r19, 0xFF	; 255
    7190:	4f e7       	ldi	r20, 0x7F	; 127
    7192:	57 e4       	ldi	r21, 0x47	; 71
    7194:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7198:	18 16       	cp	r1, r24
    719a:	4c f5       	brge	.+82     	; 0x71ee <Set_Alarm+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    719c:	69 8d       	ldd	r22, Y+25	; 0x19
    719e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71a4:	20 e0       	ldi	r18, 0x00	; 0
    71a6:	30 e0       	ldi	r19, 0x00	; 0
    71a8:	40 e2       	ldi	r20, 0x20	; 32
    71aa:	51 e4       	ldi	r21, 0x41	; 65
    71ac:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    71b0:	dc 01       	movw	r26, r24
    71b2:	cb 01       	movw	r24, r22
    71b4:	bc 01       	movw	r22, r24
    71b6:	cd 01       	movw	r24, r26
    71b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71bc:	dc 01       	movw	r26, r24
    71be:	cb 01       	movw	r24, r22
    71c0:	9c 8b       	std	Y+20, r25	; 0x14
    71c2:	8b 8b       	std	Y+19, r24	; 0x13
    71c4:	0f c0       	rjmp	.+30     	; 0x71e4 <Set_Alarm+0x59a>
    71c6:	88 ec       	ldi	r24, 0xC8	; 200
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	9a 8b       	std	Y+18, r25	; 0x12
    71cc:	89 8b       	std	Y+17, r24	; 0x11
    71ce:	89 89       	ldd	r24, Y+17	; 0x11
    71d0:	9a 89       	ldd	r25, Y+18	; 0x12
    71d2:	01 97       	sbiw	r24, 0x01	; 1
    71d4:	f1 f7       	brne	.-4      	; 0x71d2 <Set_Alarm+0x588>
    71d6:	9a 8b       	std	Y+18, r25	; 0x12
    71d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71da:	8b 89       	ldd	r24, Y+19	; 0x13
    71dc:	9c 89       	ldd	r25, Y+20	; 0x14
    71de:	01 97       	sbiw	r24, 0x01	; 1
    71e0:	9c 8b       	std	Y+20, r25	; 0x14
    71e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71e4:	8b 89       	ldd	r24, Y+19	; 0x13
    71e6:	9c 89       	ldd	r25, Y+20	; 0x14
    71e8:	00 97       	sbiw	r24, 0x00	; 0
    71ea:	69 f7       	brne	.-38     	; 0x71c6 <Set_Alarm+0x57c>
    71ec:	14 c0       	rjmp	.+40     	; 0x7216 <Set_Alarm+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71ee:	6d 89       	ldd	r22, Y+21	; 0x15
    71f0:	7e 89       	ldd	r23, Y+22	; 0x16
    71f2:	8f 89       	ldd	r24, Y+23	; 0x17
    71f4:	98 8d       	ldd	r25, Y+24	; 0x18
    71f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71fa:	dc 01       	movw	r26, r24
    71fc:	cb 01       	movw	r24, r22
    71fe:	9c 8b       	std	Y+20, r25	; 0x14
    7200:	8b 8b       	std	Y+19, r24	; 0x13
    7202:	8b 89       	ldd	r24, Y+19	; 0x13
    7204:	9c 89       	ldd	r25, Y+20	; 0x14
    7206:	98 8b       	std	Y+16, r25	; 0x10
    7208:	8f 87       	std	Y+15, r24	; 0x0f
    720a:	8f 85       	ldd	r24, Y+15	; 0x0f
    720c:	98 89       	ldd	r25, Y+16	; 0x10
    720e:	01 97       	sbiw	r24, 0x01	; 1
    7210:	f1 f7       	brne	.-4      	; 0x720e <Set_Alarm+0x5c4>
    7212:	98 8b       	std	Y+16, r25	; 0x10
    7214:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					CLCD_vClearScreen();
    7216:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
					CLCD_vSendString("Set Aalrm :");
    721a:	8f eb       	ldi	r24, 0xBF	; 191
    721c:	91 e0       	ldi	r25, 0x01	; 1
    721e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
					CLCD_vSetPosition(2, 6);
    7222:	82 e0       	ldi	r24, 0x02	; 2
    7224:	66 e0       	ldi	r22, 0x06	; 6
    7226:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
					CLCD_vSendData((Alarm_Hour / 10) + 48);
    722a:	80 91 98 03 	lds	r24, 0x0398
    722e:	9a e0       	ldi	r25, 0x0A	; 10
    7230:	69 2f       	mov	r22, r25
    7232:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7236:	80 5d       	subi	r24, 0xD0	; 208
    7238:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
					CLCD_vSendData((Alarm_Hour % 10) + 48);
    723c:	80 91 98 03 	lds	r24, 0x0398
    7240:	9a e0       	ldi	r25, 0x0A	; 10
    7242:	69 2f       	mov	r22, r25
    7244:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7248:	89 2f       	mov	r24, r25
    724a:	80 5d       	subi	r24, 0xD0	; 208
    724c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
					CLCD_vSendString(" : ");
    7250:	86 ee       	ldi	r24, 0xE6	; 230
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
					CLCD_vSendData((Alarm_Minutes / 10) + 48);
    7258:	80 91 9b 03 	lds	r24, 0x039B
    725c:	9a e0       	ldi	r25, 0x0A	; 10
    725e:	69 2f       	mov	r22, r25
    7260:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7264:	80 5d       	subi	r24, 0xD0	; 208
    7266:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
					CLCD_vSendData((Alarm_Minutes % 10) + 48);
    726a:	80 91 9b 03 	lds	r24, 0x039B
    726e:	9a e0       	ldi	r25, 0x0A	; 10
    7270:	69 2f       	mov	r22, r25
    7272:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7276:	89 2f       	mov	r24, r25
    7278:	80 5d       	subi	r24, 0xD0	; 208
    727a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
					switch (Alarm_DayTime)
    727e:	80 91 94 03 	lds	r24, 0x0394
    7282:	28 2f       	mov	r18, r24
    7284:	30 e0       	ldi	r19, 0x00	; 0
    7286:	3d a7       	std	Y+45, r19	; 0x2d
    7288:	2c a7       	std	Y+44, r18	; 0x2c
    728a:	8c a5       	ldd	r24, Y+44	; 0x2c
    728c:	9d a5       	ldd	r25, Y+45	; 0x2d
    728e:	00 97       	sbiw	r24, 0x00	; 0
    7290:	51 f0       	breq	.+20     	; 0x72a6 <Set_Alarm+0x65c>
    7292:	2c a5       	ldd	r18, Y+44	; 0x2c
    7294:	3d a5       	ldd	r19, Y+45	; 0x2d
    7296:	21 30       	cpi	r18, 0x01	; 1
    7298:	31 05       	cpc	r19, r1
    729a:	49 f4       	brne	.+18     	; 0x72ae <Set_Alarm+0x664>
					{
					case 1:
						CLCD_vSendString(" AM");
    729c:	8a ee       	ldi	r24, 0xEA	; 234
    729e:	90 e0       	ldi	r25, 0x00	; 0
    72a0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    72a4:	04 c0       	rjmp	.+8      	; 0x72ae <Set_Alarm+0x664>
						break;
					case 0:
						CLCD_vSendString(" PM");
    72a6:	8e ee       	ldi	r24, 0xEE	; 238
    72a8:	90 e0       	ldi	r25, 0x00	; 0
    72aa:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						break;
					}
					CLCD_vSetPosition(3, 1);
    72ae:	83 e0       	ldi	r24, 0x03	; 3
    72b0:	61 e0       	ldi	r22, 0x01	; 1
    72b2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
					CLCD_vSendString("1 : AM    2 : PM");
    72b6:	8e e3       	ldi	r24, 0x3E	; 62
    72b8:	91 e0       	ldi	r25, 0x01	; 1
    72ba:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				}
			} while (Alarm_DayTime != '1' && Alarm_DayTime != '2');
    72be:	80 91 94 03 	lds	r24, 0x0394
    72c2:	81 33       	cpi	r24, 0x31	; 49
    72c4:	29 f0       	breq	.+10     	; 0x72d0 <Set_Alarm+0x686>
    72c6:	80 91 94 03 	lds	r24, 0x0394
    72ca:	82 33       	cpi	r24, 0x32	; 50
    72cc:	09 f0       	breq	.+2      	; 0x72d0 <Set_Alarm+0x686>
    72ce:	18 cf       	rjmp	.-464    	; 0x7100 <Set_Alarm+0x4b6>

			/*___________________________________________________________________________________________________________________*/

			//Set invaliv val to compre with READ AM or PM Led
			if (Alarm_DayTime == '1')
    72d0:	80 91 94 03 	lds	r24, 0x0394
    72d4:	81 33       	cpi	r24, 0x31	; 49
    72d6:	21 f4       	brne	.+8      	; 0x72e0 <Set_Alarm+0x696>
			{
				Alarm_DayTime = 1; //AM
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	80 93 94 03 	sts	0x0394, r24
    72de:	17 c0       	rjmp	.+46     	; 0x730e <Set_Alarm+0x6c4>
			}
			else if (Alarm_DayTime == '2')
    72e0:	80 91 94 03 	lds	r24, 0x0394
    72e4:	82 33       	cpi	r24, 0x32	; 50
    72e6:	99 f4       	brne	.+38     	; 0x730e <Set_Alarm+0x6c4>
			{
				Alarm_DayTime = 0; //PM
    72e8:	10 92 94 03 	sts	0x0394, r1
    72ec:	10 c0       	rjmp	.+32     	; 0x730e <Set_Alarm+0x6c4>
			/*___________________________________________________________________________________________________________________*/

		}
		//if time mode is 24 hours don't disply AM or PM
		//and set it depend on hour is AM or PM
		else if (Time_Mode == Time_Mode24Hours)
    72ee:	80 91 55 03 	lds	r24, 0x0355
    72f2:	82 33       	cpi	r24, 0x32	; 50
    72f4:	61 f4       	brne	.+24     	; 0x730e <Set_Alarm+0x6c4>
		{
			if (Alarm_Hour >= 12)
    72f6:	80 91 98 03 	lds	r24, 0x0398
    72fa:	8c 30       	cpi	r24, 0x0C	; 12
    72fc:	18 f0       	brcs	.+6      	; 0x7304 <Set_Alarm+0x6ba>
			{
				Alarm_DayTime = 0;
    72fe:	10 92 94 03 	sts	0x0394, r1
    7302:	05 c0       	rjmp	.+10     	; 0x730e <Set_Alarm+0x6c4>
			}
			else if (Alarm_Hour >= 0)
    7304:	30 91 98 03 	lds	r19, 0x0398
			{
				Alarm_DayTime = 1;
    7308:	81 e0       	ldi	r24, 0x01	; 1
    730a:	80 93 94 03 	sts	0x0394, r24
		}

		/*___________________________________________________________________________________________________________________*/

		/* Make Alarm Status : Alarm Enable */
		Alarm_Status = Alarm_EN;
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	80 93 95 03 	sts	0x0395, r24
    7314:	09 c0       	rjmp	.+18     	; 0x7328 <Set_Alarm+0x6de>

		/*___________________________________________________________________________________________________________________*/
	}
	/* if user choose alarm is disaple */
	else if (KPD_Press == '2')
    7316:	80 91 9a 03 	lds	r24, 0x039A
    731a:	82 33       	cpi	r24, 0x32	; 50
    731c:	29 f4       	brne	.+10     	; 0x7328 <Set_Alarm+0x6de>
	{
		/* Make Alarm Status : Alarm Disaple */
		Alarm_Hour = NOTPRESSED;
    731e:	8f ef       	ldi	r24, 0xFF	; 255
    7320:	80 93 98 03 	sts	0x0398, r24
		Alarm_Status = Alarm_DIS;
    7324:	10 92 95 03 	sts	0x0395, r1

	/*___________________________________________________________________________________________________________________*/

	/* Check Alarm is correct or not */
	// when it not correct you can ReEnter it by choose Cancel but this option is valid when alarm is enable
	if (Alarm_Status == Alarm_EN)
    7328:	80 91 95 03 	lds	r24, 0x0395
    732c:	81 30       	cpi	r24, 0x01	; 1
    732e:	09 f0       	breq	.+2      	; 0x7332 <Set_Alarm+0x6e8>
    7330:	05 c1       	rjmp	.+522    	; 0x753c <Set_Alarm+0x8f2>
	{
		CLCD_vClearScreen();
    7332:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
		CLCD_vSendString("Set Alarm ?");
    7336:	83 ed       	ldi	r24, 0xD3	; 211
    7338:	91 e0       	ldi	r25, 0x01	; 1
    733a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(2, 1);
    733e:	82 e0       	ldi	r24, 0x02	; 2
    7340:	61 e0       	ldi	r22, 0x01	; 1
    7342:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("1 : OK    2 : Cancel");
    7346:	87 e6       	ldi	r24, 0x67	; 103
    7348:	91 e0       	ldi	r25, 0x01	; 1
    734a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(3, 1);
    734e:	83 e0       	ldi	r24, 0x03	; 3
    7350:	61 e0       	ldi	r22, 0x01	; 1
    7352:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("Cancel to Set");
    7356:	8c e7       	ldi	r24, 0x7C	; 124
    7358:	91 e0       	ldi	r25, 0x01	; 1
    735a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(4, 1);
    735e:	84 e0       	ldi	r24, 0x04	; 4
    7360:	61 e0       	ldi	r22, 0x01	; 1
    7362:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("Alarm Again");
    7366:	8f ed       	ldi	r24, 0xDF	; 223
    7368:	91 e0       	ldi	r25, 0x01	; 1
    736a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		do
		{
			KPD_Press = KPD_u8GetPressed();
    736e:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    7372:	80 93 9a 03 	sts	0x039A, r24
			//when choose invalid input
			if (KPD_Press != NOTPRESSED && (KPD_Press != '1' && KPD_Press != '2'))
    7376:	80 91 9a 03 	lds	r24, 0x039A
    737a:	8f 3f       	cpi	r24, 0xFF	; 255
    737c:	09 f4       	brne	.+2      	; 0x7380 <Set_Alarm+0x736>
    737e:	a0 c0       	rjmp	.+320    	; 0x74c0 <Set_Alarm+0x876>
    7380:	80 91 9a 03 	lds	r24, 0x039A
    7384:	81 33       	cpi	r24, 0x31	; 49
    7386:	09 f4       	brne	.+2      	; 0x738a <Set_Alarm+0x740>
    7388:	9b c0       	rjmp	.+310    	; 0x74c0 <Set_Alarm+0x876>
    738a:	80 91 9a 03 	lds	r24, 0x039A
    738e:	82 33       	cpi	r24, 0x32	; 50
    7390:	09 f4       	brne	.+2      	; 0x7394 <Set_Alarm+0x74a>
    7392:	96 c0       	rjmp	.+300    	; 0x74c0 <Set_Alarm+0x876>
			{
				CLCD_vClearScreen();
    7394:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSendString("Wrong Choise");
    7398:	8f e4       	ldi	r24, 0x4F	; 79
    739a:	91 e0       	ldi	r25, 0x01	; 1
    739c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    73a0:	80 e0       	ldi	r24, 0x00	; 0
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	aa ef       	ldi	r26, 0xFA	; 250
    73a6:	b3 e4       	ldi	r27, 0x43	; 67
    73a8:	8b 87       	std	Y+11, r24	; 0x0b
    73aa:	9c 87       	std	Y+12, r25	; 0x0c
    73ac:	ad 87       	std	Y+13, r26	; 0x0d
    73ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    73b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    73b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    73b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    73b8:	20 e0       	ldi	r18, 0x00	; 0
    73ba:	30 e0       	ldi	r19, 0x00	; 0
    73bc:	4a ef       	ldi	r20, 0xFA	; 250
    73be:	54 e4       	ldi	r21, 0x44	; 68
    73c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    73c4:	dc 01       	movw	r26, r24
    73c6:	cb 01       	movw	r24, r22
    73c8:	8f 83       	std	Y+7, r24	; 0x07
    73ca:	98 87       	std	Y+8, r25	; 0x08
    73cc:	a9 87       	std	Y+9, r26	; 0x09
    73ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73d0:	6f 81       	ldd	r22, Y+7	; 0x07
    73d2:	78 85       	ldd	r23, Y+8	; 0x08
    73d4:	89 85       	ldd	r24, Y+9	; 0x09
    73d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    73d8:	20 e0       	ldi	r18, 0x00	; 0
    73da:	30 e0       	ldi	r19, 0x00	; 0
    73dc:	40 e8       	ldi	r20, 0x80	; 128
    73de:	5f e3       	ldi	r21, 0x3F	; 63
    73e0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    73e4:	88 23       	and	r24, r24
    73e6:	2c f4       	brge	.+10     	; 0x73f2 <Set_Alarm+0x7a8>
		__ticks = 1;
    73e8:	81 e0       	ldi	r24, 0x01	; 1
    73ea:	90 e0       	ldi	r25, 0x00	; 0
    73ec:	9e 83       	std	Y+6, r25	; 0x06
    73ee:	8d 83       	std	Y+5, r24	; 0x05
    73f0:	3f c0       	rjmp	.+126    	; 0x7470 <Set_Alarm+0x826>
	else if (__tmp > 65535)
    73f2:	6f 81       	ldd	r22, Y+7	; 0x07
    73f4:	78 85       	ldd	r23, Y+8	; 0x08
    73f6:	89 85       	ldd	r24, Y+9	; 0x09
    73f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	3f ef       	ldi	r19, 0xFF	; 255
    73fe:	4f e7       	ldi	r20, 0x7F	; 127
    7400:	57 e4       	ldi	r21, 0x47	; 71
    7402:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7406:	18 16       	cp	r1, r24
    7408:	4c f5       	brge	.+82     	; 0x745c <Set_Alarm+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    740a:	6b 85       	ldd	r22, Y+11	; 0x0b
    740c:	7c 85       	ldd	r23, Y+12	; 0x0c
    740e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7410:	9e 85       	ldd	r25, Y+14	; 0x0e
    7412:	20 e0       	ldi	r18, 0x00	; 0
    7414:	30 e0       	ldi	r19, 0x00	; 0
    7416:	40 e2       	ldi	r20, 0x20	; 32
    7418:	51 e4       	ldi	r21, 0x41	; 65
    741a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    741e:	dc 01       	movw	r26, r24
    7420:	cb 01       	movw	r24, r22
    7422:	bc 01       	movw	r22, r24
    7424:	cd 01       	movw	r24, r26
    7426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    742a:	dc 01       	movw	r26, r24
    742c:	cb 01       	movw	r24, r22
    742e:	9e 83       	std	Y+6, r25	; 0x06
    7430:	8d 83       	std	Y+5, r24	; 0x05
    7432:	0f c0       	rjmp	.+30     	; 0x7452 <Set_Alarm+0x808>
    7434:	88 ec       	ldi	r24, 0xC8	; 200
    7436:	90 e0       	ldi	r25, 0x00	; 0
    7438:	9c 83       	std	Y+4, r25	; 0x04
    743a:	8b 83       	std	Y+3, r24	; 0x03
    743c:	8b 81       	ldd	r24, Y+3	; 0x03
    743e:	9c 81       	ldd	r25, Y+4	; 0x04
    7440:	01 97       	sbiw	r24, 0x01	; 1
    7442:	f1 f7       	brne	.-4      	; 0x7440 <Set_Alarm+0x7f6>
    7444:	9c 83       	std	Y+4, r25	; 0x04
    7446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7448:	8d 81       	ldd	r24, Y+5	; 0x05
    744a:	9e 81       	ldd	r25, Y+6	; 0x06
    744c:	01 97       	sbiw	r24, 0x01	; 1
    744e:	9e 83       	std	Y+6, r25	; 0x06
    7450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7452:	8d 81       	ldd	r24, Y+5	; 0x05
    7454:	9e 81       	ldd	r25, Y+6	; 0x06
    7456:	00 97       	sbiw	r24, 0x00	; 0
    7458:	69 f7       	brne	.-38     	; 0x7434 <Set_Alarm+0x7ea>
    745a:	14 c0       	rjmp	.+40     	; 0x7484 <Set_Alarm+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    745c:	6f 81       	ldd	r22, Y+7	; 0x07
    745e:	78 85       	ldd	r23, Y+8	; 0x08
    7460:	89 85       	ldd	r24, Y+9	; 0x09
    7462:	9a 85       	ldd	r25, Y+10	; 0x0a
    7464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7468:	dc 01       	movw	r26, r24
    746a:	cb 01       	movw	r24, r22
    746c:	9e 83       	std	Y+6, r25	; 0x06
    746e:	8d 83       	std	Y+5, r24	; 0x05
    7470:	8d 81       	ldd	r24, Y+5	; 0x05
    7472:	9e 81       	ldd	r25, Y+6	; 0x06
    7474:	9a 83       	std	Y+2, r25	; 0x02
    7476:	89 83       	std	Y+1, r24	; 0x01
    7478:	89 81       	ldd	r24, Y+1	; 0x01
    747a:	9a 81       	ldd	r25, Y+2	; 0x02
    747c:	01 97       	sbiw	r24, 0x01	; 1
    747e:	f1 f7       	brne	.-4      	; 0x747c <Set_Alarm+0x832>
    7480:	9a 83       	std	Y+2, r25	; 0x02
    7482:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_vClearScreen();
    7484:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSendString("Set Alarm ?");
    7488:	83 ed       	ldi	r24, 0xD3	; 211
    748a:	91 e0       	ldi	r25, 0x01	; 1
    748c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSetPosition(2, 1);
    7490:	82 e0       	ldi	r24, 0x02	; 2
    7492:	61 e0       	ldi	r22, 0x01	; 1
    7494:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("1 : OK    2 : Cancel");
    7498:	87 e6       	ldi	r24, 0x67	; 103
    749a:	91 e0       	ldi	r25, 0x01	; 1
    749c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSetPosition(3, 1);
    74a0:	83 e0       	ldi	r24, 0x03	; 3
    74a2:	61 e0       	ldi	r22, 0x01	; 1
    74a4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("Cancel to Set");
    74a8:	8c e7       	ldi	r24, 0x7C	; 124
    74aa:	91 e0       	ldi	r25, 0x01	; 1
    74ac:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSetPosition(4, 1);
    74b0:	84 e0       	ldi	r24, 0x04	; 4
    74b2:	61 e0       	ldi	r22, 0x01	; 1
    74b4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("Alarm Again");
    74b8:	8f ed       	ldi	r24, 0xDF	; 223
    74ba:	91 e0       	ldi	r25, 0x01	; 1
    74bc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			}
		}while (KPD_Press != '1' && KPD_Press != '2');
    74c0:	80 91 9a 03 	lds	r24, 0x039A
    74c4:	81 33       	cpi	r24, 0x31	; 49
    74c6:	29 f0       	breq	.+10     	; 0x74d2 <Set_Alarm+0x888>
    74c8:	80 91 9a 03 	lds	r24, 0x039A
    74cc:	82 33       	cpi	r24, 0x32	; 50
    74ce:	09 f0       	breq	.+2      	; 0x74d2 <Set_Alarm+0x888>
    74d0:	4e cf       	rjmp	.-356    	; 0x736e <Set_Alarm+0x724>

		/*___________________________________________________________________________________________________________________*/

		//When Alarm is Correct
		if (KPD_Press == '1')
    74d2:	80 91 9a 03 	lds	r24, 0x039A
    74d6:	81 33       	cpi	r24, 0x31	; 49
    74d8:	51 f5       	brne	.+84     	; 0x752e <Set_Alarm+0x8e4>
		{
			CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    74da:	8c e0       	ldi	r24, 0x0C	; 12
    74dc:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
			CLCD_vClearScreen();
    74e0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - set time");
    74e4:	83 ec       	ldi	r24, 0xC3	; 195
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    74ec:	82 e0       	ldi	r24, 0x02	; 2
    74ee:	61 e0       	ldi	r22, 0x01	; 1
    74f0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - select mode");
    74f4:	80 ed       	ldi	r24, 0xD0	; 208
    74f6:	90 e0       	ldi	r25, 0x00	; 0
    74f8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    74fc:	83 e0       	ldi	r24, 0x03	; 3
    74fe:	61 e0       	ldi	r22, 0x01	; 1
    7500:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    7504:	85 e9       	ldi	r24, 0x95	; 149
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    750c:	84 e0       	ldi	r24, 0x04	; 4
    750e:	61 e0       	ldi	r22, 0x01	; 1
    7510:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    7514:	83 ea       	ldi	r24, 0xA3	; 163
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    751c:	84 e0       	ldi	r24, 0x04	; 4
    751e:	6f e0       	ldi	r22, 0x0F	; 15
    7520:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    7524:	8f ea       	ldi	r24, 0xAF	; 175
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    752c:	34 c0       	rjmp	.+104    	; 0x7596 <Set_Alarm+0x94c>
		}
		//When Alarm is not Correct
		else if (KPD_Press == '2')
    752e:	80 91 9a 03 	lds	r24, 0x039A
    7532:	82 33       	cpi	r24, 0x32	; 50
    7534:	81 f5       	brne	.+96     	; 0x7596 <Set_Alarm+0x94c>
		{
			Set_Alarm();
    7536:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <Set_Alarm>
    753a:	2d c0       	rjmp	.+90     	; 0x7596 <Set_Alarm+0x94c>

		}
		/*___________________________________________________________________________________________________________________*/
	}
	//When Alarm is disaple you don't need to make sure the alarm set correct or not
	else if (Alarm_Status == Alarm_DIS)
    753c:	80 91 95 03 	lds	r24, 0x0395
    7540:	88 23       	and	r24, r24
    7542:	49 f5       	brne	.+82     	; 0x7596 <Set_Alarm+0x94c>
	{
		CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    7544:	8c e0       	ldi	r24, 0x0C	; 12
    7546:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
		CLCD_vClearScreen();
    754a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
		CLCD_vSendString("1 - set time");
    754e:	83 ec       	ldi	r24, 0xC3	; 195
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(2, 1);
    7556:	82 e0       	ldi	r24, 0x02	; 2
    7558:	61 e0       	ldi	r22, 0x01	; 1
    755a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("2 - select mode");
    755e:	80 ed       	ldi	r24, 0xD0	; 208
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(3, 1);
    7566:	83 e0       	ldi	r24, 0x03	; 3
    7568:	61 e0       	ldi	r22, 0x01	; 1
    756a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("3 - Set Alarm");
    756e:	85 e9       	ldi	r24, 0x95	; 149
    7570:	90 e0       	ldi	r25, 0x00	; 0
    7572:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(4, 1);
    7576:	84 e0       	ldi	r24, 0x04	; 4
    7578:	61 e0       	ldi	r22, 0x01	; 1
    757a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("4 - Weather");
    757e:	83 ea       	ldi	r24, 0xA3	; 163
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		CLCD_vSetPosition(4, 15);
    7586:	84 e0       	ldi	r24, 0x04	; 4
    7588:	6f e0       	ldi	r22, 0x0F	; 15
    758a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("X:EXIT");
    758e:	8f ea       	ldi	r24, 0xAF	; 175
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	else
	{

	}
	/*___________________________________________________________________________________________________________________*/
}
    7596:	e3 96       	adiw	r28, 0x33	; 51
    7598:	0f b6       	in	r0, 0x3f	; 63
    759a:	f8 94       	cli
    759c:	de bf       	out	0x3e, r29	; 62
    759e:	0f be       	out	0x3f, r0	; 63
    75a0:	cd bf       	out	0x3d, r28	; 61
    75a2:	cf 91       	pop	r28
    75a4:	df 91       	pop	r29
    75a6:	08 95       	ret

000075a8 <Get_Temp>:

//======================================================================================================================================//

/* Function To get Temp from LM35 Sensor and display it On CLCD */
void Get_Temp()
{
    75a8:	df 93       	push	r29
    75aa:	cf 93       	push	r28
    75ac:	00 d0       	rcall	.+0      	; 0x75ae <Get_Temp+0x6>
    75ae:	00 d0       	rcall	.+0      	; 0x75b0 <Get_Temp+0x8>
    75b0:	cd b7       	in	r28, 0x3d	; 61
    75b2:	de b7       	in	r29, 0x3e	; 62
	volatile u8 LM35_Temp;
	volatile u16 LM35_Volt;
	CLCD_vClearScreen();
    75b4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("Press any key");
    75b8:	82 ef       	ldi	r24, 0xF2	; 242
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    75c0:	82 e0       	ldi	r24, 0x02	; 2
    75c2:	61 e0       	ldi	r22, 0x01	; 1
    75c4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("To Exit");
    75c8:	8b ee       	ldi	r24, 0xEB	; 235
    75ca:	91 e0       	ldi	r25, 0x01	; 1
    75cc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 10);
    75d0:	84 e0       	ldi	r24, 0x04	; 4
    75d2:	6a e0       	ldi	r22, 0x0A	; 10
    75d4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("TEMP : ");
    75d8:	83 ef       	ldi	r24, 0xF3	; 243
    75da:	91 e0       	ldi	r25, 0x01	; 1
    75dc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	while (1)
	{
		//If Any key pressed will exit from Get_Temp Fuction
		KPD_Press = KPD_u8GetPressed();
    75e0:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    75e4:	80 93 9a 03 	sts	0x039A, r24
		if (KPD_Press != NOTPRESSED)
    75e8:	80 91 9a 03 	lds	r24, 0x039A
    75ec:	8f 3f       	cpi	r24, 0xFF	; 255
    75ee:	69 f1       	breq	.+90     	; 0x764a <Get_Temp+0xa2>
		{
			CLCD_vClearScreen();
    75f0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - set time");
    75f4:	83 ec       	ldi	r24, 0xC3	; 195
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    75fc:	82 e0       	ldi	r24, 0x02	; 2
    75fe:	61 e0       	ldi	r22, 0x01	; 1
    7600:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - select mode");
    7604:	80 ed       	ldi	r24, 0xD0	; 208
    7606:	90 e0       	ldi	r25, 0x00	; 0
    7608:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    760c:	83 e0       	ldi	r24, 0x03	; 3
    760e:	61 e0       	ldi	r22, 0x01	; 1
    7610:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    7614:	85 e9       	ldi	r24, 0x95	; 149
    7616:	90 e0       	ldi	r25, 0x00	; 0
    7618:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    761c:	84 e0       	ldi	r24, 0x04	; 4
    761e:	61 e0       	ldi	r22, 0x01	; 1
    7620:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    7624:	83 ea       	ldi	r24, 0xA3	; 163
    7626:	90 e0       	ldi	r25, 0x00	; 0
    7628:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    762c:	84 e0       	ldi	r24, 0x04	; 4
    762e:	6f e0       	ldi	r22, 0x0F	; 15
    7630:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    7634:	8f ea       	ldi	r24, 0xAF	; 175
    7636:	90 e0       	ldi	r25, 0x00	; 0
    7638:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}

		/*___________________________________________________________________________________________________________________*/

	}
}
    763c:	0f 90       	pop	r0
    763e:	0f 90       	pop	r0
    7640:	0f 90       	pop	r0
    7642:	0f 90       	pop	r0
    7644:	cf 91       	pop	r28
    7646:	df 91       	pop	r29
    7648:	08 95       	ret
		}

		/*___________________________________________________________________________________________________________________*/

		//Get value of Temp Meter
		LM35_u8GetAnalogSignal(&LM350, &LM35_Volt);
    764a:	84 e7       	ldi	r24, 0x74	; 116
    764c:	93 e0       	ldi	r25, 0x03	; 3
    764e:	9e 01       	movw	r18, r28
    7650:	2e 5f       	subi	r18, 0xFE	; 254
    7652:	3f 4f       	sbci	r19, 0xFF	; 255
    7654:	b9 01       	movw	r22, r18
    7656:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <LM35_u8GetAnalogSignal>

		/* Check LM35_Volt */
		/* if it more than 1000 that mean LM35_Temp is positive */
		if (LM35_Volt >= 1000)
    765a:	8a 81       	ldd	r24, Y+2	; 0x02
    765c:	9b 81       	ldd	r25, Y+3	; 0x03
    765e:	23 e0       	ldi	r18, 0x03	; 3
    7660:	88 3e       	cpi	r24, 0xE8	; 232
    7662:	92 07       	cpc	r25, r18
    7664:	08 f4       	brcc	.+2      	; 0x7668 <Get_Temp+0xc0>
    7666:	69 c0       	rjmp	.+210    	; 0x773a <Get_Temp+0x192>
		{
			LM35_Temp = (LM35_Volt - 1000) / 10;
    7668:	8a 81       	ldd	r24, Y+2	; 0x02
    766a:	9b 81       	ldd	r25, Y+3	; 0x03
    766c:	88 5e       	subi	r24, 0xE8	; 232
    766e:	93 40       	sbci	r25, 0x03	; 3
    7670:	2a e0       	ldi	r18, 0x0A	; 10
    7672:	30 e0       	ldi	r19, 0x00	; 0
    7674:	b9 01       	movw	r22, r18
    7676:	0e 94 8e 3c 	call	0x791c	; 0x791c <__udivmodhi4>
    767a:	cb 01       	movw	r24, r22
    767c:	89 83       	std	Y+1, r24	; 0x01
			//Display Temp on LCD when it positive
			if (LM35_Temp < 10)
    767e:	89 81       	ldd	r24, Y+1	; 0x01
    7680:	8a 30       	cpi	r24, 0x0A	; 10
    7682:	90 f4       	brcc	.+36     	; 0x76a8 <Get_Temp+0x100>
			{
				CLCD_vSetPosition(4, 16);
    7684:	84 e0       	ldi	r24, 0x04	; 4
    7686:	60 e1       	ldi	r22, 0x10	; 16
    7688:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData(LM35_Temp + 48);
    768c:	89 81       	ldd	r24, Y+1	; 0x01
    768e:	80 5d       	subi	r24, 0xD0	; 208
    7690:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    7694:	8f ed       	ldi	r24, 0xDF	; 223
    7696:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    769a:	83 e4       	ldi	r24, 0x43	; 67
    769c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(' ');
    76a0:	80 e2       	ldi	r24, 0x20	; 32
    76a2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    76a6:	9c cf       	rjmp	.-200    	; 0x75e0 <Get_Temp+0x38>
			}
			else if (LM35_Temp < 100)
    76a8:	89 81       	ldd	r24, Y+1	; 0x01
    76aa:	84 36       	cpi	r24, 0x64	; 100
    76ac:	e0 f4       	brcc	.+56     	; 0x76e6 <Get_Temp+0x13e>
			{
				CLCD_vSetPosition(4, 16);
    76ae:	84 e0       	ldi	r24, 0x04	; 4
    76b0:	60 e1       	ldi	r22, 0x10	; 16
    76b2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((LM35_Temp / 10) + 48);
    76b6:	89 81       	ldd	r24, Y+1	; 0x01
    76b8:	9a e0       	ldi	r25, 0x0A	; 10
    76ba:	69 2f       	mov	r22, r25
    76bc:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    76c0:	80 5d       	subi	r24, 0xD0	; 208
    76c2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((LM35_Temp % 10) + 48);
    76c6:	89 81       	ldd	r24, Y+1	; 0x01
    76c8:	9a e0       	ldi	r25, 0x0A	; 10
    76ca:	69 2f       	mov	r22, r25
    76cc:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    76d0:	89 2f       	mov	r24, r25
    76d2:	80 5d       	subi	r24, 0xD0	; 208
    76d4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    76d8:	8f ed       	ldi	r24, 0xDF	; 223
    76da:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    76de:	83 e4       	ldi	r24, 0x43	; 67
    76e0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    76e4:	7d cf       	rjmp	.-262    	; 0x75e0 <Get_Temp+0x38>
			}
			else if (LM35_Temp < 1000)
    76e6:	89 81       	ldd	r24, Y+1	; 0x01
			{
				CLCD_vSetPosition(4, 16);
    76e8:	84 e0       	ldi	r24, 0x04	; 4
    76ea:	60 e1       	ldi	r22, 0x10	; 16
    76ec:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((LM35_Temp / 100) + 48);
    76f0:	89 81       	ldd	r24, Y+1	; 0x01
    76f2:	94 e6       	ldi	r25, 0x64	; 100
    76f4:	69 2f       	mov	r22, r25
    76f6:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    76fa:	80 5d       	subi	r24, 0xD0	; 208
    76fc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(((LM35_Temp / 10) % 10) + 48);
    7700:	89 81       	ldd	r24, Y+1	; 0x01
    7702:	9a e0       	ldi	r25, 0x0A	; 10
    7704:	69 2f       	mov	r22, r25
    7706:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    770a:	9a e0       	ldi	r25, 0x0A	; 10
    770c:	69 2f       	mov	r22, r25
    770e:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7712:	89 2f       	mov	r24, r25
    7714:	80 5d       	subi	r24, 0xD0	; 208
    7716:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((LM35_Temp % 10) + 48);
    771a:	89 81       	ldd	r24, Y+1	; 0x01
    771c:	9a e0       	ldi	r25, 0x0A	; 10
    771e:	69 2f       	mov	r22, r25
    7720:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    7724:	89 2f       	mov	r24, r25
    7726:	80 5d       	subi	r24, 0xD0	; 208
    7728:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    772c:	8f ed       	ldi	r24, 0xDF	; 223
    772e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    7732:	83 e4       	ldi	r24, 0x43	; 67
    7734:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    7738:	53 cf       	rjmp	.-346    	; 0x75e0 <Get_Temp+0x38>
		/*___________________________________________________________________________________________________________________*/

		/* if it less than 1000 that mean LM35_Temp is negative */
		else
		{
			LM35_Temp = (1000 - LM35_Volt) / 10;
    773a:	2a 81       	ldd	r18, Y+2	; 0x02
    773c:	3b 81       	ldd	r19, Y+3	; 0x03
    773e:	88 ee       	ldi	r24, 0xE8	; 232
    7740:	93 e0       	ldi	r25, 0x03	; 3
    7742:	82 1b       	sub	r24, r18
    7744:	93 0b       	sbc	r25, r19
    7746:	2a e0       	ldi	r18, 0x0A	; 10
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	b9 01       	movw	r22, r18
    774c:	0e 94 8e 3c 	call	0x791c	; 0x791c <__udivmodhi4>
    7750:	cb 01       	movw	r24, r22
    7752:	89 83       	std	Y+1, r24	; 0x01
			//Display Temp on LCD when it negative
			if (LM35_Temp < 10)
    7754:	89 81       	ldd	r24, Y+1	; 0x01
    7756:	8a 30       	cpi	r24, 0x0A	; 10
    7758:	a8 f4       	brcc	.+42     	; 0x7784 <Get_Temp+0x1dc>
			{
				CLCD_vSetPosition(4, 16);
    775a:	84 e0       	ldi	r24, 0x04	; 4
    775c:	60 e1       	ldi	r22, 0x10	; 16
    775e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData('-');
    7762:	8d e2       	ldi	r24, 0x2D	; 45
    7764:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(LM35_Temp + 48);
    7768:	89 81       	ldd	r24, Y+1	; 0x01
    776a:	80 5d       	subi	r24, 0xD0	; 208
    776c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    7770:	8f ed       	ldi	r24, 0xDF	; 223
    7772:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    7776:	83 e4       	ldi	r24, 0x43	; 67
    7778:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(' ');
    777c:	80 e2       	ldi	r24, 0x20	; 32
    777e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    7782:	2e cf       	rjmp	.-420    	; 0x75e0 <Get_Temp+0x38>
			}
			else if (LM35_Temp < 100)
    7784:	89 81       	ldd	r24, Y+1	; 0x01
    7786:	84 36       	cpi	r24, 0x64	; 100
    7788:	08 f0       	brcs	.+2      	; 0x778c <Get_Temp+0x1e4>
    778a:	2a cf       	rjmp	.-428    	; 0x75e0 <Get_Temp+0x38>
			{
				CLCD_vSetPosition(4, 16);
    778c:	84 e0       	ldi	r24, 0x04	; 4
    778e:	60 e1       	ldi	r22, 0x10	; 16
    7790:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData('-');
    7794:	8d e2       	ldi	r24, 0x2D	; 45
    7796:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((LM35_Temp / 10) + 48);
    779a:	89 81       	ldd	r24, Y+1	; 0x01
    779c:	9a e0       	ldi	r25, 0x0A	; 10
    779e:	69 2f       	mov	r22, r25
    77a0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    77a4:	80 5d       	subi	r24, 0xD0	; 208
    77a6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((LM35_Temp % 10) + 48);
    77aa:	89 81       	ldd	r24, Y+1	; 0x01
    77ac:	9a e0       	ldi	r25, 0x0A	; 10
    77ae:	69 2f       	mov	r22, r25
    77b0:	0e 94 82 3c 	call	0x7904	; 0x7904 <__udivmodqi4>
    77b4:	89 2f       	mov	r24, r25
    77b6:	80 5d       	subi	r24, 0xD0	; 208
    77b8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    77bc:	8f ed       	ldi	r24, 0xDF	; 223
    77be:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    77c2:	83 e4       	ldi	r24, 0x43	; 67
    77c4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    77c8:	0b cf       	rjmp	.-490    	; 0x75e0 <Get_Temp+0x38>

000077ca <ISR_TIMER2_OVF_MODE>:
 * each every second Time_Second++
 * check Time_Minute and Time_Hour and Time_Mode
 * ISR will execute with out affects on the code
 */
void ISR_TIMER2_OVF_MODE()
{
    77ca:	df 93       	push	r29
    77cc:	cf 93       	push	r28
    77ce:	cd b7       	in	r28, 0x3d	; 61
    77d0:	de b7       	in	r29, 0x3e	; 62
	/* it's pluse to make sure that ISR will execute each Second */
	DIO_enumTogglePinVal(DIO_PORTA, DIO_PIN2);
    77d2:	80 e0       	ldi	r24, 0x00	; 0
    77d4:	62 e0       	ldi	r22, 0x02	; 2
    77d6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <DIO_enumTogglePinVal>

	/*___________________________________________________________________________________________________________________*/

	Time_Second++;
    77da:	80 91 97 03 	lds	r24, 0x0397
    77de:	8f 5f       	subi	r24, 0xFF	; 255
    77e0:	80 93 97 03 	sts	0x0397, r24

	if (Time_Second == 60)
    77e4:	80 91 97 03 	lds	r24, 0x0397
    77e8:	8c 33       	cpi	r24, 0x3C	; 60
    77ea:	39 f4       	brne	.+14     	; 0x77fa <ISR_TIMER2_OVF_MODE+0x30>
	{
		Time_Second = 0;
    77ec:	10 92 97 03 	sts	0x0397, r1
		Time_Minute++;
    77f0:	80 91 96 03 	lds	r24, 0x0396
    77f4:	8f 5f       	subi	r24, 0xFF	; 255
    77f6:	80 93 96 03 	sts	0x0396, r24
	}
	if (Time_Minute == 60)
    77fa:	80 91 96 03 	lds	r24, 0x0396
    77fe:	8c 33       	cpi	r24, 0x3C	; 60
    7800:	39 f4       	brne	.+14     	; 0x7810 <ISR_TIMER2_OVF_MODE+0x46>
	{
		Time_Minute = 0;
    7802:	10 92 96 03 	sts	0x0396, r1
		Time_Hour++;
    7806:	80 91 54 03 	lds	r24, 0x0354
    780a:	8f 5f       	subi	r24, 0xFF	; 255
    780c:	80 93 54 03 	sts	0x0354, r24
	}

	/*___________________________________________________________________________________________________________________*/

	/* Check Time condition */
	if (Time_Mode == Time_Mode12Hours)
    7810:	80 91 55 03 	lds	r24, 0x0355
    7814:	81 33       	cpi	r24, 0x31	; 49
    7816:	f9 f4       	brne	.+62     	; 0x7856 <ISR_TIMER2_OVF_MODE+0x8c>
	{
		if (Time_Hour == 13)
    7818:	80 91 54 03 	lds	r24, 0x0354
    781c:	8d 30       	cpi	r24, 0x0D	; 13
    781e:	19 f4       	brne	.+6      	; 0x7826 <ISR_TIMER2_OVF_MODE+0x5c>
		{
			Time_Hour = 1;
    7820:	81 e0       	ldi	r24, 0x01	; 1
    7822:	80 93 54 03 	sts	0x0354, r24
		}
		if (Time_Hour == 12 && Time_Minute == 0 && Time_Second == 0)
    7826:	80 91 54 03 	lds	r24, 0x0354
    782a:	8c 30       	cpi	r24, 0x0C	; 12
    782c:	09 f0       	breq	.+2      	; 0x7830 <ISR_TIMER2_OVF_MODE+0x66>
    782e:	48 c0       	rjmp	.+144    	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
    7830:	80 91 96 03 	lds	r24, 0x0396
    7834:	88 23       	and	r24, r24
    7836:	09 f0       	breq	.+2      	; 0x783a <ISR_TIMER2_OVF_MODE+0x70>
    7838:	43 c0       	rjmp	.+134    	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
    783a:	80 91 97 03 	lds	r24, 0x0397
    783e:	88 23       	and	r24, r24
    7840:	09 f0       	breq	.+2      	; 0x7844 <ISR_TIMER2_OVF_MODE+0x7a>
    7842:	3e c0       	rjmp	.+124    	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
		{
			TOG_BIT(PORTA_REG, DIO_PIN3);   //Toggle LED that displays AM or PM
    7844:	ab e3       	ldi	r26, 0x3B	; 59
    7846:	b0 e0       	ldi	r27, 0x00	; 0
    7848:	eb e3       	ldi	r30, 0x3B	; 59
    784a:	f0 e0       	ldi	r31, 0x00	; 0
    784c:	90 81       	ld	r25, Z
    784e:	88 e0       	ldi	r24, 0x08	; 8
    7850:	89 27       	eor	r24, r25
    7852:	8c 93       	st	X, r24
    7854:	35 c0       	rjmp	.+106    	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
		}
	}

	else if (Time_Mode == Time_Mode24Hours)
    7856:	80 91 55 03 	lds	r24, 0x0355
    785a:	82 33       	cpi	r24, 0x32	; 50
    785c:	89 f5       	brne	.+98     	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
	{
		if (Time_Hour == 24)
    785e:	80 91 54 03 	lds	r24, 0x0354
    7862:	88 31       	cpi	r24, 0x18	; 24
    7864:	11 f4       	brne	.+4      	; 0x786a <ISR_TIMER2_OVF_MODE+0xa0>
		{
			Time_Hour = 0;
    7866:	10 92 54 03 	sts	0x0354, r1
		}
		else
		{

		}
		if (Time_Hour < 12)
    786a:	80 91 54 03 	lds	r24, 0x0354
    786e:	8c 30       	cpi	r24, 0x0C	; 12
    7870:	40 f4       	brcc	.+16     	; 0x7882 <ISR_TIMER2_OVF_MODE+0xb8>
		{
			SET_BIT(PORTA_REG, DIO_PIN3);   //Turn ON Led To Display AM
    7872:	ab e3       	ldi	r26, 0x3B	; 59
    7874:	b0 e0       	ldi	r27, 0x00	; 0
    7876:	eb e3       	ldi	r30, 0x3B	; 59
    7878:	f0 e0       	ldi	r31, 0x00	; 0
    787a:	80 81       	ld	r24, Z
    787c:	88 60       	ori	r24, 0x08	; 8
    787e:	8c 93       	st	X, r24
    7880:	1f c0       	rjmp	.+62     	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
		}
		else if (Time_Hour == 12 && Time_Minute == 0 && Time_Second == 0)
    7882:	80 91 54 03 	lds	r24, 0x0354
    7886:	8c 30       	cpi	r24, 0x0C	; 12
    7888:	81 f4       	brne	.+32     	; 0x78aa <ISR_TIMER2_OVF_MODE+0xe0>
    788a:	80 91 96 03 	lds	r24, 0x0396
    788e:	88 23       	and	r24, r24
    7890:	61 f4       	brne	.+24     	; 0x78aa <ISR_TIMER2_OVF_MODE+0xe0>
    7892:	80 91 97 03 	lds	r24, 0x0397
    7896:	88 23       	and	r24, r24
    7898:	41 f4       	brne	.+16     	; 0x78aa <ISR_TIMER2_OVF_MODE+0xe0>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);   //Turn OFF Led To Display PM
    789a:	ab e3       	ldi	r26, 0x3B	; 59
    789c:	b0 e0       	ldi	r27, 0x00	; 0
    789e:	eb e3       	ldi	r30, 0x3B	; 59
    78a0:	f0 e0       	ldi	r31, 0x00	; 0
    78a2:	80 81       	ld	r24, Z
    78a4:	87 7f       	andi	r24, 0xF7	; 247
    78a6:	8c 93       	st	X, r24
    78a8:	0b c0       	rjmp	.+22     	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
		}
		else if (Time_Hour > 12)
    78aa:	80 91 54 03 	lds	r24, 0x0354
    78ae:	8d 30       	cpi	r24, 0x0D	; 13
    78b0:	38 f0       	brcs	.+14     	; 0x78c0 <ISR_TIMER2_OVF_MODE+0xf6>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);   //Turn OFF Led To Display PM
    78b2:	ab e3       	ldi	r26, 0x3B	; 59
    78b4:	b0 e0       	ldi	r27, 0x00	; 0
    78b6:	eb e3       	ldi	r30, 0x3B	; 59
    78b8:	f0 e0       	ldi	r31, 0x00	; 0
    78ba:	80 81       	ld	r24, Z
    78bc:	87 7f       	andi	r24, 0xF7	; 247
    78be:	8c 93       	st	X, r24

	}

	/*___________________________________________________________________________________________________________________*/

}
    78c0:	cf 91       	pop	r28
    78c2:	df 91       	pop	r29
    78c4:	08 95       	ret

000078c6 <__mulsi3>:
    78c6:	62 9f       	mul	r22, r18
    78c8:	d0 01       	movw	r26, r0
    78ca:	73 9f       	mul	r23, r19
    78cc:	f0 01       	movw	r30, r0
    78ce:	82 9f       	mul	r24, r18
    78d0:	e0 0d       	add	r30, r0
    78d2:	f1 1d       	adc	r31, r1
    78d4:	64 9f       	mul	r22, r20
    78d6:	e0 0d       	add	r30, r0
    78d8:	f1 1d       	adc	r31, r1
    78da:	92 9f       	mul	r25, r18
    78dc:	f0 0d       	add	r31, r0
    78de:	83 9f       	mul	r24, r19
    78e0:	f0 0d       	add	r31, r0
    78e2:	74 9f       	mul	r23, r20
    78e4:	f0 0d       	add	r31, r0
    78e6:	65 9f       	mul	r22, r21
    78e8:	f0 0d       	add	r31, r0
    78ea:	99 27       	eor	r25, r25
    78ec:	72 9f       	mul	r23, r18
    78ee:	b0 0d       	add	r27, r0
    78f0:	e1 1d       	adc	r30, r1
    78f2:	f9 1f       	adc	r31, r25
    78f4:	63 9f       	mul	r22, r19
    78f6:	b0 0d       	add	r27, r0
    78f8:	e1 1d       	adc	r30, r1
    78fa:	f9 1f       	adc	r31, r25
    78fc:	bd 01       	movw	r22, r26
    78fe:	cf 01       	movw	r24, r30
    7900:	11 24       	eor	r1, r1
    7902:	08 95       	ret

00007904 <__udivmodqi4>:
    7904:	99 1b       	sub	r25, r25
    7906:	79 e0       	ldi	r23, 0x09	; 9
    7908:	04 c0       	rjmp	.+8      	; 0x7912 <__udivmodqi4_ep>

0000790a <__udivmodqi4_loop>:
    790a:	99 1f       	adc	r25, r25
    790c:	96 17       	cp	r25, r22
    790e:	08 f0       	brcs	.+2      	; 0x7912 <__udivmodqi4_ep>
    7910:	96 1b       	sub	r25, r22

00007912 <__udivmodqi4_ep>:
    7912:	88 1f       	adc	r24, r24
    7914:	7a 95       	dec	r23
    7916:	c9 f7       	brne	.-14     	; 0x790a <__udivmodqi4_loop>
    7918:	80 95       	com	r24
    791a:	08 95       	ret

0000791c <__udivmodhi4>:
    791c:	aa 1b       	sub	r26, r26
    791e:	bb 1b       	sub	r27, r27
    7920:	51 e1       	ldi	r21, 0x11	; 17
    7922:	07 c0       	rjmp	.+14     	; 0x7932 <__udivmodhi4_ep>

00007924 <__udivmodhi4_loop>:
    7924:	aa 1f       	adc	r26, r26
    7926:	bb 1f       	adc	r27, r27
    7928:	a6 17       	cp	r26, r22
    792a:	b7 07       	cpc	r27, r23
    792c:	10 f0       	brcs	.+4      	; 0x7932 <__udivmodhi4_ep>
    792e:	a6 1b       	sub	r26, r22
    7930:	b7 0b       	sbc	r27, r23

00007932 <__udivmodhi4_ep>:
    7932:	88 1f       	adc	r24, r24
    7934:	99 1f       	adc	r25, r25
    7936:	5a 95       	dec	r21
    7938:	a9 f7       	brne	.-22     	; 0x7924 <__udivmodhi4_loop>
    793a:	80 95       	com	r24
    793c:	90 95       	com	r25
    793e:	bc 01       	movw	r22, r24
    7940:	cd 01       	movw	r24, r26
    7942:	08 95       	ret

00007944 <__udivmodsi4>:
    7944:	a1 e2       	ldi	r26, 0x21	; 33
    7946:	1a 2e       	mov	r1, r26
    7948:	aa 1b       	sub	r26, r26
    794a:	bb 1b       	sub	r27, r27
    794c:	fd 01       	movw	r30, r26
    794e:	0d c0       	rjmp	.+26     	; 0x796a <__udivmodsi4_ep>

00007950 <__udivmodsi4_loop>:
    7950:	aa 1f       	adc	r26, r26
    7952:	bb 1f       	adc	r27, r27
    7954:	ee 1f       	adc	r30, r30
    7956:	ff 1f       	adc	r31, r31
    7958:	a2 17       	cp	r26, r18
    795a:	b3 07       	cpc	r27, r19
    795c:	e4 07       	cpc	r30, r20
    795e:	f5 07       	cpc	r31, r21
    7960:	20 f0       	brcs	.+8      	; 0x796a <__udivmodsi4_ep>
    7962:	a2 1b       	sub	r26, r18
    7964:	b3 0b       	sbc	r27, r19
    7966:	e4 0b       	sbc	r30, r20
    7968:	f5 0b       	sbc	r31, r21

0000796a <__udivmodsi4_ep>:
    796a:	66 1f       	adc	r22, r22
    796c:	77 1f       	adc	r23, r23
    796e:	88 1f       	adc	r24, r24
    7970:	99 1f       	adc	r25, r25
    7972:	1a 94       	dec	r1
    7974:	69 f7       	brne	.-38     	; 0x7950 <__udivmodsi4_loop>
    7976:	60 95       	com	r22
    7978:	70 95       	com	r23
    797a:	80 95       	com	r24
    797c:	90 95       	com	r25
    797e:	9b 01       	movw	r18, r22
    7980:	ac 01       	movw	r20, r24
    7982:	bd 01       	movw	r22, r26
    7984:	cf 01       	movw	r24, r30
    7986:	08 95       	ret

00007988 <__divmodsi4>:
    7988:	97 fb       	bst	r25, 7
    798a:	09 2e       	mov	r0, r25
    798c:	05 26       	eor	r0, r21
    798e:	0e d0       	rcall	.+28     	; 0x79ac <__divmodsi4_neg1>
    7990:	57 fd       	sbrc	r21, 7
    7992:	04 d0       	rcall	.+8      	; 0x799c <__divmodsi4_neg2>
    7994:	d7 df       	rcall	.-82     	; 0x7944 <__udivmodsi4>
    7996:	0a d0       	rcall	.+20     	; 0x79ac <__divmodsi4_neg1>
    7998:	00 1c       	adc	r0, r0
    799a:	38 f4       	brcc	.+14     	; 0x79aa <__divmodsi4_exit>

0000799c <__divmodsi4_neg2>:
    799c:	50 95       	com	r21
    799e:	40 95       	com	r20
    79a0:	30 95       	com	r19
    79a2:	21 95       	neg	r18
    79a4:	3f 4f       	sbci	r19, 0xFF	; 255
    79a6:	4f 4f       	sbci	r20, 0xFF	; 255
    79a8:	5f 4f       	sbci	r21, 0xFF	; 255

000079aa <__divmodsi4_exit>:
    79aa:	08 95       	ret

000079ac <__divmodsi4_neg1>:
    79ac:	f6 f7       	brtc	.-4      	; 0x79aa <__divmodsi4_exit>
    79ae:	90 95       	com	r25
    79b0:	80 95       	com	r24
    79b2:	70 95       	com	r23
    79b4:	61 95       	neg	r22
    79b6:	7f 4f       	sbci	r23, 0xFF	; 255
    79b8:	8f 4f       	sbci	r24, 0xFF	; 255
    79ba:	9f 4f       	sbci	r25, 0xFF	; 255
    79bc:	08 95       	ret

000079be <__prologue_saves__>:
    79be:	2f 92       	push	r2
    79c0:	3f 92       	push	r3
    79c2:	4f 92       	push	r4
    79c4:	5f 92       	push	r5
    79c6:	6f 92       	push	r6
    79c8:	7f 92       	push	r7
    79ca:	8f 92       	push	r8
    79cc:	9f 92       	push	r9
    79ce:	af 92       	push	r10
    79d0:	bf 92       	push	r11
    79d2:	cf 92       	push	r12
    79d4:	df 92       	push	r13
    79d6:	ef 92       	push	r14
    79d8:	ff 92       	push	r15
    79da:	0f 93       	push	r16
    79dc:	1f 93       	push	r17
    79de:	cf 93       	push	r28
    79e0:	df 93       	push	r29
    79e2:	cd b7       	in	r28, 0x3d	; 61
    79e4:	de b7       	in	r29, 0x3e	; 62
    79e6:	ca 1b       	sub	r28, r26
    79e8:	db 0b       	sbc	r29, r27
    79ea:	0f b6       	in	r0, 0x3f	; 63
    79ec:	f8 94       	cli
    79ee:	de bf       	out	0x3e, r29	; 62
    79f0:	0f be       	out	0x3f, r0	; 63
    79f2:	cd bf       	out	0x3d, r28	; 61
    79f4:	09 94       	ijmp

000079f6 <__epilogue_restores__>:
    79f6:	2a 88       	ldd	r2, Y+18	; 0x12
    79f8:	39 88       	ldd	r3, Y+17	; 0x11
    79fa:	48 88       	ldd	r4, Y+16	; 0x10
    79fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    79fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a00:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a02:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a04:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a06:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a08:	b9 84       	ldd	r11, Y+9	; 0x09
    7a0a:	c8 84       	ldd	r12, Y+8	; 0x08
    7a0c:	df 80       	ldd	r13, Y+7	; 0x07
    7a0e:	ee 80       	ldd	r14, Y+6	; 0x06
    7a10:	fd 80       	ldd	r15, Y+5	; 0x05
    7a12:	0c 81       	ldd	r16, Y+4	; 0x04
    7a14:	1b 81       	ldd	r17, Y+3	; 0x03
    7a16:	aa 81       	ldd	r26, Y+2	; 0x02
    7a18:	b9 81       	ldd	r27, Y+1	; 0x01
    7a1a:	ce 0f       	add	r28, r30
    7a1c:	d1 1d       	adc	r29, r1
    7a1e:	0f b6       	in	r0, 0x3f	; 63
    7a20:	f8 94       	cli
    7a22:	de bf       	out	0x3e, r29	; 62
    7a24:	0f be       	out	0x3f, r0	; 63
    7a26:	cd bf       	out	0x3d, r28	; 61
    7a28:	ed 01       	movw	r28, r26
    7a2a:	08 95       	ret

00007a2c <_exit>:
    7a2c:	f8 94       	cli

00007a2e <__stop_program>:
    7a2e:	ff cf       	rjmp	.-2      	; 0x7a2e <__stop_program>
