
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d6  00800060  000073b4  00007448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800336  00800336  0000771e  2**0
                  ALLOC
  3 .stab         00006ab0  00000000  00000000  00007720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021f9  00000000  00000000  0000e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000103c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  000105e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00010860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  000131b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0001486a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00015ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  0001601c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  00016387  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_4>
      14:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_5>
      18:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_6>
      1c:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_7>
      20:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_8>
      24:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_9>
      28:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_10>
      2c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f3 e7       	ldi	r31, 0x73	; 115
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <main>
      8a:	0c 94 d8 39 	jmp	0x73b0	; 0x73b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 a1 39 	jmp	0x7342	; 0x7342 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 bd 39 	jmp	0x737a	; 0x737a <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 a1 39 	jmp	0x7342	; 0x7342 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a7 eb       	ldi	r26, 0xB7	; 183
     360:	b1 e0       	ldi	r27, 0x01	; 1
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 bd 39 	jmp	0x737a	; 0x737a <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 ad 39 	jmp	0x735a	; 0x735a <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 ad 39 	jmp	0x735a	; 0x735a <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 a1 39 	jmp	0x7342	; 0x7342 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	87 eb       	ldi	r24, 0xB7	; 183
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 bd 39 	jmp	0x737a	; 0x737a <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 a9 39 	jmp	0x7352	; 0x7352 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	67 eb       	ldi	r22, 0xB7	; 183
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 c5 39 	jmp	0x738a	; 0x738a <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 ad 39 	jmp	0x735a	; 0x735a <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 ad 39 	jmp	0x735a	; 0x735a <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 ad 39 	jmp	0x735a	; 0x735a <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 aa 39 	jmp	0x7354	; 0x7354 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 c6 39 	jmp	0x738c	; 0x738c <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 b1 39 	jmp	0x7362	; 0x7362 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 cd 39 	jmp	0x739a	; 0x739a <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 a9 39 	jmp	0x7352	; 0x7352 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 c5 39 	jmp	0x738a	; 0x738a <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e1 54       	subi	r30, 0x41	; 65
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <TIMER0_vInit>:

/*Global Pointer to array of Function to Hold the Call Back Function Address for Timer*/
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */

void TIMER0_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1228:	a3 e5       	ldi	r26, 0x53	; 83
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e3 e5       	ldi	r30, 0x53	; 83
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7b       	andi	r24, 0xBF	; 191
    1234:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1236:	a3 e5       	ldi	r26, 0x53	; 83
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e3 e5       	ldi	r30, 0x53	; 83
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1244:	e2 e5       	ldi	r30, 0x52	; 82
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 ec       	ldi	r24, 0xC0	; 192
    124a:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    124c:	a9 e5       	ldi	r26, 0x59	; 89
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 e5       	ldi	r30, 0x59	; 89
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    125a:	a3 e5       	ldi	r26, 0x53	; 83
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 7f       	andi	r24, 0xF8	; 248
    1266:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1268:	a3 e5       	ldi	r26, 0x53	; 83
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	8c 93       	st	X, r24
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    12bc:	ea e4       	ldi	r30, 0x4A	; 74
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	84 ef       	ldi	r24, 0xF4	; 244
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    12c8:	e8 e4       	ldi	r30, 0x48	; 72
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	11 82       	std	Z+1, r1	; 0x01
    12ce:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    12d0:	e6 e4       	ldi	r30, 0x46	; 70
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	9e e4       	ldi	r25, 0x4E	; 78
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    12dc:	ae e4       	ldi	r26, 0x4E	; 78
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ee e4       	ldi	r30, 0x4E	; 78
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 64       	ori	r24, 0x40	; 64
    12e8:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    12ea:	af e4       	ldi	r26, 0x4F	; 79
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e4       	ldi	r30, 0x4F	; 79
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7b       	andi	r24, 0xBF	; 191
    12f6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    12f8:	af e4       	ldi	r26, 0x4F	; 79
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 7e       	andi	r24, 0xEF	; 239
    1312:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1314:	af e4       	ldi	r26, 0x4F	; 79
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 62       	ori	r24, 0x20	; 32
    1320:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8b 7f       	andi	r24, 0xFB	; 251
    132e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7e       	andi	r24, 0xEF	; 239
    133c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    133e:	a9 e5       	ldi	r26, 0x59	; 89
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e9 e5       	ldi	r30, 0x59	; 89
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    135a:	ae e4       	ldi	r26, 0x4E	; 78
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ee e4       	ldi	r30, 0x4E	; 78
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	88 7f       	andi	r24, 0xF8	; 248
    1366:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1368:	ae e4       	ldi	r26, 0x4E	; 78
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ee e4       	ldi	r30, 0x4E	; 78
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	8c 93       	st	X, r24


}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    1384:	a2 e4       	ldi	r26, 0x42	; 66
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e4       	ldi	r30, 0x42	; 66
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1392:	a5 e4       	ldi	r26, 0x45	; 69
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e4       	ldi	r30, 0x45	; 69
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    13a0:	a5 e4       	ldi	r26, 0x45	; 69
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e4       	ldi	r30, 0x45	; 69
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	87 7f       	andi	r24, 0xF7	; 247
    13ac:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    13ae:	e4 e4       	ldi	r30, 0x44	; 68
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    13b4:	a9 e5       	ldi	r26, 0x59	; 89
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 e5       	ldi	r30, 0x59	; 89
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	80 64       	ori	r24, 0x40	; 64
    13c0:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    13c2:	a5 e4       	ldi	r26, 0x45	; 69
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e4       	ldi	r30, 0x45	; 69
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    13d0:	a5 e4       	ldi	r26, 0x45	; 69
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e4       	ldi	r30, 0x45	; 69
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	85 60       	ori	r24, 0x05	; 5
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    13f0:	e2 e5       	ldi	r30, 0x52	; 82
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	80 83       	st	Z, r24
}
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <TIMER1_vSetPreload+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    140e:	ec e4       	ldi	r30, 0x4C	; 76
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1430:	e4 e4       	ldi	r30, 0x44	; 68
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	80 83       	st	Z, r24
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    144c:	ec e5       	ldi	r30, 0x5C	; 92
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	80 83       	st	Z, r24
}
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <TIMER1_vSetCTCA+0x6>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    146a:	ea e4       	ldi	r30, 0x4A	; 74
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <TIMER1_vSetCTCB+0x6>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    148e:	e8 e4       	ldi	r30, 0x48	; 72
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    14b0:	e3 e4       	ldi	r30, 0x43	; 67
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	80 83       	st	Z, r24
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <TIMER1_vSetICR1+0x6>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    14ce:	e6 e4       	ldi	r30, 0x46	; 70
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    14ec:	e2 e5       	ldi	r30, 0x52	; 82
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1500:	ec e4       	ldi	r30, 0x4C	; 76
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1516:	e4 e4       	ldi	r30, 0x44	; 68
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <TIMER_vSetPWM+0x6>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1530:	ea e4       	ldi	r30, 0x4A	; 74
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    154e:	ae e4       	ldi	r26, 0x4E	; 78
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ee e4       	ldi	r30, 0x4E	; 78
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 64       	ori	r24, 0x40	; 64
    155a:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    155c:	a9 e5       	ldi	r26, 0x59	; 89
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e9 e5       	ldi	r30, 0x59	; 89
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 62       	ori	r24, 0x20	; 32
    1568:	8c 93       	st	X, r24
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <TIMER_vICUSetTriggerEdge+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    157c:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	41 f4       	brne	.+16     	; 0x1594 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1584:	ae e4       	ldi	r26, 0x4E	; 78
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ee e4       	ldi	r30, 0x4E	; 78
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 64       	ori	r24, 0x40	; 64
    1590:	8c 93       	st	X, r24
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 23       	and	r24, r24
    1598:	41 f4       	brne	.+16     	; 0x15aa <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    159a:	ae e4       	ldi	r26, 0x4E	; 78
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ee e4       	ldi	r30, 0x4E	; 78
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	8c 93       	st	X, r24
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    15c2:	a9 e5       	ldi	r26, 0x59	; 89
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e9 e5       	ldi	r30, 0x59	; 89
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 62       	ori	r24, 0x20	; 32
    15ce:	8c 93       	st	X, r24
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    15de:	a9 e5       	ldi	r26, 0x59	; 89
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e9 e5       	ldi	r30, 0x59	; 89
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7d       	andi	r24, 0xDF	; 223
    15ea:	8c 93       	st	X, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    15fa:	e6 e4       	ldi	r30, 0x46	; 70
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
}
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1610:	a1 e4       	ldi	r26, 0x41	; 65
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e1 e4       	ldi	r30, 0x41	; 65
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 7f       	andi	r24, 0xF8	; 248
    161c:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    161e:	a1 e4       	ldi	r26, 0x41	; 65
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e4       	ldi	r30, 0x41	; 65
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	86 60       	ori	r24, 0x06	; 6
    162a:	8c 93       	st	X, r24
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    163a:	a1 e4       	ldi	r26, 0x41	; 65
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e1 e4       	ldi	r30, 0x41	; 65
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 60       	ori	r24, 0x08	; 8
    1646:	8c 93       	st	X, r24
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1656:	a1 e4       	ldi	r26, 0x41	; 65
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e4       	ldi	r30, 0x41	; 65
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 61       	ori	r24, 0x18	; 24
    1662:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1664:	e1 e4       	ldi	r30, 0x41	; 65
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	10 82       	st	Z, r1
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <TIMER_u8SetCallBack>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <TIMER_u8SetCallBack+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <TIMER_u8SetCallBack+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9b 83       	std	Y+3, r25	; 0x03
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1682:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f0       	breq	.+26     	; 0x16a6 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	fc 01       	movw	r30, r24
    1698:	ea 5c       	subi	r30, 0xCA	; 202
    169a:	fc 4f       	sbci	r31, 0xFC	; 252
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	9b 81       	ldd	r25, Y+3	; 0x03
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    16e4:	80 91 4c 03 	lds	r24, 0x034C
    16e8:	90 91 4d 03 	lds	r25, 0x034D
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	29 f0       	breq	.+10     	; 0x16fa <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    16f0:	e0 91 4c 03 	lds	r30, 0x034C
    16f4:	f0 91 4d 03 	lds	r31, 0x034D
    16f8:	09 95       	icall
	}
}
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	7f 91       	pop	r23
    170c:	6f 91       	pop	r22
    170e:	5f 91       	pop	r21
    1710:	4f 91       	pop	r20
    1712:	3f 91       	pop	r19
    1714:	2f 91       	pop	r18
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    174a:	80 91 4a 03 	lds	r24, 0x034A
    174e:	90 91 4b 03 	lds	r25, 0x034B
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	29 f0       	breq	.+10     	; 0x1760 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1756:	e0 91 4a 03 	lds	r30, 0x034A
    175a:	f0 91 4b 03 	lds	r31, 0x034B
    175e:	09 95       	icall
	}
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    17b0:	80 91 48 03 	lds	r24, 0x0348
    17b4:	90 91 49 03 	lds	r25, 0x0349
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    17bc:	e0 91 48 03 	lds	r30, 0x0348
    17c0:	f0 91 49 03 	lds	r31, 0x0349
    17c4:	09 95       	icall
	}
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1816:	80 91 46 03 	lds	r24, 0x0346
    181a:	90 91 47 03 	lds	r25, 0x0347
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1822:	e0 91 46 03 	lds	r30, 0x0346
    1826:	f0 91 47 03 	lds	r31, 0x0347
    182a:	09 95       	icall
	}
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    187c:	80 91 44 03 	lds	r24, 0x0344
    1880:	90 91 45 03 	lds	r25, 0x0345
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	29 f0       	breq	.+10     	; 0x1892 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1888:	e0 91 44 03 	lds	r30, 0x0344
    188c:	f0 91 45 03 	lds	r31, 0x0345
    1890:	09 95       	icall
	}
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    18e2:	80 91 42 03 	lds	r24, 0x0342
    18e6:	90 91 43 03 	lds	r25, 0x0343
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    18ee:	e0 91 42 03 	lds	r30, 0x0342
    18f2:	f0 91 43 03 	lds	r31, 0x0343
    18f6:	09 95       	icall
	}
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1948:	80 91 40 03 	lds	r24, 0x0340
    194c:	90 91 41 03 	lds	r25, 0x0341
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	29 f0       	breq	.+10     	; 0x195e <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1954:	e0 91 40 03 	lds	r30, 0x0340
    1958:	f0 91 41 03 	lds	r31, 0x0341
    195c:	09 95       	icall
	}
}
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    19ae:	80 91 3e 03 	lds	r24, 0x033E
    19b2:	90 91 3f 03 	lds	r25, 0x033F
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    19ba:	e0 91 3e 03 	lds	r30, 0x033E
    19be:	f0 91 3f 03 	lds	r31, 0x033F
    19c2:	09 95       	icall
	}
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	bf 91       	pop	r27
    19ce:	af 91       	pop	r26
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	7f 91       	pop	r23
    19d6:	6f 91       	pop	r22
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    19f2:	af e5       	ldi	r26, 0x5F	; 95
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ef e5       	ldi	r30, 0x5F	; 95
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 68       	ori	r24, 0x80	; 128
    19fe:	8c 93       	st	X, r24
}
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    1a0e:	af e5       	ldi	r26, 0x5F	; 95
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ef e5       	ldi	r30, 0x5F	; 95
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 77       	andi	r24, 0x7F	; 127
    1a1a:	8c 93       	st	X, r24
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	28 97       	sbiw	r28, 0x08	; 8
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	8a 83       	std	Y+2, r24	; 0x02
    1a38:	6b 83       	std	Y+3, r22	; 0x03
    1a3a:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <DIO_enumSetPinDir+0x26>
    1a46:	f1 c0       	rjmp	.+482    	; 0x1c2a <DIO_enumSetPinDir+0x208>
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <DIO_enumSetPinDir+0x2e>
    1a4e:	ed c0       	rjmp	.+474    	; 0x1c2a <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <DIO_enumSetPinDir+0x36>
    1a56:	6f c0       	rjmp	.+222    	; 0x1b36 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	38 87       	std	Y+8, r19	; 0x08
    1a60:	2f 83       	std	Y+7, r18	; 0x07
    1a62:	8f 81       	ldd	r24, Y+7	; 0x07
    1a64:	98 85       	ldd	r25, Y+8	; 0x08
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	49 f1       	breq	.+82     	; 0x1abe <DIO_enumSetPinDir+0x9c>
    1a6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a6e:	38 85       	ldd	r19, Y+8	; 0x08
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_enumSetPinDir+0x5e>
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_enumSetPinDir+0x74>
    1a7e:	d6 c0       	rjmp	.+428    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    1a80:	2f 81       	ldd	r18, Y+7	; 0x07
    1a82:	38 85       	ldd	r19, Y+8	; 0x08
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	71 f1       	breq	.+92     	; 0x1ae6 <DIO_enumSetPinDir+0xc4>
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	e9 f1       	breq	.+122    	; 0x1b0e <DIO_enumSetPinDir+0xec>
    1a94:	cb c0       	rjmp	.+406    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1a96:	aa e3       	ldi	r26, 0x3A	; 58
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	ea e3       	ldi	r30, 0x3A	; 58
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_enumSetPinDir+0x92>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_enumSetPinDir+0x8e>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	b7 c0       	rjmp	.+366    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1abe:	a7 e3       	ldi	r26, 0x37	; 55
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e7 e3       	ldi	r30, 0x37	; 55
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_enumSetPinDir+0xba>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_enumSetPinDir+0xb6>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	a3 c0       	rjmp	.+326    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    1ae6:	a4 e3       	ldi	r26, 0x34	; 52
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e4 e3       	ldi	r30, 0x34	; 52
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_enumSetPinDir+0xe2>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_enumSetPinDir+0xde>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	8f c0       	rjmp	.+286    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    1b0e:	a1 e3       	ldi	r26, 0x31	; 49
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e1 e3       	ldi	r30, 0x31	; 49
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_enumSetPinDir+0x10a>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_enumSetPinDir+0x106>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	7b c0       	rjmp	.+246    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	88 23       	and	r24, r24
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <DIO_enumSetPinDir+0x11c>
    1b3c:	74 c0       	rjmp	.+232    	; 0x1c26 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	59 f1       	breq	.+86     	; 0x1ba8 <DIO_enumSetPinDir+0x186>
    1b52:	2d 81       	ldd	r18, Y+5	; 0x05
    1b54:	3e 81       	ldd	r19, Y+6	; 0x06
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <DIO_enumSetPinDir+0x144>
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f0       	breq	.+26     	; 0x1b7e <DIO_enumSetPinDir+0x15c>
    1b64:	63 c0       	rjmp	.+198    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    1b66:	2d 81       	ldd	r18, Y+5	; 0x05
    1b68:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	89 f1       	breq	.+98     	; 0x1bd2 <DIO_enumSetPinDir+0x1b0>
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <DIO_enumSetPinDir+0x15a>
    1b7a:	40 c0       	rjmp	.+128    	; 0x1bfc <DIO_enumSetPinDir+0x1da>
    1b7c:	57 c0       	rjmp	.+174    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1b7e:	aa e3       	ldi	r26, 0x3A	; 58
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ea e3       	ldi	r30, 0x3A	; 58
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_enumSetPinDir+0x17a>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_enumSetPinDir+0x176>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	42 c0       	rjmp	.+132    	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_enumSetPinDir+0x1a4>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_enumSetPinDir+0x1a0>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	2d c0       	rjmp	.+90     	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1bd2:	a4 e3       	ldi	r26, 0x34	; 52
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e4 e3       	ldi	r30, 0x34	; 52
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enumSetPinDir+0x1ce>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_enumSetPinDir+0x1ca>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	18 c0       	rjmp	.+48     	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1bfc:	a1 e3       	ldi	r26, 0x31	; 49
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e1 e3       	ldi	r30, 0x31	; 49
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_enumSetPinDir+0x1f8>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_enumSetPinDir+0x1f4>
    1c1e:	80 95       	com	r24
    1c20:	84 23       	and	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1c26:	19 82       	std	Y+1, r1	; 0x01
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	28 96       	adiw	r28, 0x08	; 8
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	28 97       	sbiw	r28, 0x08	; 8
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	6b 83       	std	Y+3, r22	; 0x03
    1c58:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <DIO_enumWritePinVal+0x26>
    1c64:	f1 c0       	rjmp	.+482    	; 0x1e48 <DIO_enumWritePinVal+0x208>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 30       	cpi	r24, 0x08	; 8
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <DIO_enumWritePinVal+0x2e>
    1c6c:	ed c0       	rjmp	.+474    	; 0x1e48 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <DIO_enumWritePinVal+0x36>
    1c74:	6f c0       	rjmp	.+222    	; 0x1d54 <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	38 87       	std	Y+8, r19	; 0x08
    1c7e:	2f 83       	std	Y+7, r18	; 0x07
    1c80:	8f 81       	ldd	r24, Y+7	; 0x07
    1c82:	98 85       	ldd	r25, Y+8	; 0x08
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	49 f1       	breq	.+82     	; 0x1cdc <DIO_enumWritePinVal+0x9c>
    1c8a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c8c:	38 85       	ldd	r19, Y+8	; 0x08
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <DIO_enumWritePinVal+0x5e>
    1c94:	8f 81       	ldd	r24, Y+7	; 0x07
    1c96:	98 85       	ldd	r25, Y+8	; 0x08
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <DIO_enumWritePinVal+0x74>
    1c9c:	d6 c0       	rjmp	.+428    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    1c9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca0:	38 85       	ldd	r19, Y+8	; 0x08
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	71 f1       	breq	.+92     	; 0x1d04 <DIO_enumWritePinVal+0xc4>
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	e9 f1       	breq	.+122    	; 0x1d2c <DIO_enumWritePinVal+0xec>
    1cb2:	cb c0       	rjmp	.+406    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1cb4:	ab e3       	ldi	r26, 0x3B	; 59
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	eb e3       	ldi	r30, 0x3B	; 59
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enumWritePinVal+0x92>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_enumWritePinVal+0x8e>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	b7 c0       	rjmp	.+366    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1cdc:	a8 e3       	ldi	r26, 0x38	; 56
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e8 e3       	ldi	r30, 0x38	; 56
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_enumWritePinVal+0xba>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_enumWritePinVal+0xb6>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	a3 c0       	rjmp	.+326    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1d04:	a5 e3       	ldi	r26, 0x35	; 53
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e3       	ldi	r30, 0x35	; 53
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <DIO_enumWritePinVal+0xe2>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <DIO_enumWritePinVal+0xde>
    1d26:	84 2b       	or	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	8f c0       	rjmp	.+286    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1d2c:	a2 e3       	ldi	r26, 0x32	; 50
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_enumWritePinVal+0x10a>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_enumWritePinVal+0x106>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	7b c0       	rjmp	.+246    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	88 23       	and	r24, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <DIO_enumWritePinVal+0x11c>
    1d5a:	74 c0       	rjmp	.+232    	; 0x1e44 <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	2d 83       	std	Y+5, r18	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	59 f1       	breq	.+86     	; 0x1dc6 <DIO_enumWritePinVal+0x186>
    1d70:	2d 81       	ldd	r18, Y+5	; 0x05
    1d72:	3e 81       	ldd	r19, Y+6	; 0x06
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <DIO_enumWritePinVal+0x144>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f0       	breq	.+26     	; 0x1d9c <DIO_enumWritePinVal+0x15c>
    1d82:	63 c0       	rjmp	.+198    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	89 f1       	breq	.+98     	; 0x1df0 <DIO_enumWritePinVal+0x1b0>
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	83 30       	cpi	r24, 0x03	; 3
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <DIO_enumWritePinVal+0x15a>
    1d98:	40 c0       	rjmp	.+128    	; 0x1e1a <DIO_enumWritePinVal+0x1da>
    1d9a:	57 c0       	rjmp	.+174    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_enumWritePinVal+0x17a>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_enumWritePinVal+0x176>
    1dbe:	80 95       	com	r24
    1dc0:	84 23       	and	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	42 c0       	rjmp	.+132    	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1dc6:	a8 e3       	ldi	r26, 0x38	; 56
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_enumWritePinVal+0x1a4>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_enumWritePinVal+0x1a0>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	2d c0       	rjmp	.+90     	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1df0:	a5 e3       	ldi	r26, 0x35	; 53
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e5 e3       	ldi	r30, 0x35	; 53
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_enumWritePinVal+0x1ce>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <DIO_enumWritePinVal+0x1ca>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	18 c0       	rjmp	.+48     	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e2 e3       	ldi	r30, 0x32	; 50
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_enumWritePinVal+0x1f8>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_enumWritePinVal+0x1f4>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1e48:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	28 96       	adiw	r28, 0x08	; 8
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	27 97       	sbiw	r28, 0x07	; 7
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
    1e76:	5d 83       	std	Y+5, r21	; 0x05
    1e78:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <DIO_enumReadPinVal+0x28>
    1e84:	a6 c0       	rjmp	.+332    	; 0x1fd2 <DIO_enumReadPinVal+0x174>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <DIO_enumReadPinVal+0x30>
    1e8c:	a2 c0       	rjmp	.+324    	; 0x1fd2 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3f 83       	std	Y+7, r19	; 0x07
    1e96:	2e 83       	std	Y+6, r18	; 0x06
    1e98:	4e 81       	ldd	r20, Y+6	; 0x06
    1e9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e9c:	41 30       	cpi	r20, 0x01	; 1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	c1 f1       	breq	.+112    	; 0x1f12 <DIO_enumReadPinVal+0xb4>
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	34 f4       	brge	.+12     	; 0x1eb8 <DIO_enumReadPinVal+0x5a>
    1eac:	2e 81       	ldd	r18, Y+6	; 0x06
    1eae:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb0:	21 15       	cp	r18, r1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <DIO_enumReadPinVal+0x74>
    1eb6:	8e c0       	rjmp	.+284    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    1eb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1eba:	5f 81       	ldd	r21, Y+7	; 0x07
    1ebc:	42 30       	cpi	r20, 0x02	; 2
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <DIO_enumReadPinVal+0x66>
    1ec2:	47 c0       	rjmp	.+142    	; 0x1f52 <DIO_enumReadPinVal+0xf4>
    1ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <DIO_enumReadPinVal+0x72>
    1ece:	61 c0       	rjmp	.+194    	; 0x1f92 <DIO_enumReadPinVal+0x134>
    1ed0:	81 c0       	rjmp	.+258    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1ed2:	e9 e3       	ldi	r30, 0x39	; 57
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_enumReadPinVal+0x8e>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	2a 95       	dec	r18
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_enumReadPinVal+0x8a>
    1ef0:	9a 01       	movw	r18, r20
    1ef2:	28 23       	and	r18, r24
    1ef4:	39 23       	and	r19, r25
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_enumReadPinVal+0xa6>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	8a 95       	dec	r24
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_enumReadPinVal+0xa2>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f0e:	80 83       	st	Z, r24
    1f10:	61 c0       	rjmp	.+194    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1f12:	e6 e3       	ldi	r30, 0x36	; 54
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_enumReadPinVal+0xce>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	2a 95       	dec	r18
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_enumReadPinVal+0xca>
    1f30:	9a 01       	movw	r18, r20
    1f32:	28 23       	and	r18, r24
    1f34:	39 23       	and	r19, r25
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_enumReadPinVal+0xe6>
    1f40:	55 95       	asr	r21
    1f42:	47 95       	ror	r20
    1f44:	8a 95       	dec	r24
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_enumReadPinVal+0xe2>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4e:	80 83       	st	Z, r24
    1f50:	41 c0       	rjmp	.+130    	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1f52:	e3 e3       	ldi	r30, 0x33	; 51
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <DIO_enumReadPinVal+0x10e>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	2a 95       	dec	r18
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <DIO_enumReadPinVal+0x10a>
    1f70:	9a 01       	movw	r18, r20
    1f72:	28 23       	and	r18, r24
    1f74:	39 23       	and	r19, r25
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enumReadPinVal+0x126>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_enumReadPinVal+0x122>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f8e:	80 83       	st	Z, r24
    1f90:	21 c0       	rjmp	.+66     	; 0x1fd4 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1f92:	e0 e3       	ldi	r30, 0x30	; 48
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_enumReadPinVal+0x14e>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	2a 95       	dec	r18
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_enumReadPinVal+0x14a>
    1fb0:	9a 01       	movw	r18, r20
    1fb2:	28 23       	and	r18, r24
    1fb4:	39 23       	and	r19, r25
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_enumReadPinVal+0x166>
    1fc0:	55 95       	asr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	8a 95       	dec	r24
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_enumReadPinVal+0x162>
    1fc8:	ca 01       	movw	r24, r20
    1fca:	ec 81       	ldd	r30, Y+4	; 0x04
    1fcc:	fd 81       	ldd	r31, Y+5	; 0x05
    1fce:	80 83       	st	Z, r24
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd6:	27 96       	adiw	r28, 0x07	; 7
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <DIO_enumTogglePinVal+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <DIO_enumTogglePinVal+0x8>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	08 f0       	brcs	.+2      	; 0x2006 <DIO_enumTogglePinVal+0x1e>
    2004:	73 c0       	rjmp	.+230    	; 0x20ec <DIO_enumTogglePinVal+0x104>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	88 30       	cpi	r24, 0x08	; 8
    200a:	08 f0       	brcs	.+2      	; 0x200e <DIO_enumTogglePinVal+0x26>
    200c:	6f c0       	rjmp	.+222    	; 0x20ec <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	49 f1       	breq	.+82     	; 0x2074 <DIO_enumTogglePinVal+0x8c>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <DIO_enumTogglePinVal+0x4e>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <DIO_enumTogglePinVal+0x64>
    2034:	5c c0       	rjmp	.+184    	; 0x20ee <DIO_enumTogglePinVal+0x106>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	71 f1       	breq	.+92     	; 0x209c <DIO_enumTogglePinVal+0xb4>
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	e9 f1       	breq	.+122    	; 0x20c4 <DIO_enumTogglePinVal+0xdc>
    204a:	51 c0       	rjmp	.+162    	; 0x20ee <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    204c:	ab e3       	ldi	r26, 0x3B	; 59
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	eb e3       	ldi	r30, 0x3B	; 59
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_enumTogglePinVal+0x82>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_enumTogglePinVal+0x7e>
    206e:	84 27       	eor	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	3d c0       	rjmp	.+122    	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2074:	a8 e3       	ldi	r26, 0x38	; 56
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e8 e3       	ldi	r30, 0x38	; 56
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_enumTogglePinVal+0xaa>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_enumTogglePinVal+0xa6>
    2096:	84 27       	eor	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	29 c0       	rjmp	.+82     	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    209c:	a5 e3       	ldi	r26, 0x35	; 53
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e3       	ldi	r30, 0x35	; 53
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_enumTogglePinVal+0xd2>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_enumTogglePinVal+0xce>
    20be:	84 27       	eor	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	15 c0       	rjmp	.+42     	; 0x20ee <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    20c4:	a2 e3       	ldi	r26, 0x32	; 50
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e2 e3       	ldi	r30, 0x32	; 50
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	48 2f       	mov	r20, r24
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_enumTogglePinVal+0xfa>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_enumTogglePinVal+0xf6>
    20e6:	84 27       	eor	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    20ec:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <DIO_enumConnectPullUp+0x6>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <DIO_enumConnectPullUp+0x8>
    2108:	00 d0       	rcall	.+0      	; 0x210a <DIO_enumConnectPullUp+0xa>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	6b 83       	std	Y+3, r22	; 0x03
    2112:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	08 f0       	brcs	.+2      	; 0x2120 <DIO_enumConnectPullUp+0x20>
    211e:	3e c1       	rjmp	.+636    	; 0x239c <DIO_enumConnectPullUp+0x29c>
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	88 30       	cpi	r24, 0x08	; 8
    2124:	08 f0       	brcs	.+2      	; 0x2128 <DIO_enumConnectPullUp+0x28>
    2126:	3a c1       	rjmp	.+628    	; 0x239c <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3e 83       	std	Y+6, r19	; 0x06
    2130:	2d 83       	std	Y+5, r18	; 0x05
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <DIO_enumConnectPullUp+0x3e>
    213c:	5d c0       	rjmp	.+186    	; 0x21f8 <DIO_enumConnectPullUp+0xf8>
    213e:	2d 81       	ldd	r18, Y+5	; 0x05
    2140:	3e 81       	ldd	r19, Y+6	; 0x06
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	31 05       	cpc	r19, r1
    2146:	2c f4       	brge	.+10     	; 0x2152 <DIO_enumConnectPullUp+0x52>
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	71 f0       	breq	.+28     	; 0x216c <DIO_enumConnectPullUp+0x6c>
    2150:	26 c1       	rjmp	.+588    	; 0x239e <DIO_enumConnectPullUp+0x29e>
    2152:	2d 81       	ldd	r18, Y+5	; 0x05
    2154:	3e 81       	ldd	r19, Y+6	; 0x06
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <DIO_enumConnectPullUp+0x5e>
    215c:	93 c0       	rjmp	.+294    	; 0x2284 <DIO_enumConnectPullUp+0x184>
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	91 05       	cpc	r25, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <DIO_enumConnectPullUp+0x6a>
    2168:	d3 c0       	rjmp	.+422    	; 0x2310 <DIO_enumConnectPullUp+0x210>
    216a:	19 c1       	rjmp	.+562    	; 0x239e <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	71 f5       	brne	.+92     	; 0x21ce <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2172:	a0 e5       	ldi	r26, 0x50	; 80
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e0 e5       	ldi	r30, 0x50	; 80
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8b 7f       	andi	r24, 0xFB	; 251
    217e:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2180:	aa e3       	ldi	r26, 0x3A	; 58
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ea e3       	ldi	r30, 0x3A	; 58
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <DIO_enumConnectPullUp+0x9c>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	2a 95       	dec	r18
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <DIO_enumConnectPullUp+0x98>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    21a6:	ab e3       	ldi	r26, 0x3B	; 59
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	eb e3       	ldi	r30, 0x3B	; 59
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <DIO_enumConnectPullUp+0xc4>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <DIO_enumConnectPullUp+0xc0>
    21c8:	84 2b       	or	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	e8 c0       	rjmp	.+464    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    21ce:	ab e3       	ldi	r26, 0x3B	; 59
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	eb e3       	ldi	r30, 0x3B	; 59
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_enumConnectPullUp+0xec>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_enumConnectPullUp+0xe8>
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	d3 c0       	rjmp	.+422    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	71 f5       	brne	.+92     	; 0x225a <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    21fe:	a0 e5       	ldi	r26, 0x50	; 80
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e0 e5       	ldi	r30, 0x50	; 80
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8b 7f       	andi	r24, 0xFB	; 251
    220a:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    220c:	a7 e3       	ldi	r26, 0x37	; 55
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e7 e3       	ldi	r30, 0x37	; 55
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_enumConnectPullUp+0x128>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	2a 95       	dec	r18
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <DIO_enumConnectPullUp+0x124>
    222c:	80 95       	com	r24
    222e:	84 23       	and	r24, r20
    2230:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2232:	a8 e3       	ldi	r26, 0x38	; 56
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e8 e3       	ldi	r30, 0x38	; 56
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_enumConnectPullUp+0x150>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_enumConnectPullUp+0x14c>
    2254:	84 2b       	or	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	a2 c0       	rjmp	.+324    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    225a:	a8 e3       	ldi	r26, 0x38	; 56
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e8 e3       	ldi	r30, 0x38	; 56
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_enumConnectPullUp+0x178>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_enumConnectPullUp+0x174>
    227c:	80 95       	com	r24
    227e:	84 23       	and	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	8d c0       	rjmp	.+282    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	71 f5       	brne	.+92     	; 0x22e6 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    228a:	a0 e5       	ldi	r26, 0x50	; 80
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e0 e5       	ldi	r30, 0x50	; 80
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8b 7f       	andi	r24, 0xFB	; 251
    2296:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2298:	a4 e3       	ldi	r26, 0x34	; 52
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e4 e3       	ldi	r30, 0x34	; 52
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <DIO_enumConnectPullUp+0x1b4>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	2a 95       	dec	r18
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <DIO_enumConnectPullUp+0x1b0>
    22b8:	80 95       	com	r24
    22ba:	84 23       	and	r24, r20
    22bc:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    22be:	a5 e3       	ldi	r26, 0x35	; 53
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e3       	ldi	r30, 0x35	; 53
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <DIO_enumConnectPullUp+0x1dc>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <DIO_enumConnectPullUp+0x1d8>
    22e0:	84 2b       	or	r24, r20
    22e2:	8c 93       	st	X, r24
    22e4:	5c c0       	rjmp	.+184    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    22e6:	a5 e3       	ldi	r26, 0x35	; 53
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e5 e3       	ldi	r30, 0x35	; 53
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	48 2f       	mov	r20, r24
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	02 2e       	mov	r0, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_enumConnectPullUp+0x204>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	0a 94       	dec	r0
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <DIO_enumConnectPullUp+0x200>
    2308:	80 95       	com	r24
    230a:	84 23       	and	r24, r20
    230c:	8c 93       	st	X, r24
    230e:	47 c0       	rjmp	.+142    	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	71 f5       	brne	.+92     	; 0x2372 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2316:	a0 e5       	ldi	r26, 0x50	; 80
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e0 e5       	ldi	r30, 0x50	; 80
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8b 7f       	andi	r24, 0xFB	; 251
    2322:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2324:	a1 e3       	ldi	r26, 0x31	; 49
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e1 e3       	ldi	r30, 0x31	; 49
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_enumConnectPullUp+0x240>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	2a 95       	dec	r18
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DIO_enumConnectPullUp+0x23c>
    2344:	80 95       	com	r24
    2346:	84 23       	and	r24, r20
    2348:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    234a:	a2 e3       	ldi	r26, 0x32	; 50
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e2 e3       	ldi	r30, 0x32	; 50
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_enumConnectPullUp+0x268>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_enumConnectPullUp+0x264>
    236c:	84 2b       	or	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	16 c0       	rjmp	.+44     	; 0x239e <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2372:	a2 e3       	ldi	r26, 0x32	; 50
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e2 e3       	ldi	r30, 0x32	; 50
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_enumConnectPullUp+0x290>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_enumConnectPullUp+0x28c>
    2394:	80 95       	com	r24
    2396:	84 23       	and	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	01 c0       	rjmp	.+2      	; 0x239e <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    239c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a0:	26 96       	adiw	r28, 0x06	; 6
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <DIO_enumSetPortDir+0x6>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <DIO_enumSetPortDir+0x8>
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	a8 f5       	brcc	.+106    	; 0x2438 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3d 83       	std	Y+5, r19	; 0x05
    23d6:	2c 83       	std	Y+4, r18	; 0x04
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	d1 f0       	breq	.+52     	; 0x2416 <DIO_enumSetPortDir+0x64>
    23e2:	2c 81       	ldd	r18, Y+4	; 0x04
    23e4:	3d 81       	ldd	r19, Y+5	; 0x05
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <DIO_enumSetPortDir+0x44>
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	61 f0       	breq	.+24     	; 0x240c <DIO_enumSetPortDir+0x5a>
    23f4:	1f c0       	rjmp	.+62     	; 0x2434 <DIO_enumSetPortDir+0x82>
    23f6:	2c 81       	ldd	r18, Y+4	; 0x04
    23f8:	3d 81       	ldd	r19, Y+5	; 0x05
    23fa:	22 30       	cpi	r18, 0x02	; 2
    23fc:	31 05       	cpc	r19, r1
    23fe:	81 f0       	breq	.+32     	; 0x2420 <DIO_enumSetPortDir+0x6e>
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	83 30       	cpi	r24, 0x03	; 3
    2406:	91 05       	cpc	r25, r1
    2408:	81 f0       	breq	.+32     	; 0x242a <DIO_enumSetPortDir+0x78>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    240c:	ea e3       	ldi	r30, 0x3A	; 58
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	80 83       	st	Z, r24
    2414:	12 c0       	rjmp	.+36     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    2416:	e7 e3       	ldi	r30, 0x37	; 55
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	80 83       	st	Z, r24
    241e:	0d c0       	rjmp	.+26     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    2420:	e4 e3       	ldi	r30, 0x34	; 52
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	80 83       	st	Z, r24
    2428:	08 c0       	rjmp	.+16     	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    242a:	e1 e3       	ldi	r30, 0x31	; 49
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	80 83       	st	Z, r24
    2432:	03 c0       	rjmp	.+6      	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2434:	19 82       	std	Y+1, r1	; 0x01
    2436:	01 c0       	rjmp	.+2      	; 0x243a <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <DIO_enumWritePortVal+0x6>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <DIO_enumWritePortVal+0x8>
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	84 30       	cpi	r24, 0x04	; 4
    2466:	a8 f5       	brcc	.+106    	; 0x24d2 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3d 83       	std	Y+5, r19	; 0x05
    2470:	2c 83       	std	Y+4, r18	; 0x04
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	d1 f0       	breq	.+52     	; 0x24b0 <DIO_enumWritePortVal+0x64>
    247c:	2c 81       	ldd	r18, Y+4	; 0x04
    247e:	3d 81       	ldd	r19, Y+5	; 0x05
    2480:	22 30       	cpi	r18, 0x02	; 2
    2482:	31 05       	cpc	r19, r1
    2484:	2c f4       	brge	.+10     	; 0x2490 <DIO_enumWritePortVal+0x44>
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	61 f0       	breq	.+24     	; 0x24a6 <DIO_enumWritePortVal+0x5a>
    248e:	1f c0       	rjmp	.+62     	; 0x24ce <DIO_enumWritePortVal+0x82>
    2490:	2c 81       	ldd	r18, Y+4	; 0x04
    2492:	3d 81       	ldd	r19, Y+5	; 0x05
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	31 05       	cpc	r19, r1
    2498:	81 f0       	breq	.+32     	; 0x24ba <DIO_enumWritePortVal+0x6e>
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	91 05       	cpc	r25, r1
    24a2:	81 f0       	breq	.+32     	; 0x24c4 <DIO_enumWritePortVal+0x78>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	80 83       	st	Z, r24
    24ae:	12 c0       	rjmp	.+36     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    24b0:	e8 e3       	ldi	r30, 0x38	; 56
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	80 83       	st	Z, r24
    24b8:	0d c0       	rjmp	.+26     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    24ba:	e5 e3       	ldi	r30, 0x35	; 53
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	80 83       	st	Z, r24
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    24c4:	e2 e3       	ldi	r30, 0x32	; 50
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	80 83       	st	Z, r24
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    24d2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	27 97       	sbiw	r28, 0x07	; 7
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	7c 83       	std	Y+4, r23	; 0x04
    24fe:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	08 f0       	brcs	.+2      	; 0x250c <DIO_enumReadPorVal+0x26>
    250a:	3f c0       	rjmp	.+126    	; 0x258a <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	3f 83       	std	Y+7, r19	; 0x07
    2514:	2e 83       	std	Y+6, r18	; 0x06
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	91 05       	cpc	r25, r1
    251e:	e1 f0       	breq	.+56     	; 0x2558 <DIO_enumReadPorVal+0x72>
    2520:	2e 81       	ldd	r18, Y+6	; 0x06
    2522:	3f 81       	ldd	r19, Y+7	; 0x07
    2524:	22 30       	cpi	r18, 0x02	; 2
    2526:	31 05       	cpc	r19, r1
    2528:	2c f4       	brge	.+10     	; 0x2534 <DIO_enumReadPorVal+0x4e>
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	9f 81       	ldd	r25, Y+7	; 0x07
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	61 f0       	breq	.+24     	; 0x254a <DIO_enumReadPorVal+0x64>
    2532:	27 c0       	rjmp	.+78     	; 0x2582 <DIO_enumReadPorVal+0x9c>
    2534:	2e 81       	ldd	r18, Y+6	; 0x06
    2536:	3f 81       	ldd	r19, Y+7	; 0x07
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	a1 f0       	breq	.+40     	; 0x2566 <DIO_enumReadPorVal+0x80>
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	9f 81       	ldd	r25, Y+7	; 0x07
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	91 05       	cpc	r25, r1
    2546:	b1 f0       	breq	.+44     	; 0x2574 <DIO_enumReadPorVal+0x8e>
    2548:	1c c0       	rjmp	.+56     	; 0x2582 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    254a:	e9 e3       	ldi	r30, 0x39	; 57
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	eb 81       	ldd	r30, Y+3	; 0x03
    2552:	fc 81       	ldd	r31, Y+4	; 0x04
    2554:	80 83       	st	Z, r24
    2556:	16 c0       	rjmp	.+44     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    2558:	e6 e3       	ldi	r30, 0x36	; 54
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	eb 81       	ldd	r30, Y+3	; 0x03
    2560:	fc 81       	ldd	r31, Y+4	; 0x04
    2562:	80 83       	st	Z, r24
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    2566:	e3 e3       	ldi	r30, 0x33	; 51
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	eb 81       	ldd	r30, Y+3	; 0x03
    256e:	fc 81       	ldd	r31, Y+4	; 0x04
    2570:	80 83       	st	Z, r24
    2572:	08 c0       	rjmp	.+16     	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    2574:	e0 e3       	ldi	r30, 0x30	; 48
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	80 83       	st	Z, r24
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2582:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    2584:	99 81       	ldd	r25, Y+1	; 0x01
    2586:	9d 83       	std	Y+5, r25	; 0x05
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    258a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    258c:	29 81       	ldd	r18, Y+1	; 0x01
    258e:	2d 83       	std	Y+5, r18	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2592:	27 96       	adiw	r28, 0x07	; 7
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <DIO_enumTogglePortValue+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <DIO_enumTogglePortValue+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	84 30       	cpi	r24, 0x04	; 4
    25ba:	08 f0       	brcs	.+2      	; 0x25be <DIO_enumTogglePortValue+0x1a>
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3c 83       	std	Y+4, r19	; 0x04
    25c6:	2b 83       	std	Y+3, r18	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	91 05       	cpc	r25, r1
    25d0:	e9 f0       	breq	.+58     	; 0x260c <DIO_enumTogglePortValue+0x68>
    25d2:	2b 81       	ldd	r18, Y+3	; 0x03
    25d4:	3c 81       	ldd	r19, Y+4	; 0x04
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	2c f4       	brge	.+10     	; 0x25e6 <DIO_enumTogglePortValue+0x42>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	61 f0       	breq	.+24     	; 0x25fc <DIO_enumTogglePortValue+0x58>
    25e4:	2c c0       	rjmp	.+88     	; 0x263e <DIO_enumTogglePortValue+0x9a>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	22 30       	cpi	r18, 0x02	; 2
    25ec:	31 05       	cpc	r19, r1
    25ee:	b1 f0       	breq	.+44     	; 0x261c <DIO_enumTogglePortValue+0x78>
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	91 05       	cpc	r25, r1
    25f8:	c9 f0       	breq	.+50     	; 0x262c <DIO_enumTogglePortValue+0x88>
    25fa:	21 c0       	rjmp	.+66     	; 0x263e <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    25fc:	ab e3       	ldi	r26, 0x3B	; 59
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	eb e3       	ldi	r30, 0x3B	; 59
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	80 95       	com	r24
    2608:	8c 93       	st	X, r24
    260a:	19 c0       	rjmp	.+50     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    260c:	a8 e3       	ldi	r26, 0x38	; 56
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e8 e3       	ldi	r30, 0x38	; 56
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 95       	com	r24
    2618:	8c 93       	st	X, r24
    261a:	11 c0       	rjmp	.+34     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    261c:	a5 e3       	ldi	r26, 0x35	; 53
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e3       	ldi	r30, 0x35	; 53
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	80 95       	com	r24
    2628:	8c 93       	st	X, r24
    262a:	09 c0       	rjmp	.+18     	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    262c:	a2 e3       	ldi	r26, 0x32	; 50
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e2 e3       	ldi	r30, 0x32	; 50
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	80 95       	com	r24
    2638:	8c 93       	st	X, r24
    263a:	01 c0       	rjmp	.+2      	; 0x263e <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    263c:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <DIO_vWriteLowNibble+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <DIO_vWriteLowNibble+0x8>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	84 30       	cpi	r24, 0x04	; 4
    2668:	08 f0       	brcs	.+2      	; 0x266c <DIO_vWriteLowNibble+0x1e>
    266a:	62 c0       	rjmp	.+196    	; 0x2730 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	8f 70       	andi	r24, 0x0F	; 15
    2670:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3d 83       	std	Y+5, r19	; 0x05
    267a:	2c 83       	std	Y+4, r18	; 0x04
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	91 05       	cpc	r25, r1
    2684:	29 f1       	breq	.+74     	; 0x26d0 <DIO_vWriteLowNibble+0x82>
    2686:	2c 81       	ldd	r18, Y+4	; 0x04
    2688:	3d 81       	ldd	r19, Y+5	; 0x05
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	2c f4       	brge	.+10     	; 0x269a <DIO_vWriteLowNibble+0x4c>
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	61 f0       	breq	.+24     	; 0x26b0 <DIO_vWriteLowNibble+0x62>
    2698:	4c c0       	rjmp	.+152    	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    269a:	2c 81       	ldd	r18, Y+4	; 0x04
    269c:	3d 81       	ldd	r19, Y+5	; 0x05
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	31 f1       	breq	.+76     	; 0x26f0 <DIO_vWriteLowNibble+0xa2>
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	83 30       	cpi	r24, 0x03	; 3
    26aa:	91 05       	cpc	r25, r1
    26ac:	89 f1       	breq	.+98     	; 0x2710 <DIO_vWriteLowNibble+0xc2>
    26ae:	41 c0       	rjmp	.+130    	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    26b0:	ab e3       	ldi	r26, 0x3B	; 59
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	eb e3       	ldi	r30, 0x3B	; 59
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	80 7f       	andi	r24, 0xF0	; 240
    26bc:	8c 93       	st	X, r24
      PORTA_REG |= value;
    26be:	ab e3       	ldi	r26, 0x3B	; 59
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	eb e3       	ldi	r30, 0x3B	; 59
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	90 81       	ld	r25, Z
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	89 2b       	or	r24, r25
    26cc:	8c 93       	st	X, r24
    26ce:	31 c0       	rjmp	.+98     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    26d0:	a8 e3       	ldi	r26, 0x38	; 56
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e8 e3       	ldi	r30, 0x38	; 56
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 7f       	andi	r24, 0xF0	; 240
    26dc:	8c 93       	st	X, r24
      PORTB_REG |= value;
    26de:	a8 e3       	ldi	r26, 0x38	; 56
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e8 e3       	ldi	r30, 0x38	; 56
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	90 81       	ld	r25, Z
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	89 2b       	or	r24, r25
    26ec:	8c 93       	st	X, r24
    26ee:	21 c0       	rjmp	.+66     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    26f0:	a5 e3       	ldi	r26, 0x35	; 53
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e5 e3       	ldi	r30, 0x35	; 53
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	80 7f       	andi	r24, 0xF0	; 240
    26fc:	8c 93       	st	X, r24
      PORTC_REG |= value;
    26fe:	a5 e3       	ldi	r26, 0x35	; 53
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e5 e3       	ldi	r30, 0x35	; 53
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	90 81       	ld	r25, Z
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	89 2b       	or	r24, r25
    270c:	8c 93       	st	X, r24
    270e:	11 c0       	rjmp	.+34     	; 0x2732 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    2710:	a2 e3       	ldi	r26, 0x32	; 50
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e2 e3       	ldi	r30, 0x32	; 50
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 7f       	andi	r24, 0xF0	; 240
    271c:	8c 93       	st	X, r24
      PORTD_REG |= value;
    271e:	a2 e3       	ldi	r26, 0x32	; 50
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e2 e3       	ldi	r30, 0x32	; 50
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	90 81       	ld	r25, Z
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	89 2b       	or	r24, r25
    272c:	8c 93       	st	X, r24
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2730:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <DIO_vWriteHighNibble+0x6>
    274a:	00 d0       	rcall	.+0      	; 0x274c <DIO_vWriteHighNibble+0x8>
    274c:	0f 92       	push	r0
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	84 30       	cpi	r24, 0x04	; 4
    275e:	08 f0       	brcs	.+2      	; 0x2762 <DIO_vWriteHighNibble+0x1e>
    2760:	63 c0       	rjmp	.+198    	; 0x2828 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	82 95       	swap	r24
    2766:	80 7f       	andi	r24, 0xF0	; 240
    2768:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	3d 83       	std	Y+5, r19	; 0x05
    2772:	2c 83       	std	Y+4, r18	; 0x04
    2774:	8c 81       	ldd	r24, Y+4	; 0x04
    2776:	9d 81       	ldd	r25, Y+5	; 0x05
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	91 05       	cpc	r25, r1
    277c:	29 f1       	breq	.+74     	; 0x27c8 <DIO_vWriteHighNibble+0x84>
    277e:	2c 81       	ldd	r18, Y+4	; 0x04
    2780:	3d 81       	ldd	r19, Y+5	; 0x05
    2782:	22 30       	cpi	r18, 0x02	; 2
    2784:	31 05       	cpc	r19, r1
    2786:	2c f4       	brge	.+10     	; 0x2792 <DIO_vWriteHighNibble+0x4e>
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	9d 81       	ldd	r25, Y+5	; 0x05
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	61 f0       	breq	.+24     	; 0x27a8 <DIO_vWriteHighNibble+0x64>
    2790:	4c c0       	rjmp	.+152    	; 0x282a <DIO_vWriteHighNibble+0xe6>
    2792:	2c 81       	ldd	r18, Y+4	; 0x04
    2794:	3d 81       	ldd	r19, Y+5	; 0x05
    2796:	22 30       	cpi	r18, 0x02	; 2
    2798:	31 05       	cpc	r19, r1
    279a:	31 f1       	breq	.+76     	; 0x27e8 <DIO_vWriteHighNibble+0xa4>
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	83 30       	cpi	r24, 0x03	; 3
    27a2:	91 05       	cpc	r25, r1
    27a4:	89 f1       	breq	.+98     	; 0x2808 <DIO_vWriteHighNibble+0xc4>
    27a6:	41 c0       	rjmp	.+130    	; 0x282a <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    27a8:	ab e3       	ldi	r26, 0x3B	; 59
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	eb e3       	ldi	r30, 0x3B	; 59
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 70       	andi	r24, 0x0F	; 15
    27b4:	8c 93       	st	X, r24
      PORTA_REG|= value;
    27b6:	ab e3       	ldi	r26, 0x3B	; 59
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	eb e3       	ldi	r30, 0x3B	; 59
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	90 81       	ld	r25, Z
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	89 2b       	or	r24, r25
    27c4:	8c 93       	st	X, r24
    27c6:	31 c0       	rjmp	.+98     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    27c8:	a8 e3       	ldi	r26, 0x38	; 56
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e8 e3       	ldi	r30, 0x38	; 56
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 70       	andi	r24, 0x0F	; 15
    27d4:	8c 93       	st	X, r24
      PORTB_REG |= value;
    27d6:	a8 e3       	ldi	r26, 0x38	; 56
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e8 e3       	ldi	r30, 0x38	; 56
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	90 81       	ld	r25, Z
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	89 2b       	or	r24, r25
    27e4:	8c 93       	st	X, r24
    27e6:	21 c0       	rjmp	.+66     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    27e8:	a5 e3       	ldi	r26, 0x35	; 53
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e5 e3       	ldi	r30, 0x35	; 53
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8f 70       	andi	r24, 0x0F	; 15
    27f4:	8c 93       	st	X, r24
      PORTC_REG |= value;
    27f6:	a5 e3       	ldi	r26, 0x35	; 53
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e5 e3       	ldi	r30, 0x35	; 53
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	90 81       	ld	r25, Z
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	89 2b       	or	r24, r25
    2804:	8c 93       	st	X, r24
    2806:	11 c0       	rjmp	.+34     	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    2808:	a2 e3       	ldi	r26, 0x32	; 50
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e2 e3       	ldi	r30, 0x32	; 50
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8f 70       	andi	r24, 0x0F	; 15
    2814:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2816:	a2 e3       	ldi	r26, 0x32	; 50
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e2 e3       	ldi	r30, 0x32	; 50
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	90 81       	ld	r25, Z
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	89 2b       	or	r24, r25
    2824:	8c 93       	st	X, r24
    2826:	01 c0       	rjmp	.+2      	; 0x282a <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2828:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <DIO_vSetLowNibbleDir+0x6>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <DIO_vSetLowNibbleDir+0x8>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	08 f0       	brcs	.+2      	; 0x285a <DIO_vSetLowNibbleDir+0x1e>
    2858:	62 c0       	rjmp	.+196    	; 0x291e <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	8f 70       	andi	r24, 0x0F	; 15
    285e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	3d 83       	std	Y+5, r19	; 0x05
    2868:	2c 83       	std	Y+4, r18	; 0x04
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	9d 81       	ldd	r25, Y+5	; 0x05
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	91 05       	cpc	r25, r1
    2872:	29 f1       	breq	.+74     	; 0x28be <DIO_vSetLowNibbleDir+0x82>
    2874:	2c 81       	ldd	r18, Y+4	; 0x04
    2876:	3d 81       	ldd	r19, Y+5	; 0x05
    2878:	22 30       	cpi	r18, 0x02	; 2
    287a:	31 05       	cpc	r19, r1
    287c:	2c f4       	brge	.+10     	; 0x2888 <DIO_vSetLowNibbleDir+0x4c>
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	9d 81       	ldd	r25, Y+5	; 0x05
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	61 f0       	breq	.+24     	; 0x289e <DIO_vSetLowNibbleDir+0x62>
    2886:	4c c0       	rjmp	.+152    	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    2888:	2c 81       	ldd	r18, Y+4	; 0x04
    288a:	3d 81       	ldd	r19, Y+5	; 0x05
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 05       	cpc	r19, r1
    2890:	31 f1       	breq	.+76     	; 0x28de <DIO_vSetLowNibbleDir+0xa2>
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	83 30       	cpi	r24, 0x03	; 3
    2898:	91 05       	cpc	r25, r1
    289a:	89 f1       	breq	.+98     	; 0x28fe <DIO_vSetLowNibbleDir+0xc2>
    289c:	41 c0       	rjmp	.+130    	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    289e:	aa e3       	ldi	r26, 0x3A	; 58
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ea e3       	ldi	r30, 0x3A	; 58
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 7f       	andi	r24, 0xF0	; 240
    28aa:	8c 93       	st	X, r24
      DDRA_REG |= value;
    28ac:	aa e3       	ldi	r26, 0x3A	; 58
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ea e3       	ldi	r30, 0x3A	; 58
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	90 81       	ld	r25, Z
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	89 2b       	or	r24, r25
    28ba:	8c 93       	st	X, r24
    28bc:	31 c0       	rjmp	.+98     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    28be:	a7 e3       	ldi	r26, 0x37	; 55
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e7 e3       	ldi	r30, 0x37	; 55
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 7f       	andi	r24, 0xF0	; 240
    28ca:	8c 93       	st	X, r24
      DDRB_REG |= value;
    28cc:	a7 e3       	ldi	r26, 0x37	; 55
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e7 e3       	ldi	r30, 0x37	; 55
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	90 81       	ld	r25, Z
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	89 2b       	or	r24, r25
    28da:	8c 93       	st	X, r24
    28dc:	21 c0       	rjmp	.+66     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    28de:	a4 e3       	ldi	r26, 0x34	; 52
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e4 e3       	ldi	r30, 0x34	; 52
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 7f       	andi	r24, 0xF0	; 240
    28ea:	8c 93       	st	X, r24
      DDRC_REG |= value;
    28ec:	a4 e3       	ldi	r26, 0x34	; 52
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e4 e3       	ldi	r30, 0x34	; 52
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	90 81       	ld	r25, Z
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	89 2b       	or	r24, r25
    28fa:	8c 93       	st	X, r24
    28fc:	11 c0       	rjmp	.+34     	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    28fe:	a1 e3       	ldi	r26, 0x31	; 49
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e1 e3       	ldi	r30, 0x31	; 49
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 7f       	andi	r24, 0xF0	; 240
    290a:	8c 93       	st	X, r24
      DDRD_REG|= value;
    290c:	a1 e3       	ldi	r26, 0x31	; 49
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e1 e3       	ldi	r30, 0x31	; 49
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	90 81       	ld	r25, Z
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	89 2b       	or	r24, r25
    291a:	8c 93       	st	X, r24
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    291e:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	00 d0       	rcall	.+0      	; 0x2938 <DIO_vSetHighNibbleDir+0x6>
    2938:	00 d0       	rcall	.+0      	; 0x293a <DIO_vSetHighNibbleDir+0x8>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	84 30       	cpi	r24, 0x04	; 4
    294c:	08 f0       	brcs	.+2      	; 0x2950 <DIO_vSetHighNibbleDir+0x1e>
    294e:	63 c0       	rjmp	.+198    	; 0x2a16 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	82 95       	swap	r24
    2954:	80 7f       	andi	r24, 0xF0	; 240
    2956:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	3d 83       	std	Y+5, r19	; 0x05
    2960:	2c 83       	std	Y+4, r18	; 0x04
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	91 05       	cpc	r25, r1
    296a:	29 f1       	breq	.+74     	; 0x29b6 <DIO_vSetHighNibbleDir+0x84>
    296c:	2c 81       	ldd	r18, Y+4	; 0x04
    296e:	3d 81       	ldd	r19, Y+5	; 0x05
    2970:	22 30       	cpi	r18, 0x02	; 2
    2972:	31 05       	cpc	r19, r1
    2974:	2c f4       	brge	.+10     	; 0x2980 <DIO_vSetHighNibbleDir+0x4e>
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	9d 81       	ldd	r25, Y+5	; 0x05
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	61 f0       	breq	.+24     	; 0x2996 <DIO_vSetHighNibbleDir+0x64>
    297e:	4c c0       	rjmp	.+152    	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
    2980:	2c 81       	ldd	r18, Y+4	; 0x04
    2982:	3d 81       	ldd	r19, Y+5	; 0x05
    2984:	22 30       	cpi	r18, 0x02	; 2
    2986:	31 05       	cpc	r19, r1
    2988:	31 f1       	breq	.+76     	; 0x29d6 <DIO_vSetHighNibbleDir+0xa4>
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	9d 81       	ldd	r25, Y+5	; 0x05
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	91 05       	cpc	r25, r1
    2992:	89 f1       	breq	.+98     	; 0x29f6 <DIO_vSetHighNibbleDir+0xc4>
    2994:	41 c0       	rjmp	.+130    	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    2996:	aa e3       	ldi	r26, 0x3A	; 58
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	ea e3       	ldi	r30, 0x3A	; 58
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 70       	andi	r24, 0x0F	; 15
    29a2:	8c 93       	st	X, r24
      DDRA_REG |= value;
    29a4:	aa e3       	ldi	r26, 0x3A	; 58
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	ea e3       	ldi	r30, 0x3A	; 58
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	90 81       	ld	r25, Z
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	89 2b       	or	r24, r25
    29b2:	8c 93       	st	X, r24
    29b4:	31 c0       	rjmp	.+98     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    29b6:	a7 e3       	ldi	r26, 0x37	; 55
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e7 e3       	ldi	r30, 0x37	; 55
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 70       	andi	r24, 0x0F	; 15
    29c2:	8c 93       	st	X, r24
      DDRB_REG |= value;
    29c4:	a7 e3       	ldi	r26, 0x37	; 55
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e7 e3       	ldi	r30, 0x37	; 55
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	90 81       	ld	r25, Z
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	89 2b       	or	r24, r25
    29d2:	8c 93       	st	X, r24
    29d4:	21 c0       	rjmp	.+66     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    29d6:	a4 e3       	ldi	r26, 0x34	; 52
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e4 e3       	ldi	r30, 0x34	; 52
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8f 70       	andi	r24, 0x0F	; 15
    29e2:	8c 93       	st	X, r24
      DDRC_REG |= value;
    29e4:	a4 e3       	ldi	r26, 0x34	; 52
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e4 e3       	ldi	r30, 0x34	; 52
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	90 81       	ld	r25, Z
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	89 2b       	or	r24, r25
    29f2:	8c 93       	st	X, r24
    29f4:	11 c0       	rjmp	.+34     	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    29f6:	a1 e3       	ldi	r26, 0x31	; 49
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e3       	ldi	r30, 0x31	; 49
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 70       	andi	r24, 0x0F	; 15
    2a02:	8c 93       	st	X, r24
      DDRD_REG |= value;
    2a04:	a1 e3       	ldi	r26, 0x31	; 49
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e1 e3       	ldi	r30, 0x31	; 49
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	90 81       	ld	r25, Z
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	89 2b       	or	r24, r25
    2a12:	8c 93       	st	X, r24
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2a16:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    2a32:	a7 e2       	ldi	r26, 0x27	; 39
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e7 e2       	ldi	r30, 0x27	; 39
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 64       	ori	r24, 0x40	; 64
    2a3e:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    2a40:	a7 e2       	ldi	r26, 0x27	; 39
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e7 e2       	ldi	r30, 0x27	; 39
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 77       	andi	r24, 0x7F	; 127
    2a4c:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    2a4e:	a7 e2       	ldi	r26, 0x27	; 39
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e7 e2       	ldi	r30, 0x27	; 39
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    2a5c:	a6 e2       	ldi	r26, 0x26	; 38
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e6 e2       	ldi	r30, 0x26	; 38
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	88 7f       	andi	r24, 0xF8	; 248
    2a68:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    2a6a:	a6 e2       	ldi	r26, 0x26	; 38
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e6 e2       	ldi	r30, 0x26	; 38
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	87 60       	ori	r24, 0x07	; 7
    2a76:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2a78:	a6 e2       	ldi	r26, 0x26	; 38
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e6 e2       	ldi	r30, 0x26	; 38
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 7d       	andi	r24, 0xDF	; 223
    2a84:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    2a86:	a6 e2       	ldi	r26, 0x26	; 38
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e6 e2       	ldi	r30, 0x26	; 38
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 68       	ori	r24, 0x80	; 128
    2a92:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2a94:	a6 e2       	ldi	r26, 0x26	; 38
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e6 e2       	ldi	r30, 0x26	; 38
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	87 7f       	andi	r24, 0xF7	; 247
    2aa0:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    2ab0:	a6 e2       	ldi	r26, 0x26	; 38
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e6 e2       	ldi	r30, 0x26	; 38
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 68       	ori	r24, 0x80	; 128
    2abc:	8c 93       	st	X, r24
}
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    2acc:	a6 e2       	ldi	r26, 0x26	; 38
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e6 e2       	ldi	r30, 0x26	; 38
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8f 77       	andi	r24, 0x7F	; 127
    2ad8:	8c 93       	st	X, r24
}
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    2ae8:	a6 e2       	ldi	r26, 0x26	; 38
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e6 e2       	ldi	r30, 0x26	; 38
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	88 60       	ori	r24, 0x08	; 8
    2af4:	8c 93       	st	X, r24
}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2b04:	a6 e2       	ldi	r26, 0x26	; 38
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e6 e2       	ldi	r30, 0x26	; 38
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	87 7f       	andi	r24, 0xF7	; 247
    2b10:	8c 93       	st	X, r24
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <ADC_u8VoltageReference+0x6>
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	88 23       	and	r24, r24
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <ADC_u8VoltageReference+0x22>
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <ADC_u8VoltageReference+0x22>
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	e1 f4       	brne	.+56     	; 0x2b72 <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    2b3a:	a7 e2       	ldi	r26, 0x27	; 39
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e7 e2       	ldi	r30, 0x27	; 39
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	8f 73       	andi	r24, 0x3F	; 63
    2b46:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    2b48:	a7 e2       	ldi	r26, 0x27	; 39
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e7 e2       	ldi	r30, 0x27	; 39
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	28 2f       	mov	r18, r24
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	00 24       	eor	r0, r0
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	07 94       	ror	r0
    2b62:	96 95       	lsr	r25
    2b64:	87 95       	ror	r24
    2b66:	07 94       	ror	r0
    2b68:	98 2f       	mov	r25, r24
    2b6a:	80 2d       	mov	r24, r0
    2b6c:	82 2b       	or	r24, r18
    2b6e:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2b70:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <ADC_u8SetPrescaler+0x6>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	80 f4       	brcc	.+32     	; 0x2bb4 <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    2b94:	a6 e2       	ldi	r26, 0x26	; 38
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e6 e2       	ldi	r30, 0x26	; 38
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	88 7f       	andi	r24, 0xF8	; 248
    2ba0:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    2ba2:	a6 e2       	ldi	r26, 0x26	; 38
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e6 e2       	ldi	r30, 0x26	; 38
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	90 81       	ld	r25, Z
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	89 2b       	or	r24, r25
    2bb0:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2bb2:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <ADC_u8SetAdjustment+0x6>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    2bcc:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	88 23       	and	r24, r24
    2bd2:	41 f4       	brne	.+16     	; 0x2be4 <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    2bd4:	a7 e2       	ldi	r26, 0x27	; 39
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e7 e2       	ldi	r30, 0x27	; 39
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8f 7d       	andi	r24, 0xDF	; 223
    2be0:	8c 93       	st	X, r24
    2be2:	0d c0       	rjmp	.+26     	; 0x2bfe <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	41 f4       	brne	.+16     	; 0x2bfa <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    2bea:	a7 e2       	ldi	r26, 0x27	; 39
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e7 e2       	ldi	r30, 0x27	; 39
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	80 62       	ori	r24, 0x20	; 32
    2bf6:	8c 93       	st	X, r24
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <ADC_u8SetTriggerSource+0x6>
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2c16:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	41 f4       	brne	.+16     	; 0x2c2e <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2c1e:	a6 e2       	ldi	r26, 0x26	; 38
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e6 e2       	ldi	r30, 0x26	; 38
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 7d       	andi	r24, 0xDF	; 223
    2c2a:	8c 93       	st	X, r24
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	88 30       	cpi	r24, 0x08	; 8
    2c32:	a8 f4       	brcc	.+42     	; 0x2c5e <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    2c34:	a6 e2       	ldi	r26, 0x26	; 38
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e6 e2       	ldi	r30, 0x26	; 38
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 62       	ori	r24, 0x20	; 32
    2c40:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    2c42:	a0 e5       	ldi	r26, 0x50	; 80
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e0 e5       	ldi	r30, 0x50	; 80
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8f 71       	andi	r24, 0x1F	; 31
    2c4e:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    2c50:	a0 e5       	ldi	r26, 0x50	; 80
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e0 e5       	ldi	r30, 0x50	; 80
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8c 93       	st	X, r24
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	28 97       	sbiw	r28, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	8e 83       	std	Y+6, r24	; 0x06
    2c84:	78 87       	std	Y+8, r23	; 0x08
    2c86:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    2c88:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	1a 82       	std	Y+2, r1	; 0x02
    2c8e:	1b 82       	std	Y+3, r1	; 0x03
    2c90:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    2c92:	8f 81       	ldd	r24, Y+7	; 0x07
    2c94:	98 85       	ldd	r25, Y+8	; 0x08
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <ADC_u8GetResultSync+0x2e>
    2c9a:	78 c0       	rjmp	.+240    	; 0x2d8c <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    2c9c:	80 91 4a 03 	lds	r24, 0x034A
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <ADC_u8GetResultSync+0x38>
    2ca4:	70 c0       	rjmp	.+224    	; 0x2d86 <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 4a 03 	sts	0x034A, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2cac:	8e 81       	ldd	r24, Y+6	; 0x06
    2cae:	80 32       	cpi	r24, 0x20	; 32
    2cb0:	78 f4       	brcc	.+30     	; 0x2cd0 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    2cb2:	a7 e2       	ldi	r26, 0x27	; 39
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e7 e2       	ldi	r30, 0x27	; 39
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 7e       	andi	r24, 0xE0	; 224
    2cbe:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2cc0:	a7 e2       	ldi	r26, 0x27	; 39
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e7 e2       	ldi	r30, 0x27	; 39
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	90 81       	ld	r25, Z
    2cca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ccc:	89 2b       	or	r24, r25
    2cce:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2cd0:	a6 e2       	ldi	r26, 0x26	; 38
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e6 e2       	ldi	r30, 0x26	; 38
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 64       	ori	r24, 0x40	; 64
    2cdc:	8c 93       	st	X, r24
    2cde:	0b c0       	rjmp	.+22     	; 0x2cf6 <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ce8:	01 96       	adiw	r24, 0x01	; 1
    2cea:	a1 1d       	adc	r26, r1
    2cec:	b1 1d       	adc	r27, r1
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	ab 83       	std	Y+3, r26	; 0x03
    2cf4:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    2cf6:	e6 e2       	ldi	r30, 0x26	; 38
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	80 71       	andi	r24, 0x10	; 16
    2d02:	90 70       	andi	r25, 0x00	; 0
    2d04:	95 95       	asr	r25
    2d06:	87 95       	ror	r24
    2d08:	95 95       	asr	r25
    2d0a:	87 95       	ror	r24
    2d0c:	95 95       	asr	r25
    2d0e:	87 95       	ror	r24
    2d10:	95 95       	asr	r25
    2d12:	87 95       	ror	r24
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	61 f4       	brne	.+24     	; 0x2d30 <ADC_u8GetResultSync+0xc2>
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d20:	80 35       	cpi	r24, 0x50	; 80
    2d22:	23 ec       	ldi	r18, 0xC3	; 195
    2d24:	92 07       	cpc	r25, r18
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	a2 07       	cpc	r26, r18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	b2 07       	cpc	r27, r18
    2d2e:	c0 f2       	brcs	.-80     	; 0x2ce0 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	ab 81       	ldd	r26, Y+3	; 0x03
    2d36:	bc 81       	ldd	r27, Y+4	; 0x04
    2d38:	80 35       	cpi	r24, 0x50	; 80
    2d3a:	23 ec       	ldi	r18, 0xC3	; 195
    2d3c:	92 07       	cpc	r25, r18
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	a2 07       	cpc	r26, r18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	b2 07       	cpc	r27, r18
    2d46:	19 f4       	brne	.+6      	; 0x2d4e <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	19 c0       	rjmp	.+50     	; 0x2d80 <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    2d4e:	a6 e2       	ldi	r26, 0x26	; 38
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e6 e2       	ldi	r30, 0x26	; 38
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 61       	ori	r24, 0x10	; 16
    2d5a:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    2d5c:	e4 e2       	ldi	r30, 0x24	; 36
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	e5 e2       	ldi	r30, 0x25	; 37
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	98 2f       	mov	r25, r24
    2d72:	88 27       	eor	r24, r24
    2d74:	82 2b       	or	r24, r18
    2d76:	93 2b       	or	r25, r19
    2d78:	ef 81       	ldd	r30, Y+7	; 0x07
    2d7a:	f8 85       	ldd	r31, Y+8	; 0x08
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    2d80:	10 92 4a 03 	sts	0x034A, r1
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d92:	28 96       	adiw	r28, 0x08	; 8
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <ADC_u8StartConversionAsynch+0x6>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <ADC_u8StartConversionAsynch+0x8>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <ADC_u8StartConversionAsynch+0xa>
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	8a 83       	std	Y+2, r24	; 0x02
    2db4:	7c 83       	std	Y+4, r23	; 0x04
    2db6:	6b 83       	std	Y+3, r22	; 0x03
    2db8:	5e 83       	std	Y+6, r21	; 0x06
    2dba:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    2dbc:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	e9 f1       	breq	.+122    	; 0x2e40 <ADC_u8StartConversionAsynch+0x9c>
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	c9 f1       	breq	.+114    	; 0x2e40 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    2dce:	80 91 4a 03 	lds	r24, 0x034A
    2dd2:	88 23       	and	r24, r24
    2dd4:	91 f5       	brne	.+100    	; 0x2e3a <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	80 93 4a 03 	sts	0x034A, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    2ddc:	10 92 4b 03 	sts	0x034B, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	90 93 47 03 	sts	0x0347, r25
    2de8:	80 93 46 03 	sts	0x0346, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	90 93 49 03 	sts	0x0349, r25
    2df4:	80 93 48 03 	sts	0x0348, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	80 32       	cpi	r24, 0x20	; 32
    2dfc:	78 f4       	brcc	.+30     	; 0x2e1c <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    2dfe:	a7 e2       	ldi	r26, 0x27	; 39
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e7 e2       	ldi	r30, 0x27	; 39
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	80 7e       	andi	r24, 0xE0	; 224
    2e0a:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2e0c:	a7 e2       	ldi	r26, 0x27	; 39
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e7 e2       	ldi	r30, 0x27	; 39
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	90 81       	ld	r25, Z
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	89 2b       	or	r24, r25
    2e1a:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2e1c:	a6 e2       	ldi	r26, 0x26	; 38
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e6 e2       	ldi	r30, 0x26	; 38
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	80 64       	ori	r24, 0x40	; 64
    2e28:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2e2a:	a6 e2       	ldi	r26, 0x26	; 38
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e6 e2       	ldi	r30, 0x26	; 38
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	88 60       	ori	r24, 0x08	; 8
    2e36:	8c 93       	st	X, r24
    2e38:	05 c0       	rjmp	.+10     	; 0x2e44 <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e46:	26 96       	adiw	r28, 0x06	; 6
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <ADC_u8StartChainAsynch+0x6>
    2e5e:	0f 92       	push	r0
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	9b 83       	std	Y+3, r25	; 0x03
    2e66:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2e68:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <ADC_u8StartChainAsynch+0x1c>
    2e72:	79 c0       	rjmp	.+242    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e74:	ea 81       	ldd	r30, Y+2	; 0x02
    2e76:	fb 81       	ldd	r31, Y+3	; 0x03
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <ADC_u8StartChainAsynch+0x2a>
    2e80:	72 c0       	rjmp	.+228    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e82:	ea 81       	ldd	r30, Y+2	; 0x02
    2e84:	fb 81       	ldd	r31, Y+3	; 0x03
    2e86:	85 81       	ldd	r24, Z+5	; 0x05
    2e88:	96 81       	ldd	r25, Z+6	; 0x06
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <ADC_u8StartChainAsynch+0x38>
    2e8e:	6b c0       	rjmp	.+214    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
    2e90:	ea 81       	ldd	r30, Y+2	; 0x02
    2e92:	fb 81       	ldd	r31, Y+3	; 0x03
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <ADC_u8StartChainAsynch+0x46>
    2e9c:	64 c0       	rjmp	.+200    	; 0x2f66 <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    2e9e:	80 91 4a 03 	lds	r24, 0x034A
    2ea2:	88 23       	and	r24, r24
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <ADC_u8StartChainAsynch+0x50>
    2ea6:	5c c0       	rjmp	.+184    	; 0x2f60 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 4a 03 	sts	0x034A, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 4b 03 	sts	0x034B, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    2eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	90 93 47 03 	sts	0x0347, r25
    2ec0:	80 93 46 03 	sts	0x0346, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    2ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	90 93 4d 03 	sts	0x034D, r25
    2ed0:	80 93 4c 03 	sts	0x034C, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    2ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed8:	84 81       	ldd	r24, Z+4	; 0x04
    2eda:	80 93 4e 03 	sts	0x034E, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    2ede:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee2:	85 81       	ldd	r24, Z+5	; 0x05
    2ee4:	96 81       	ldd	r25, Z+6	; 0x06
    2ee6:	90 93 49 03 	sts	0x0349, r25
    2eea:	80 93 48 03 	sts	0x0348, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    2eee:	10 92 4f 03 	sts	0x034F, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    2ef2:	20 91 4c 03 	lds	r18, 0x034C
    2ef6:	30 91 4d 03 	lds	r19, 0x034D
    2efa:	80 91 4f 03 	lds	r24, 0x034F
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	f9 01       	movw	r30, r18
    2f04:	e8 0f       	add	r30, r24
    2f06:	f9 1f       	adc	r31, r25
    2f08:	80 81       	ld	r24, Z
    2f0a:	80 32       	cpi	r24, 0x20	; 32
    2f0c:	d0 f4       	brcc	.+52     	; 0x2f42 <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    2f0e:	a7 e2       	ldi	r26, 0x27	; 39
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e7 e2       	ldi	r30, 0x27	; 39
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	80 7e       	andi	r24, 0xE0	; 224
    2f1a:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    2f1c:	a7 e2       	ldi	r26, 0x27	; 39
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e7 e2       	ldi	r30, 0x27	; 39
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	40 81       	ld	r20, Z
    2f26:	20 91 4c 03 	lds	r18, 0x034C
    2f2a:	30 91 4d 03 	lds	r19, 0x034D
    2f2e:	80 91 4f 03 	lds	r24, 0x034F
    2f32:	88 2f       	mov	r24, r24
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	f9 01       	movw	r30, r18
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	80 81       	ld	r24, Z
    2f3e:	84 2b       	or	r24, r20
    2f40:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2f42:	a6 e2       	ldi	r26, 0x26	; 38
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e6 e2       	ldi	r30, 0x26	; 38
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	80 64       	ori	r24, 0x40	; 64
    2f4e:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2f50:	a6 e2       	ldi	r26, 0x26	; 38
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e6 e2       	ldi	r30, 0x26	; 38
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 60       	ori	r24, 0x08	; 8
    2f5c:	8c 93       	st	X, r24
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2f60:	83 e0       	ldi	r24, 0x03	; 3
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	2f 93       	push	r18
    2f84:	3f 93       	push	r19
    2f86:	4f 93       	push	r20
    2f88:	5f 93       	push	r21
    2f8a:	6f 93       	push	r22
    2f8c:	7f 93       	push	r23
    2f8e:	8f 93       	push	r24
    2f90:	9f 93       	push	r25
    2f92:	af 93       	push	r26
    2f94:	bf 93       	push	r27
    2f96:	ef 93       	push	r30
    2f98:	ff 93       	push	r31
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    2fa2:	80 91 4b 03 	lds	r24, 0x034B
    2fa6:	88 23       	and	r24, r24
    2fa8:	19 f5       	brne	.+70     	; 0x2ff0 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    2faa:	a0 91 46 03 	lds	r26, 0x0346
    2fae:	b0 91 47 03 	lds	r27, 0x0347
    2fb2:	e4 e2       	ldi	r30, 0x24	; 36
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	e5 e2       	ldi	r30, 0x25	; 37
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	88 27       	eor	r24, r24
    2fca:	82 2b       	or	r24, r18
    2fcc:	93 2b       	or	r25, r19
    2fce:	8d 93       	st	X+, r24
    2fd0:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    2fd2:	10 92 4a 03 	sts	0x034A, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    2fd6:	e0 91 48 03 	lds	r30, 0x0348
    2fda:	f0 91 49 03 	lds	r31, 0x0349
    2fde:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2fe0:	a6 e2       	ldi	r26, 0x26	; 38
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	e6 e2       	ldi	r30, 0x26	; 38
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	87 7f       	andi	r24, 0xF7	; 247
    2fec:	8c 93       	st	X, r24
    2fee:	6c c0       	rjmp	.+216    	; 0x30c8 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    2ff0:	80 91 4b 03 	lds	r24, 0x034B
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <__vector_16+0x82>
    2ff8:	67 c0       	rjmp	.+206    	; 0x30c8 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    2ffa:	20 91 46 03 	lds	r18, 0x0346
    2ffe:	30 91 47 03 	lds	r19, 0x0347
    3002:	80 91 4f 03 	lds	r24, 0x034F
    3006:	88 2f       	mov	r24, r24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	d9 01       	movw	r26, r18
    3010:	a8 0f       	add	r26, r24
    3012:	b9 1f       	adc	r27, r25
    3014:	e4 e2       	ldi	r30, 0x24	; 36
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	e5 e2       	ldi	r30, 0x25	; 37
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	98 2f       	mov	r25, r24
    302a:	88 27       	eor	r24, r24
    302c:	82 2b       	or	r24, r18
    302e:	93 2b       	or	r25, r19
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	9c 93       	st	X, r25
    3034:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    3036:	80 91 4f 03 	lds	r24, 0x034F
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	80 93 4f 03 	sts	0x034F, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    3040:	90 91 4f 03 	lds	r25, 0x034F
    3044:	80 91 4e 03 	lds	r24, 0x034E
    3048:	98 17       	cp	r25, r24
    304a:	79 f4       	brne	.+30     	; 0x306a <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    304c:	10 92 4a 03 	sts	0x034A, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    3050:	e0 91 48 03 	lds	r30, 0x0348
    3054:	f0 91 49 03 	lds	r31, 0x0349
    3058:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    305a:	a6 e2       	ldi	r26, 0x26	; 38
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e6 e2       	ldi	r30, 0x26	; 38
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	87 7f       	andi	r24, 0xF7	; 247
    3066:	8c 93       	st	X, r24
    3068:	2f c0       	rjmp	.+94     	; 0x30c8 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    306a:	20 91 4c 03 	lds	r18, 0x034C
    306e:	30 91 4d 03 	lds	r19, 0x034D
    3072:	80 91 4f 03 	lds	r24, 0x034F
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	f9 01       	movw	r30, r18
    307c:	e8 0f       	add	r30, r24
    307e:	f9 1f       	adc	r31, r25
    3080:	80 81       	ld	r24, Z
    3082:	80 32       	cpi	r24, 0x20	; 32
    3084:	d0 f4       	brcc	.+52     	; 0x30ba <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    3086:	a7 e2       	ldi	r26, 0x27	; 39
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e7 e2       	ldi	r30, 0x27	; 39
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 7e       	andi	r24, 0xE0	; 224
    3092:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3094:	a7 e2       	ldi	r26, 0x27	; 39
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e7 e2       	ldi	r30, 0x27	; 39
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	40 81       	ld	r20, Z
    309e:	20 91 4c 03 	lds	r18, 0x034C
    30a2:	30 91 4d 03 	lds	r19, 0x034D
    30a6:	80 91 4f 03 	lds	r24, 0x034F
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	f9 01       	movw	r30, r18
    30b0:	e8 0f       	add	r30, r24
    30b2:	f9 1f       	adc	r31, r25
    30b4:	80 81       	ld	r24, Z
    30b6:	84 2b       	or	r24, r20
    30b8:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    30ba:	a6 e2       	ldi	r26, 0x26	; 38
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e6 e2       	ldi	r30, 0x26	; 38
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 64       	ori	r24, 0x40	; 64
    30c6:	8c 93       	st	X, r24
    }
  }
}
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	ff 91       	pop	r31
    30ce:	ef 91       	pop	r30
    30d0:	bf 91       	pop	r27
    30d2:	af 91       	pop	r26
    30d4:	9f 91       	pop	r25
    30d6:	8f 91       	pop	r24
    30d8:	7f 91       	pop	r23
    30da:	6f 91       	pop	r22
    30dc:	5f 91       	pop	r21
    30de:	4f 91       	pop	r20
    30e0:	3f 91       	pop	r19
    30e2:	2f 91       	pop	r18
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	2b 97       	sbiw	r28, 0x0b	; 11
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	99 87       	std	Y+9, r25	; 0x09
    310c:	88 87       	std	Y+8, r24	; 0x08
    310e:	7b 87       	std	Y+11, r23	; 0x0b
    3110:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    3112:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3114:	e8 85       	ldd	r30, Y+8	; 0x08
    3116:	f9 85       	ldd	r31, Y+9	; 0x09
    3118:	81 81       	ldd	r24, Z+1	; 0x01
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	88 ee       	ldi	r24, 0xE8	; 232
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	ac 01       	movw	r20, r24
    3124:	24 9f       	mul	r18, r20
    3126:	c0 01       	movw	r24, r0
    3128:	25 9f       	mul	r18, r21
    312a:	90 0d       	add	r25, r0
    312c:	34 9f       	mul	r19, r20
    312e:	90 0d       	add	r25, r0
    3130:	11 24       	eor	r1, r1
    3132:	9a 83       	std	Y+2, r25	; 0x02
    3134:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    3136:	e8 85       	ldd	r30, Y+8	; 0x08
    3138:	f9 85       	ldd	r31, Y+9	; 0x09
    313a:	80 81       	ld	r24, Z
    313c:	9e 01       	movw	r18, r28
    313e:	2a 5f       	subi	r18, 0xFA	; 250
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	b9 01       	movw	r22, r18
    3144:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    3148:	e8 85       	ldd	r30, Y+8	; 0x08
    314a:	f9 85       	ldd	r31, Y+9	; 0x09
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	88 23       	and	r24, r24
    3150:	e1 f4       	brne	.+56     	; 0x318a <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3152:	8e 81       	ldd	r24, Y+6	; 0x06
    3154:	9f 81       	ldd	r25, Y+7	; 0x07
    3156:	7c 01       	movw	r14, r24
    3158:	00 e0       	ldi	r16, 0x00	; 0
    315a:	10 e0       	ldi	r17, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	9c 01       	movw	r18, r24
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	c8 01       	movw	r24, r16
    3168:	b7 01       	movw	r22, r14
    316a:	0e 94 25 39 	call	0x724a	; 0x724a <__mulsi3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	07 2e       	mov	r0, r23
    3174:	7a e0       	ldi	r23, 0x0A	; 10
    3176:	b6 95       	lsr	r27
    3178:	a7 95       	ror	r26
    317a:	97 95       	ror	r25
    317c:	87 95       	ror	r24
    317e:	7a 95       	dec	r23
    3180:	d1 f7       	brne	.-12     	; 0x3176 <LM35_u8GetTemp+0x88>
    3182:	70 2d       	mov	r23, r0
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	1b c0       	rjmp	.+54     	; 0x31c0 <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    318a:	e8 85       	ldd	r30, Y+8	; 0x08
    318c:	f9 85       	ldd	r31, Y+9	; 0x09
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	b1 f4       	brne	.+44     	; 0x31c0 <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    3194:	8e 81       	ldd	r24, Y+6	; 0x06
    3196:	9f 81       	ldd	r25, Y+7	; 0x07
    3198:	7c 01       	movw	r14, r24
    319a:	00 e0       	ldi	r16, 0x00	; 0
    319c:	10 e0       	ldi	r17, 0x00	; 0
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	9c 01       	movw	r18, r24
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	c8 01       	movw	r24, r16
    31aa:	b7 01       	movw	r22, r14
    31ac:	0e 94 25 39 	call	0x724a	; 0x724a <__mulsi3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	89 2f       	mov	r24, r25
    31b6:	9a 2f       	mov	r25, r26
    31b8:	ab 2f       	mov	r26, r27
    31ba:	bb 27       	eor	r27, r27
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	2a e0       	ldi	r18, 0x0A	; 10
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	b9 01       	movw	r22, r18
    31ca:	0e 94 50 39 	call	0x72a0	; 0x72a0 <__udivmodhi4>
    31ce:	cb 01       	movw	r24, r22
    31d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    31d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    31d4:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31d8:	2b 96       	adiw	r28, 0x0b	; 11
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	08 95       	ret

000031f2 <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	29 97       	sbiw	r28, 0x09	; 9
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	9f 83       	std	Y+7, r25	; 0x07
    3210:	8e 83       	std	Y+6, r24	; 0x06
    3212:	79 87       	std	Y+9, r23	; 0x09
    3214:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    3216:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3218:	ee 81       	ldd	r30, Y+6	; 0x06
    321a:	ff 81       	ldd	r31, Y+7	; 0x07
    321c:	81 81       	ldd	r24, Z+1	; 0x01
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	88 ee       	ldi	r24, 0xE8	; 232
    3224:	93 e0       	ldi	r25, 0x03	; 3
    3226:	ac 01       	movw	r20, r24
    3228:	24 9f       	mul	r18, r20
    322a:	c0 01       	movw	r24, r0
    322c:	25 9f       	mul	r18, r21
    322e:	90 0d       	add	r25, r0
    3230:	34 9f       	mul	r19, r20
    3232:	90 0d       	add	r25, r0
    3234:	11 24       	eor	r1, r1
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    323a:	ee 81       	ldd	r30, Y+6	; 0x06
    323c:	ff 81       	ldd	r31, Y+7	; 0x07
    323e:	80 81       	ld	r24, Z
    3240:	9e 01       	movw	r18, r28
    3242:	2c 5f       	subi	r18, 0xFC	; 252
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	b9 01       	movw	r22, r18
    3248:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    324c:	ee 81       	ldd	r30, Y+6	; 0x06
    324e:	ff 81       	ldd	r31, Y+7	; 0x07
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	88 23       	and	r24, r24
    3254:	f1 f4       	brne	.+60     	; 0x3292 <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3256:	8c 81       	ldd	r24, Y+4	; 0x04
    3258:	9d 81       	ldd	r25, Y+5	; 0x05
    325a:	7c 01       	movw	r14, r24
    325c:	00 e0       	ldi	r16, 0x00	; 0
    325e:	10 e0       	ldi	r17, 0x00	; 0
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	9c 01       	movw	r18, r24
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	c8 01       	movw	r24, r16
    326c:	b7 01       	movw	r22, r14
    326e:	0e 94 25 39 	call	0x724a	; 0x724a <__mulsi3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	07 2e       	mov	r0, r23
    3278:	7a e0       	ldi	r23, 0x0A	; 10
    327a:	b6 95       	lsr	r27
    327c:	a7 95       	ror	r26
    327e:	97 95       	ror	r25
    3280:	87 95       	ror	r24
    3282:	7a 95       	dec	r23
    3284:	d1 f7       	brne	.-12     	; 0x327a <LM35_u8GetAnalogSignal+0x88>
    3286:	70 2d       	mov	r23, r0
    3288:	e8 85       	ldd	r30, Y+8	; 0x08
    328a:	f9 85       	ldd	r31, Y+9	; 0x09
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	1d c0       	rjmp	.+58     	; 0x32cc <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    3292:	ee 81       	ldd	r30, Y+6	; 0x06
    3294:	ff 81       	ldd	r31, Y+7	; 0x07
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	c1 f4       	brne	.+48     	; 0x32cc <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	7c 01       	movw	r14, r24
    32a2:	00 e0       	ldi	r16, 0x00	; 0
    32a4:	10 e0       	ldi	r17, 0x00	; 0
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	9c 01       	movw	r18, r24
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	c8 01       	movw	r24, r16
    32b2:	b7 01       	movw	r22, r14
    32b4:	0e 94 25 39 	call	0x724a	; 0x724a <__mulsi3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	89 2f       	mov	r24, r25
    32be:	9a 2f       	mov	r25, r26
    32c0:	ab 2f       	mov	r26, r27
    32c2:	bb 27       	eor	r27, r27
    32c4:	e8 85       	ldd	r30, Y+8	; 0x08
    32c6:	f9 85       	ldd	r31, Y+9	; 0x09
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32ce:	29 96       	adiw	r28, 0x09	; 9
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	08 95       	ret

000032e8 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    3304:	83 e0       	ldi	r24, 0x03	; 3
    3306:	62 e0       	ldi	r22, 0x02	; 2
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    330e:	83 e0       	ldi	r24, 0x03	; 3
    3310:	63 e0       	ldi	r22, 0x03	; 3
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	0e 94 80 10 	call	0x2100	; 0x2100 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	6f e0       	ldi	r22, 0x0F	; 15
    331c:	0e 94 99 14 	call	0x2932	; 0x2932 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	6f e0       	ldi	r22, 0x0F	; 15
    3324:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	62 97       	sbiw	r28, 0x12	; 18
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    3342:	8f ef       	ldi	r24, 0xFF	; 255
    3344:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    3346:	84 e0       	ldi	r24, 0x04	; 4
    3348:	8f 87       	std	Y+15, r24	; 0x0f
    334a:	c9 c0       	rjmp	.+402    	; 0x34de <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    3356:	18 8a       	std	Y+16, r1	; 0x10
    3358:	b6 c0       	rjmp	.+364    	; 0x34c6 <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    335a:	9e 01       	movw	r18, r28
    335c:	2e 5e       	subi	r18, 0xEE	; 238
    335e:	3f 4f       	sbci	r19, 0xFF	; 255
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	68 89       	ldd	r22, Y+16	; 0x10
    3364:	a9 01       	movw	r20, r18
    3366:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    336a:	8a 89       	ldd	r24, Y+18	; 0x12
    336c:	88 23       	and	r24, r24
    336e:	09 f0       	breq	.+2      	; 0x3372 <KPD_u8GetPressed+0x44>
    3370:	a7 c0       	rjmp	.+334    	; 0x34c0 <KPD_u8GetPressed+0x192>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a8 e4       	ldi	r26, 0x48	; 72
    3378:	b2 e4       	ldi	r27, 0x42	; 66
    337a:	8b 87       	std	Y+11, r24	; 0x0b
    337c:	9c 87       	std	Y+12, r25	; 0x0c
    337e:	ad 87       	std	Y+13, r26	; 0x0d
    3380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	6b 85       	ldd	r22, Y+11	; 0x0b
    3384:	7c 85       	ldd	r23, Y+12	; 0x0c
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	9e 85       	ldd	r25, Y+14	; 0x0e
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8f 83       	std	Y+7, r24	; 0x07
    339c:	98 87       	std	Y+8, r25	; 0x08
    339e:	a9 87       	std	Y+9, r26	; 0x09
    33a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33de:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <KPD_u8GetPressed+0xf6>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <KPD_u8GetPressed+0xe4>
    3416:	9c 83       	std	Y+4, r25	; 0x04
    3418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <KPD_u8GetPressed+0xd8>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <KPD_u8GetPressed+0x120>
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    3456:	9e 01       	movw	r18, r28
    3458:	2e 5e       	subi	r18, 0xEE	; 238
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	68 89       	ldd	r22, Y+16	; 0x10
    3460:	a9 01       	movw	r20, r18
    3462:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    3466:	8a 89       	ldd	r24, Y+18	; 0x12
    3468:	88 23       	and	r24, r24
    346a:	a9 f4       	brne	.+42     	; 0x3496 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    346c:	88 89       	ldd	r24, Y+16	; 0x10
    346e:	48 2f       	mov	r20, r24
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	9c 01       	movw	r18, r24
    347a:	24 50       	subi	r18, 0x04	; 4
    347c:	30 40       	sbci	r19, 0x00	; 0
    347e:	ca 01       	movw	r24, r20
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	fc 01       	movw	r30, r24
    348e:	e1 54       	subi	r30, 0x41	; 65
    3490:	fd 4f       	sbci	r31, 0xFD	; 253
    3492:	80 81       	ld	r24, Z
    3494:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3496:	9e 01       	movw	r18, r28
    3498:	2e 5e       	subi	r18, 0xEE	; 238
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	68 89       	ldd	r22, Y+16	; 0x10
    34a0:	a9 01       	movw	r20, r18
    34a2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    34a8:	9e 01       	movw	r18, r28
    34aa:	2e 5e       	subi	r18, 0xEE	; 238
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	68 89       	ldd	r22, Y+16	; 0x10
    34b2:	a9 01       	movw	r20, r18
    34b4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    34b8:	8a 89       	ldd	r24, Y+18	; 0x12
    34ba:	88 23       	and	r24, r24
    34bc:	a9 f3       	breq	.-22     	; 0x34a8 <KPD_u8GetPressed+0x17a>
    34be:	07 c0       	rjmp	.+14     	; 0x34ce <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    34c0:	88 89       	ldd	r24, Y+16	; 0x10
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	88 8b       	std	Y+16, r24	; 0x10
    34c6:	88 89       	ldd	r24, Y+16	; 0x10
    34c8:	84 30       	cpi	r24, 0x04	; 4
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <KPD_u8GetPressed+0x1a0>
    34cc:	46 cf       	rjmp	.-372    	; 0x335a <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    34d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34da:	8f 5f       	subi	r24, 0xFF	; 255
    34dc:	8f 87       	std	Y+15, r24	; 0x0f
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	88 30       	cpi	r24, 0x08	; 8
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <KPD_u8GetPressed+0x1b8>
    34e4:	33 cf       	rjmp	.-410    	; 0x334c <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
}
    34e8:	62 96       	adiw	r28, 0x12	; 18
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	c6 54       	subi	r28, 0x46	; 70
    3508:	d0 40       	sbci	r29, 0x00	; 0
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	fe 01       	movw	r30, r28
    3516:	ed 5b       	subi	r30, 0xBD	; 189
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	a8 e4       	ldi	r26, 0x48	; 72
    3520:	b2 e4       	ldi	r27, 0x42	; 66
    3522:	80 83       	st	Z, r24
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	a2 83       	std	Z+2, r26	; 0x02
    3528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	8e 01       	movw	r16, r28
    352c:	01 5c       	subi	r16, 0xC1	; 193
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	fe 01       	movw	r30, r28
    3532:	ed 5b       	subi	r30, 0xBD	; 189
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	f8 01       	movw	r30, r16
    3550:	80 83       	st	Z, r24
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	a2 83       	std	Z+2, r26	; 0x02
    3556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3558:	fe 01       	movw	r30, r28
    355a:	ff 96       	adiw	r30, 0x3f	; 63
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <CLCD_vInit+0x84>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9e af       	std	Y+62, r25	; 0x3e
    357a:	8d af       	std	Y+61, r24	; 0x3d
    357c:	46 c0       	rjmp	.+140    	; 0x360a <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    357e:	fe 01       	movw	r30, r28
    3580:	ff 96       	adiw	r30, 0x3f	; 63
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	64 f5       	brge	.+88     	; 0x35f2 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	fe 01       	movw	r30, r28
    359c:	ed 5b       	subi	r30, 0xBD	; 189
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e2       	ldi	r20, 0x20	; 32
    35ae:	51 e4       	ldi	r21, 0x41	; 65
    35b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e af       	std	Y+62, r25	; 0x3e
    35c6:	8d af       	std	Y+61, r24	; 0x3d
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <CLCD_vInit+0xee>
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9c af       	std	Y+60, r25	; 0x3c
    35d0:	8b af       	std	Y+59, r24	; 0x3b
    35d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    35d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <CLCD_vInit+0xdc>
    35da:	9c af       	std	Y+60, r25	; 0x3c
    35dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	8d ad       	ldd	r24, Y+61	; 0x3d
    35e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	9e af       	std	Y+62, r25	; 0x3e
    35e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	69 f7       	brne	.-38     	; 0x35ca <CLCD_vInit+0xd0>
    35f0:	16 c0       	rjmp	.+44     	; 0x361e <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f2:	fe 01       	movw	r30, r28
    35f4:	ff 96       	adiw	r30, 0x3f	; 63
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	9e af       	std	Y+62, r25	; 0x3e
    3608:	8d af       	std	Y+61, r24	; 0x3d
    360a:	8d ad       	ldd	r24, Y+61	; 0x3d
    360c:	9e ad       	ldd	r25, Y+62	; 0x3e
    360e:	9a af       	std	Y+58, r25	; 0x3a
    3610:	89 af       	std	Y+57, r24	; 0x39
    3612:	89 ad       	ldd	r24, Y+57	; 0x39
    3614:	9a ad       	ldd	r25, Y+58	; 0x3a
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <CLCD_vInit+0x11c>
    361a:	9a af       	std	Y+58, r25	; 0x3a
    361c:	89 af       	std	Y+57, r24	; 0x39

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	64 e0       	ldi	r22, 0x04	; 4
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	65 e0       	ldi	r22, 0x05	; 5
    362c:	41 e0       	ldi	r20, 0x01	; 1
    362e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	66 e0       	ldi	r22, 0x06	; 6
    3636:	41 e0       	ldi	r20, 0x01	; 1
    3638:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	67 e0       	ldi	r22, 0x07	; 7
    3640:	41 e0       	ldi	r20, 0x01	; 1
    3642:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	67 e0       	ldi	r22, 0x07	; 7
    364a:	41 e0       	ldi	r20, 0x01	; 1
    364c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	66 e0       	ldi	r22, 0x06	; 6
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	65 e0       	ldi	r22, 0x05	; 5
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    3664:	82 e0       	ldi	r24, 0x02	; 2
    3666:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a0 e2       	ldi	r26, 0x20	; 32
    3670:	b1 e4       	ldi	r27, 0x41	; 65
    3672:	8d ab       	std	Y+53, r24	; 0x35
    3674:	9e ab       	std	Y+54, r25	; 0x36
    3676:	af ab       	std	Y+55, r26	; 0x37
    3678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367a:	6d a9       	ldd	r22, Y+53	; 0x35
    367c:	7e a9       	ldd	r23, Y+54	; 0x36
    367e:	8f a9       	ldd	r24, Y+55	; 0x37
    3680:	98 ad       	ldd	r25, Y+56	; 0x38
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a ef       	ldi	r20, 0xFA	; 250
    3688:	54 e4       	ldi	r21, 0x44	; 68
    368a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	89 ab       	std	Y+49, r24	; 0x31
    3694:	9a ab       	std	Y+50, r25	; 0x32
    3696:	ab ab       	std	Y+51, r26	; 0x33
    3698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    369a:	69 a9       	ldd	r22, Y+49	; 0x31
    369c:	7a a9       	ldd	r23, Y+50	; 0x32
    369e:	8b a9       	ldd	r24, Y+51	; 0x33
    36a0:	9c a9       	ldd	r25, Y+52	; 0x34
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    36ae:	88 23       	and	r24, r24
    36b0:	2c f4       	brge	.+10     	; 0x36bc <CLCD_vInit+0x1c2>
		__ticks = 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	98 ab       	std	Y+48, r25	; 0x30
    36b8:	8f a7       	std	Y+47, r24	; 0x2f
    36ba:	3f c0       	rjmp	.+126    	; 0x373a <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    36bc:	69 a9       	ldd	r22, Y+49	; 0x31
    36be:	7a a9       	ldd	r23, Y+50	; 0x32
    36c0:	8b a9       	ldd	r24, Y+51	; 0x33
    36c2:	9c a9       	ldd	r25, Y+52	; 0x34
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	4c f5       	brge	.+82     	; 0x3726 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	6d a9       	ldd	r22, Y+53	; 0x35
    36d6:	7e a9       	ldd	r23, Y+54	; 0x36
    36d8:	8f a9       	ldd	r24, Y+55	; 0x37
    36da:	98 ad       	ldd	r25, Y+56	; 0x38
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	bc 01       	movw	r22, r24
    36ee:	cd 01       	movw	r24, r26
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	98 ab       	std	Y+48, r25	; 0x30
    36fa:	8f a7       	std	Y+47, r24	; 0x2f
    36fc:	0f c0       	rjmp	.+30     	; 0x371c <CLCD_vInit+0x222>
    36fe:	88 ec       	ldi	r24, 0xC8	; 200
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9e a7       	std	Y+46, r25	; 0x2e
    3704:	8d a7       	std	Y+45, r24	; 0x2d
    3706:	8d a5       	ldd	r24, Y+45	; 0x2d
    3708:	9e a5       	ldd	r25, Y+46	; 0x2e
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <CLCD_vInit+0x210>
    370e:	9e a7       	std	Y+46, r25	; 0x2e
    3710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3712:	8f a5       	ldd	r24, Y+47	; 0x2f
    3714:	98 a9       	ldd	r25, Y+48	; 0x30
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	98 ab       	std	Y+48, r25	; 0x30
    371a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371c:	8f a5       	ldd	r24, Y+47	; 0x2f
    371e:	98 a9       	ldd	r25, Y+48	; 0x30
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	69 f7       	brne	.-38     	; 0x36fe <CLCD_vInit+0x204>
    3724:	14 c0       	rjmp	.+40     	; 0x374e <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	69 a9       	ldd	r22, Y+49	; 0x31
    3728:	7a a9       	ldd	r23, Y+50	; 0x32
    372a:	8b a9       	ldd	r24, Y+51	; 0x33
    372c:	9c a9       	ldd	r25, Y+52	; 0x34
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	8f a5       	ldd	r24, Y+47	; 0x2f
    373c:	98 a9       	ldd	r25, Y+48	; 0x30
    373e:	9c a7       	std	Y+44, r25	; 0x2c
    3740:	8b a7       	std	Y+43, r24	; 0x2b
    3742:	8b a5       	ldd	r24, Y+43	; 0x2b
    3744:	9c a5       	ldd	r25, Y+44	; 0x2c
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <CLCD_vInit+0x24c>
    374a:	9c a7       	std	Y+44, r25	; 0x2c
    374c:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    374e:	88 e2       	ldi	r24, 0x28	; 40
    3750:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a0 e8       	ldi	r26, 0x80	; 128
    375a:	bf e3       	ldi	r27, 0x3F	; 63
    375c:	8f a3       	std	Y+39, r24	; 0x27
    375e:	98 a7       	std	Y+40, r25	; 0x28
    3760:	a9 a7       	std	Y+41, r26	; 0x29
    3762:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3764:	6f a1       	ldd	r22, Y+39	; 0x27
    3766:	78 a5       	ldd	r23, Y+40	; 0x28
    3768:	89 a5       	ldd	r24, Y+41	; 0x29
    376a:	9a a5       	ldd	r25, Y+42	; 0x2a
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	4a ef       	ldi	r20, 0xFA	; 250
    3772:	54 e4       	ldi	r21, 0x44	; 68
    3774:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8b a3       	std	Y+35, r24	; 0x23
    377e:	9c a3       	std	Y+36, r25	; 0x24
    3780:	ad a3       	std	Y+37, r26	; 0x25
    3782:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3784:	6b a1       	ldd	r22, Y+35	; 0x23
    3786:	7c a1       	ldd	r23, Y+36	; 0x24
    3788:	8d a1       	ldd	r24, Y+37	; 0x25
    378a:	9e a1       	ldd	r25, Y+38	; 0x26
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e8       	ldi	r20, 0x80	; 128
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3798:	88 23       	and	r24, r24
    379a:	2c f4       	brge	.+10     	; 0x37a6 <CLCD_vInit+0x2ac>
		__ticks = 1;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9a a3       	std	Y+34, r25	; 0x22
    37a2:	89 a3       	std	Y+33, r24	; 0x21
    37a4:	3f c0       	rjmp	.+126    	; 0x3824 <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    37a6:	6b a1       	ldd	r22, Y+35	; 0x23
    37a8:	7c a1       	ldd	r23, Y+36	; 0x24
    37aa:	8d a1       	ldd	r24, Y+37	; 0x25
    37ac:	9e a1       	ldd	r25, Y+38	; 0x26
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	3f ef       	ldi	r19, 0xFF	; 255
    37b2:	4f e7       	ldi	r20, 0x7F	; 127
    37b4:	57 e4       	ldi	r21, 0x47	; 71
    37b6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    37ba:	18 16       	cp	r1, r24
    37bc:	4c f5       	brge	.+82     	; 0x3810 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37be:	6f a1       	ldd	r22, Y+39	; 0x27
    37c0:	78 a5       	ldd	r23, Y+40	; 0x28
    37c2:	89 a5       	ldd	r24, Y+41	; 0x29
    37c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9a a3       	std	Y+34, r25	; 0x22
    37e4:	89 a3       	std	Y+33, r24	; 0x21
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <CLCD_vInit+0x30c>
    37e8:	88 ec       	ldi	r24, 0xC8	; 200
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	98 a3       	std	Y+32, r25	; 0x20
    37ee:	8f 8f       	std	Y+31, r24	; 0x1f
    37f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37f2:	98 a1       	ldd	r25, Y+32	; 0x20
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	f1 f7       	brne	.-4      	; 0x37f4 <CLCD_vInit+0x2fa>
    37f8:	98 a3       	std	Y+32, r25	; 0x20
    37fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	89 a1       	ldd	r24, Y+33	; 0x21
    37fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	9a a3       	std	Y+34, r25	; 0x22
    3804:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3806:	89 a1       	ldd	r24, Y+33	; 0x21
    3808:	9a a1       	ldd	r25, Y+34	; 0x22
    380a:	00 97       	sbiw	r24, 0x00	; 0
    380c:	69 f7       	brne	.-38     	; 0x37e8 <CLCD_vInit+0x2ee>
    380e:	14 c0       	rjmp	.+40     	; 0x3838 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3810:	6b a1       	ldd	r22, Y+35	; 0x23
    3812:	7c a1       	ldd	r23, Y+36	; 0x24
    3814:	8d a1       	ldd	r24, Y+37	; 0x25
    3816:	9e a1       	ldd	r25, Y+38	; 0x26
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	9a a3       	std	Y+34, r25	; 0x22
    3822:	89 a3       	std	Y+33, r24	; 0x21
    3824:	89 a1       	ldd	r24, Y+33	; 0x21
    3826:	9a a1       	ldd	r25, Y+34	; 0x22
    3828:	9e 8f       	std	Y+30, r25	; 0x1e
    382a:	8d 8f       	std	Y+29, r24	; 0x1d
    382c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    382e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <CLCD_vInit+0x336>
    3834:	9e 8f       	std	Y+30, r25	; 0x1e
    3836:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    3838:	8c e0       	ldi	r24, 0x0C	; 12
    383a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	a0 e8       	ldi	r26, 0x80	; 128
    3844:	bf e3       	ldi	r27, 0x3F	; 63
    3846:	89 8f       	std	Y+25, r24	; 0x19
    3848:	9a 8f       	std	Y+26, r25	; 0x1a
    384a:	ab 8f       	std	Y+27, r26	; 0x1b
    384c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384e:	69 8d       	ldd	r22, Y+25	; 0x19
    3850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a ef       	ldi	r20, 0xFA	; 250
    385c:	54 e4       	ldi	r21, 0x44	; 68
    385e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8d 8b       	std	Y+21, r24	; 0x15
    3868:	9e 8b       	std	Y+22, r25	; 0x16
    386a:	af 8b       	std	Y+23, r26	; 0x17
    386c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    386e:	6d 89       	ldd	r22, Y+21	; 0x15
    3870:	7e 89       	ldd	r23, Y+22	; 0x16
    3872:	8f 89       	ldd	r24, Y+23	; 0x17
    3874:	98 8d       	ldd	r25, Y+24	; 0x18
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e8       	ldi	r20, 0x80	; 128
    387c:	5f e3       	ldi	r21, 0x3F	; 63
    387e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3882:	88 23       	and	r24, r24
    3884:	2c f4       	brge	.+10     	; 0x3890 <CLCD_vInit+0x396>
		__ticks = 1;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	9c 8b       	std	Y+20, r25	; 0x14
    388c:	8b 8b       	std	Y+19, r24	; 0x13
    388e:	3f c0       	rjmp	.+126    	; 0x390e <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    3890:	6d 89       	ldd	r22, Y+21	; 0x15
    3892:	7e 89       	ldd	r23, Y+22	; 0x16
    3894:	8f 89       	ldd	r24, Y+23	; 0x17
    3896:	98 8d       	ldd	r25, Y+24	; 0x18
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	4f e7       	ldi	r20, 0x7F	; 127
    389e:	57 e4       	ldi	r21, 0x47	; 71
    38a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    38a4:	18 16       	cp	r1, r24
    38a6:	4c f5       	brge	.+82     	; 0x38fa <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a8:	69 8d       	ldd	r22, Y+25	; 0x19
    38aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e2       	ldi	r20, 0x20	; 32
    38b6:	51 e4       	ldi	r21, 0x41	; 65
    38b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	9c 8b       	std	Y+20, r25	; 0x14
    38ce:	8b 8b       	std	Y+19, r24	; 0x13
    38d0:	0f c0       	rjmp	.+30     	; 0x38f0 <CLCD_vInit+0x3f6>
    38d2:	88 ec       	ldi	r24, 0xC8	; 200
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9a 8b       	std	Y+18, r25	; 0x12
    38d8:	89 8b       	std	Y+17, r24	; 0x11
    38da:	89 89       	ldd	r24, Y+17	; 0x11
    38dc:	9a 89       	ldd	r25, Y+18	; 0x12
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	f1 f7       	brne	.-4      	; 0x38de <CLCD_vInit+0x3e4>
    38e2:	9a 8b       	std	Y+18, r25	; 0x12
    38e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	9c 8b       	std	Y+20, r25	; 0x14
    38ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f0:	8b 89       	ldd	r24, Y+19	; 0x13
    38f2:	9c 89       	ldd	r25, Y+20	; 0x14
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	69 f7       	brne	.-38     	; 0x38d2 <CLCD_vInit+0x3d8>
    38f8:	14 c0       	rjmp	.+40     	; 0x3922 <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	9c 8b       	std	Y+20, r25	; 0x14
    390c:	8b 8b       	std	Y+19, r24	; 0x13
    390e:	8b 89       	ldd	r24, Y+19	; 0x13
    3910:	9c 89       	ldd	r25, Y+20	; 0x14
    3912:	98 8b       	std	Y+16, r25	; 0x10
    3914:	8f 87       	std	Y+15, r24	; 0x0f
    3916:	8f 85       	ldd	r24, Y+15	; 0x0f
    3918:	98 89       	ldd	r25, Y+16	; 0x10
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <CLCD_vInit+0x420>
    391e:	98 8b       	std	Y+16, r25	; 0x10
    3920:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    3922:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    3926:	86 e0       	ldi	r24, 0x06	; 6
    3928:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e8       	ldi	r26, 0x80	; 128
    3932:	bf e3       	ldi	r27, 0x3F	; 63
    3934:	8b 87       	std	Y+11, r24	; 0x0b
    3936:	9c 87       	std	Y+12, r25	; 0x0c
    3938:	ad 87       	std	Y+13, r26	; 0x0d
    393a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6b 85       	ldd	r22, Y+11	; 0x0b
    393e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3940:	8d 85       	ldd	r24, Y+13	; 0x0d
    3942:	9e 85       	ldd	r25, Y+14	; 0x0e
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8f 83       	std	Y+7, r24	; 0x07
    3956:	98 87       	std	Y+8, r25	; 0x08
    3958:	a9 87       	std	Y+9, r26	; 0x09
    395a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395c:	6f 81       	ldd	r22, Y+7	; 0x07
    395e:	78 85       	ldd	r23, Y+8	; 0x08
    3960:	89 85       	ldd	r24, Y+9	; 0x09
    3962:	9a 85       	ldd	r25, Y+10	; 0x0a
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <CLCD_vInit+0x484>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    397e:	6f 81       	ldd	r22, Y+7	; 0x07
    3980:	78 85       	ldd	r23, Y+8	; 0x08
    3982:	89 85       	ldd	r24, Y+9	; 0x09
    3984:	9a 85       	ldd	r25, Y+10	; 0x0a
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6b 85       	ldd	r22, Y+11	; 0x0b
    3998:	7c 85       	ldd	r23, Y+12	; 0x0c
    399a:	8d 85       	ldd	r24, Y+13	; 0x0d
    399c:	9e 85       	ldd	r25, Y+14	; 0x0e
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9e 83       	std	Y+6, r25	; 0x06
    39bc:	8d 83       	std	Y+5, r24	; 0x05
    39be:	0f c0       	rjmp	.+30     	; 0x39de <CLCD_vInit+0x4e4>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	8b 83       	std	Y+3, r24	; 0x03
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	9c 81       	ldd	r25, Y+4	; 0x04
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <CLCD_vInit+0x4d2>
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	9e 83       	std	Y+6, r25	; 0x06
    39dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8d 81       	ldd	r24, Y+5	; 0x05
    39e0:	9e 81       	ldd	r25, Y+6	; 0x06
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <CLCD_vInit+0x4c6>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <CLCD_vInit+0x50e>
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3a10:	ca 5b       	subi	r28, 0xBA	; 186
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	08 95       	ret

00003a28 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	0f 92       	push	r0
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	67 e0       	ldi	r22, 0x07	; 7
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	66 e0       	ldi	r22, 0x06	; 6
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  
#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to high nibbles
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	98 2f       	mov	r25, r24
    3a4c:	92 95       	swap	r25
    3a4e:	9f 70       	andi	r25, 0x0F	; 15
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	69 2f       	mov	r22, r25
    3a54:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3a58:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	69 81       	ldd	r22, Y+1	; 0x01
    3a60:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3a64:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3a68:	0f 90       	pop	r0
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	0f 92       	push	r0
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	67 e0       	ldi	r22, 0x07	; 7
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	66 e0       	ldi	r22, 0x06	; 6
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to high nibbles
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	98 2f       	mov	r25, r24
    3a94:	92 95       	swap	r25
    3a96:	9f 70       	andi	r25, 0x0F	; 15
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	69 2f       	mov	r22, r25
    3a9c:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3aa0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	69 81       	ldd	r22, Y+1	; 0x01
    3aa8:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3aac:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3ab0:	0f 90       	pop	r0
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	6c 97       	sbiw	r28, 0x1c	; 28
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	65 e0       	ldi	r22, 0x05	; 5
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	a0 e8       	ldi	r26, 0x80	; 128
    3adc:	bf e3       	ldi	r27, 0x3F	; 63
    3ade:	89 8f       	std	Y+25, r24	; 0x19
    3ae0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ae2:	ab 8f       	std	Y+27, r26	; 0x1b
    3ae4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	4a ef       	ldi	r20, 0xFA	; 250
    3af4:	54 e4       	ldi	r21, 0x44	; 68
    3af6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8d 8b       	std	Y+21, r24	; 0x15
    3b00:	9e 8b       	std	Y+22, r25	; 0x16
    3b02:	af 8b       	std	Y+23, r26	; 0x17
    3b04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b06:	6d 89       	ldd	r22, Y+21	; 0x15
    3b08:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e8       	ldi	r20, 0x80	; 128
    3b14:	5f e3       	ldi	r21, 0x3F	; 63
    3b16:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3b1a:	88 23       	and	r24, r24
    3b1c:	2c f4       	brge	.+10     	; 0x3b28 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9c 8b       	std	Y+20, r25	; 0x14
    3b24:	8b 8b       	std	Y+19, r24	; 0x13
    3b26:	3f c0       	rjmp	.+126    	; 0x3ba6 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3b28:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	4c f5       	brge	.+82     	; 0x3b92 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b40:	69 8d       	ldd	r22, Y+25	; 0x19
    3b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e2       	ldi	r20, 0x20	; 32
    3b4e:	51 e4       	ldi	r21, 0x41	; 65
    3b50:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9c 8b       	std	Y+20, r25	; 0x14
    3b66:	8b 8b       	std	Y+19, r24	; 0x13
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <CLCD_vSendFallingEdge+0xd0>
    3b6a:	88 ec       	ldi	r24, 0xC8	; 200
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9a 8b       	std	Y+18, r25	; 0x12
    3b70:	89 8b       	std	Y+17, r24	; 0x11
    3b72:	89 89       	ldd	r24, Y+17	; 0x11
    3b74:	9a 89       	ldd	r25, Y+18	; 0x12
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <CLCD_vSendFallingEdge+0xbe>
    3b7a:	9a 8b       	std	Y+18, r25	; 0x12
    3b7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b80:	9c 89       	ldd	r25, Y+20	; 0x14
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	9c 8b       	std	Y+20, r25	; 0x14
    3b86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b88:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	69 f7       	brne	.-38     	; 0x3b6a <CLCD_vSendFallingEdge+0xb2>
    3b90:	14 c0       	rjmp	.+40     	; 0x3bba <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b92:	6d 89       	ldd	r22, Y+21	; 0x15
    3b94:	7e 89       	ldd	r23, Y+22	; 0x16
    3b96:	8f 89       	ldd	r24, Y+23	; 0x17
    3b98:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	9c 8b       	std	Y+20, r25	; 0x14
    3ba4:	8b 8b       	std	Y+19, r24	; 0x13
    3ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    3baa:	98 8b       	std	Y+16, r25	; 0x10
    3bac:	8f 87       	std	Y+15, r24	; 0x0f
    3bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb0:	98 89       	ldd	r25, Y+16	; 0x10
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <CLCD_vSendFallingEdge+0xfa>
    3bb6:	98 8b       	std	Y+16, r25	; 0x10
    3bb8:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	65 e0       	ldi	r22, 0x05	; 5
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 e8       	ldi	r26, 0x80	; 128
    3bca:	bf e3       	ldi	r27, 0x3F	; 63
    3bcc:	8b 87       	std	Y+11, r24	; 0x0b
    3bce:	9c 87       	std	Y+12, r25	; 0x0c
    3bd0:	ad 87       	std	Y+13, r26	; 0x0d
    3bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	4a ef       	ldi	r20, 0xFA	; 250
    3be2:	54 e4       	ldi	r21, 0x44	; 68
    3be4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	8f 83       	std	Y+7, r24	; 0x07
    3bee:	98 87       	std	Y+8, r25	; 0x08
    3bf0:	a9 87       	std	Y+9, r26	; 0x09
    3bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf6:	78 85       	ldd	r23, Y+8	; 0x08
    3bf8:	89 85       	ldd	r24, Y+9	; 0x09
    3bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e8       	ldi	r20, 0x80	; 128
    3c02:	5f e3       	ldi	r21, 0x3F	; 63
    3c04:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3c08:	88 23       	and	r24, r24
    3c0a:	2c f4       	brge	.+10     	; 0x3c16 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	9e 83       	std	Y+6, r25	; 0x06
    3c12:	8d 83       	std	Y+5, r24	; 0x05
    3c14:	3f c0       	rjmp	.+126    	; 0x3c94 <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	3f ef       	ldi	r19, 0xFF	; 255
    3c22:	4f e7       	ldi	r20, 0x7F	; 127
    3c24:	57 e4       	ldi	r21, 0x47	; 71
    3c26:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3c2a:	18 16       	cp	r1, r24
    3c2c:	4c f5       	brge	.+82     	; 0x3c80 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e2       	ldi	r20, 0x20	; 32
    3c3c:	51 e4       	ldi	r21, 0x41	; 65
    3c3e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	0f c0       	rjmp	.+30     	; 0x3c76 <CLCD_vSendFallingEdge+0x1be>
    3c58:	88 ec       	ldi	r24, 0xC8	; 200
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9c 83       	std	Y+4, r25	; 0x04
    3c5e:	8b 83       	std	Y+3, r24	; 0x03
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <CLCD_vSendFallingEdge+0x1ac>
    3c68:	9c 83       	std	Y+4, r25	; 0x04
    3c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	9e 83       	std	Y+6, r25	; 0x06
    3c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c76:	8d 81       	ldd	r24, Y+5	; 0x05
    3c78:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	69 f7       	brne	.-38     	; 0x3c58 <CLCD_vSendFallingEdge+0x1a0>
    3c7e:	14 c0       	rjmp	.+40     	; 0x3ca8 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c80:	6f 81       	ldd	r22, Y+7	; 0x07
    3c82:	78 85       	ldd	r23, Y+8	; 0x08
    3c84:	89 85       	ldd	r24, Y+9	; 0x09
    3c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	9e 81       	ldd	r25, Y+6	; 0x06
    3c98:	9a 83       	std	Y+2, r25	; 0x02
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <CLCD_vSendFallingEdge+0x1e8>
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3ca8:	6c 96       	adiw	r28, 0x1c	; 28
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	2e 97       	sbiw	r28, 0x0e	; 14
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	a0 e2       	ldi	r26, 0x20	; 32
    3cda:	b1 e4       	ldi	r27, 0x41	; 65
    3cdc:	8b 87       	std	Y+11, r24	; 0x0b
    3cde:	9c 87       	std	Y+12, r25	; 0x0c
    3ce0:	ad 87       	std	Y+13, r26	; 0x0d
    3ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	4a ef       	ldi	r20, 0xFA	; 250
    3cf2:	54 e4       	ldi	r21, 0x44	; 68
    3cf4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	8f 83       	std	Y+7, r24	; 0x07
    3cfe:	98 87       	std	Y+8, r25	; 0x08
    3d00:	a9 87       	std	Y+9, r26	; 0x09
    3d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e8       	ldi	r20, 0x80	; 128
    3d12:	5f e3       	ldi	r21, 0x3F	; 63
    3d14:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3d18:	88 23       	and	r24, r24
    3d1a:	2c f4       	brge	.+10     	; 0x3d26 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9e 83       	std	Y+6, r25	; 0x06
    3d22:	8d 83       	std	Y+5, r24	; 0x05
    3d24:	3f c0       	rjmp	.+126    	; 0x3da4 <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    3d26:	6f 81       	ldd	r22, Y+7	; 0x07
    3d28:	78 85       	ldd	r23, Y+8	; 0x08
    3d2a:	89 85       	ldd	r24, Y+9	; 0x09
    3d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	4f e7       	ldi	r20, 0x7F	; 127
    3d34:	57 e4       	ldi	r21, 0x47	; 71
    3d36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3d3a:	18 16       	cp	r1, r24
    3d3c:	4c f5       	brge	.+82     	; 0x3d90 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e2       	ldi	r20, 0x20	; 32
    3d4c:	51 e4       	ldi	r21, 0x41	; 65
    3d4e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	9e 83       	std	Y+6, r25	; 0x06
    3d64:	8d 83       	std	Y+5, r24	; 0x05
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <CLCD_vClearScreen+0xcc>
    3d68:	88 ec       	ldi	r24, 0xC8	; 200
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	9c 83       	std	Y+4, r25	; 0x04
    3d6e:	8b 83       	std	Y+3, r24	; 0x03
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <CLCD_vClearScreen+0xba>
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	9e 83       	std	Y+6, r25	; 0x06
    3d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	69 f7       	brne	.-38     	; 0x3d68 <CLCD_vClearScreen+0xae>
    3d8e:	14 c0       	rjmp	.+40     	; 0x3db8 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	6f 81       	ldd	r22, Y+7	; 0x07
    3d92:	78 85       	ldd	r23, Y+8	; 0x08
    3d94:	89 85       	ldd	r24, Y+9	; 0x09
    3d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	8d 83       	std	Y+5, r24	; 0x05
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <CLCD_vClearScreen+0xf6>
    3db4:	9a 83       	std	Y+2, r25	; 0x02
    3db6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    3db8:	2e 96       	adiw	r28, 0x0e	; 14
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <CLCD_vSendString+0x6>
    3dd0:	0f 92       	push	r0
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9b 83       	std	Y+3, r25	; 0x03
    3dd8:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    3dda:	19 82       	std	Y+1, r1	; 0x01
    3ddc:	0e c0       	rjmp	.+28     	; 0x3dfa <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	9b 81       	ldd	r25, Y+3	; 0x03
    3de8:	fc 01       	movw	r30, r24
    3dea:	e2 0f       	add	r30, r18
    3dec:	f3 1f       	adc	r31, r19
    3dee:	80 81       	ld	r24, Z
    3df0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    LOC_u8Iterator++;
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	8f 5f       	subi	r24, 0xFF	; 255
    3df8:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	9b 81       	ldd	r25, Y+3	; 0x03
    3e04:	fc 01       	movw	r30, r24
    3e06:	e2 0f       	add	r30, r18
    3e08:	f3 1f       	adc	r31, r19
    3e0a:	80 81       	ld	r24, Z
    3e0c:	88 23       	and	r24, r24
    3e0e:	39 f7       	brne	.-50     	; 0x3dde <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3e1c:	ef 92       	push	r14
    3e1e:	ff 92       	push	r15
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	28 97       	sbiw	r28, 0x08	; 8
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	6d 83       	std	Y+5, r22	; 0x05
    3e3a:	7e 83       	std	Y+6, r23	; 0x06
    3e3c:	8f 83       	std	Y+7, r24	; 0x07
    3e3e:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a0 e0       	ldi	r26, 0x00	; 0
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	ab 83       	std	Y+3, r26	; 0x03
    3e4e:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    3e50:	8d 81       	ldd	r24, Y+5	; 0x05
    3e52:	9e 81       	ldd	r25, Y+6	; 0x06
    3e54:	af 81       	ldd	r26, Y+7	; 0x07
    3e56:	b8 85       	ldd	r27, Y+8	; 0x08
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	a1 05       	cpc	r26, r1
    3e5c:	b1 05       	cpc	r27, r1
    3e5e:	21 f4       	brne	.+8      	; 0x3e68 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    3e60:	80 e3       	ldi	r24, 0x30	; 48
    3e62:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    3e66:	85 c0       	rjmp	.+266    	; 0x3f72 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	af 81       	ldd	r26, Y+7	; 0x07
    3e6e:	b8 85       	ldd	r27, Y+8	; 0x08
    3e70:	bb 23       	and	r27, r27
    3e72:	0c f0       	brlt	.+2      	; 0x3e76 <CLCD_vSendIntNumber+0x5a>
    3e74:	49 c0       	rjmp	.+146    	; 0x3f08 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    3e76:	8d e2       	ldi	r24, 0x2D	; 45
    3e78:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	af 81       	ldd	r26, Y+7	; 0x07
    3e82:	b8 85       	ldd	r27, Y+8	; 0x08
    3e84:	b0 95       	com	r27
    3e86:	a0 95       	com	r26
    3e88:	90 95       	com	r25
    3e8a:	81 95       	neg	r24
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	af 4f       	sbci	r26, 0xFF	; 255
    3e90:	bf 4f       	sbci	r27, 0xFF	; 255
    3e92:	8d 83       	std	Y+5, r24	; 0x05
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	af 83       	std	Y+7, r26	; 0x07
    3e98:	b8 87       	std	Y+8, r27	; 0x08
    3e9a:	36 c0       	rjmp	.+108    	; 0x3f08 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ea2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ea4:	2a e0       	ldi	r18, 0x0A	; 10
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e0       	ldi	r20, 0x00	; 0
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 25 39 	call	0x724a	; 0x724a <__mulsi3>
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	af 81       	ldd	r26, Y+7	; 0x07
    3ebe:	b8 85       	ldd	r27, Y+8	; 0x08
    3ec0:	2a e0       	ldi	r18, 0x0A	; 10
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 86 39 	call	0x730c	; 0x730c <__divmodsi4>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	8e 0d       	add	r24, r14
    3ed6:	9f 1d       	adc	r25, r15
    3ed8:	a0 1f       	adc	r26, r16
    3eda:	b1 1f       	adc	r27, r17
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	9a 83       	std	Y+2, r25	; 0x02
    3ee0:	ab 83       	std	Y+3, r26	; 0x03
    3ee2:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    3ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee8:	af 81       	ldd	r26, Y+7	; 0x07
    3eea:	b8 85       	ldd	r27, Y+8	; 0x08
    3eec:	2a e0       	ldi	r18, 0x0A	; 10
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e0       	ldi	r20, 0x00	; 0
    3ef2:	50 e0       	ldi	r21, 0x00	; 0
    3ef4:	bc 01       	movw	r22, r24
    3ef6:	cd 01       	movw	r24, r26
    3ef8:	0e 94 86 39 	call	0x730c	; 0x730c <__divmodsi4>
    3efc:	da 01       	movw	r26, r20
    3efe:	c9 01       	movw	r24, r18
    3f00:	8d 83       	std	Y+5, r24	; 0x05
    3f02:	9e 83       	std	Y+6, r25	; 0x06
    3f04:	af 83       	std	Y+7, r26	; 0x07
    3f06:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0c:	af 81       	ldd	r26, Y+7	; 0x07
    3f0e:	b8 85       	ldd	r27, Y+8	; 0x08
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	a1 05       	cpc	r26, r1
    3f14:	b1 05       	cpc	r27, r1
    3f16:	11 f6       	brne	.-124    	; 0x3e9c <CLCD_vSendIntNumber+0x80>
    3f18:	23 c0       	rjmp	.+70     	; 0x3f60 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f20:	bc 81       	ldd	r27, Y+4	; 0x04
    3f22:	2a e0       	ldi	r18, 0x0A	; 10
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 64 39 	call	0x72c8	; 0x72c8 <__udivmodsi4>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	80 5d       	subi	r24, 0xD0	; 208
    3f38:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f40:	ab 81       	ldd	r26, Y+3	; 0x03
    3f42:	bc 81       	ldd	r27, Y+4	; 0x04
    3f44:	2a e0       	ldi	r18, 0x0A	; 10
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e0       	ldi	r20, 0x00	; 0
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	0e 94 64 39 	call	0x72c8	; 0x72c8 <__udivmodsi4>
    3f54:	da 01       	movw	r26, r20
    3f56:	c9 01       	movw	r24, r18
    3f58:	89 83       	std	Y+1, r24	; 0x01
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	ab 83       	std	Y+3, r26	; 0x03
    3f5e:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	ab 81       	ldd	r26, Y+3	; 0x03
    3f66:	bc 81       	ldd	r27, Y+4	; 0x04
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	a1 05       	cpc	r26, r1
    3f6e:	b1 05       	cpc	r27, r1
    3f70:	a1 f6       	brne	.-88     	; 0x3f1a <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    3f72:	28 96       	adiw	r28, 0x08	; 8
    3f74:	0f b6       	in	r0, 0x3f	; 63
    3f76:	f8 94       	cli
    3f78:	de bf       	out	0x3e, r29	; 62
    3f7a:	0f be       	out	0x3f, r0	; 63
    3f7c:	cd bf       	out	0x3d, r28	; 61
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	1f 91       	pop	r17
    3f84:	0f 91       	pop	r16
    3f86:	ff 90       	pop	r15
    3f88:	ef 90       	pop	r14
    3f8a:	08 95       	ret

00003f8c <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3f8c:	af 92       	push	r10
    3f8e:	bf 92       	push	r11
    3f90:	cf 92       	push	r12
    3f92:	df 92       	push	r13
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	00 d0       	rcall	.+0      	; 0x3fa2 <CLCD_vSendFloatNumber+0x16>
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <CLCD_vSendFloatNumber+0x18>
    3fa4:	cd b7       	in	r28, 0x3d	; 61
    3fa6:	de b7       	in	r29, 0x3e	; 62
    3fa8:	69 83       	std	Y+1, r22	; 0x01
    3faa:	7a 83       	std	Y+2, r23	; 0x02
    3fac:	8b 83       	std	Y+3, r24	; 0x03
    3fae:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    3fb0:	69 81       	ldd	r22, Y+1	; 0x01
    3fb2:	7a 81       	ldd	r23, Y+2	; 0x02
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    3fc8:	69 81       	ldd	r22, Y+1	; 0x01
    3fca:	7a 81       	ldd	r23, Y+2	; 0x02
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	4c f4       	brge	.+18     	; 0x3ff2 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe8:	b0 58       	subi	r27, 0x80	; 128
    3fea:	89 83       	std	Y+1, r24	; 0x01
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	ab 83       	std	Y+3, r26	; 0x03
    3ff0:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    3ff2:	69 81       	ldd	r22, Y+1	; 0x01
    3ff4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	bc 01       	movw	r22, r24
    4004:	cd 01       	movw	r24, r26
    4006:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    400a:	9b 01       	movw	r18, r22
    400c:	ac 01       	movw	r20, r24
    400e:	69 81       	ldd	r22, Y+1	; 0x01
    4010:	7a 81       	ldd	r23, Y+2	; 0x02
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	9c 81       	ldd	r25, Y+4	; 0x04
    4016:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	9a 83       	std	Y+2, r25	; 0x02
    4022:	ab 83       	std	Y+3, r26	; 0x03
    4024:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    4026:	69 81       	ldd	r22, Y+1	; 0x01
    4028:	7a 81       	ldd	r23, Y+2	; 0x02
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	9c 81       	ldd	r25, Y+4	; 0x04
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e4       	ldi	r19, 0x40	; 64
    4032:	4c e1       	ldi	r20, 0x1C	; 28
    4034:	56 e4       	ldi	r21, 0x46	; 70
    4036:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	ab 83       	std	Y+3, r26	; 0x03
    4044:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    4046:	69 81       	ldd	r22, Y+1	; 0x01
    4048:	7a 81       	ldd	r23, Y+2	; 0x02
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	9c 81       	ldd	r25, Y+4	; 0x04
    404e:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    4052:	a2 2e       	mov	r10, r18
    4054:	b3 2e       	mov	r11, r19
    4056:	c4 2e       	mov	r12, r20
    4058:	d5 2e       	mov	r13, r21
    405a:	e6 2e       	mov	r14, r22
    405c:	f7 2e       	mov	r15, r23
    405e:	08 2f       	mov	r16, r24
    4060:	19 2f       	mov	r17, r25
    4062:	8a 2d       	mov	r24, r10
    4064:	8b 29       	or	r24, r11
    4066:	8c 29       	or	r24, r12
    4068:	8d 29       	or	r24, r13
    406a:	8e 29       	or	r24, r14
    406c:	8f 29       	or	r24, r15
    406e:	80 2b       	or	r24, r16
    4070:	81 2b       	or	r24, r17
    4072:	88 23       	and	r24, r24
    4074:	79 f0       	breq	.+30     	; 0x4094 <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    4076:	8e e2       	ldi	r24, 0x2E	; 46
    4078:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    407c:	69 81       	ldd	r22, Y+1	; 0x01
    407e:	7a 81       	ldd	r23, Y+2	; 0x02
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	9c 81       	ldd	r25, Y+4	; 0x04
    4084:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <CLCD_vSendIntNumber>
  }
}
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	1f 91       	pop	r17
    40a2:	0f 91       	pop	r16
    40a4:	ff 90       	pop	r15
    40a6:	ef 90       	pop	r14
    40a8:	df 90       	pop	r13
    40aa:	cf 90       	pop	r12
    40ac:	bf 90       	pop	r11
    40ae:	af 90       	pop	r10
    40b0:	08 95       	ret

000040b2 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	61 97       	sbiw	r28, 0x11	; 17
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	88 8b       	std	Y+16, r24	; 0x10
    40c8:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    40ca:	88 89       	ldd	r24, Y+16	; 0x10
    40cc:	88 23       	and	r24, r24
    40ce:	49 f0       	breq	.+18     	; 0x40e2 <CLCD_vSetPosition+0x30>
    40d0:	88 89       	ldd	r24, Y+16	; 0x10
    40d2:	85 30       	cpi	r24, 0x05	; 5
    40d4:	30 f4       	brcc	.+12     	; 0x40e2 <CLCD_vSetPosition+0x30>
    40d6:	89 89       	ldd	r24, Y+17	; 0x11
    40d8:	88 23       	and	r24, r24
    40da:	19 f0       	breq	.+6      	; 0x40e2 <CLCD_vSetPosition+0x30>
    40dc:	89 89       	ldd	r24, Y+17	; 0x11
    40de:	85 31       	cpi	r24, 0x15	; 21
    40e0:	18 f0       	brcs	.+6      	; 0x40e8 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    40e2:	80 e8       	ldi	r24, 0x80	; 128
    40e4:	8f 87       	std	Y+15, r24	; 0x0f
    40e6:	1b c0       	rjmp	.+54     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    40e8:	88 89       	ldd	r24, Y+16	; 0x10
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	21 f4       	brne	.+8      	; 0x40f6 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    40ee:	89 89       	ldd	r24, Y+17	; 0x11
    40f0:	81 58       	subi	r24, 0x81	; 129
    40f2:	8f 87       	std	Y+15, r24	; 0x0f
    40f4:	14 c0       	rjmp	.+40     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    40f6:	88 89       	ldd	r24, Y+16	; 0x10
    40f8:	82 30       	cpi	r24, 0x02	; 2
    40fa:	21 f4       	brne	.+8      	; 0x4104 <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    40fc:	89 89       	ldd	r24, Y+17	; 0x11
    40fe:	81 54       	subi	r24, 0x41	; 65
    4100:	8f 87       	std	Y+15, r24	; 0x0f
    4102:	0d c0       	rjmp	.+26     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    4104:	88 89       	ldd	r24, Y+16	; 0x10
    4106:	83 30       	cpi	r24, 0x03	; 3
    4108:	21 f4       	brne	.+8      	; 0x4112 <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    410a:	89 89       	ldd	r24, Y+17	; 0x11
    410c:	8d 56       	subi	r24, 0x6D	; 109
    410e:	8f 87       	std	Y+15, r24	; 0x0f
    4110:	06 c0       	rjmp	.+12     	; 0x411e <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    4112:	88 89       	ldd	r24, Y+16	; 0x10
    4114:	84 30       	cpi	r24, 0x04	; 4
    4116:	19 f4       	brne	.+6      	; 0x411e <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    4118:	89 89       	ldd	r24, Y+17	; 0x11
    411a:	8d 52       	subi	r24, 0x2D	; 45
    411c:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    411e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4120:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	a0 e8       	ldi	r26, 0x80	; 128
    412a:	bf e3       	ldi	r27, 0x3F	; 63
    412c:	8b 87       	std	Y+11, r24	; 0x0b
    412e:	9c 87       	std	Y+12, r25	; 0x0c
    4130:	ad 87       	std	Y+13, r26	; 0x0d
    4132:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4134:	6b 85       	ldd	r22, Y+11	; 0x0b
    4136:	7c 85       	ldd	r23, Y+12	; 0x0c
    4138:	8d 85       	ldd	r24, Y+13	; 0x0d
    413a:	9e 85       	ldd	r25, Y+14	; 0x0e
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	4a ef       	ldi	r20, 0xFA	; 250
    4142:	54 e4       	ldi	r21, 0x44	; 68
    4144:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	8f 83       	std	Y+7, r24	; 0x07
    414e:	98 87       	std	Y+8, r25	; 0x08
    4150:	a9 87       	std	Y+9, r26	; 0x09
    4152:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4154:	6f 81       	ldd	r22, Y+7	; 0x07
    4156:	78 85       	ldd	r23, Y+8	; 0x08
    4158:	89 85       	ldd	r24, Y+9	; 0x09
    415a:	9a 85       	ldd	r25, Y+10	; 0x0a
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e8       	ldi	r20, 0x80	; 128
    4162:	5f e3       	ldi	r21, 0x3F	; 63
    4164:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4168:	88 23       	and	r24, r24
    416a:	2c f4       	brge	.+10     	; 0x4176 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
    4174:	3f c0       	rjmp	.+126    	; 0x41f4 <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	3f ef       	ldi	r19, 0xFF	; 255
    4182:	4f e7       	ldi	r20, 0x7F	; 127
    4184:	57 e4       	ldi	r21, 0x47	; 71
    4186:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    418a:	18 16       	cp	r1, r24
    418c:	4c f5       	brge	.+82     	; 0x41e0 <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4190:	7c 85       	ldd	r23, Y+12	; 0x0c
    4192:	8d 85       	ldd	r24, Y+13	; 0x0d
    4194:	9e 85       	ldd	r25, Y+14	; 0x0e
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e2       	ldi	r20, 0x20	; 32
    419c:	51 e4       	ldi	r21, 0x41	; 65
    419e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	9e 83       	std	Y+6, r25	; 0x06
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	0f c0       	rjmp	.+30     	; 0x41d6 <CLCD_vSetPosition+0x124>
    41b8:	88 ec       	ldi	r24, 0xC8	; 200
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9c 83       	std	Y+4, r25	; 0x04
    41be:	8b 83       	std	Y+3, r24	; 0x03
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	9c 81       	ldd	r25, Y+4	; 0x04
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	f1 f7       	brne	.-4      	; 0x41c4 <CLCD_vSetPosition+0x112>
    41c8:	9c 83       	std	Y+4, r25	; 0x04
    41ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41cc:	8d 81       	ldd	r24, Y+5	; 0x05
    41ce:	9e 81       	ldd	r25, Y+6	; 0x06
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	9e 83       	std	Y+6, r25	; 0x06
    41d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d6:	8d 81       	ldd	r24, Y+5	; 0x05
    41d8:	9e 81       	ldd	r25, Y+6	; 0x06
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	69 f7       	brne	.-38     	; 0x41b8 <CLCD_vSetPosition+0x106>
    41de:	14 c0       	rjmp	.+40     	; 0x4208 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e0:	6f 81       	ldd	r22, Y+7	; 0x07
    41e2:	78 85       	ldd	r23, Y+8	; 0x08
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
    41f4:	8d 81       	ldd	r24, Y+5	; 0x05
    41f6:	9e 81       	ldd	r25, Y+6	; 0x06
    41f8:	9a 83       	std	Y+2, r25	; 0x02
    41fa:	89 83       	std	Y+1, r24	; 0x01
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <CLCD_vSetPosition+0x14e>
    4204:	9a 83       	std	Y+2, r25	; 0x02
    4206:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4208:	61 96       	adiw	r28, 0x11	; 17
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	00 d0       	rcall	.+0      	; 0x4220 <CLCD_vSendExtraChar+0x6>
    4220:	0f 92       	push	r0
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	8a 83       	std	Y+2, r24	; 0x02
    4228:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    422a:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    422c:	80 e4       	ldi	r24, 0x40	; 64
    422e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    4232:	19 82       	std	Y+1, r1	; 0x01
    4234:	0c c0       	rjmp	.+24     	; 0x424e <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	88 2f       	mov	r24, r24
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	fc 01       	movw	r30, r24
    423e:	e1 53       	subi	r30, 0x31	; 49
    4240:	fd 4f       	sbci	r31, 0xFD	; 253
    4242:	80 81       	ld	r24, Z
    4244:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	8f 5f       	subi	r24, 0xFF	; 255
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	80 34       	cpi	r24, 0x40	; 64
    4252:	88 f3       	brcs	.-30     	; 0x4236 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    4254:	8a 81       	ldd	r24, Y+2	; 0x02
    4256:	6b 81       	ldd	r22, Y+3	; 0x03
    4258:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    425c:	19 82       	std	Y+1, r1	; 0x01
    425e:	06 c0       	rjmp	.+12     	; 0x426c <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	8f 5f       	subi	r24, 0xFF	; 255
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	88 30       	cpi	r24, 0x08	; 8
    4270:	b8 f3       	brcs	.-18     	; 0x4260 <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	08 95       	ret

0000427e <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	2e 97       	sbiw	r28, 0x0e	; 14
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    4292:	8c e1       	ldi	r24, 0x1C	; 28
    4294:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	a0 e8       	ldi	r26, 0x80	; 128
    429e:	bf e3       	ldi	r27, 0x3F	; 63
    42a0:	8b 87       	std	Y+11, r24	; 0x0b
    42a2:	9c 87       	std	Y+12, r25	; 0x0c
    42a4:	ad 87       	std	Y+13, r26	; 0x0d
    42a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    42aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	4a ef       	ldi	r20, 0xFA	; 250
    42b6:	54 e4       	ldi	r21, 0x44	; 68
    42b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	8f 83       	std	Y+7, r24	; 0x07
    42c2:	98 87       	std	Y+8, r25	; 0x08
    42c4:	a9 87       	std	Y+9, r26	; 0x09
    42c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42c8:	6f 81       	ldd	r22, Y+7	; 0x07
    42ca:	78 85       	ldd	r23, Y+8	; 0x08
    42cc:	89 85       	ldd	r24, Y+9	; 0x09
    42ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	40 e8       	ldi	r20, 0x80	; 128
    42d6:	5f e3       	ldi	r21, 0x3F	; 63
    42d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    42dc:	88 23       	and	r24, r24
    42de:	2c f4       	brge	.+10     	; 0x42ea <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	3f c0       	rjmp	.+126    	; 0x4368 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    42ea:	6f 81       	ldd	r22, Y+7	; 0x07
    42ec:	78 85       	ldd	r23, Y+8	; 0x08
    42ee:	89 85       	ldd	r24, Y+9	; 0x09
    42f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	3f ef       	ldi	r19, 0xFF	; 255
    42f6:	4f e7       	ldi	r20, 0x7F	; 127
    42f8:	57 e4       	ldi	r21, 0x47	; 71
    42fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    42fe:	18 16       	cp	r1, r24
    4300:	4c f5       	brge	.+82     	; 0x4354 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4302:	6b 85       	ldd	r22, Y+11	; 0x0b
    4304:	7c 85       	ldd	r23, Y+12	; 0x0c
    4306:	8d 85       	ldd	r24, Y+13	; 0x0d
    4308:	9e 85       	ldd	r25, Y+14	; 0x0e
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e2       	ldi	r20, 0x20	; 32
    4310:	51 e4       	ldi	r21, 0x41	; 65
    4312:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	bc 01       	movw	r22, r24
    431c:	cd 01       	movw	r24, r26
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	9e 83       	std	Y+6, r25	; 0x06
    4328:	8d 83       	std	Y+5, r24	; 0x05
    432a:	0f c0       	rjmp	.+30     	; 0x434a <CLCD_voidShiftDisplayRight+0xcc>
    432c:	88 ec       	ldi	r24, 0xC8	; 200
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9c 83       	std	Y+4, r25	; 0x04
    4332:	8b 83       	std	Y+3, r24	; 0x03
    4334:	8b 81       	ldd	r24, Y+3	; 0x03
    4336:	9c 81       	ldd	r25, Y+4	; 0x04
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <CLCD_voidShiftDisplayRight+0xba>
    433c:	9c 83       	std	Y+4, r25	; 0x04
    433e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	9e 81       	ldd	r25, Y+6	; 0x06
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	9e 83       	std	Y+6, r25	; 0x06
    4348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	9e 81       	ldd	r25, Y+6	; 0x06
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	69 f7       	brne	.-38     	; 0x432c <CLCD_voidShiftDisplayRight+0xae>
    4352:	14 c0       	rjmp	.+40     	; 0x437c <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9e 83       	std	Y+6, r25	; 0x06
    4366:	8d 83       	std	Y+5, r24	; 0x05
    4368:	8d 81       	ldd	r24, Y+5	; 0x05
    436a:	9e 81       	ldd	r25, Y+6	; 0x06
    436c:	9a 83       	std	Y+2, r25	; 0x02
    436e:	89 83       	std	Y+1, r24	; 0x01
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	9a 81       	ldd	r25, Y+2	; 0x02
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <CLCD_voidShiftDisplayRight+0xf6>
    4378:	9a 83       	std	Y+2, r25	; 0x02
    437a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    437c:	2e 96       	adiw	r28, 0x0e	; 14
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	2e 97       	sbiw	r28, 0x0e	; 14
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    43a2:	88 e1       	ldi	r24, 0x18	; 24
    43a4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	a0 e8       	ldi	r26, 0x80	; 128
    43ae:	bf e3       	ldi	r27, 0x3F	; 63
    43b0:	8b 87       	std	Y+11, r24	; 0x0b
    43b2:	9c 87       	std	Y+12, r25	; 0x0c
    43b4:	ad 87       	std	Y+13, r26	; 0x0d
    43b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    43bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43be:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	4a ef       	ldi	r20, 0xFA	; 250
    43c6:	54 e4       	ldi	r21, 0x44	; 68
    43c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	8f 83       	std	Y+7, r24	; 0x07
    43d2:	98 87       	std	Y+8, r25	; 0x08
    43d4:	a9 87       	std	Y+9, r26	; 0x09
    43d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d8:	6f 81       	ldd	r22, Y+7	; 0x07
    43da:	78 85       	ldd	r23, Y+8	; 0x08
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	2c f4       	brge	.+10     	; 0x43fa <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	9e 83       	std	Y+6, r25	; 0x06
    43f6:	8d 83       	std	Y+5, r24	; 0x05
    43f8:	3f c0       	rjmp	.+126    	; 0x4478 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    43fa:	6f 81       	ldd	r22, Y+7	; 0x07
    43fc:	78 85       	ldd	r23, Y+8	; 0x08
    43fe:	89 85       	ldd	r24, Y+9	; 0x09
    4400:	9a 85       	ldd	r25, Y+10	; 0x0a
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	3f ef       	ldi	r19, 0xFF	; 255
    4406:	4f e7       	ldi	r20, 0x7F	; 127
    4408:	57 e4       	ldi	r21, 0x47	; 71
    440a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    440e:	18 16       	cp	r1, r24
    4410:	4c f5       	brge	.+82     	; 0x4464 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4412:	6b 85       	ldd	r22, Y+11	; 0x0b
    4414:	7c 85       	ldd	r23, Y+12	; 0x0c
    4416:	8d 85       	ldd	r24, Y+13	; 0x0d
    4418:	9e 85       	ldd	r25, Y+14	; 0x0e
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e2       	ldi	r20, 0x20	; 32
    4420:	51 e4       	ldi	r21, 0x41	; 65
    4422:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 83       	std	Y+5, r24	; 0x05
    443a:	0f c0       	rjmp	.+30     	; 0x445a <CLCD_voidShiftDisplayLeft+0xcc>
    443c:	88 ec       	ldi	r24, 0xC8	; 200
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	9c 83       	std	Y+4, r25	; 0x04
    4442:	8b 83       	std	Y+3, r24	; 0x03
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	9c 81       	ldd	r25, Y+4	; 0x04
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <CLCD_voidShiftDisplayLeft+0xba>
    444c:	9c 83       	std	Y+4, r25	; 0x04
    444e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4450:	8d 81       	ldd	r24, Y+5	; 0x05
    4452:	9e 81       	ldd	r25, Y+6	; 0x06
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	69 f7       	brne	.-38     	; 0x443c <CLCD_voidShiftDisplayLeft+0xae>
    4462:	14 c0       	rjmp	.+40     	; 0x448c <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4464:	6f 81       	ldd	r22, Y+7	; 0x07
    4466:	78 85       	ldd	r23, Y+8	; 0x08
    4468:	89 85       	ldd	r24, Y+9	; 0x09
    446a:	9a 85       	ldd	r25, Y+10	; 0x0a
    446c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	9e 83       	std	Y+6, r25	; 0x06
    4476:	8d 83       	std	Y+5, r24	; 0x05
    4478:	8d 81       	ldd	r24, Y+5	; 0x05
    447a:	9e 81       	ldd	r25, Y+6	; 0x06
    447c:	9a 83       	std	Y+2, r25	; 0x02
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <CLCD_voidShiftDisplayLeft+0xf6>
    4488:	9a 83       	std	Y+2, r25	; 0x02
    448a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    448c:	2e 96       	adiw	r28, 0x0e	; 14
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	08 95       	ret

0000449e <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    449e:	df 93       	push	r29
    44a0:	cf 93       	push	r28
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <BUZ_vInit+0x6>
    44a4:	0f 92       	push	r0
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	69 83       	std	Y+1, r22	; 0x01
    44ac:	7a 83       	std	Y+2, r23	; 0x02
    44ae:	8b 83       	std	Y+3, r24	; 0x03

  DIO_enumSetPinDir(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44b0:	89 81       	ldd	r24, Y+1	; 0x01
    44b2:	9a 81       	ldd	r25, Y+2	; 0x02
    44b4:	69 2f       	mov	r22, r25
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
}
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <BUZ_vOn+0x6>
    44ce:	0f 92       	push	r0
    44d0:	cd b7       	in	r28, 0x3d	; 61
    44d2:	de b7       	in	r29, 0x3e	; 62
    44d4:	69 83       	std	Y+1, r22	; 0x01
    44d6:	7a 83       	std	Y+2, r23	; 0x02
    44d8:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    44da:	8b 81       	ldd	r24, Y+3	; 0x03
    44dc:	81 30       	cpi	r24, 0x01	; 1
    44de:	39 f4       	brne	.+14     	; 0x44ee <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	9a 81       	ldd	r25, Y+2	; 0x02
    44e4:	69 2f       	mov	r22, r25
    44e6:	41 e0       	ldi	r20, 0x01	; 1
    44e8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    44ec:	09 c0       	rjmp	.+18     	; 0x4500 <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    44ee:	8b 81       	ldd	r24, Y+3	; 0x03
    44f0:	88 23       	and	r24, r24
    44f2:	31 f4       	brne	.+12     	; 0x4500 <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	9a 81       	ldd	r25, Y+2	; 0x02
    44f8:	69 2f       	mov	r22, r25
    44fa:	41 e0       	ldi	r20, 0x01	; 1
    44fc:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	cf 91       	pop	r28
    4508:	df 91       	pop	r29
    450a:	08 95       	ret

0000450c <BUZ_vOff>:
* Parameters :
             => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	00 d0       	rcall	.+0      	; 0x4512 <BUZ_vOff+0x6>
    4512:	0f 92       	push	r0
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
    4518:	69 83       	std	Y+1, r22	; 0x01
    451a:	7a 83       	std	Y+2, r23	; 0x02
    451c:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	39 f4       	brne	.+14     	; 0x4532 <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_LOW);
    4524:	89 81       	ldd	r24, Y+1	; 0x01
    4526:	9a 81       	ldd	r25, Y+2	; 0x02
    4528:	69 2f       	mov	r22, r25
    452a:	40 e0       	ldi	r20, 0x00	; 0
    452c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    4530:	09 c0       	rjmp	.+18     	; 0x4544 <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	88 23       	and	r24, r24
    4536:	31 f4       	brne	.+12     	; 0x4544 <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_HIGH);
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	9a 81       	ldd	r25, Y+2	; 0x02
    453c:	69 2f       	mov	r22, r25
    453e:	41 e0       	ldi	r20, 0x01	; 1
    4540:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <BUZ_vTog+0x6>
    4556:	0f 92       	push	r0
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	69 83       	std	Y+1, r22	; 0x01
    455e:	7a 83       	std	Y+2, r23	; 0x02
    4560:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    4562:	89 81       	ldd	r24, Y+1	; 0x01
    4564:	9a 81       	ldd	r25, Y+2	; 0x02
    4566:	69 2f       	mov	r22, r25
    4568:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <DIO_enumTogglePinVal>
}
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <SSD_vInitDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_vInitDataPort(SSD_config Configuration)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <SSD_vInitDataPort+0x6>
    457e:	00 d0       	rcall	.+0      	; 0x4580 <SSD_vInitDataPort+0x8>
    4580:	0f 92       	push	r0
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	49 83       	std	Y+1, r20	; 0x01
    4588:	5a 83       	std	Y+2, r21	; 0x02
    458a:	6b 83       	std	Y+3, r22	; 0x03
    458c:	7c 83       	std	Y+4, r23	; 0x04
    458e:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    4590:	8d 81       	ldd	r24, Y+5	; 0x05
    4592:	88 23       	and	r24, r24
    4594:	29 f4       	brne	.+10     	; 0x45a0 <SSD_vInitDataPort+0x28>
  {
    DIO_vSetLowNibbleDir(Configuration.DataPort, 0x0F);
    4596:	8a 81       	ldd	r24, Y+2	; 0x02
    4598:	6f e0       	ldi	r22, 0x0F	; 15
    459a:	0e 94 1e 14 	call	0x283c	; 0x283c <DIO_vSetLowNibbleDir>
    459e:	07 c0       	rjmp	.+14     	; 0x45ae <SSD_vInitDataPort+0x36>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    45a0:	8d 81       	ldd	r24, Y+5	; 0x05
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	21 f4       	brne	.+8      	; 0x45ae <SSD_vInitDataPort+0x36>
  {
    DIO_vSetHighNibbleDir(Configuration.DataPort, 0xF0);
    45a6:	8a 81       	ldd	r24, Y+2	; 0x02
    45a8:	60 ef       	ldi	r22, 0xF0	; 240
    45aa:	0e 94 99 14 	call	0x2932	; 0x2932 <DIO_vSetHighNibbleDir>
  }
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	cf 91       	pop	r28
    45ba:	df 91       	pop	r29
    45bc:	08 95       	ret

000045be <SSD_vSendNumber>:
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vSendNumber(SSD_config Configuration, u8 Copy_u8Number)
{
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <SSD_vSendNumber+0x6>
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <SSD_vSendNumber+0x8>
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <SSD_vSendNumber+0xa>
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
    45cc:	49 83       	std	Y+1, r20	; 0x01
    45ce:	5a 83       	std	Y+2, r21	; 0x02
    45d0:	6b 83       	std	Y+3, r22	; 0x03
    45d2:	7c 83       	std	Y+4, r23	; 0x04
    45d4:	8d 83       	std	Y+5, r24	; 0x05
    45d6:	2e 83       	std	Y+6, r18	; 0x06
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	88 23       	and	r24, r24
    45dc:	29 f4       	brne	.+10     	; 0x45e8 <SSD_vSendNumber+0x2a>
  {
    DIO_vWriteLowNibble(Configuration.DataPort, Copy_u8Number);
    45de:	8a 81       	ldd	r24, Y+2	; 0x02
    45e0:	6e 81       	ldd	r22, Y+6	; 0x06
    45e2:	0e 94 27 13 	call	0x264e	; 0x264e <DIO_vWriteLowNibble>
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <SSD_vSendNumber+0x38>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    45e8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <SSD_vSendNumber+0x38>
  {
    DIO_vWriteHighNibble(Configuration.DataPort, Copy_u8Number);
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	6e 81       	ldd	r22, Y+6	; 0x06
    45f2:	0e 94 a2 13 	call	0x2744	; 0x2744 <DIO_vWriteHighNibble>
  }
}
    45f6:	26 96       	adiw	r28, 0x06	; 6
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	08 95       	ret

00004608 <SSD_vEnable>:
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vEnable(SSD_config Configuration)
{
    4608:	df 93       	push	r29
    460a:	cf 93       	push	r28
    460c:	00 d0       	rcall	.+0      	; 0x460e <SSD_vEnable+0x6>
    460e:	00 d0       	rcall	.+0      	; 0x4610 <SSD_vEnable+0x8>
    4610:	0f 92       	push	r0
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	49 83       	std	Y+1, r20	; 0x01
    4618:	5a 83       	std	Y+2, r21	; 0x02
    461a:	6b 83       	std	Y+3, r22	; 0x03
    461c:	7c 83       	std	Y+4, r23	; 0x04
    461e:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	88 23       	and	r24, r24
    4624:	69 f4       	brne	.+26     	; 0x4640 <SSD_vEnable+0x38>
  {
    DIO_enumSetPinDir   (Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4626:	8b 81       	ldd	r24, Y+3	; 0x03
    4628:	9c 81       	ldd	r25, Y+4	; 0x04
    462a:	69 2f       	mov	r22, r25
    462c:	41 e0       	ldi	r20, 0x01	; 1
    462e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal (Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    4632:	8b 81       	ldd	r24, Y+3	; 0x03
    4634:	9c 81       	ldd	r25, Y+4	; 0x04
    4636:	69 2f       	mov	r22, r25
    4638:	40 e0       	ldi	r20, 0x00	; 0
    463a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    463e:	0f c0       	rjmp	.+30     	; 0x465e <SSD_vEnable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	81 30       	cpi	r24, 0x01	; 1
    4644:	61 f4       	brne	.+24     	; 0x465e <SSD_vEnable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4646:	8b 81       	ldd	r24, Y+3	; 0x03
    4648:	9c 81       	ldd	r25, Y+4	; 0x04
    464a:	69 2f       	mov	r22, r25
    464c:	41 e0       	ldi	r20, 0x01	; 1
    464e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	69 2f       	mov	r22, r25
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	cf 91       	pop	r28
    466a:	df 91       	pop	r29
    466c:	08 95       	ret

0000466e <SSD_vDisable>:
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vDisable(SSD_config Configuration)
{
    466e:	df 93       	push	r29
    4670:	cf 93       	push	r28
    4672:	00 d0       	rcall	.+0      	; 0x4674 <SSD_vDisable+0x6>
    4674:	00 d0       	rcall	.+0      	; 0x4676 <SSD_vDisable+0x8>
    4676:	0f 92       	push	r0
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	49 83       	std	Y+1, r20	; 0x01
    467e:	5a 83       	std	Y+2, r21	; 0x02
    4680:	6b 83       	std	Y+3, r22	; 0x03
    4682:	7c 83       	std	Y+4, r23	; 0x04
    4684:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	88 23       	and	r24, r24
    468a:	69 f4       	brne	.+26     	; 0x46a6 <SSD_vDisable+0x38>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    468c:	8b 81       	ldd	r24, Y+3	; 0x03
    468e:	9c 81       	ldd	r25, Y+4	; 0x04
    4690:	69 2f       	mov	r22, r25
    4692:	41 e0       	ldi	r20, 0x01	; 1
    4694:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	9c 81       	ldd	r25, Y+4	; 0x04
    469c:	69 2f       	mov	r22, r25
    469e:	41 e0       	ldi	r20, 0x01	; 1
    46a0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
    46a4:	0f c0       	rjmp	.+30     	; 0x46c4 <SSD_vDisable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	81 30       	cpi	r24, 0x01	; 1
    46aa:	61 f4       	brne	.+24     	; 0x46c4 <SSD_vDisable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    46ac:	8b 81       	ldd	r24, Y+3	; 0x03
    46ae:	9c 81       	ldd	r25, Y+4	; 0x04
    46b0:	69 2f       	mov	r22, r25
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    46b8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ba:	9c 81       	ldd	r25, Y+4	; 0x04
    46bc:	69 2f       	mov	r22, r25
    46be:	40 e0       	ldi	r20, 0x00	; 0
    46c0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>
  }
}
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	cf 91       	pop	r28
    46d0:	df 91       	pop	r29
    46d2:	08 95       	ret

000046d4 <main>:
void ISR_TIMER2_OVF_MODE(void);

//======================================================================================================================================//

void main(void)
{
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	c7 5c       	subi	r28, 0xC7	; 199
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
	/* Configure AM/PM indicator pin as output */
	DIO_enumSetPinDir(DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT);
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	63 e0       	ldi	r22, 0x03	; 3
    46f2:	41 e0       	ldi	r20, 0x01	; 1
    46f4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <DIO_enumSetPinDir>
	DIO_enumWritePinVal(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	63 e0       	ldi	r22, 0x03	; 3
    46fc:	41 e0       	ldi	r20, 0x01	; 1
    46fe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enumWritePinVal>

	// Set callback function for TIMER2 overflow interrup
	TIMER_u8SetCallBack(ISR_TIMER2_OVF_MODE, TIMER2_OVF_VECTOR_ID);
    4702:	8f ea       	ldi	r24, 0xAF	; 175
    4704:	98 e3       	ldi	r25, 0x38	; 56
    4706:	65 e0       	ldi	r22, 0x05	; 5
    4708:	0e 94 38 0b 	call	0x1670	; 0x1670 <TIMER_u8SetCallBack>

	/* Initialize Keypad on PORTD */
	KPD_vInit();
    470c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KPD_vInit>

	/* Initialize CLCD on High Nibble for PORTA */
	CLCD_vInit();
    4710:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <CLCD_vInit>

	/* Enable Global Interrupts */
	GIE_vEnable();
    4714:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <GIE_vEnable>

	/* Initialize BUZ on PIN4 for PORTB */
	BUZ_vInit(BUZ0);
    4718:	60 91 33 03 	lds	r22, 0x0333
    471c:	70 91 34 03 	lds	r23, 0x0334
    4720:	80 91 35 03 	lds	r24, 0x0335
    4724:	0e 94 4f 22 	call	0x449e	; 0x449e <BUZ_vInit>

	/* Initialize seven-segment displays */
	SSD_vInitDataPort(seven_seg0);
    4728:	40 91 12 03 	lds	r20, 0x0312
    472c:	50 91 13 03 	lds	r21, 0x0313
    4730:	60 91 14 03 	lds	r22, 0x0314
    4734:	70 91 15 03 	lds	r23, 0x0315
    4738:	80 91 16 03 	lds	r24, 0x0316
    473c:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg1);
    4740:	40 91 17 03 	lds	r20, 0x0317
    4744:	50 91 18 03 	lds	r21, 0x0318
    4748:	60 91 19 03 	lds	r22, 0x0319
    474c:	70 91 1a 03 	lds	r23, 0x031A
    4750:	80 91 1b 03 	lds	r24, 0x031B
    4754:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg2);
    4758:	40 91 1c 03 	lds	r20, 0x031C
    475c:	50 91 1d 03 	lds	r21, 0x031D
    4760:	60 91 1e 03 	lds	r22, 0x031E
    4764:	70 91 1f 03 	lds	r23, 0x031F
    4768:	80 91 20 03 	lds	r24, 0x0320
    476c:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg3);
    4770:	40 91 21 03 	lds	r20, 0x0321
    4774:	50 91 22 03 	lds	r21, 0x0322
    4778:	60 91 23 03 	lds	r22, 0x0323
    477c:	70 91 24 03 	lds	r23, 0x0324
    4780:	80 91 25 03 	lds	r24, 0x0325
    4784:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg4);
    4788:	40 91 26 03 	lds	r20, 0x0326
    478c:	50 91 27 03 	lds	r21, 0x0327
    4790:	60 91 28 03 	lds	r22, 0x0328
    4794:	70 91 29 03 	lds	r23, 0x0329
    4798:	80 91 2a 03 	lds	r24, 0x032A
    479c:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>
	SSD_vInitDataPort(seven_seg5);
    47a0:	40 91 2b 03 	lds	r20, 0x032B
    47a4:	50 91 2c 03 	lds	r21, 0x032C
    47a8:	60 91 2d 03 	lds	r22, 0x032D
    47ac:	70 91 2e 03 	lds	r23, 0x032E
    47b0:	80 91 2f 03 	lds	r24, 0x032F
    47b4:	0e 94 bc 22 	call	0x4578	; 0x4578 <SSD_vInitDataPort>

	/*
	 * Initialize TIMER2 with external clock at 32.768 KHz
	 * Using division factor 128 to achieve 1 second intervals
	 */
	TIMER2_vInit();
    47b8:	0e 94 be 09 	call	0x137c	; 0x137c <TIMER2_vInit>

	/* Initialize ADC for temperature sensor */
	ADC_vInit();
    47bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <ADC_vInit>

	CLCD_vSendString("Press ON to");
    47c0:	80 e6       	ldi	r24, 0x60	; 96
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	61 e0       	ldi	r22, 0x01	; 1
    47cc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("Show Option");
    47d0:	8c e6       	ldi	r24, 0x6C	; 108
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	while(1)
	{
		press = KPD_u8GetPressed();
    47d8:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    47dc:	80 93 56 03 	sts	0x0356, r24
		if (press == 'A')
    47e0:	80 91 56 03 	lds	r24, 0x0356
    47e4:	81 34       	cpi	r24, 0x41	; 65
    47e6:	09 f0       	breq	.+2      	; 0x47ea <main+0x116>
    47e8:	70 c1       	rjmp	.+736    	; 0x4aca <main+0x3f6>
		{
			// Display menu options on CLCD
			CLCD_vClearScreen();
    47ea:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - Set time");
    47ee:	88 e7       	ldi	r24, 0x78	; 120
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	61 e0       	ldi	r22, 0x01	; 1
    47fa:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - Select mode");
    47fe:	85 e8       	ldi	r24, 0x85	; 133
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    4806:	83 e0       	ldi	r24, 0x03	; 3
    4808:	61 e0       	ldi	r22, 0x01	; 1
    480a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    480e:	85 e9       	ldi	r24, 0x95	; 149
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    4816:	84 e0       	ldi	r24, 0x04	; 4
    4818:	61 e0       	ldi	r22, 0x01	; 1
    481a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    481e:	83 ea       	ldi	r24, 0xA3	; 163
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    4826:	84 e0       	ldi	r24, 0x04	; 4
    4828:	6f e0       	ldi	r22, 0x0F	; 15
    482a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    482e:	8f ea       	ldi	r24, 0xAF	; 175
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

			do
			{
				press = KPD_u8GetPressed();
    4836:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    483a:	80 93 56 03 	sts	0x0356, r24
				if (press != NOTPRESSED)
    483e:	80 91 56 03 	lds	r24, 0x0356
    4842:	8f 3f       	cpi	r24, 0xFF	; 255
    4844:	09 f4       	brne	.+2      	; 0x4848 <main+0x174>
    4846:	3c c1       	rjmp	.+632    	; 0x4ac0 <main+0x3ec>
				{
					// Perform actions based on the pressed key
					switch(press)
    4848:	80 91 56 03 	lds	r24, 0x0356
    484c:	28 2f       	mov	r18, r24
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	ca 53       	subi	r28, 0x3A	; 58
    4852:	df 4f       	sbci	r29, 0xFF	; 255
    4854:	39 83       	std	Y+1, r19	; 0x01
    4856:	28 83       	st	Y, r18
    4858:	c6 5c       	subi	r28, 0xC6	; 198
    485a:	d0 40       	sbci	r29, 0x00	; 0
    485c:	ca 53       	subi	r28, 0x3A	; 58
    485e:	df 4f       	sbci	r29, 0xFF	; 255
    4860:	88 81       	ld	r24, Y
    4862:	99 81       	ldd	r25, Y+1	; 0x01
    4864:	c6 5c       	subi	r28, 0xC6	; 198
    4866:	d0 40       	sbci	r29, 0x00	; 0
    4868:	82 33       	cpi	r24, 0x32	; 50
    486a:	91 05       	cpc	r25, r1
    486c:	91 f1       	breq	.+100    	; 0x48d2 <main+0x1fe>
    486e:	ca 53       	subi	r28, 0x3A	; 58
    4870:	df 4f       	sbci	r29, 0xFF	; 255
    4872:	e8 81       	ld	r30, Y
    4874:	f9 81       	ldd	r31, Y+1	; 0x01
    4876:	c6 5c       	subi	r28, 0xC6	; 198
    4878:	d0 40       	sbci	r29, 0x00	; 0
    487a:	e3 33       	cpi	r30, 0x33	; 51
    487c:	f1 05       	cpc	r31, r1
    487e:	9c f4       	brge	.+38     	; 0x48a6 <main+0x1d2>
    4880:	ca 53       	subi	r28, 0x3A	; 58
    4882:	df 4f       	sbci	r29, 0xFF	; 255
    4884:	28 81       	ld	r18, Y
    4886:	39 81       	ldd	r19, Y+1	; 0x01
    4888:	c6 5c       	subi	r28, 0xC6	; 198
    488a:	d0 40       	sbci	r29, 0x00	; 0
    488c:	2a 32       	cpi	r18, 0x2A	; 42
    488e:	31 05       	cpc	r19, r1
    4890:	49 f1       	breq	.+82     	; 0x48e4 <main+0x210>
    4892:	ca 53       	subi	r28, 0x3A	; 58
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	88 81       	ld	r24, Y
    4898:	99 81       	ldd	r25, Y+1	; 0x01
    489a:	c6 5c       	subi	r28, 0xC6	; 198
    489c:	d0 40       	sbci	r29, 0x00	; 0
    489e:	81 33       	cpi	r24, 0x31	; 49
    48a0:	91 05       	cpc	r25, r1
    48a2:	a1 f0       	breq	.+40     	; 0x48cc <main+0x1f8>
    48a4:	2e c0       	rjmp	.+92     	; 0x4902 <main+0x22e>
    48a6:	ca 53       	subi	r28, 0x3A	; 58
    48a8:	df 4f       	sbci	r29, 0xFF	; 255
    48aa:	e8 81       	ld	r30, Y
    48ac:	f9 81       	ldd	r31, Y+1	; 0x01
    48ae:	c6 5c       	subi	r28, 0xC6	; 198
    48b0:	d0 40       	sbci	r29, 0x00	; 0
    48b2:	e3 33       	cpi	r30, 0x33	; 51
    48b4:	f1 05       	cpc	r31, r1
    48b6:	81 f0       	breq	.+32     	; 0x48d8 <main+0x204>
    48b8:	ca 53       	subi	r28, 0x3A	; 58
    48ba:	df 4f       	sbci	r29, 0xFF	; 255
    48bc:	28 81       	ld	r18, Y
    48be:	39 81       	ldd	r19, Y+1	; 0x01
    48c0:	c6 5c       	subi	r28, 0xC6	; 198
    48c2:	d0 40       	sbci	r29, 0x00	; 0
    48c4:	24 33       	cpi	r18, 0x34	; 52
    48c6:	31 05       	cpc	r19, r1
    48c8:	51 f0       	breq	.+20     	; 0x48de <main+0x20a>
    48ca:	1b c0       	rjmp	.+54     	; 0x4902 <main+0x22e>
					{
					case '1':
						Set_Time();
    48cc:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <Set_Time>
    48d0:	f7 c0       	rjmp	.+494    	; 0x4ac0 <main+0x3ec>
						break;

					case '2':
						Select_Mode();
    48d2:	0e 94 6e 33 	call	0x66dc	; 0x66dc <Select_Mode>
    48d6:	f4 c0       	rjmp	.+488    	; 0x4ac0 <main+0x3ec>
						break;

					case '3' :
						Set_Alarm();
    48d8:	0e 94 bd 34 	call	0x697a	; 0x697a <Set_Alarm>
    48dc:	f1 c0       	rjmp	.+482    	; 0x4ac0 <main+0x3ec>
						break;

					case '4':
						Get_Temp();
    48de:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <Get_Temp>
    48e2:	ee c0       	rjmp	.+476    	; 0x4ac0 <main+0x3ec>
						break;

					case '*' :
						CLCD_vClearScreen();
    48e4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("Press ON to");
    48e8:	80 e6       	ldi	r24, 0x60	; 96
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(2, 1);
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	61 e0       	ldi	r22, 0x01	; 1
    48f4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("Show Option");
    48f8:	8c e6       	ldi	r24, 0x6C	; 108
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    4900:	df c0       	rjmp	.+446    	; 0x4ac0 <main+0x3ec>
						break;

					default:
						// Invalid choice handling
						CLCD_vClearScreen();
    4902:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("wrong choice");
    4906:	86 eb       	ldi	r24, 0xB6	; 182
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    490e:	fe 01       	movw	r30, r28
    4910:	ef 53       	subi	r30, 0x3F	; 63
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	aa ef       	ldi	r26, 0xFA	; 250
    491a:	b3 e4       	ldi	r27, 0x43	; 67
    491c:	80 83       	st	Z, r24
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	a2 83       	std	Z+2, r26	; 0x02
    4922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4924:	8e 01       	movw	r16, r28
    4926:	03 54       	subi	r16, 0x43	; 67
    4928:	1f 4f       	sbci	r17, 0xFF	; 255
    492a:	fe 01       	movw	r30, r28
    492c:	ef 53       	subi	r30, 0x3F	; 63
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	60 81       	ld	r22, Z
    4932:	71 81       	ldd	r23, Z+1	; 0x01
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	4a ef       	ldi	r20, 0xFA	; 250
    493e:	54 e4       	ldi	r21, 0x44	; 68
    4940:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	f8 01       	movw	r30, r16
    494a:	80 83       	st	Z, r24
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	a2 83       	std	Z+2, r26	; 0x02
    4950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4952:	fe 01       	movw	r30, r28
    4954:	e3 54       	subi	r30, 0x43	; 67
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	82 81       	ldd	r24, Z+2	; 0x02
    495e:	93 81       	ldd	r25, Z+3	; 0x03
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e8       	ldi	r20, 0x80	; 128
    4966:	5f e3       	ldi	r21, 0x3F	; 63
    4968:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    496c:	88 23       	and	r24, r24
    496e:	44 f4       	brge	.+16     	; 0x4980 <main+0x2ac>
		__ticks = 1;
    4970:	fe 01       	movw	r30, r28
    4972:	e5 54       	subi	r30, 0x45	; 69
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	64 c0       	rjmp	.+200    	; 0x4a48 <main+0x374>
	else if (__tmp > 65535)
    4980:	fe 01       	movw	r30, r28
    4982:	e3 54       	subi	r30, 0x43	; 67
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	60 81       	ld	r22, Z
    4988:	71 81       	ldd	r23, Z+1	; 0x01
    498a:	82 81       	ldd	r24, Z+2	; 0x02
    498c:	93 81       	ldd	r25, Z+3	; 0x03
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	3f ef       	ldi	r19, 0xFF	; 255
    4992:	4f e7       	ldi	r20, 0x7F	; 127
    4994:	57 e4       	ldi	r21, 0x47	; 71
    4996:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    499a:	18 16       	cp	r1, r24
    499c:	0c f0       	brlt	.+2      	; 0x49a0 <main+0x2cc>
    499e:	43 c0       	rjmp	.+134    	; 0x4a26 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a0:	fe 01       	movw	r30, r28
    49a2:	ef 53       	subi	r30, 0x3F	; 63
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	60 81       	ld	r22, Z
    49a8:	71 81       	ldd	r23, Z+1	; 0x01
    49aa:	82 81       	ldd	r24, Z+2	; 0x02
    49ac:	93 81       	ldd	r25, Z+3	; 0x03
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	40 e2       	ldi	r20, 0x20	; 32
    49b4:	51 e4       	ldi	r21, 0x41	; 65
    49b6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	8e 01       	movw	r16, r28
    49c0:	05 54       	subi	r16, 0x45	; 69
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	bc 01       	movw	r22, r24
    49c6:	cd 01       	movw	r24, r26
    49c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	f8 01       	movw	r30, r16
    49d2:	91 83       	std	Z+1, r25	; 0x01
    49d4:	80 83       	st	Z, r24
    49d6:	1f c0       	rjmp	.+62     	; 0x4a16 <main+0x342>
    49d8:	fe 01       	movw	r30, r28
    49da:	e7 54       	subi	r30, 0x47	; 71
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	88 ec       	ldi	r24, 0xC8	; 200
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	91 83       	std	Z+1, r25	; 0x01
    49e4:	80 83       	st	Z, r24
    49e6:	fe 01       	movw	r30, r28
    49e8:	e7 54       	subi	r30, 0x47	; 71
    49ea:	ff 4f       	sbci	r31, 0xFF	; 255
    49ec:	80 81       	ld	r24, Z
    49ee:	91 81       	ldd	r25, Z+1	; 0x01
    49f0:	01 97       	sbiw	r24, 0x01	; 1
    49f2:	f1 f7       	brne	.-4      	; 0x49f0 <main+0x31c>
    49f4:	fe 01       	movw	r30, r28
    49f6:	e7 54       	subi	r30, 0x47	; 71
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	91 83       	std	Z+1, r25	; 0x01
    49fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fe:	de 01       	movw	r26, r28
    4a00:	a5 54       	subi	r26, 0x45	; 69
    4a02:	bf 4f       	sbci	r27, 0xFF	; 255
    4a04:	fe 01       	movw	r30, r28
    4a06:	e5 54       	subi	r30, 0x45	; 69
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	80 81       	ld	r24, Z
    4a0c:	91 81       	ldd	r25, Z+1	; 0x01
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	11 96       	adiw	r26, 0x01	; 1
    4a12:	9c 93       	st	X, r25
    4a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a16:	fe 01       	movw	r30, r28
    4a18:	e5 54       	subi	r30, 0x45	; 69
    4a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1c:	80 81       	ld	r24, Z
    4a1e:	91 81       	ldd	r25, Z+1	; 0x01
    4a20:	00 97       	sbiw	r24, 0x00	; 0
    4a22:	d1 f6       	brne	.-76     	; 0x49d8 <main+0x304>
    4a24:	27 c0       	rjmp	.+78     	; 0x4a74 <main+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a26:	8e 01       	movw	r16, r28
    4a28:	05 54       	subi	r16, 0x45	; 69
    4a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e3 54       	subi	r30, 0x43	; 67
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	93 81       	ldd	r25, Z+3	; 0x03
    4a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	f8 01       	movw	r30, r16
    4a44:	91 83       	std	Z+1, r25	; 0x01
    4a46:	80 83       	st	Z, r24
    4a48:	de 01       	movw	r26, r28
    4a4a:	a9 54       	subi	r26, 0x49	; 73
    4a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a4e:	fe 01       	movw	r30, r28
    4a50:	e5 54       	subi	r30, 0x45	; 69
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	80 81       	ld	r24, Z
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	8d 93       	st	X+, r24
    4a5a:	9c 93       	st	X, r25
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e9 54       	subi	r30, 0x49	; 73
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	80 81       	ld	r24, Z
    4a64:	91 81       	ldd	r25, Z+1	; 0x01
    4a66:	01 97       	sbiw	r24, 0x01	; 1
    4a68:	f1 f7       	brne	.-4      	; 0x4a66 <main+0x392>
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	e9 54       	subi	r30, 0x49	; 73
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_vClearScreen();
    4a74:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
						CLCD_vSendString("1 - set time");
    4a78:	83 ec       	ldi	r24, 0xC3	; 195
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(2,1);
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	61 e0       	ldi	r22, 0x01	; 1
    4a84:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("2 - select mode");
    4a88:	80 ed       	ldi	r24, 0xD0	; 208
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(3, 1);
    4a90:	83 e0       	ldi	r24, 0x03	; 3
    4a92:	61 e0       	ldi	r22, 0x01	; 1
    4a94:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("3 - Set Alarm");
    4a98:	85 e9       	ldi	r24, 0x95	; 149
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(4, 1);
    4aa0:	84 e0       	ldi	r24, 0x04	; 4
    4aa2:	61 e0       	ldi	r22, 0x01	; 1
    4aa4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("4 - Weather");
    4aa8:	83 ea       	ldi	r24, 0xA3	; 163
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						CLCD_vSetPosition(4, 15);
    4ab0:	84 e0       	ldi	r24, 0x04	; 4
    4ab2:	6f e0       	ldi	r22, 0x0F	; 15
    4ab4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
						CLCD_vSendString("X:EXIT");
    4ab8:	8f ea       	ldi	r24, 0xAF	; 175
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
						break;
					}
				}
			}while (press != '*' );
    4ac0:	80 91 56 03 	lds	r24, 0x0356
    4ac4:	8a 32       	cpi	r24, 0x2A	; 42
    4ac6:	09 f0       	breq	.+2      	; 0x4aca <main+0x3f6>
    4ac8:	b6 ce       	rjmp	.-660    	; 0x4836 <main+0x162>

		}
		/* Display time on seven-segment displays using POV theorem */

		// Display seconds (units)
		SSD_vDisable(seven_seg5);
    4aca:	40 91 2b 03 	lds	r20, 0x032B
    4ace:	50 91 2c 03 	lds	r21, 0x032C
    4ad2:	60 91 2d 03 	lds	r22, 0x032D
    4ad6:	70 91 2e 03 	lds	r23, 0x032E
    4ada:	80 91 2f 03 	lds	r24, 0x032F
    4ade:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg0);
    4ae2:	40 91 12 03 	lds	r20, 0x0312
    4ae6:	50 91 13 03 	lds	r21, 0x0313
    4aea:	60 91 14 03 	lds	r22, 0x0314
    4aee:	70 91 15 03 	lds	r23, 0x0315
    4af2:	80 91 16 03 	lds	r24, 0x0316
    4af6:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg0, Second%10);
    4afa:	80 91 53 03 	lds	r24, 0x0353
    4afe:	9a e0       	ldi	r25, 0x0A	; 10
    4b00:	69 2f       	mov	r22, r25
    4b02:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    4b06:	89 2f       	mov	r24, r25
    4b08:	98 2f       	mov	r25, r24
    4b0a:	40 91 12 03 	lds	r20, 0x0312
    4b0e:	50 91 13 03 	lds	r21, 0x0313
    4b12:	60 91 14 03 	lds	r22, 0x0314
    4b16:	70 91 15 03 	lds	r23, 0x0315
    4b1a:	80 91 16 03 	lds	r24, 0x0316
    4b1e:	29 2f       	mov	r18, r25
    4b20:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4b24:	fe 01       	movw	r30, r28
    4b26:	ed 54       	subi	r30, 0x4D	; 77
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	a0 ea       	ldi	r26, 0xA0	; 160
    4b30:	b0 e4       	ldi	r27, 0x40	; 64
    4b32:	80 83       	st	Z, r24
    4b34:	91 83       	std	Z+1, r25	; 0x01
    4b36:	a2 83       	std	Z+2, r26	; 0x02
    4b38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3a:	8e 01       	movw	r16, r28
    4b3c:	01 55       	subi	r16, 0x51	; 81
    4b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b40:	fe 01       	movw	r30, r28
    4b42:	ed 54       	subi	r30, 0x4D	; 77
    4b44:	ff 4f       	sbci	r31, 0xFF	; 255
    4b46:	60 81       	ld	r22, Z
    4b48:	71 81       	ldd	r23, Z+1	; 0x01
    4b4a:	82 81       	ldd	r24, Z+2	; 0x02
    4b4c:	93 81       	ldd	r25, Z+3	; 0x03
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	30 e0       	ldi	r19, 0x00	; 0
    4b52:	4a ef       	ldi	r20, 0xFA	; 250
    4b54:	54 e4       	ldi	r21, 0x44	; 68
    4b56:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	f8 01       	movw	r30, r16
    4b60:	80 83       	st	Z, r24
    4b62:	91 83       	std	Z+1, r25	; 0x01
    4b64:	a2 83       	std	Z+2, r26	; 0x02
    4b66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e1 55       	subi	r30, 0x51	; 81
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	60 81       	ld	r22, Z
    4b70:	71 81       	ldd	r23, Z+1	; 0x01
    4b72:	82 81       	ldd	r24, Z+2	; 0x02
    4b74:	93 81       	ldd	r25, Z+3	; 0x03
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	40 e8       	ldi	r20, 0x80	; 128
    4b7c:	5f e3       	ldi	r21, 0x3F	; 63
    4b7e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4b82:	88 23       	and	r24, r24
    4b84:	44 f4       	brge	.+16     	; 0x4b96 <main+0x4c2>
		__ticks = 1;
    4b86:	fe 01       	movw	r30, r28
    4b88:	e3 55       	subi	r30, 0x53	; 83
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	91 83       	std	Z+1, r25	; 0x01
    4b92:	80 83       	st	Z, r24
    4b94:	64 c0       	rjmp	.+200    	; 0x4c5e <main+0x58a>
	else if (__tmp > 65535)
    4b96:	fe 01       	movw	r30, r28
    4b98:	e1 55       	subi	r30, 0x51	; 81
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	60 81       	ld	r22, Z
    4b9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ba0:	82 81       	ldd	r24, Z+2	; 0x02
    4ba2:	93 81       	ldd	r25, Z+3	; 0x03
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	3f ef       	ldi	r19, 0xFF	; 255
    4ba8:	4f e7       	ldi	r20, 0x7F	; 127
    4baa:	57 e4       	ldi	r21, 0x47	; 71
    4bac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4bb0:	18 16       	cp	r1, r24
    4bb2:	0c f0       	brlt	.+2      	; 0x4bb6 <main+0x4e2>
    4bb4:	43 c0       	rjmp	.+134    	; 0x4c3c <main+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	ed 54       	subi	r30, 0x4D	; 77
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	60 81       	ld	r22, Z
    4bbe:	71 81       	ldd	r23, Z+1	; 0x01
    4bc0:	82 81       	ldd	r24, Z+2	; 0x02
    4bc2:	93 81       	ldd	r25, Z+3	; 0x03
    4bc4:	20 e0       	ldi	r18, 0x00	; 0
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	40 e2       	ldi	r20, 0x20	; 32
    4bca:	51 e4       	ldi	r21, 0x41	; 65
    4bcc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	cb 01       	movw	r24, r22
    4bd4:	8e 01       	movw	r16, r28
    4bd6:	03 55       	subi	r16, 0x53	; 83
    4bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bda:	bc 01       	movw	r22, r24
    4bdc:	cd 01       	movw	r24, r26
    4bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	f8 01       	movw	r30, r16
    4be8:	91 83       	std	Z+1, r25	; 0x01
    4bea:	80 83       	st	Z, r24
    4bec:	1f c0       	rjmp	.+62     	; 0x4c2c <main+0x558>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e5 55       	subi	r30, 0x55	; 85
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	88 ec       	ldi	r24, 0xC8	; 200
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	91 83       	std	Z+1, r25	; 0x01
    4bfa:	80 83       	st	Z, r24
    4bfc:	fe 01       	movw	r30, r28
    4bfe:	e5 55       	subi	r30, 0x55	; 85
    4c00:	ff 4f       	sbci	r31, 0xFF	; 255
    4c02:	80 81       	ld	r24, Z
    4c04:	91 81       	ldd	r25, Z+1	; 0x01
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <main+0x532>
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	e5 55       	subi	r30, 0x55	; 85
    4c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c10:	91 83       	std	Z+1, r25	; 0x01
    4c12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c14:	de 01       	movw	r26, r28
    4c16:	a3 55       	subi	r26, 0x53	; 83
    4c18:	bf 4f       	sbci	r27, 0xFF	; 255
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	e3 55       	subi	r30, 0x53	; 83
    4c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c20:	80 81       	ld	r24, Z
    4c22:	91 81       	ldd	r25, Z+1	; 0x01
    4c24:	01 97       	sbiw	r24, 0x01	; 1
    4c26:	11 96       	adiw	r26, 0x01	; 1
    4c28:	9c 93       	st	X, r25
    4c2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	e3 55       	subi	r30, 0x53	; 83
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	80 81       	ld	r24, Z
    4c34:	91 81       	ldd	r25, Z+1	; 0x01
    4c36:	00 97       	sbiw	r24, 0x00	; 0
    4c38:	d1 f6       	brne	.-76     	; 0x4bee <main+0x51a>
    4c3a:	27 c0       	rjmp	.+78     	; 0x4c8a <main+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3c:	8e 01       	movw	r16, r28
    4c3e:	03 55       	subi	r16, 0x53	; 83
    4c40:	1f 4f       	sbci	r17, 0xFF	; 255
    4c42:	fe 01       	movw	r30, r28
    4c44:	e1 55       	subi	r30, 0x51	; 81
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	60 81       	ld	r22, Z
    4c4a:	71 81       	ldd	r23, Z+1	; 0x01
    4c4c:	82 81       	ldd	r24, Z+2	; 0x02
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c54:	dc 01       	movw	r26, r24
    4c56:	cb 01       	movw	r24, r22
    4c58:	f8 01       	movw	r30, r16
    4c5a:	91 83       	std	Z+1, r25	; 0x01
    4c5c:	80 83       	st	Z, r24
    4c5e:	de 01       	movw	r26, r28
    4c60:	a7 55       	subi	r26, 0x57	; 87
    4c62:	bf 4f       	sbci	r27, 0xFF	; 255
    4c64:	fe 01       	movw	r30, r28
    4c66:	e3 55       	subi	r30, 0x53	; 83
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	80 81       	ld	r24, Z
    4c6c:	91 81       	ldd	r25, Z+1	; 0x01
    4c6e:	8d 93       	st	X+, r24
    4c70:	9c 93       	st	X, r25
    4c72:	fe 01       	movw	r30, r28
    4c74:	e7 55       	subi	r30, 0x57	; 87
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	80 81       	ld	r24, Z
    4c7a:	91 81       	ldd	r25, Z+1	; 0x01
    4c7c:	01 97       	sbiw	r24, 0x01	; 1
    4c7e:	f1 f7       	brne	.-4      	; 0x4c7c <main+0x5a8>
    4c80:	fe 01       	movw	r30, r28
    4c82:	e7 55       	subi	r30, 0x57	; 87
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display seconds (tens)
		SSD_vDisable(seven_seg0);
    4c8a:	40 91 12 03 	lds	r20, 0x0312
    4c8e:	50 91 13 03 	lds	r21, 0x0313
    4c92:	60 91 14 03 	lds	r22, 0x0314
    4c96:	70 91 15 03 	lds	r23, 0x0315
    4c9a:	80 91 16 03 	lds	r24, 0x0316
    4c9e:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg1);
    4ca2:	40 91 17 03 	lds	r20, 0x0317
    4ca6:	50 91 18 03 	lds	r21, 0x0318
    4caa:	60 91 19 03 	lds	r22, 0x0319
    4cae:	70 91 1a 03 	lds	r23, 0x031A
    4cb2:	80 91 1b 03 	lds	r24, 0x031B
    4cb6:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg1, Second/10);
    4cba:	80 91 53 03 	lds	r24, 0x0353
    4cbe:	9a e0       	ldi	r25, 0x0A	; 10
    4cc0:	69 2f       	mov	r22, r25
    4cc2:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    4cc6:	98 2f       	mov	r25, r24
    4cc8:	40 91 17 03 	lds	r20, 0x0317
    4ccc:	50 91 18 03 	lds	r21, 0x0318
    4cd0:	60 91 19 03 	lds	r22, 0x0319
    4cd4:	70 91 1a 03 	lds	r23, 0x031A
    4cd8:	80 91 1b 03 	lds	r24, 0x031B
    4cdc:	29 2f       	mov	r18, r25
    4cde:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	eb 55       	subi	r30, 0x5B	; 91
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	a0 ea       	ldi	r26, 0xA0	; 160
    4cee:	b0 e4       	ldi	r27, 0x40	; 64
    4cf0:	80 83       	st	Z, r24
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	a2 83       	std	Z+2, r26	; 0x02
    4cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf8:	8e 01       	movw	r16, r28
    4cfa:	0f 55       	subi	r16, 0x5F	; 95
    4cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfe:	fe 01       	movw	r30, r28
    4d00:	eb 55       	subi	r30, 0x5B	; 91
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	60 81       	ld	r22, Z
    4d06:	71 81       	ldd	r23, Z+1	; 0x01
    4d08:	82 81       	ldd	r24, Z+2	; 0x02
    4d0a:	93 81       	ldd	r25, Z+3	; 0x03
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	4a ef       	ldi	r20, 0xFA	; 250
    4d12:	54 e4       	ldi	r21, 0x44	; 68
    4d14:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	f8 01       	movw	r30, r16
    4d1e:	80 83       	st	Z, r24
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	a2 83       	std	Z+2, r26	; 0x02
    4d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d26:	fe 01       	movw	r30, r28
    4d28:	ef 55       	subi	r30, 0x5F	; 95
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	60 81       	ld	r22, Z
    4d2e:	71 81       	ldd	r23, Z+1	; 0x01
    4d30:	82 81       	ldd	r24, Z+2	; 0x02
    4d32:	93 81       	ldd	r25, Z+3	; 0x03
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e8       	ldi	r20, 0x80	; 128
    4d3a:	5f e3       	ldi	r21, 0x3F	; 63
    4d3c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4d40:	88 23       	and	r24, r24
    4d42:	44 f4       	brge	.+16     	; 0x4d54 <main+0x680>
		__ticks = 1;
    4d44:	fe 01       	movw	r30, r28
    4d46:	e1 56       	subi	r30, 0x61	; 97
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	80 83       	st	Z, r24
    4d52:	64 c0       	rjmp	.+200    	; 0x4e1c <main+0x748>
	else if (__tmp > 65535)
    4d54:	fe 01       	movw	r30, r28
    4d56:	ef 55       	subi	r30, 0x5F	; 95
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	60 81       	ld	r22, Z
    4d5c:	71 81       	ldd	r23, Z+1	; 0x01
    4d5e:	82 81       	ldd	r24, Z+2	; 0x02
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	3f ef       	ldi	r19, 0xFF	; 255
    4d66:	4f e7       	ldi	r20, 0x7F	; 127
    4d68:	57 e4       	ldi	r21, 0x47	; 71
    4d6a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4d6e:	18 16       	cp	r1, r24
    4d70:	0c f0       	brlt	.+2      	; 0x4d74 <main+0x6a0>
    4d72:	43 c0       	rjmp	.+134    	; 0x4dfa <main+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d74:	fe 01       	movw	r30, r28
    4d76:	eb 55       	subi	r30, 0x5B	; 91
    4d78:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7a:	60 81       	ld	r22, Z
    4d7c:	71 81       	ldd	r23, Z+1	; 0x01
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	40 e2       	ldi	r20, 0x20	; 32
    4d88:	51 e4       	ldi	r21, 0x41	; 65
    4d8a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	8e 01       	movw	r16, r28
    4d94:	01 56       	subi	r16, 0x61	; 97
    4d96:	1f 4f       	sbci	r17, 0xFF	; 255
    4d98:	bc 01       	movw	r22, r24
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	f8 01       	movw	r30, r16
    4da6:	91 83       	std	Z+1, r25	; 0x01
    4da8:	80 83       	st	Z, r24
    4daa:	1f c0       	rjmp	.+62     	; 0x4dea <main+0x716>
    4dac:	fe 01       	movw	r30, r28
    4dae:	e3 56       	subi	r30, 0x63	; 99
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	88 ec       	ldi	r24, 0xC8	; 200
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	91 83       	std	Z+1, r25	; 0x01
    4db8:	80 83       	st	Z, r24
    4dba:	fe 01       	movw	r30, r28
    4dbc:	e3 56       	subi	r30, 0x63	; 99
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	80 81       	ld	r24, Z
    4dc2:	91 81       	ldd	r25, Z+1	; 0x01
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <main+0x6f0>
    4dc8:	fe 01       	movw	r30, r28
    4dca:	e3 56       	subi	r30, 0x63	; 99
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	91 83       	std	Z+1, r25	; 0x01
    4dd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd2:	de 01       	movw	r26, r28
    4dd4:	a1 56       	subi	r26, 0x61	; 97
    4dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e1 56       	subi	r30, 0x61	; 97
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	11 96       	adiw	r26, 0x01	; 1
    4de6:	9c 93       	st	X, r25
    4de8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	fe 01       	movw	r30, r28
    4dec:	e1 56       	subi	r30, 0x61	; 97
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 81       	ld	r24, Z
    4df2:	91 81       	ldd	r25, Z+1	; 0x01
    4df4:	00 97       	sbiw	r24, 0x00	; 0
    4df6:	d1 f6       	brne	.-76     	; 0x4dac <main+0x6d8>
    4df8:	27 c0       	rjmp	.+78     	; 0x4e48 <main+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfa:	8e 01       	movw	r16, r28
    4dfc:	01 56       	subi	r16, 0x61	; 97
    4dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    4e00:	fe 01       	movw	r30, r28
    4e02:	ef 55       	subi	r30, 0x5F	; 95
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	60 81       	ld	r22, Z
    4e08:	71 81       	ldd	r23, Z+1	; 0x01
    4e0a:	82 81       	ldd	r24, Z+2	; 0x02
    4e0c:	93 81       	ldd	r25, Z+3	; 0x03
    4e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	f8 01       	movw	r30, r16
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	de 01       	movw	r26, r28
    4e1e:	a5 56       	subi	r26, 0x65	; 101
    4e20:	bf 4f       	sbci	r27, 0xFF	; 255
    4e22:	fe 01       	movw	r30, r28
    4e24:	e1 56       	subi	r30, 0x61	; 97
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	80 81       	ld	r24, Z
    4e2a:	91 81       	ldd	r25, Z+1	; 0x01
    4e2c:	8d 93       	st	X+, r24
    4e2e:	9c 93       	st	X, r25
    4e30:	fe 01       	movw	r30, r28
    4e32:	e5 56       	subi	r30, 0x65	; 101
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	80 81       	ld	r24, Z
    4e38:	91 81       	ldd	r25, Z+1	; 0x01
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	f1 f7       	brne	.-4      	; 0x4e3a <main+0x766>
    4e3e:	fe 01       	movw	r30, r28
    4e40:	e5 56       	subi	r30, 0x65	; 101
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	91 83       	std	Z+1, r25	; 0x01
    4e46:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (units)
		SSD_vDisable(seven_seg1);
    4e48:	40 91 17 03 	lds	r20, 0x0317
    4e4c:	50 91 18 03 	lds	r21, 0x0318
    4e50:	60 91 19 03 	lds	r22, 0x0319
    4e54:	70 91 1a 03 	lds	r23, 0x031A
    4e58:	80 91 1b 03 	lds	r24, 0x031B
    4e5c:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg2);
    4e60:	40 91 1c 03 	lds	r20, 0x031C
    4e64:	50 91 1d 03 	lds	r21, 0x031D
    4e68:	60 91 1e 03 	lds	r22, 0x031E
    4e6c:	70 91 1f 03 	lds	r23, 0x031F
    4e70:	80 91 20 03 	lds	r24, 0x0320
    4e74:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg2, Minute%10);
    4e78:	80 91 52 03 	lds	r24, 0x0352
    4e7c:	9a e0       	ldi	r25, 0x0A	; 10
    4e7e:	69 2f       	mov	r22, r25
    4e80:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    4e84:	89 2f       	mov	r24, r25
    4e86:	98 2f       	mov	r25, r24
    4e88:	40 91 1c 03 	lds	r20, 0x031C
    4e8c:	50 91 1d 03 	lds	r21, 0x031D
    4e90:	60 91 1e 03 	lds	r22, 0x031E
    4e94:	70 91 1f 03 	lds	r23, 0x031F
    4e98:	80 91 20 03 	lds	r24, 0x0320
    4e9c:	29 2f       	mov	r18, r25
    4e9e:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e9 56       	subi	r30, 0x69	; 105
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	a0 ea       	ldi	r26, 0xA0	; 160
    4eae:	b0 e4       	ldi	r27, 0x40	; 64
    4eb0:	80 83       	st	Z, r24
    4eb2:	91 83       	std	Z+1, r25	; 0x01
    4eb4:	a2 83       	std	Z+2, r26	; 0x02
    4eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eb8:	8e 01       	movw	r16, r28
    4eba:	0d 56       	subi	r16, 0x6D	; 109
    4ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e9 56       	subi	r30, 0x69	; 105
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	60 81       	ld	r22, Z
    4ec6:	71 81       	ldd	r23, Z+1	; 0x01
    4ec8:	82 81       	ldd	r24, Z+2	; 0x02
    4eca:	93 81       	ldd	r25, Z+3	; 0x03
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	4a ef       	ldi	r20, 0xFA	; 250
    4ed2:	54 e4       	ldi	r21, 0x44	; 68
    4ed4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	f8 01       	movw	r30, r16
    4ede:	80 83       	st	Z, r24
    4ee0:	91 83       	std	Z+1, r25	; 0x01
    4ee2:	a2 83       	std	Z+2, r26	; 0x02
    4ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	ed 56       	subi	r30, 0x6D	; 109
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e8       	ldi	r20, 0x80	; 128
    4efa:	5f e3       	ldi	r21, 0x3F	; 63
    4efc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4f00:	88 23       	and	r24, r24
    4f02:	44 f4       	brge	.+16     	; 0x4f14 <main+0x840>
		__ticks = 1;
    4f04:	fe 01       	movw	r30, r28
    4f06:	ef 56       	subi	r30, 0x6F	; 111
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	91 83       	std	Z+1, r25	; 0x01
    4f10:	80 83       	st	Z, r24
    4f12:	64 c0       	rjmp	.+200    	; 0x4fdc <main+0x908>
	else if (__tmp > 65535)
    4f14:	fe 01       	movw	r30, r28
    4f16:	ed 56       	subi	r30, 0x6D	; 109
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	60 81       	ld	r22, Z
    4f1c:	71 81       	ldd	r23, Z+1	; 0x01
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	93 81       	ldd	r25, Z+3	; 0x03
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	3f ef       	ldi	r19, 0xFF	; 255
    4f26:	4f e7       	ldi	r20, 0x7F	; 127
    4f28:	57 e4       	ldi	r21, 0x47	; 71
    4f2a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4f2e:	18 16       	cp	r1, r24
    4f30:	0c f0       	brlt	.+2      	; 0x4f34 <main+0x860>
    4f32:	43 c0       	rjmp	.+134    	; 0x4fba <main+0x8e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f34:	fe 01       	movw	r30, r28
    4f36:	e9 56       	subi	r30, 0x69	; 105
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	60 81       	ld	r22, Z
    4f3c:	71 81       	ldd	r23, Z+1	; 0x01
    4f3e:	82 81       	ldd	r24, Z+2	; 0x02
    4f40:	93 81       	ldd	r25, Z+3	; 0x03
    4f42:	20 e0       	ldi	r18, 0x00	; 0
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	40 e2       	ldi	r20, 0x20	; 32
    4f48:	51 e4       	ldi	r21, 0x41	; 65
    4f4a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	8e 01       	movw	r16, r28
    4f54:	0f 56       	subi	r16, 0x6F	; 111
    4f56:	1f 4f       	sbci	r17, 0xFF	; 255
    4f58:	bc 01       	movw	r22, r24
    4f5a:	cd 01       	movw	r24, r26
    4f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	f8 01       	movw	r30, r16
    4f66:	91 83       	std	Z+1, r25	; 0x01
    4f68:	80 83       	st	Z, r24
    4f6a:	1f c0       	rjmp	.+62     	; 0x4faa <main+0x8d6>
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	e1 57       	subi	r30, 0x71	; 113
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	88 ec       	ldi	r24, 0xC8	; 200
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	e1 57       	subi	r30, 0x71	; 113
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	80 81       	ld	r24, Z
    4f82:	91 81       	ldd	r25, Z+1	; 0x01
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	f1 f7       	brne	.-4      	; 0x4f84 <main+0x8b0>
    4f88:	fe 01       	movw	r30, r28
    4f8a:	e1 57       	subi	r30, 0x71	; 113
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	91 83       	std	Z+1, r25	; 0x01
    4f90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f92:	de 01       	movw	r26, r28
    4f94:	af 56       	subi	r26, 0x6F	; 111
    4f96:	bf 4f       	sbci	r27, 0xFF	; 255
    4f98:	fe 01       	movw	r30, r28
    4f9a:	ef 56       	subi	r30, 0x6F	; 111
    4f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9e:	80 81       	ld	r24, Z
    4fa0:	91 81       	ldd	r25, Z+1	; 0x01
    4fa2:	01 97       	sbiw	r24, 0x01	; 1
    4fa4:	11 96       	adiw	r26, 0x01	; 1
    4fa6:	9c 93       	st	X, r25
    4fa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4faa:	fe 01       	movw	r30, r28
    4fac:	ef 56       	subi	r30, 0x6F	; 111
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	80 81       	ld	r24, Z
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	00 97       	sbiw	r24, 0x00	; 0
    4fb6:	d1 f6       	brne	.-76     	; 0x4f6c <main+0x898>
    4fb8:	27 c0       	rjmp	.+78     	; 0x5008 <main+0x934>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fba:	8e 01       	movw	r16, r28
    4fbc:	0f 56       	subi	r16, 0x6F	; 111
    4fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc0:	fe 01       	movw	r30, r28
    4fc2:	ed 56       	subi	r30, 0x6D	; 109
    4fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc6:	60 81       	ld	r22, Z
    4fc8:	71 81       	ldd	r23, Z+1	; 0x01
    4fca:	82 81       	ldd	r24, Z+2	; 0x02
    4fcc:	93 81       	ldd	r25, Z+3	; 0x03
    4fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	f8 01       	movw	r30, r16
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
    4fdc:	de 01       	movw	r26, r28
    4fde:	a3 57       	subi	r26, 0x73	; 115
    4fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	ef 56       	subi	r30, 0x6F	; 111
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	80 81       	ld	r24, Z
    4fea:	91 81       	ldd	r25, Z+1	; 0x01
    4fec:	8d 93       	st	X+, r24
    4fee:	9c 93       	st	X, r25
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e3 57       	subi	r30, 0x73	; 115
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	f1 f7       	brne	.-4      	; 0x4ffa <main+0x926>
    4ffe:	fe 01       	movw	r30, r28
    5000:	e3 57       	subi	r30, 0x73	; 115
    5002:	ff 4f       	sbci	r31, 0xFF	; 255
    5004:	91 83       	std	Z+1, r25	; 0x01
    5006:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display minutes (tens)
		SSD_vDisable(seven_seg2);
    5008:	40 91 1c 03 	lds	r20, 0x031C
    500c:	50 91 1d 03 	lds	r21, 0x031D
    5010:	60 91 1e 03 	lds	r22, 0x031E
    5014:	70 91 1f 03 	lds	r23, 0x031F
    5018:	80 91 20 03 	lds	r24, 0x0320
    501c:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg3);
    5020:	40 91 21 03 	lds	r20, 0x0321
    5024:	50 91 22 03 	lds	r21, 0x0322
    5028:	60 91 23 03 	lds	r22, 0x0323
    502c:	70 91 24 03 	lds	r23, 0x0324
    5030:	80 91 25 03 	lds	r24, 0x0325
    5034:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg3, Minute/10);
    5038:	80 91 52 03 	lds	r24, 0x0352
    503c:	9a e0       	ldi	r25, 0x0A	; 10
    503e:	69 2f       	mov	r22, r25
    5040:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5044:	98 2f       	mov	r25, r24
    5046:	40 91 21 03 	lds	r20, 0x0321
    504a:	50 91 22 03 	lds	r21, 0x0322
    504e:	60 91 23 03 	lds	r22, 0x0323
    5052:	70 91 24 03 	lds	r23, 0x0324
    5056:	80 91 25 03 	lds	r24, 0x0325
    505a:	29 2f       	mov	r18, r25
    505c:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5060:	fe 01       	movw	r30, r28
    5062:	e7 57       	subi	r30, 0x77	; 119
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	a0 ea       	ldi	r26, 0xA0	; 160
    506c:	b0 e4       	ldi	r27, 0x40	; 64
    506e:	80 83       	st	Z, r24
    5070:	91 83       	std	Z+1, r25	; 0x01
    5072:	a2 83       	std	Z+2, r26	; 0x02
    5074:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5076:	8e 01       	movw	r16, r28
    5078:	0b 57       	subi	r16, 0x7B	; 123
    507a:	1f 4f       	sbci	r17, 0xFF	; 255
    507c:	fe 01       	movw	r30, r28
    507e:	e7 57       	subi	r30, 0x77	; 119
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	60 81       	ld	r22, Z
    5084:	71 81       	ldd	r23, Z+1	; 0x01
    5086:	82 81       	ldd	r24, Z+2	; 0x02
    5088:	93 81       	ldd	r25, Z+3	; 0x03
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	4a ef       	ldi	r20, 0xFA	; 250
    5090:	54 e4       	ldi	r21, 0x44	; 68
    5092:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	f8 01       	movw	r30, r16
    509c:	80 83       	st	Z, r24
    509e:	91 83       	std	Z+1, r25	; 0x01
    50a0:	a2 83       	std	Z+2, r26	; 0x02
    50a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50a4:	fe 01       	movw	r30, r28
    50a6:	eb 57       	subi	r30, 0x7B	; 123
    50a8:	ff 4f       	sbci	r31, 0xFF	; 255
    50aa:	60 81       	ld	r22, Z
    50ac:	71 81       	ldd	r23, Z+1	; 0x01
    50ae:	82 81       	ldd	r24, Z+2	; 0x02
    50b0:	93 81       	ldd	r25, Z+3	; 0x03
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	40 e8       	ldi	r20, 0x80	; 128
    50b8:	5f e3       	ldi	r21, 0x3F	; 63
    50ba:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    50be:	88 23       	and	r24, r24
    50c0:	44 f4       	brge	.+16     	; 0x50d2 <main+0x9fe>
		__ticks = 1;
    50c2:	fe 01       	movw	r30, r28
    50c4:	ed 57       	subi	r30, 0x7D	; 125
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	91 83       	std	Z+1, r25	; 0x01
    50ce:	80 83       	st	Z, r24
    50d0:	64 c0       	rjmp	.+200    	; 0x519a <main+0xac6>
	else if (__tmp > 65535)
    50d2:	fe 01       	movw	r30, r28
    50d4:	eb 57       	subi	r30, 0x7B	; 123
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	60 81       	ld	r22, Z
    50da:	71 81       	ldd	r23, Z+1	; 0x01
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	93 81       	ldd	r25, Z+3	; 0x03
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	3f ef       	ldi	r19, 0xFF	; 255
    50e4:	4f e7       	ldi	r20, 0x7F	; 127
    50e6:	57 e4       	ldi	r21, 0x47	; 71
    50e8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    50ec:	18 16       	cp	r1, r24
    50ee:	0c f0       	brlt	.+2      	; 0x50f2 <main+0xa1e>
    50f0:	43 c0       	rjmp	.+134    	; 0x5178 <main+0xaa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f2:	fe 01       	movw	r30, r28
    50f4:	e7 57       	subi	r30, 0x77	; 119
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	60 81       	ld	r22, Z
    50fa:	71 81       	ldd	r23, Z+1	; 0x01
    50fc:	82 81       	ldd	r24, Z+2	; 0x02
    50fe:	93 81       	ldd	r25, Z+3	; 0x03
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	51 e4       	ldi	r21, 0x41	; 65
    5108:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	8e 01       	movw	r16, r28
    5112:	0d 57       	subi	r16, 0x7D	; 125
    5114:	1f 4f       	sbci	r17, 0xFF	; 255
    5116:	bc 01       	movw	r22, r24
    5118:	cd 01       	movw	r24, r26
    511a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	f8 01       	movw	r30, r16
    5124:	91 83       	std	Z+1, r25	; 0x01
    5126:	80 83       	st	Z, r24
    5128:	1f c0       	rjmp	.+62     	; 0x5168 <main+0xa94>
    512a:	fe 01       	movw	r30, r28
    512c:	ef 57       	subi	r30, 0x7F	; 127
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	88 ec       	ldi	r24, 0xC8	; 200
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	91 83       	std	Z+1, r25	; 0x01
    5136:	80 83       	st	Z, r24
    5138:	fe 01       	movw	r30, r28
    513a:	ef 57       	subi	r30, 0x7F	; 127
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	80 81       	ld	r24, Z
    5140:	91 81       	ldd	r25, Z+1	; 0x01
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <main+0xa6e>
    5146:	fe 01       	movw	r30, r28
    5148:	ef 57       	subi	r30, 0x7F	; 127
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	91 83       	std	Z+1, r25	; 0x01
    514e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5150:	de 01       	movw	r26, r28
    5152:	ad 57       	subi	r26, 0x7D	; 125
    5154:	bf 4f       	sbci	r27, 0xFF	; 255
    5156:	fe 01       	movw	r30, r28
    5158:	ed 57       	subi	r30, 0x7D	; 125
    515a:	ff 4f       	sbci	r31, 0xFF	; 255
    515c:	80 81       	ld	r24, Z
    515e:	91 81       	ldd	r25, Z+1	; 0x01
    5160:	01 97       	sbiw	r24, 0x01	; 1
    5162:	11 96       	adiw	r26, 0x01	; 1
    5164:	9c 93       	st	X, r25
    5166:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5168:	fe 01       	movw	r30, r28
    516a:	ed 57       	subi	r30, 0x7D	; 125
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	d1 f6       	brne	.-76     	; 0x512a <main+0xa56>
    5176:	27 c0       	rjmp	.+78     	; 0x51c6 <main+0xaf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5178:	8e 01       	movw	r16, r28
    517a:	0d 57       	subi	r16, 0x7D	; 125
    517c:	1f 4f       	sbci	r17, 0xFF	; 255
    517e:	fe 01       	movw	r30, r28
    5180:	eb 57       	subi	r30, 0x7B	; 123
    5182:	ff 4f       	sbci	r31, 0xFF	; 255
    5184:	60 81       	ld	r22, Z
    5186:	71 81       	ldd	r23, Z+1	; 0x01
    5188:	82 81       	ldd	r24, Z+2	; 0x02
    518a:	93 81       	ldd	r25, Z+3	; 0x03
    518c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	f8 01       	movw	r30, r16
    5196:	91 83       	std	Z+1, r25	; 0x01
    5198:	80 83       	st	Z, r24
    519a:	de 01       	movw	r26, r28
    519c:	a1 58       	subi	r26, 0x81	; 129
    519e:	bf 4f       	sbci	r27, 0xFF	; 255
    51a0:	fe 01       	movw	r30, r28
    51a2:	ed 57       	subi	r30, 0x7D	; 125
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	80 81       	ld	r24, Z
    51a8:	91 81       	ldd	r25, Z+1	; 0x01
    51aa:	8d 93       	st	X+, r24
    51ac:	9c 93       	st	X, r25
    51ae:	fe 01       	movw	r30, r28
    51b0:	e1 58       	subi	r30, 0x81	; 129
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	01 97       	sbiw	r24, 0x01	; 1
    51ba:	f1 f7       	brne	.-4      	; 0x51b8 <main+0xae4>
    51bc:	fe 01       	movw	r30, r28
    51be:	e1 58       	subi	r30, 0x81	; 129
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	91 83       	std	Z+1, r25	; 0x01
    51c4:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (units)
		SSD_vDisable(seven_seg3);
    51c6:	40 91 21 03 	lds	r20, 0x0321
    51ca:	50 91 22 03 	lds	r21, 0x0322
    51ce:	60 91 23 03 	lds	r22, 0x0323
    51d2:	70 91 24 03 	lds	r23, 0x0324
    51d6:	80 91 25 03 	lds	r24, 0x0325
    51da:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg4);
    51de:	40 91 26 03 	lds	r20, 0x0326
    51e2:	50 91 27 03 	lds	r21, 0x0327
    51e6:	60 91 28 03 	lds	r22, 0x0328
    51ea:	70 91 29 03 	lds	r23, 0x0329
    51ee:	80 91 2a 03 	lds	r24, 0x032A
    51f2:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg4, Hour %10);
    51f6:	80 91 10 03 	lds	r24, 0x0310
    51fa:	9a e0       	ldi	r25, 0x0A	; 10
    51fc:	69 2f       	mov	r22, r25
    51fe:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5202:	89 2f       	mov	r24, r25
    5204:	98 2f       	mov	r25, r24
    5206:	40 91 26 03 	lds	r20, 0x0326
    520a:	50 91 27 03 	lds	r21, 0x0327
    520e:	60 91 28 03 	lds	r22, 0x0328
    5212:	70 91 29 03 	lds	r23, 0x0329
    5216:	80 91 2a 03 	lds	r24, 0x032A
    521a:	29 2f       	mov	r18, r25
    521c:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5220:	fe 01       	movw	r30, r28
    5222:	e5 58       	subi	r30, 0x85	; 133
    5224:	ff 4f       	sbci	r31, 0xFF	; 255
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	a0 ea       	ldi	r26, 0xA0	; 160
    522c:	b0 e4       	ldi	r27, 0x40	; 64
    522e:	80 83       	st	Z, r24
    5230:	91 83       	std	Z+1, r25	; 0x01
    5232:	a2 83       	std	Z+2, r26	; 0x02
    5234:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5236:	8e 01       	movw	r16, r28
    5238:	09 58       	subi	r16, 0x89	; 137
    523a:	1f 4f       	sbci	r17, 0xFF	; 255
    523c:	fe 01       	movw	r30, r28
    523e:	e5 58       	subi	r30, 0x85	; 133
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	60 81       	ld	r22, Z
    5244:	71 81       	ldd	r23, Z+1	; 0x01
    5246:	82 81       	ldd	r24, Z+2	; 0x02
    5248:	93 81       	ldd	r25, Z+3	; 0x03
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	4a ef       	ldi	r20, 0xFA	; 250
    5250:	54 e4       	ldi	r21, 0x44	; 68
    5252:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	f8 01       	movw	r30, r16
    525c:	80 83       	st	Z, r24
    525e:	91 83       	std	Z+1, r25	; 0x01
    5260:	a2 83       	std	Z+2, r26	; 0x02
    5262:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5264:	fe 01       	movw	r30, r28
    5266:	e9 58       	subi	r30, 0x89	; 137
    5268:	ff 4f       	sbci	r31, 0xFF	; 255
    526a:	60 81       	ld	r22, Z
    526c:	71 81       	ldd	r23, Z+1	; 0x01
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	40 e8       	ldi	r20, 0x80	; 128
    5278:	5f e3       	ldi	r21, 0x3F	; 63
    527a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    527e:	88 23       	and	r24, r24
    5280:	44 f4       	brge	.+16     	; 0x5292 <main+0xbbe>
		__ticks = 1;
    5282:	fe 01       	movw	r30, r28
    5284:	eb 58       	subi	r30, 0x8B	; 139
    5286:	ff 4f       	sbci	r31, 0xFF	; 255
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	91 83       	std	Z+1, r25	; 0x01
    528e:	80 83       	st	Z, r24
    5290:	64 c0       	rjmp	.+200    	; 0x535a <main+0xc86>
	else if (__tmp > 65535)
    5292:	fe 01       	movw	r30, r28
    5294:	e9 58       	subi	r30, 0x89	; 137
    5296:	ff 4f       	sbci	r31, 0xFF	; 255
    5298:	60 81       	ld	r22, Z
    529a:	71 81       	ldd	r23, Z+1	; 0x01
    529c:	82 81       	ldd	r24, Z+2	; 0x02
    529e:	93 81       	ldd	r25, Z+3	; 0x03
    52a0:	20 e0       	ldi	r18, 0x00	; 0
    52a2:	3f ef       	ldi	r19, 0xFF	; 255
    52a4:	4f e7       	ldi	r20, 0x7F	; 127
    52a6:	57 e4       	ldi	r21, 0x47	; 71
    52a8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    52ac:	18 16       	cp	r1, r24
    52ae:	0c f0       	brlt	.+2      	; 0x52b2 <main+0xbde>
    52b0:	43 c0       	rjmp	.+134    	; 0x5338 <main+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b2:	fe 01       	movw	r30, r28
    52b4:	e5 58       	subi	r30, 0x85	; 133
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	60 81       	ld	r22, Z
    52ba:	71 81       	ldd	r23, Z+1	; 0x01
    52bc:	82 81       	ldd	r24, Z+2	; 0x02
    52be:	93 81       	ldd	r25, Z+3	; 0x03
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e2       	ldi	r20, 0x20	; 32
    52c6:	51 e4       	ldi	r21, 0x41	; 65
    52c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	8e 01       	movw	r16, r28
    52d2:	0b 58       	subi	r16, 0x8B	; 139
    52d4:	1f 4f       	sbci	r17, 0xFF	; 255
    52d6:	bc 01       	movw	r22, r24
    52d8:	cd 01       	movw	r24, r26
    52da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52de:	dc 01       	movw	r26, r24
    52e0:	cb 01       	movw	r24, r22
    52e2:	f8 01       	movw	r30, r16
    52e4:	91 83       	std	Z+1, r25	; 0x01
    52e6:	80 83       	st	Z, r24
    52e8:	1f c0       	rjmp	.+62     	; 0x5328 <main+0xc54>
    52ea:	fe 01       	movw	r30, r28
    52ec:	ed 58       	subi	r30, 0x8D	; 141
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	88 ec       	ldi	r24, 0xC8	; 200
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	91 83       	std	Z+1, r25	; 0x01
    52f6:	80 83       	st	Z, r24
    52f8:	fe 01       	movw	r30, r28
    52fa:	ed 58       	subi	r30, 0x8D	; 141
    52fc:	ff 4f       	sbci	r31, 0xFF	; 255
    52fe:	80 81       	ld	r24, Z
    5300:	91 81       	ldd	r25, Z+1	; 0x01
    5302:	01 97       	sbiw	r24, 0x01	; 1
    5304:	f1 f7       	brne	.-4      	; 0x5302 <main+0xc2e>
    5306:	fe 01       	movw	r30, r28
    5308:	ed 58       	subi	r30, 0x8D	; 141
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	91 83       	std	Z+1, r25	; 0x01
    530e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5310:	de 01       	movw	r26, r28
    5312:	ab 58       	subi	r26, 0x8B	; 139
    5314:	bf 4f       	sbci	r27, 0xFF	; 255
    5316:	fe 01       	movw	r30, r28
    5318:	eb 58       	subi	r30, 0x8B	; 139
    531a:	ff 4f       	sbci	r31, 0xFF	; 255
    531c:	80 81       	ld	r24, Z
    531e:	91 81       	ldd	r25, Z+1	; 0x01
    5320:	01 97       	sbiw	r24, 0x01	; 1
    5322:	11 96       	adiw	r26, 0x01	; 1
    5324:	9c 93       	st	X, r25
    5326:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5328:	fe 01       	movw	r30, r28
    532a:	eb 58       	subi	r30, 0x8B	; 139
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	80 81       	ld	r24, Z
    5330:	91 81       	ldd	r25, Z+1	; 0x01
    5332:	00 97       	sbiw	r24, 0x00	; 0
    5334:	d1 f6       	brne	.-76     	; 0x52ea <main+0xc16>
    5336:	27 c0       	rjmp	.+78     	; 0x5386 <main+0xcb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5338:	8e 01       	movw	r16, r28
    533a:	0b 58       	subi	r16, 0x8B	; 139
    533c:	1f 4f       	sbci	r17, 0xFF	; 255
    533e:	fe 01       	movw	r30, r28
    5340:	e9 58       	subi	r30, 0x89	; 137
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	60 81       	ld	r22, Z
    5346:	71 81       	ldd	r23, Z+1	; 0x01
    5348:	82 81       	ldd	r24, Z+2	; 0x02
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	f8 01       	movw	r30, r16
    5356:	91 83       	std	Z+1, r25	; 0x01
    5358:	80 83       	st	Z, r24
    535a:	de 01       	movw	r26, r28
    535c:	af 58       	subi	r26, 0x8F	; 143
    535e:	bf 4f       	sbci	r27, 0xFF	; 255
    5360:	fe 01       	movw	r30, r28
    5362:	eb 58       	subi	r30, 0x8B	; 139
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	80 81       	ld	r24, Z
    5368:	91 81       	ldd	r25, Z+1	; 0x01
    536a:	8d 93       	st	X+, r24
    536c:	9c 93       	st	X, r25
    536e:	fe 01       	movw	r30, r28
    5370:	ef 58       	subi	r30, 0x8F	; 143
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	80 81       	ld	r24, Z
    5376:	91 81       	ldd	r25, Z+1	; 0x01
    5378:	01 97       	sbiw	r24, 0x01	; 1
    537a:	f1 f7       	brne	.-4      	; 0x5378 <main+0xca4>
    537c:	fe 01       	movw	r30, r28
    537e:	ef 58       	subi	r30, 0x8F	; 143
    5380:	ff 4f       	sbci	r31, 0xFF	; 255
    5382:	91 83       	std	Z+1, r25	; 0x01
    5384:	80 83       	st	Z, r24
		_delay_ms(5);

		// Display hours (tens)
		SSD_vDisable(seven_seg4);
    5386:	40 91 26 03 	lds	r20, 0x0326
    538a:	50 91 27 03 	lds	r21, 0x0327
    538e:	60 91 28 03 	lds	r22, 0x0328
    5392:	70 91 29 03 	lds	r23, 0x0329
    5396:	80 91 2a 03 	lds	r24, 0x032A
    539a:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
		SSD_vEnable(seven_seg5);
    539e:	40 91 2b 03 	lds	r20, 0x032B
    53a2:	50 91 2c 03 	lds	r21, 0x032C
    53a6:	60 91 2d 03 	lds	r22, 0x032D
    53aa:	70 91 2e 03 	lds	r23, 0x032E
    53ae:	80 91 2f 03 	lds	r24, 0x032F
    53b2:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
		SSD_vSendNumber(seven_seg5, Hour /10);
    53b6:	80 91 10 03 	lds	r24, 0x0310
    53ba:	9a e0       	ldi	r25, 0x0A	; 10
    53bc:	69 2f       	mov	r22, r25
    53be:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    53c2:	98 2f       	mov	r25, r24
    53c4:	40 91 2b 03 	lds	r20, 0x032B
    53c8:	50 91 2c 03 	lds	r21, 0x032C
    53cc:	60 91 2d 03 	lds	r22, 0x032D
    53d0:	70 91 2e 03 	lds	r23, 0x032E
    53d4:	80 91 2f 03 	lds	r24, 0x032F
    53d8:	29 2f       	mov	r18, r25
    53da:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    53de:	fe 01       	movw	r30, r28
    53e0:	e3 59       	subi	r30, 0x93	; 147
    53e2:	ff 4f       	sbci	r31, 0xFF	; 255
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	a0 ea       	ldi	r26, 0xA0	; 160
    53ea:	b0 e4       	ldi	r27, 0x40	; 64
    53ec:	80 83       	st	Z, r24
    53ee:	91 83       	std	Z+1, r25	; 0x01
    53f0:	a2 83       	std	Z+2, r26	; 0x02
    53f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53f4:	8e 01       	movw	r16, r28
    53f6:	07 59       	subi	r16, 0x97	; 151
    53f8:	1f 4f       	sbci	r17, 0xFF	; 255
    53fa:	fe 01       	movw	r30, r28
    53fc:	e3 59       	subi	r30, 0x93	; 147
    53fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5400:	60 81       	ld	r22, Z
    5402:	71 81       	ldd	r23, Z+1	; 0x01
    5404:	82 81       	ldd	r24, Z+2	; 0x02
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	4a ef       	ldi	r20, 0xFA	; 250
    540e:	54 e4       	ldi	r21, 0x44	; 68
    5410:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	f8 01       	movw	r30, r16
    541a:	80 83       	st	Z, r24
    541c:	91 83       	std	Z+1, r25	; 0x01
    541e:	a2 83       	std	Z+2, r26	; 0x02
    5420:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5422:	fe 01       	movw	r30, r28
    5424:	e7 59       	subi	r30, 0x97	; 151
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	82 81       	ldd	r24, Z+2	; 0x02
    542e:	93 81       	ldd	r25, Z+3	; 0x03
    5430:	20 e0       	ldi	r18, 0x00	; 0
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	40 e8       	ldi	r20, 0x80	; 128
    5436:	5f e3       	ldi	r21, 0x3F	; 63
    5438:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    543c:	88 23       	and	r24, r24
    543e:	44 f4       	brge	.+16     	; 0x5450 <main+0xd7c>
		__ticks = 1;
    5440:	fe 01       	movw	r30, r28
    5442:	e9 59       	subi	r30, 0x99	; 153
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	81 e0       	ldi	r24, 0x01	; 1
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	91 83       	std	Z+1, r25	; 0x01
    544c:	80 83       	st	Z, r24
    544e:	64 c0       	rjmp	.+200    	; 0x5518 <main+0xe44>
	else if (__tmp > 65535)
    5450:	fe 01       	movw	r30, r28
    5452:	e7 59       	subi	r30, 0x97	; 151
    5454:	ff 4f       	sbci	r31, 0xFF	; 255
    5456:	60 81       	ld	r22, Z
    5458:	71 81       	ldd	r23, Z+1	; 0x01
    545a:	82 81       	ldd	r24, Z+2	; 0x02
    545c:	93 81       	ldd	r25, Z+3	; 0x03
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	3f ef       	ldi	r19, 0xFF	; 255
    5462:	4f e7       	ldi	r20, 0x7F	; 127
    5464:	57 e4       	ldi	r21, 0x47	; 71
    5466:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    546a:	18 16       	cp	r1, r24
    546c:	0c f0       	brlt	.+2      	; 0x5470 <main+0xd9c>
    546e:	43 c0       	rjmp	.+134    	; 0x54f6 <main+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5470:	fe 01       	movw	r30, r28
    5472:	e3 59       	subi	r30, 0x93	; 147
    5474:	ff 4f       	sbci	r31, 0xFF	; 255
    5476:	60 81       	ld	r22, Z
    5478:	71 81       	ldd	r23, Z+1	; 0x01
    547a:	82 81       	ldd	r24, Z+2	; 0x02
    547c:	93 81       	ldd	r25, Z+3	; 0x03
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	40 e2       	ldi	r20, 0x20	; 32
    5484:	51 e4       	ldi	r21, 0x41	; 65
    5486:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	8e 01       	movw	r16, r28
    5490:	09 59       	subi	r16, 0x99	; 153
    5492:	1f 4f       	sbci	r17, 0xFF	; 255
    5494:	bc 01       	movw	r22, r24
    5496:	cd 01       	movw	r24, r26
    5498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	f8 01       	movw	r30, r16
    54a2:	91 83       	std	Z+1, r25	; 0x01
    54a4:	80 83       	st	Z, r24
    54a6:	1f c0       	rjmp	.+62     	; 0x54e6 <main+0xe12>
    54a8:	fe 01       	movw	r30, r28
    54aa:	eb 59       	subi	r30, 0x9B	; 155
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	88 ec       	ldi	r24, 0xC8	; 200
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	80 83       	st	Z, r24
    54b6:	fe 01       	movw	r30, r28
    54b8:	eb 59       	subi	r30, 0x9B	; 155
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	80 81       	ld	r24, Z
    54be:	91 81       	ldd	r25, Z+1	; 0x01
    54c0:	01 97       	sbiw	r24, 0x01	; 1
    54c2:	f1 f7       	brne	.-4      	; 0x54c0 <main+0xdec>
    54c4:	fe 01       	movw	r30, r28
    54c6:	eb 59       	subi	r30, 0x9B	; 155
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	91 83       	std	Z+1, r25	; 0x01
    54cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ce:	de 01       	movw	r26, r28
    54d0:	a9 59       	subi	r26, 0x99	; 153
    54d2:	bf 4f       	sbci	r27, 0xFF	; 255
    54d4:	fe 01       	movw	r30, r28
    54d6:	e9 59       	subi	r30, 0x99	; 153
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	80 81       	ld	r24, Z
    54dc:	91 81       	ldd	r25, Z+1	; 0x01
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	11 96       	adiw	r26, 0x01	; 1
    54e2:	9c 93       	st	X, r25
    54e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54e6:	fe 01       	movw	r30, r28
    54e8:	e9 59       	subi	r30, 0x99	; 153
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	80 81       	ld	r24, Z
    54ee:	91 81       	ldd	r25, Z+1	; 0x01
    54f0:	00 97       	sbiw	r24, 0x00	; 0
    54f2:	d1 f6       	brne	.-76     	; 0x54a8 <main+0xdd4>
    54f4:	28 c0       	rjmp	.+80     	; 0x5546 <main+0xe72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54f6:	8e 01       	movw	r16, r28
    54f8:	09 59       	subi	r16, 0x99	; 153
    54fa:	1f 4f       	sbci	r17, 0xFF	; 255
    54fc:	fe 01       	movw	r30, r28
    54fe:	e7 59       	subi	r30, 0x97	; 151
    5500:	ff 4f       	sbci	r31, 0xFF	; 255
    5502:	60 81       	ld	r22, Z
    5504:	71 81       	ldd	r23, Z+1	; 0x01
    5506:	82 81       	ldd	r24, Z+2	; 0x02
    5508:	93 81       	ldd	r25, Z+3	; 0x03
    550a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    550e:	dc 01       	movw	r26, r24
    5510:	cb 01       	movw	r24, r22
    5512:	f8 01       	movw	r30, r16
    5514:	91 83       	std	Z+1, r25	; 0x01
    5516:	80 83       	st	Z, r24
    5518:	de 01       	movw	r26, r28
    551a:	ad 59       	subi	r26, 0x9D	; 157
    551c:	bf 4f       	sbci	r27, 0xFF	; 255
    551e:	fe 01       	movw	r30, r28
    5520:	e9 59       	subi	r30, 0x99	; 153
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	11 96       	adiw	r26, 0x01	; 1
    552a:	9c 93       	st	X, r25
    552c:	8e 93       	st	-X, r24
    552e:	fe 01       	movw	r30, r28
    5530:	ed 59       	subi	r30, 0x9D	; 157
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	80 81       	ld	r24, Z
    5536:	91 81       	ldd	r25, Z+1	; 0x01
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	f1 f7       	brne	.-4      	; 0x5538 <main+0xe64>
    553c:	fe 01       	movw	r30, r28
    553e:	ed 59       	subi	r30, 0x9D	; 157
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	91 83       	std	Z+1, r25	; 0x01
    5544:	80 83       	st	Z, r24
		_delay_ms(5);

		if (Hour == Hours_Alarm && Minute == Minutes_Alarm && Second == 0 && Alarm_EN == 1)
    5546:	90 91 10 03 	lds	r25, 0x0310
    554a:	80 91 55 03 	lds	r24, 0x0355
    554e:	98 17       	cp	r25, r24
    5550:	09 f0       	breq	.+2      	; 0x5554 <main+0xe80>
    5552:	42 c9       	rjmp	.-3452   	; 0x47d8 <main+0x104>
    5554:	90 91 52 03 	lds	r25, 0x0352
    5558:	80 91 54 03 	lds	r24, 0x0354
    555c:	98 17       	cp	r25, r24
    555e:	09 f0       	breq	.+2      	; 0x5562 <main+0xe8e>
    5560:	3b c9       	rjmp	.-3466   	; 0x47d8 <main+0x104>
    5562:	80 91 53 03 	lds	r24, 0x0353
    5566:	88 23       	and	r24, r24
    5568:	09 f0       	breq	.+2      	; 0x556c <main+0xe98>
    556a:	36 c9       	rjmp	.-3476   	; 0x47d8 <main+0x104>
    556c:	80 91 51 03 	lds	r24, 0x0351
    5570:	81 30       	cpi	r24, 0x01	; 1
    5572:	09 f0       	breq	.+2      	; 0x5576 <main+0xea2>
    5574:	31 c9       	rjmp	.-3486   	; 0x47d8 <main+0x104>
		{
			CLCD_vClearScreen();
    5576:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSetPosition(1, 8);
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	68 e0       	ldi	r22, 0x08	; 8
    557e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Alarm");
    5582:	80 ee       	ldi	r24, 0xE0	; 224
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    558a:	82 e0       	ldi	r24, 0x02	; 2
    558c:	61 e0       	ldi	r22, 0x01	; 1
    558e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("Press any key");
    5592:	86 ee       	ldi	r24, 0xE6	; 230
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    559a:	83 e0       	ldi	r24, 0x03	; 3
    559c:	61 e0       	ldi	r22, 0x01	; 1
    559e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("to close");
    55a2:	84 ef       	ldi	r24, 0xF4	; 244
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

			u8 press = NOTPRESSED;
    55aa:	fe 01       	movw	r30, r28
    55ac:	eb 53       	subi	r30, 0x3B	; 59
    55ae:	ff 4f       	sbci	r31, 0xFF	; 255
    55b0:	8f ef       	ldi	r24, 0xFF	; 255
    55b2:	80 83       	st	Z, r24
			while(1)
			{
				press = KPD_u8GetPressed();
    55b4:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    55b8:	fe 01       	movw	r30, r28
    55ba:	eb 53       	subi	r30, 0x3B	; 59
    55bc:	ff 4f       	sbci	r31, 0xFF	; 255
    55be:	80 83       	st	Z, r24
				if (press != NOTPRESSED)
    55c0:	fe 01       	movw	r30, r28
    55c2:	eb 53       	subi	r30, 0x3B	; 59
    55c4:	ff 4f       	sbci	r31, 0xFF	; 255
    55c6:	80 81       	ld	r24, Z
    55c8:	8f 3f       	cpi	r24, 0xFF	; 255
    55ca:	09 f0       	breq	.+2      	; 0x55ce <main+0xefa>
    55cc:	c7 c4       	rjmp	.+2446   	; 0x5f5c <main+0x1888>
					break;
				}
				/* Display time on seven-segment displays using POV theorem */

				// Display seconds (units)
				SSD_vDisable(seven_seg5);
    55ce:	40 91 2b 03 	lds	r20, 0x032B
    55d2:	50 91 2c 03 	lds	r21, 0x032C
    55d6:	60 91 2d 03 	lds	r22, 0x032D
    55da:	70 91 2e 03 	lds	r23, 0x032E
    55de:	80 91 2f 03 	lds	r24, 0x032F
    55e2:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg0);
    55e6:	40 91 12 03 	lds	r20, 0x0312
    55ea:	50 91 13 03 	lds	r21, 0x0313
    55ee:	60 91 14 03 	lds	r22, 0x0314
    55f2:	70 91 15 03 	lds	r23, 0x0315
    55f6:	80 91 16 03 	lds	r24, 0x0316
    55fa:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg0, Second%10);
    55fe:	80 91 53 03 	lds	r24, 0x0353
    5602:	9a e0       	ldi	r25, 0x0A	; 10
    5604:	69 2f       	mov	r22, r25
    5606:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    560a:	89 2f       	mov	r24, r25
    560c:	98 2f       	mov	r25, r24
    560e:	40 91 12 03 	lds	r20, 0x0312
    5612:	50 91 13 03 	lds	r21, 0x0313
    5616:	60 91 14 03 	lds	r22, 0x0314
    561a:	70 91 15 03 	lds	r23, 0x0315
    561e:	80 91 16 03 	lds	r24, 0x0316
    5622:	29 2f       	mov	r18, r25
    5624:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5628:	fe 01       	movw	r30, r28
    562a:	e1 5a       	subi	r30, 0xA1	; 161
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	a0 ea       	ldi	r26, 0xA0	; 160
    5634:	b0 e4       	ldi	r27, 0x40	; 64
    5636:	80 83       	st	Z, r24
    5638:	91 83       	std	Z+1, r25	; 0x01
    563a:	a2 83       	std	Z+2, r26	; 0x02
    563c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    563e:	8e 01       	movw	r16, r28
    5640:	05 5a       	subi	r16, 0xA5	; 165
    5642:	1f 4f       	sbci	r17, 0xFF	; 255
    5644:	fe 01       	movw	r30, r28
    5646:	e1 5a       	subi	r30, 0xA1	; 161
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	60 81       	ld	r22, Z
    564c:	71 81       	ldd	r23, Z+1	; 0x01
    564e:	82 81       	ldd	r24, Z+2	; 0x02
    5650:	93 81       	ldd	r25, Z+3	; 0x03
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	4a ef       	ldi	r20, 0xFA	; 250
    5658:	54 e4       	ldi	r21, 0x44	; 68
    565a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    565e:	dc 01       	movw	r26, r24
    5660:	cb 01       	movw	r24, r22
    5662:	f8 01       	movw	r30, r16
    5664:	80 83       	st	Z, r24
    5666:	91 83       	std	Z+1, r25	; 0x01
    5668:	a2 83       	std	Z+2, r26	; 0x02
    566a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    566c:	fe 01       	movw	r30, r28
    566e:	e5 5a       	subi	r30, 0xA5	; 165
    5670:	ff 4f       	sbci	r31, 0xFF	; 255
    5672:	60 81       	ld	r22, Z
    5674:	71 81       	ldd	r23, Z+1	; 0x01
    5676:	82 81       	ldd	r24, Z+2	; 0x02
    5678:	93 81       	ldd	r25, Z+3	; 0x03
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	40 e8       	ldi	r20, 0x80	; 128
    5680:	5f e3       	ldi	r21, 0x3F	; 63
    5682:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5686:	88 23       	and	r24, r24
    5688:	44 f4       	brge	.+16     	; 0x569a <main+0xfc6>
		__ticks = 1;
    568a:	fe 01       	movw	r30, r28
    568c:	e7 5a       	subi	r30, 0xA7	; 167
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	64 c0       	rjmp	.+200    	; 0x5762 <main+0x108e>
	else if (__tmp > 65535)
    569a:	fe 01       	movw	r30, r28
    569c:	e5 5a       	subi	r30, 0xA5	; 165
    569e:	ff 4f       	sbci	r31, 0xFF	; 255
    56a0:	60 81       	ld	r22, Z
    56a2:	71 81       	ldd	r23, Z+1	; 0x01
    56a4:	82 81       	ldd	r24, Z+2	; 0x02
    56a6:	93 81       	ldd	r25, Z+3	; 0x03
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	3f ef       	ldi	r19, 0xFF	; 255
    56ac:	4f e7       	ldi	r20, 0x7F	; 127
    56ae:	57 e4       	ldi	r21, 0x47	; 71
    56b0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    56b4:	18 16       	cp	r1, r24
    56b6:	0c f0       	brlt	.+2      	; 0x56ba <main+0xfe6>
    56b8:	43 c0       	rjmp	.+134    	; 0x5740 <main+0x106c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ba:	fe 01       	movw	r30, r28
    56bc:	e1 5a       	subi	r30, 0xA1	; 161
    56be:	ff 4f       	sbci	r31, 0xFF	; 255
    56c0:	60 81       	ld	r22, Z
    56c2:	71 81       	ldd	r23, Z+1	; 0x01
    56c4:	82 81       	ldd	r24, Z+2	; 0x02
    56c6:	93 81       	ldd	r25, Z+3	; 0x03
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	40 e2       	ldi	r20, 0x20	; 32
    56ce:	51 e4       	ldi	r21, 0x41	; 65
    56d0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	8e 01       	movw	r16, r28
    56da:	07 5a       	subi	r16, 0xA7	; 167
    56dc:	1f 4f       	sbci	r17, 0xFF	; 255
    56de:	bc 01       	movw	r22, r24
    56e0:	cd 01       	movw	r24, r26
    56e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e6:	dc 01       	movw	r26, r24
    56e8:	cb 01       	movw	r24, r22
    56ea:	f8 01       	movw	r30, r16
    56ec:	91 83       	std	Z+1, r25	; 0x01
    56ee:	80 83       	st	Z, r24
    56f0:	1f c0       	rjmp	.+62     	; 0x5730 <main+0x105c>
    56f2:	fe 01       	movw	r30, r28
    56f4:	e9 5a       	subi	r30, 0xA9	; 169
    56f6:	ff 4f       	sbci	r31, 0xFF	; 255
    56f8:	88 ec       	ldi	r24, 0xC8	; 200
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	91 83       	std	Z+1, r25	; 0x01
    56fe:	80 83       	st	Z, r24
    5700:	fe 01       	movw	r30, r28
    5702:	e9 5a       	subi	r30, 0xA9	; 169
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	80 81       	ld	r24, Z
    5708:	91 81       	ldd	r25, Z+1	; 0x01
    570a:	01 97       	sbiw	r24, 0x01	; 1
    570c:	f1 f7       	brne	.-4      	; 0x570a <main+0x1036>
    570e:	fe 01       	movw	r30, r28
    5710:	e9 5a       	subi	r30, 0xA9	; 169
    5712:	ff 4f       	sbci	r31, 0xFF	; 255
    5714:	91 83       	std	Z+1, r25	; 0x01
    5716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5718:	de 01       	movw	r26, r28
    571a:	a7 5a       	subi	r26, 0xA7	; 167
    571c:	bf 4f       	sbci	r27, 0xFF	; 255
    571e:	fe 01       	movw	r30, r28
    5720:	e7 5a       	subi	r30, 0xA7	; 167
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	80 81       	ld	r24, Z
    5726:	91 81       	ldd	r25, Z+1	; 0x01
    5728:	01 97       	sbiw	r24, 0x01	; 1
    572a:	11 96       	adiw	r26, 0x01	; 1
    572c:	9c 93       	st	X, r25
    572e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5730:	fe 01       	movw	r30, r28
    5732:	e7 5a       	subi	r30, 0xA7	; 167
    5734:	ff 4f       	sbci	r31, 0xFF	; 255
    5736:	80 81       	ld	r24, Z
    5738:	91 81       	ldd	r25, Z+1	; 0x01
    573a:	00 97       	sbiw	r24, 0x00	; 0
    573c:	d1 f6       	brne	.-76     	; 0x56f2 <main+0x101e>
    573e:	27 c0       	rjmp	.+78     	; 0x578e <main+0x10ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5740:	8e 01       	movw	r16, r28
    5742:	07 5a       	subi	r16, 0xA7	; 167
    5744:	1f 4f       	sbci	r17, 0xFF	; 255
    5746:	fe 01       	movw	r30, r28
    5748:	e5 5a       	subi	r30, 0xA5	; 165
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	60 81       	ld	r22, Z
    574e:	71 81       	ldd	r23, Z+1	; 0x01
    5750:	82 81       	ldd	r24, Z+2	; 0x02
    5752:	93 81       	ldd	r25, Z+3	; 0x03
    5754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	f8 01       	movw	r30, r16
    575e:	91 83       	std	Z+1, r25	; 0x01
    5760:	80 83       	st	Z, r24
    5762:	de 01       	movw	r26, r28
    5764:	ab 5a       	subi	r26, 0xAB	; 171
    5766:	bf 4f       	sbci	r27, 0xFF	; 255
    5768:	fe 01       	movw	r30, r28
    576a:	e7 5a       	subi	r30, 0xA7	; 167
    576c:	ff 4f       	sbci	r31, 0xFF	; 255
    576e:	80 81       	ld	r24, Z
    5770:	91 81       	ldd	r25, Z+1	; 0x01
    5772:	8d 93       	st	X+, r24
    5774:	9c 93       	st	X, r25
    5776:	fe 01       	movw	r30, r28
    5778:	eb 5a       	subi	r30, 0xAB	; 171
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	80 81       	ld	r24, Z
    577e:	91 81       	ldd	r25, Z+1	; 0x01
    5780:	01 97       	sbiw	r24, 0x01	; 1
    5782:	f1 f7       	brne	.-4      	; 0x5780 <main+0x10ac>
    5784:	fe 01       	movw	r30, r28
    5786:	eb 5a       	subi	r30, 0xAB	; 171
    5788:	ff 4f       	sbci	r31, 0xFF	; 255
    578a:	91 83       	std	Z+1, r25	; 0x01
    578c:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display seconds (tens)
				SSD_vDisable(seven_seg0);
    578e:	40 91 12 03 	lds	r20, 0x0312
    5792:	50 91 13 03 	lds	r21, 0x0313
    5796:	60 91 14 03 	lds	r22, 0x0314
    579a:	70 91 15 03 	lds	r23, 0x0315
    579e:	80 91 16 03 	lds	r24, 0x0316
    57a2:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg1);
    57a6:	40 91 17 03 	lds	r20, 0x0317
    57aa:	50 91 18 03 	lds	r21, 0x0318
    57ae:	60 91 19 03 	lds	r22, 0x0319
    57b2:	70 91 1a 03 	lds	r23, 0x031A
    57b6:	80 91 1b 03 	lds	r24, 0x031B
    57ba:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg1, Second/10);
    57be:	80 91 53 03 	lds	r24, 0x0353
    57c2:	9a e0       	ldi	r25, 0x0A	; 10
    57c4:	69 2f       	mov	r22, r25
    57c6:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    57ca:	98 2f       	mov	r25, r24
    57cc:	40 91 17 03 	lds	r20, 0x0317
    57d0:	50 91 18 03 	lds	r21, 0x0318
    57d4:	60 91 19 03 	lds	r22, 0x0319
    57d8:	70 91 1a 03 	lds	r23, 0x031A
    57dc:	80 91 1b 03 	lds	r24, 0x031B
    57e0:	29 2f       	mov	r18, r25
    57e2:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    57e6:	fe 01       	movw	r30, r28
    57e8:	ef 5a       	subi	r30, 0xAF	; 175
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	a0 ea       	ldi	r26, 0xA0	; 160
    57f2:	b0 e4       	ldi	r27, 0x40	; 64
    57f4:	80 83       	st	Z, r24
    57f6:	91 83       	std	Z+1, r25	; 0x01
    57f8:	a2 83       	std	Z+2, r26	; 0x02
    57fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fc:	8e 01       	movw	r16, r28
    57fe:	03 5b       	subi	r16, 0xB3	; 179
    5800:	1f 4f       	sbci	r17, 0xFF	; 255
    5802:	fe 01       	movw	r30, r28
    5804:	ef 5a       	subi	r30, 0xAF	; 175
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	60 81       	ld	r22, Z
    580a:	71 81       	ldd	r23, Z+1	; 0x01
    580c:	82 81       	ldd	r24, Z+2	; 0x02
    580e:	93 81       	ldd	r25, Z+3	; 0x03
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	30 e0       	ldi	r19, 0x00	; 0
    5814:	4a ef       	ldi	r20, 0xFA	; 250
    5816:	54 e4       	ldi	r21, 0x44	; 68
    5818:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    581c:	dc 01       	movw	r26, r24
    581e:	cb 01       	movw	r24, r22
    5820:	f8 01       	movw	r30, r16
    5822:	80 83       	st	Z, r24
    5824:	91 83       	std	Z+1, r25	; 0x01
    5826:	a2 83       	std	Z+2, r26	; 0x02
    5828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    582a:	fe 01       	movw	r30, r28
    582c:	e3 5b       	subi	r30, 0xB3	; 179
    582e:	ff 4f       	sbci	r31, 0xFF	; 255
    5830:	60 81       	ld	r22, Z
    5832:	71 81       	ldd	r23, Z+1	; 0x01
    5834:	82 81       	ldd	r24, Z+2	; 0x02
    5836:	93 81       	ldd	r25, Z+3	; 0x03
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	40 e8       	ldi	r20, 0x80	; 128
    583e:	5f e3       	ldi	r21, 0x3F	; 63
    5840:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5844:	88 23       	and	r24, r24
    5846:	44 f4       	brge	.+16     	; 0x5858 <main+0x1184>
		__ticks = 1;
    5848:	fe 01       	movw	r30, r28
    584a:	e5 5b       	subi	r30, 0xB5	; 181
    584c:	ff 4f       	sbci	r31, 0xFF	; 255
    584e:	81 e0       	ldi	r24, 0x01	; 1
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	91 83       	std	Z+1, r25	; 0x01
    5854:	80 83       	st	Z, r24
    5856:	64 c0       	rjmp	.+200    	; 0x5920 <main+0x124c>
	else if (__tmp > 65535)
    5858:	fe 01       	movw	r30, r28
    585a:	e3 5b       	subi	r30, 0xB3	; 179
    585c:	ff 4f       	sbci	r31, 0xFF	; 255
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	3f ef       	ldi	r19, 0xFF	; 255
    586a:	4f e7       	ldi	r20, 0x7F	; 127
    586c:	57 e4       	ldi	r21, 0x47	; 71
    586e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5872:	18 16       	cp	r1, r24
    5874:	0c f0       	brlt	.+2      	; 0x5878 <main+0x11a4>
    5876:	43 c0       	rjmp	.+134    	; 0x58fe <main+0x122a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5878:	fe 01       	movw	r30, r28
    587a:	ef 5a       	subi	r30, 0xAF	; 175
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	60 81       	ld	r22, Z
    5880:	71 81       	ldd	r23, Z+1	; 0x01
    5882:	82 81       	ldd	r24, Z+2	; 0x02
    5884:	93 81       	ldd	r25, Z+3	; 0x03
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	40 e2       	ldi	r20, 0x20	; 32
    588c:	51 e4       	ldi	r21, 0x41	; 65
    588e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5892:	dc 01       	movw	r26, r24
    5894:	cb 01       	movw	r24, r22
    5896:	8e 01       	movw	r16, r28
    5898:	05 5b       	subi	r16, 0xB5	; 181
    589a:	1f 4f       	sbci	r17, 0xFF	; 255
    589c:	bc 01       	movw	r22, r24
    589e:	cd 01       	movw	r24, r26
    58a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	f8 01       	movw	r30, r16
    58aa:	91 83       	std	Z+1, r25	; 0x01
    58ac:	80 83       	st	Z, r24
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <main+0x121a>
    58b0:	fe 01       	movw	r30, r28
    58b2:	e7 5b       	subi	r30, 0xB7	; 183
    58b4:	ff 4f       	sbci	r31, 0xFF	; 255
    58b6:	88 ec       	ldi	r24, 0xC8	; 200
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	91 83       	std	Z+1, r25	; 0x01
    58bc:	80 83       	st	Z, r24
    58be:	fe 01       	movw	r30, r28
    58c0:	e7 5b       	subi	r30, 0xB7	; 183
    58c2:	ff 4f       	sbci	r31, 0xFF	; 255
    58c4:	80 81       	ld	r24, Z
    58c6:	91 81       	ldd	r25, Z+1	; 0x01
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	f1 f7       	brne	.-4      	; 0x58c8 <main+0x11f4>
    58cc:	fe 01       	movw	r30, r28
    58ce:	e7 5b       	subi	r30, 0xB7	; 183
    58d0:	ff 4f       	sbci	r31, 0xFF	; 255
    58d2:	91 83       	std	Z+1, r25	; 0x01
    58d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	de 01       	movw	r26, r28
    58d8:	a5 5b       	subi	r26, 0xB5	; 181
    58da:	bf 4f       	sbci	r27, 0xFF	; 255
    58dc:	fe 01       	movw	r30, r28
    58de:	e5 5b       	subi	r30, 0xB5	; 181
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
    58e2:	80 81       	ld	r24, Z
    58e4:	91 81       	ldd	r25, Z+1	; 0x01
    58e6:	01 97       	sbiw	r24, 0x01	; 1
    58e8:	11 96       	adiw	r26, 0x01	; 1
    58ea:	9c 93       	st	X, r25
    58ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ee:	fe 01       	movw	r30, r28
    58f0:	e5 5b       	subi	r30, 0xB5	; 181
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	80 81       	ld	r24, Z
    58f6:	91 81       	ldd	r25, Z+1	; 0x01
    58f8:	00 97       	sbiw	r24, 0x00	; 0
    58fa:	d1 f6       	brne	.-76     	; 0x58b0 <main+0x11dc>
    58fc:	27 c0       	rjmp	.+78     	; 0x594c <main+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fe:	8e 01       	movw	r16, r28
    5900:	05 5b       	subi	r16, 0xB5	; 181
    5902:	1f 4f       	sbci	r17, 0xFF	; 255
    5904:	fe 01       	movw	r30, r28
    5906:	e3 5b       	subi	r30, 0xB3	; 179
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	60 81       	ld	r22, Z
    590c:	71 81       	ldd	r23, Z+1	; 0x01
    590e:	82 81       	ldd	r24, Z+2	; 0x02
    5910:	93 81       	ldd	r25, Z+3	; 0x03
    5912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	f8 01       	movw	r30, r16
    591c:	91 83       	std	Z+1, r25	; 0x01
    591e:	80 83       	st	Z, r24
    5920:	de 01       	movw	r26, r28
    5922:	a9 5b       	subi	r26, 0xB9	; 185
    5924:	bf 4f       	sbci	r27, 0xFF	; 255
    5926:	fe 01       	movw	r30, r28
    5928:	e5 5b       	subi	r30, 0xB5	; 181
    592a:	ff 4f       	sbci	r31, 0xFF	; 255
    592c:	80 81       	ld	r24, Z
    592e:	91 81       	ldd	r25, Z+1	; 0x01
    5930:	8d 93       	st	X+, r24
    5932:	9c 93       	st	X, r25
    5934:	fe 01       	movw	r30, r28
    5936:	e9 5b       	subi	r30, 0xB9	; 185
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	80 81       	ld	r24, Z
    593c:	91 81       	ldd	r25, Z+1	; 0x01
    593e:	01 97       	sbiw	r24, 0x01	; 1
    5940:	f1 f7       	brne	.-4      	; 0x593e <main+0x126a>
    5942:	fe 01       	movw	r30, r28
    5944:	e9 5b       	subi	r30, 0xB9	; 185
    5946:	ff 4f       	sbci	r31, 0xFF	; 255
    5948:	91 83       	std	Z+1, r25	; 0x01
    594a:	80 83       	st	Z, r24
				_delay_ms(5);

				// Display minutes (units)
				SSD_vDisable(seven_seg1);
    594c:	40 91 17 03 	lds	r20, 0x0317
    5950:	50 91 18 03 	lds	r21, 0x0318
    5954:	60 91 19 03 	lds	r22, 0x0319
    5958:	70 91 1a 03 	lds	r23, 0x031A
    595c:	80 91 1b 03 	lds	r24, 0x031B
    5960:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg2);
    5964:	40 91 1c 03 	lds	r20, 0x031C
    5968:	50 91 1d 03 	lds	r21, 0x031D
    596c:	60 91 1e 03 	lds	r22, 0x031E
    5970:	70 91 1f 03 	lds	r23, 0x031F
    5974:	80 91 20 03 	lds	r24, 0x0320
    5978:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg2, Minute%10);
    597c:	80 91 52 03 	lds	r24, 0x0352
    5980:	9a e0       	ldi	r25, 0x0A	; 10
    5982:	69 2f       	mov	r22, r25
    5984:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5988:	89 2f       	mov	r24, r25
    598a:	98 2f       	mov	r25, r24
    598c:	40 91 1c 03 	lds	r20, 0x031C
    5990:	50 91 1d 03 	lds	r21, 0x031D
    5994:	60 91 1e 03 	lds	r22, 0x031E
    5998:	70 91 1f 03 	lds	r23, 0x031F
    599c:	80 91 20 03 	lds	r24, 0x0320
    59a0:	29 2f       	mov	r18, r25
    59a2:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    59a6:	fe 01       	movw	r30, r28
    59a8:	ed 5b       	subi	r30, 0xBD	; 189
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	a0 ea       	ldi	r26, 0xA0	; 160
    59b2:	b0 e4       	ldi	r27, 0x40	; 64
    59b4:	80 83       	st	Z, r24
    59b6:	91 83       	std	Z+1, r25	; 0x01
    59b8:	a2 83       	std	Z+2, r26	; 0x02
    59ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59bc:	8e 01       	movw	r16, r28
    59be:	01 5c       	subi	r16, 0xC1	; 193
    59c0:	1f 4f       	sbci	r17, 0xFF	; 255
    59c2:	fe 01       	movw	r30, r28
    59c4:	ed 5b       	subi	r30, 0xBD	; 189
    59c6:	ff 4f       	sbci	r31, 0xFF	; 255
    59c8:	60 81       	ld	r22, Z
    59ca:	71 81       	ldd	r23, Z+1	; 0x01
    59cc:	82 81       	ldd	r24, Z+2	; 0x02
    59ce:	93 81       	ldd	r25, Z+3	; 0x03
    59d0:	20 e0       	ldi	r18, 0x00	; 0
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	4a ef       	ldi	r20, 0xFA	; 250
    59d6:	54 e4       	ldi	r21, 0x44	; 68
    59d8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    59dc:	dc 01       	movw	r26, r24
    59de:	cb 01       	movw	r24, r22
    59e0:	f8 01       	movw	r30, r16
    59e2:	80 83       	st	Z, r24
    59e4:	91 83       	std	Z+1, r25	; 0x01
    59e6:	a2 83       	std	Z+2, r26	; 0x02
    59e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59ea:	fe 01       	movw	r30, r28
    59ec:	ff 96       	adiw	r30, 0x3f	; 63
    59ee:	60 81       	ld	r22, Z
    59f0:	71 81       	ldd	r23, Z+1	; 0x01
    59f2:	82 81       	ldd	r24, Z+2	; 0x02
    59f4:	93 81       	ldd	r25, Z+3	; 0x03
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e8       	ldi	r20, 0x80	; 128
    59fc:	5f e3       	ldi	r21, 0x3F	; 63
    59fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5a02:	88 23       	and	r24, r24
    5a04:	2c f4       	brge	.+10     	; 0x5a10 <main+0x133c>
		__ticks = 1;
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	9e af       	std	Y+62, r25	; 0x3e
    5a0c:	8d af       	std	Y+61, r24	; 0x3d
    5a0e:	46 c0       	rjmp	.+140    	; 0x5a9c <main+0x13c8>
	else if (__tmp > 65535)
    5a10:	fe 01       	movw	r30, r28
    5a12:	ff 96       	adiw	r30, 0x3f	; 63
    5a14:	60 81       	ld	r22, Z
    5a16:	71 81       	ldd	r23, Z+1	; 0x01
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	93 81       	ldd	r25, Z+3	; 0x03
    5a1c:	20 e0       	ldi	r18, 0x00	; 0
    5a1e:	3f ef       	ldi	r19, 0xFF	; 255
    5a20:	4f e7       	ldi	r20, 0x7F	; 127
    5a22:	57 e4       	ldi	r21, 0x47	; 71
    5a24:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5a28:	18 16       	cp	r1, r24
    5a2a:	64 f5       	brge	.+88     	; 0x5a84 <main+0x13b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a2c:	fe 01       	movw	r30, r28
    5a2e:	ed 5b       	subi	r30, 0xBD	; 189
    5a30:	ff 4f       	sbci	r31, 0xFF	; 255
    5a32:	60 81       	ld	r22, Z
    5a34:	71 81       	ldd	r23, Z+1	; 0x01
    5a36:	82 81       	ldd	r24, Z+2	; 0x02
    5a38:	93 81       	ldd	r25, Z+3	; 0x03
    5a3a:	20 e0       	ldi	r18, 0x00	; 0
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	40 e2       	ldi	r20, 0x20	; 32
    5a40:	51 e4       	ldi	r21, 0x41	; 65
    5a42:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5a46:	dc 01       	movw	r26, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	bc 01       	movw	r22, r24
    5a4c:	cd 01       	movw	r24, r26
    5a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	9e af       	std	Y+62, r25	; 0x3e
    5a58:	8d af       	std	Y+61, r24	; 0x3d
    5a5a:	0f c0       	rjmp	.+30     	; 0x5a7a <main+0x13a6>
    5a5c:	88 ec       	ldi	r24, 0xC8	; 200
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	9c af       	std	Y+60, r25	; 0x3c
    5a62:	8b af       	std	Y+59, r24	; 0x3b
    5a64:	8b ad       	ldd	r24, Y+59	; 0x3b
    5a66:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a68:	01 97       	sbiw	r24, 0x01	; 1
    5a6a:	f1 f7       	brne	.-4      	; 0x5a68 <main+0x1394>
    5a6c:	9c af       	std	Y+60, r25	; 0x3c
    5a6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a70:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a72:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a74:	01 97       	sbiw	r24, 0x01	; 1
    5a76:	9e af       	std	Y+62, r25	; 0x3e
    5a78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a7e:	00 97       	sbiw	r24, 0x00	; 0
    5a80:	69 f7       	brne	.-38     	; 0x5a5c <main+0x1388>
    5a82:	16 c0       	rjmp	.+44     	; 0x5ab0 <main+0x13dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a84:	fe 01       	movw	r30, r28
    5a86:	ff 96       	adiw	r30, 0x3f	; 63
    5a88:	60 81       	ld	r22, Z
    5a8a:	71 81       	ldd	r23, Z+1	; 0x01
    5a8c:	82 81       	ldd	r24, Z+2	; 0x02
    5a8e:	93 81       	ldd	r25, Z+3	; 0x03
    5a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a94:	dc 01       	movw	r26, r24
    5a96:	cb 01       	movw	r24, r22
    5a98:	9e af       	std	Y+62, r25	; 0x3e
    5a9a:	8d af       	std	Y+61, r24	; 0x3d
    5a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5aa0:	9a af       	std	Y+58, r25	; 0x3a
    5aa2:	89 af       	std	Y+57, r24	; 0x39
    5aa4:	89 ad       	ldd	r24, Y+57	; 0x39
    5aa6:	9a ad       	ldd	r25, Y+58	; 0x3a
    5aa8:	01 97       	sbiw	r24, 0x01	; 1
    5aaa:	f1 f7       	brne	.-4      	; 0x5aa8 <main+0x13d4>
    5aac:	9a af       	std	Y+58, r25	; 0x3a
    5aae:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5);

				// Display minutes (tens)
				SSD_vDisable(seven_seg2);
    5ab0:	40 91 1c 03 	lds	r20, 0x031C
    5ab4:	50 91 1d 03 	lds	r21, 0x031D
    5ab8:	60 91 1e 03 	lds	r22, 0x031E
    5abc:	70 91 1f 03 	lds	r23, 0x031F
    5ac0:	80 91 20 03 	lds	r24, 0x0320
    5ac4:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg3);
    5ac8:	40 91 21 03 	lds	r20, 0x0321
    5acc:	50 91 22 03 	lds	r21, 0x0322
    5ad0:	60 91 23 03 	lds	r22, 0x0323
    5ad4:	70 91 24 03 	lds	r23, 0x0324
    5ad8:	80 91 25 03 	lds	r24, 0x0325
    5adc:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg3, Minute/10);
    5ae0:	80 91 52 03 	lds	r24, 0x0352
    5ae4:	9a e0       	ldi	r25, 0x0A	; 10
    5ae6:	69 2f       	mov	r22, r25
    5ae8:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5aec:	98 2f       	mov	r25, r24
    5aee:	40 91 21 03 	lds	r20, 0x0321
    5af2:	50 91 22 03 	lds	r21, 0x0322
    5af6:	60 91 23 03 	lds	r22, 0x0323
    5afa:	70 91 24 03 	lds	r23, 0x0324
    5afe:	80 91 25 03 	lds	r24, 0x0325
    5b02:	29 2f       	mov	r18, r25
    5b04:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5b08:	80 e0       	ldi	r24, 0x00	; 0
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	a0 ea       	ldi	r26, 0xA0	; 160
    5b0e:	b0 e4       	ldi	r27, 0x40	; 64
    5b10:	8d ab       	std	Y+53, r24	; 0x35
    5b12:	9e ab       	std	Y+54, r25	; 0x36
    5b14:	af ab       	std	Y+55, r26	; 0x37
    5b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b18:	6d a9       	ldd	r22, Y+53	; 0x35
    5b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    5b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    5b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    5b20:	20 e0       	ldi	r18, 0x00	; 0
    5b22:	30 e0       	ldi	r19, 0x00	; 0
    5b24:	4a ef       	ldi	r20, 0xFA	; 250
    5b26:	54 e4       	ldi	r21, 0x44	; 68
    5b28:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b2c:	dc 01       	movw	r26, r24
    5b2e:	cb 01       	movw	r24, r22
    5b30:	89 ab       	std	Y+49, r24	; 0x31
    5b32:	9a ab       	std	Y+50, r25	; 0x32
    5b34:	ab ab       	std	Y+51, r26	; 0x33
    5b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b38:	69 a9       	ldd	r22, Y+49	; 0x31
    5b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    5b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    5b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    5b40:	20 e0       	ldi	r18, 0x00	; 0
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	40 e8       	ldi	r20, 0x80	; 128
    5b46:	5f e3       	ldi	r21, 0x3F	; 63
    5b48:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5b4c:	88 23       	and	r24, r24
    5b4e:	2c f4       	brge	.+10     	; 0x5b5a <main+0x1486>
		__ticks = 1;
    5b50:	81 e0       	ldi	r24, 0x01	; 1
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	98 ab       	std	Y+48, r25	; 0x30
    5b56:	8f a7       	std	Y+47, r24	; 0x2f
    5b58:	3f c0       	rjmp	.+126    	; 0x5bd8 <main+0x1504>
	else if (__tmp > 65535)
    5b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    5b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    5b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    5b60:	9c a9       	ldd	r25, Y+52	; 0x34
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	3f ef       	ldi	r19, 0xFF	; 255
    5b66:	4f e7       	ldi	r20, 0x7F	; 127
    5b68:	57 e4       	ldi	r21, 0x47	; 71
    5b6a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5b6e:	18 16       	cp	r1, r24
    5b70:	4c f5       	brge	.+82     	; 0x5bc4 <main+0x14f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b72:	6d a9       	ldd	r22, Y+53	; 0x35
    5b74:	7e a9       	ldd	r23, Y+54	; 0x36
    5b76:	8f a9       	ldd	r24, Y+55	; 0x37
    5b78:	98 ad       	ldd	r25, Y+56	; 0x38
    5b7a:	20 e0       	ldi	r18, 0x00	; 0
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	40 e2       	ldi	r20, 0x20	; 32
    5b80:	51 e4       	ldi	r21, 0x41	; 65
    5b82:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b86:	dc 01       	movw	r26, r24
    5b88:	cb 01       	movw	r24, r22
    5b8a:	bc 01       	movw	r22, r24
    5b8c:	cd 01       	movw	r24, r26
    5b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b92:	dc 01       	movw	r26, r24
    5b94:	cb 01       	movw	r24, r22
    5b96:	98 ab       	std	Y+48, r25	; 0x30
    5b98:	8f a7       	std	Y+47, r24	; 0x2f
    5b9a:	0f c0       	rjmp	.+30     	; 0x5bba <main+0x14e6>
    5b9c:	88 ec       	ldi	r24, 0xC8	; 200
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	9e a7       	std	Y+46, r25	; 0x2e
    5ba2:	8d a7       	std	Y+45, r24	; 0x2d
    5ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ba8:	01 97       	sbiw	r24, 0x01	; 1
    5baa:	f1 f7       	brne	.-4      	; 0x5ba8 <main+0x14d4>
    5bac:	9e a7       	std	Y+46, r25	; 0x2e
    5bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    5bb4:	01 97       	sbiw	r24, 0x01	; 1
    5bb6:	98 ab       	std	Y+48, r25	; 0x30
    5bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    5bbe:	00 97       	sbiw	r24, 0x00	; 0
    5bc0:	69 f7       	brne	.-38     	; 0x5b9c <main+0x14c8>
    5bc2:	14 c0       	rjmp	.+40     	; 0x5bec <main+0x1518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    5bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    5bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    5bca:	9c a9       	ldd	r25, Y+52	; 0x34
    5bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd0:	dc 01       	movw	r26, r24
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	98 ab       	std	Y+48, r25	; 0x30
    5bd6:	8f a7       	std	Y+47, r24	; 0x2f
    5bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bda:	98 a9       	ldd	r25, Y+48	; 0x30
    5bdc:	9c a7       	std	Y+44, r25	; 0x2c
    5bde:	8b a7       	std	Y+43, r24	; 0x2b
    5be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5be4:	01 97       	sbiw	r24, 0x01	; 1
    5be6:	f1 f7       	brne	.-4      	; 0x5be4 <main+0x1510>
    5be8:	9c a7       	std	Y+44, r25	; 0x2c
    5bea:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5);

				// Display hours (units)
				SSD_vDisable(seven_seg3);
    5bec:	40 91 21 03 	lds	r20, 0x0321
    5bf0:	50 91 22 03 	lds	r21, 0x0322
    5bf4:	60 91 23 03 	lds	r22, 0x0323
    5bf8:	70 91 24 03 	lds	r23, 0x0324
    5bfc:	80 91 25 03 	lds	r24, 0x0325
    5c00:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg4);
    5c04:	40 91 26 03 	lds	r20, 0x0326
    5c08:	50 91 27 03 	lds	r21, 0x0327
    5c0c:	60 91 28 03 	lds	r22, 0x0328
    5c10:	70 91 29 03 	lds	r23, 0x0329
    5c14:	80 91 2a 03 	lds	r24, 0x032A
    5c18:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg4, Hour %10);
    5c1c:	80 91 10 03 	lds	r24, 0x0310
    5c20:	9a e0       	ldi	r25, 0x0A	; 10
    5c22:	69 2f       	mov	r22, r25
    5c24:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5c28:	89 2f       	mov	r24, r25
    5c2a:	98 2f       	mov	r25, r24
    5c2c:	40 91 26 03 	lds	r20, 0x0326
    5c30:	50 91 27 03 	lds	r21, 0x0327
    5c34:	60 91 28 03 	lds	r22, 0x0328
    5c38:	70 91 29 03 	lds	r23, 0x0329
    5c3c:	80 91 2a 03 	lds	r24, 0x032A
    5c40:	29 2f       	mov	r18, r25
    5c42:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	a0 ea       	ldi	r26, 0xA0	; 160
    5c4c:	b0 e4       	ldi	r27, 0x40	; 64
    5c4e:	8f a3       	std	Y+39, r24	; 0x27
    5c50:	98 a7       	std	Y+40, r25	; 0x28
    5c52:	a9 a7       	std	Y+41, r26	; 0x29
    5c54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c56:	6f a1       	ldd	r22, Y+39	; 0x27
    5c58:	78 a5       	ldd	r23, Y+40	; 0x28
    5c5a:	89 a5       	ldd	r24, Y+41	; 0x29
    5c5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c5e:	20 e0       	ldi	r18, 0x00	; 0
    5c60:	30 e0       	ldi	r19, 0x00	; 0
    5c62:	4a ef       	ldi	r20, 0xFA	; 250
    5c64:	54 e4       	ldi	r21, 0x44	; 68
    5c66:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	cb 01       	movw	r24, r22
    5c6e:	8b a3       	std	Y+35, r24	; 0x23
    5c70:	9c a3       	std	Y+36, r25	; 0x24
    5c72:	ad a3       	std	Y+37, r26	; 0x25
    5c74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c76:	6b a1       	ldd	r22, Y+35	; 0x23
    5c78:	7c a1       	ldd	r23, Y+36	; 0x24
    5c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    5c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    5c7e:	20 e0       	ldi	r18, 0x00	; 0
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	40 e8       	ldi	r20, 0x80	; 128
    5c84:	5f e3       	ldi	r21, 0x3F	; 63
    5c86:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5c8a:	88 23       	and	r24, r24
    5c8c:	2c f4       	brge	.+10     	; 0x5c98 <main+0x15c4>
		__ticks = 1;
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	9a a3       	std	Y+34, r25	; 0x22
    5c94:	89 a3       	std	Y+33, r24	; 0x21
    5c96:	3f c0       	rjmp	.+126    	; 0x5d16 <main+0x1642>
	else if (__tmp > 65535)
    5c98:	6b a1       	ldd	r22, Y+35	; 0x23
    5c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    5c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    5c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	3f ef       	ldi	r19, 0xFF	; 255
    5ca4:	4f e7       	ldi	r20, 0x7F	; 127
    5ca6:	57 e4       	ldi	r21, 0x47	; 71
    5ca8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5cac:	18 16       	cp	r1, r24
    5cae:	4c f5       	brge	.+82     	; 0x5d02 <main+0x162e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    5cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    5cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    5cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cb8:	20 e0       	ldi	r18, 0x00	; 0
    5cba:	30 e0       	ldi	r19, 0x00	; 0
    5cbc:	40 e2       	ldi	r20, 0x20	; 32
    5cbe:	51 e4       	ldi	r21, 0x41	; 65
    5cc0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	cb 01       	movw	r24, r22
    5cc8:	bc 01       	movw	r22, r24
    5cca:	cd 01       	movw	r24, r26
    5ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	cb 01       	movw	r24, r22
    5cd4:	9a a3       	std	Y+34, r25	; 0x22
    5cd6:	89 a3       	std	Y+33, r24	; 0x21
    5cd8:	0f c0       	rjmp	.+30     	; 0x5cf8 <main+0x1624>
    5cda:	88 ec       	ldi	r24, 0xC8	; 200
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	98 a3       	std	Y+32, r25	; 0x20
    5ce0:	8f 8f       	std	Y+31, r24	; 0x1f
    5ce2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ce4:	98 a1       	ldd	r25, Y+32	; 0x20
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	f1 f7       	brne	.-4      	; 0x5ce6 <main+0x1612>
    5cea:	98 a3       	std	Y+32, r25	; 0x20
    5cec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cee:	89 a1       	ldd	r24, Y+33	; 0x21
    5cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	9a a3       	std	Y+34, r25	; 0x22
    5cf6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    5cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    5cfc:	00 97       	sbiw	r24, 0x00	; 0
    5cfe:	69 f7       	brne	.-38     	; 0x5cda <main+0x1606>
    5d00:	14 c0       	rjmp	.+40     	; 0x5d2a <main+0x1656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d02:	6b a1       	ldd	r22, Y+35	; 0x23
    5d04:	7c a1       	ldd	r23, Y+36	; 0x24
    5d06:	8d a1       	ldd	r24, Y+37	; 0x25
    5d08:	9e a1       	ldd	r25, Y+38	; 0x26
    5d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d0e:	dc 01       	movw	r26, r24
    5d10:	cb 01       	movw	r24, r22
    5d12:	9a a3       	std	Y+34, r25	; 0x22
    5d14:	89 a3       	std	Y+33, r24	; 0x21
    5d16:	89 a1       	ldd	r24, Y+33	; 0x21
    5d18:	9a a1       	ldd	r25, Y+34	; 0x22
    5d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    5d1c:	8d 8f       	std	Y+29, r24	; 0x1d
    5d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d22:	01 97       	sbiw	r24, 0x01	; 1
    5d24:	f1 f7       	brne	.-4      	; 0x5d22 <main+0x164e>
    5d26:	9e 8f       	std	Y+30, r25	; 0x1e
    5d28:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5);

				// Display hours (tens)
				SSD_vDisable(seven_seg4);
    5d2a:	40 91 26 03 	lds	r20, 0x0326
    5d2e:	50 91 27 03 	lds	r21, 0x0327
    5d32:	60 91 28 03 	lds	r22, 0x0328
    5d36:	70 91 29 03 	lds	r23, 0x0329
    5d3a:	80 91 2a 03 	lds	r24, 0x032A
    5d3e:	0e 94 37 23 	call	0x466e	; 0x466e <SSD_vDisable>
				SSD_vEnable(seven_seg5);
    5d42:	40 91 2b 03 	lds	r20, 0x032B
    5d46:	50 91 2c 03 	lds	r21, 0x032C
    5d4a:	60 91 2d 03 	lds	r22, 0x032D
    5d4e:	70 91 2e 03 	lds	r23, 0x032E
    5d52:	80 91 2f 03 	lds	r24, 0x032F
    5d56:	0e 94 04 23 	call	0x4608	; 0x4608 <SSD_vEnable>
				SSD_vSendNumber(seven_seg5, Hour /10);
    5d5a:	80 91 10 03 	lds	r24, 0x0310
    5d5e:	9a e0       	ldi	r25, 0x0A	; 10
    5d60:	69 2f       	mov	r22, r25
    5d62:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    5d66:	98 2f       	mov	r25, r24
    5d68:	40 91 2b 03 	lds	r20, 0x032B
    5d6c:	50 91 2c 03 	lds	r21, 0x032C
    5d70:	60 91 2d 03 	lds	r22, 0x032D
    5d74:	70 91 2e 03 	lds	r23, 0x032E
    5d78:	80 91 2f 03 	lds	r24, 0x032F
    5d7c:	29 2f       	mov	r18, r25
    5d7e:	0e 94 df 22 	call	0x45be	; 0x45be <SSD_vSendNumber>
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	a0 ea       	ldi	r26, 0xA0	; 160
    5d88:	b0 e4       	ldi	r27, 0x40	; 64
    5d8a:	89 8f       	std	Y+25, r24	; 0x19
    5d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    5d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    5d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d92:	69 8d       	ldd	r22, Y+25	; 0x19
    5d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d9a:	20 e0       	ldi	r18, 0x00	; 0
    5d9c:	30 e0       	ldi	r19, 0x00	; 0
    5d9e:	4a ef       	ldi	r20, 0xFA	; 250
    5da0:	54 e4       	ldi	r21, 0x44	; 68
    5da2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5da6:	dc 01       	movw	r26, r24
    5da8:	cb 01       	movw	r24, r22
    5daa:	8d 8b       	std	Y+21, r24	; 0x15
    5dac:	9e 8b       	std	Y+22, r25	; 0x16
    5dae:	af 8b       	std	Y+23, r26	; 0x17
    5db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5db2:	6d 89       	ldd	r22, Y+21	; 0x15
    5db4:	7e 89       	ldd	r23, Y+22	; 0x16
    5db6:	8f 89       	ldd	r24, Y+23	; 0x17
    5db8:	98 8d       	ldd	r25, Y+24	; 0x18
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	40 e8       	ldi	r20, 0x80	; 128
    5dc0:	5f e3       	ldi	r21, 0x3F	; 63
    5dc2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5dc6:	88 23       	and	r24, r24
    5dc8:	2c f4       	brge	.+10     	; 0x5dd4 <main+0x1700>
		__ticks = 1;
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	9c 8b       	std	Y+20, r25	; 0x14
    5dd0:	8b 8b       	std	Y+19, r24	; 0x13
    5dd2:	3f c0       	rjmp	.+126    	; 0x5e52 <main+0x177e>
	else if (__tmp > 65535)
    5dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    5dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    5dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    5dda:	98 8d       	ldd	r25, Y+24	; 0x18
    5ddc:	20 e0       	ldi	r18, 0x00	; 0
    5dde:	3f ef       	ldi	r19, 0xFF	; 255
    5de0:	4f e7       	ldi	r20, 0x7F	; 127
    5de2:	57 e4       	ldi	r21, 0x47	; 71
    5de4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5de8:	18 16       	cp	r1, r24
    5dea:	4c f5       	brge	.+82     	; 0x5e3e <main+0x176a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dec:	69 8d       	ldd	r22, Y+25	; 0x19
    5dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5df4:	20 e0       	ldi	r18, 0x00	; 0
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	40 e2       	ldi	r20, 0x20	; 32
    5dfa:	51 e4       	ldi	r21, 0x41	; 65
    5dfc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5e00:	dc 01       	movw	r26, r24
    5e02:	cb 01       	movw	r24, r22
    5e04:	bc 01       	movw	r22, r24
    5e06:	cd 01       	movw	r24, r26
    5e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	9c 8b       	std	Y+20, r25	; 0x14
    5e12:	8b 8b       	std	Y+19, r24	; 0x13
    5e14:	0f c0       	rjmp	.+30     	; 0x5e34 <main+0x1760>
    5e16:	88 ec       	ldi	r24, 0xC8	; 200
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	9a 8b       	std	Y+18, r25	; 0x12
    5e1c:	89 8b       	std	Y+17, r24	; 0x11
    5e1e:	89 89       	ldd	r24, Y+17	; 0x11
    5e20:	9a 89       	ldd	r25, Y+18	; 0x12
    5e22:	01 97       	sbiw	r24, 0x01	; 1
    5e24:	f1 f7       	brne	.-4      	; 0x5e22 <main+0x174e>
    5e26:	9a 8b       	std	Y+18, r25	; 0x12
    5e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    5e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    5e2e:	01 97       	sbiw	r24, 0x01	; 1
    5e30:	9c 8b       	std	Y+20, r25	; 0x14
    5e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e34:	8b 89       	ldd	r24, Y+19	; 0x13
    5e36:	9c 89       	ldd	r25, Y+20	; 0x14
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	69 f7       	brne	.-38     	; 0x5e16 <main+0x1742>
    5e3c:	14 c0       	rjmp	.+40     	; 0x5e66 <main+0x1792>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    5e40:	7e 89       	ldd	r23, Y+22	; 0x16
    5e42:	8f 89       	ldd	r24, Y+23	; 0x17
    5e44:	98 8d       	ldd	r25, Y+24	; 0x18
    5e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	cb 01       	movw	r24, r22
    5e4e:	9c 8b       	std	Y+20, r25	; 0x14
    5e50:	8b 8b       	std	Y+19, r24	; 0x13
    5e52:	8b 89       	ldd	r24, Y+19	; 0x13
    5e54:	9c 89       	ldd	r25, Y+20	; 0x14
    5e56:	98 8b       	std	Y+16, r25	; 0x10
    5e58:	8f 87       	std	Y+15, r24	; 0x0f
    5e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e5c:	98 89       	ldd	r25, Y+16	; 0x10
    5e5e:	01 97       	sbiw	r24, 0x01	; 1
    5e60:	f1 f7       	brne	.-4      	; 0x5e5e <main+0x178a>
    5e62:	98 8b       	std	Y+16, r25	; 0x10
    5e64:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5);

				BUZ_vTog(BUZ0);
    5e66:	60 91 33 03 	lds	r22, 0x0333
    5e6a:	70 91 34 03 	lds	r23, 0x0334
    5e6e:	80 91 35 03 	lds	r24, 0x0335
    5e72:	0e 94 a8 22 	call	0x4550	; 0x4550 <BUZ_vTog>
    5e76:	80 e0       	ldi	r24, 0x00	; 0
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	a0 e2       	ldi	r26, 0x20	; 32
    5e7c:	b1 e4       	ldi	r27, 0x41	; 65
    5e7e:	8b 87       	std	Y+11, r24	; 0x0b
    5e80:	9c 87       	std	Y+12, r25	; 0x0c
    5e82:	ad 87       	std	Y+13, r26	; 0x0d
    5e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	4a ef       	ldi	r20, 0xFA	; 250
    5e94:	54 e4       	ldi	r21, 0x44	; 68
    5e96:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	8f 83       	std	Y+7, r24	; 0x07
    5ea0:	98 87       	std	Y+8, r25	; 0x08
    5ea2:	a9 87       	std	Y+9, r26	; 0x09
    5ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ea8:	78 85       	ldd	r23, Y+8	; 0x08
    5eaa:	89 85       	ldd	r24, Y+9	; 0x09
    5eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	40 e8       	ldi	r20, 0x80	; 128
    5eb4:	5f e3       	ldi	r21, 0x3F	; 63
    5eb6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5eba:	88 23       	and	r24, r24
    5ebc:	2c f4       	brge	.+10     	; 0x5ec8 <main+0x17f4>
		__ticks = 1;
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	9e 83       	std	Y+6, r25	; 0x06
    5ec4:	8d 83       	std	Y+5, r24	; 0x05
    5ec6:	3f c0       	rjmp	.+126    	; 0x5f46 <main+0x1872>
	else if (__tmp > 65535)
    5ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    5eca:	78 85       	ldd	r23, Y+8	; 0x08
    5ecc:	89 85       	ldd	r24, Y+9	; 0x09
    5ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	3f ef       	ldi	r19, 0xFF	; 255
    5ed4:	4f e7       	ldi	r20, 0x7F	; 127
    5ed6:	57 e4       	ldi	r21, 0x47	; 71
    5ed8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5edc:	18 16       	cp	r1, r24
    5ede:	4c f5       	brge	.+82     	; 0x5f32 <main+0x185e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	40 e2       	ldi	r20, 0x20	; 32
    5eee:	51 e4       	ldi	r21, 0x41	; 65
    5ef0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	cb 01       	movw	r24, r22
    5ef8:	bc 01       	movw	r22, r24
    5efa:	cd 01       	movw	r24, r26
    5efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f00:	dc 01       	movw	r26, r24
    5f02:	cb 01       	movw	r24, r22
    5f04:	9e 83       	std	Y+6, r25	; 0x06
    5f06:	8d 83       	std	Y+5, r24	; 0x05
    5f08:	0f c0       	rjmp	.+30     	; 0x5f28 <main+0x1854>
    5f0a:	88 ec       	ldi	r24, 0xC8	; 200
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	9c 83       	std	Y+4, r25	; 0x04
    5f10:	8b 83       	std	Y+3, r24	; 0x03
    5f12:	8b 81       	ldd	r24, Y+3	; 0x03
    5f14:	9c 81       	ldd	r25, Y+4	; 0x04
    5f16:	01 97       	sbiw	r24, 0x01	; 1
    5f18:	f1 f7       	brne	.-4      	; 0x5f16 <main+0x1842>
    5f1a:	9c 83       	std	Y+4, r25	; 0x04
    5f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f20:	9e 81       	ldd	r25, Y+6	; 0x06
    5f22:	01 97       	sbiw	r24, 0x01	; 1
    5f24:	9e 83       	std	Y+6, r25	; 0x06
    5f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f28:	8d 81       	ldd	r24, Y+5	; 0x05
    5f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5f2c:	00 97       	sbiw	r24, 0x00	; 0
    5f2e:	69 f7       	brne	.-38     	; 0x5f0a <main+0x1836>
    5f30:	41 cb       	rjmp	.-2430   	; 0x55b4 <main+0xee0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f32:	6f 81       	ldd	r22, Y+7	; 0x07
    5f34:	78 85       	ldd	r23, Y+8	; 0x08
    5f36:	89 85       	ldd	r24, Y+9	; 0x09
    5f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	9e 83       	std	Y+6, r25	; 0x06
    5f44:	8d 83       	std	Y+5, r24	; 0x05
    5f46:	8d 81       	ldd	r24, Y+5	; 0x05
    5f48:	9e 81       	ldd	r25, Y+6	; 0x06
    5f4a:	9a 83       	std	Y+2, r25	; 0x02
    5f4c:	89 83       	std	Y+1, r24	; 0x01
    5f4e:	89 81       	ldd	r24, Y+1	; 0x01
    5f50:	9a 81       	ldd	r25, Y+2	; 0x02
    5f52:	01 97       	sbiw	r24, 0x01	; 1
    5f54:	f1 f7       	brne	.-4      	; 0x5f52 <main+0x187e>
    5f56:	9a 83       	std	Y+2, r25	; 0x02
    5f58:	89 83       	std	Y+1, r24	; 0x01
    5f5a:	2c cb       	rjmp	.-2472   	; 0x55b4 <main+0xee0>
				_delay_ms(10);
			}
			BUZ_vOff(BUZ0);
    5f5c:	60 91 33 03 	lds	r22, 0x0333
    5f60:	70 91 34 03 	lds	r23, 0x0334
    5f64:	80 91 35 03 	lds	r24, 0x0335
    5f68:	0e 94 86 22 	call	0x450c	; 0x450c <BUZ_vOff>
			CLCD_vClearScreen();
    5f6c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - set time");
    5f70:	83 ec       	ldi	r24, 0xC3	; 195
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2,1);
    5f78:	82 e0       	ldi	r24, 0x02	; 2
    5f7a:	61 e0       	ldi	r22, 0x01	; 1
    5f7c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - select mode");
    5f80:	80 ed       	ldi	r24, 0xD0	; 208
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    5f88:	83 e0       	ldi	r24, 0x03	; 3
    5f8a:	61 e0       	ldi	r22, 0x01	; 1
    5f8c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    5f90:	85 e9       	ldi	r24, 0x95	; 149
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    5f98:	84 e0       	ldi	r24, 0x04	; 4
    5f9a:	61 e0       	ldi	r22, 0x01	; 1
    5f9c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Get Temp");
    5fa0:	8d ef       	ldi	r24, 0xFD	; 253
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    5fa8:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <main+0x104>

00005fac <Set_Time>:

//======================================================================================================================================//

// Function to set time
void Set_Time()
{
    5fac:	df 93       	push	r29
    5fae:	cf 93       	push	r28
    5fb0:	cd b7       	in	r28, 0x3d	; 61
    5fb2:	de b7       	in	r29, 0x3e	; 62
    5fb4:	6c 97       	sbiw	r28, 0x1c	; 28
    5fb6:	0f b6       	in	r0, 0x3f	; 63
    5fb8:	f8 94       	cli
    5fba:	de bf       	out	0x3e, r29	; 62
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    5fc0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    5fc4:	8a e0       	ldi	r24, 0x0A	; 10
    5fc6:	91 e0       	ldi	r25, 0x01	; 1
    5fc8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    5fcc:	82 e0       	ldi	r24, 0x02	; 2
    5fce:	61 e0       	ldi	r22, 0x01	; 1
    5fd0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    5fd4:	8b e1       	ldi	r24, 0x1B	; 27
    5fd6:	91 e0       	ldi	r25, 0x01	; 1
    5fd8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	/* Select time mode: 12 Hours or 24 Hours */
	do
	{
		mode = KPD_u8GetPressed();
    5fdc:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    5fe0:	80 93 11 03 	sts	0x0311, r24

		if (mode != NOTPRESSED && (mode != mode_12Hours && mode != mode_24Hours))
    5fe4:	80 91 11 03 	lds	r24, 0x0311
    5fe8:	8f 3f       	cpi	r24, 0xFF	; 255
    5fea:	09 f4       	brne	.+2      	; 0x5fee <Set_Time+0x42>
    5fec:	90 c0       	rjmp	.+288    	; 0x610e <Set_Time+0x162>
    5fee:	80 91 11 03 	lds	r24, 0x0311
    5ff2:	81 33       	cpi	r24, 0x31	; 49
    5ff4:	09 f4       	brne	.+2      	; 0x5ff8 <Set_Time+0x4c>
    5ff6:	8b c0       	rjmp	.+278    	; 0x610e <Set_Time+0x162>
    5ff8:	80 91 11 03 	lds	r24, 0x0311
    5ffc:	82 33       	cpi	r24, 0x32	; 50
    5ffe:	09 f4       	brne	.+2      	; 0x6002 <Set_Time+0x56>
    6000:	86 c0       	rjmp	.+268    	; 0x610e <Set_Time+0x162>
		{
			// Handle wrong input
			CLCD_vClearScreen();
    6002:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("wrong choise");
    6006:	8c e2       	ldi	r24, 0x2C	; 44
    6008:	91 e0       	ldi	r25, 0x01	; 1
    600a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    600e:	80 e0       	ldi	r24, 0x00	; 0
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	aa ef       	ldi	r26, 0xFA	; 250
    6014:	b3 e4       	ldi	r27, 0x43	; 67
    6016:	89 8f       	std	Y+25, r24	; 0x19
    6018:	9a 8f       	std	Y+26, r25	; 0x1a
    601a:	ab 8f       	std	Y+27, r26	; 0x1b
    601c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    601e:	69 8d       	ldd	r22, Y+25	; 0x19
    6020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6026:	20 e0       	ldi	r18, 0x00	; 0
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	4a ef       	ldi	r20, 0xFA	; 250
    602c:	54 e4       	ldi	r21, 0x44	; 68
    602e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6032:	dc 01       	movw	r26, r24
    6034:	cb 01       	movw	r24, r22
    6036:	8d 8b       	std	Y+21, r24	; 0x15
    6038:	9e 8b       	std	Y+22, r25	; 0x16
    603a:	af 8b       	std	Y+23, r26	; 0x17
    603c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    603e:	6d 89       	ldd	r22, Y+21	; 0x15
    6040:	7e 89       	ldd	r23, Y+22	; 0x16
    6042:	8f 89       	ldd	r24, Y+23	; 0x17
    6044:	98 8d       	ldd	r25, Y+24	; 0x18
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	40 e8       	ldi	r20, 0x80	; 128
    604c:	5f e3       	ldi	r21, 0x3F	; 63
    604e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6052:	88 23       	and	r24, r24
    6054:	2c f4       	brge	.+10     	; 0x6060 <Set_Time+0xb4>
		__ticks = 1;
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	9c 8b       	std	Y+20, r25	; 0x14
    605c:	8b 8b       	std	Y+19, r24	; 0x13
    605e:	3f c0       	rjmp	.+126    	; 0x60de <Set_Time+0x132>
	else if (__tmp > 65535)
    6060:	6d 89       	ldd	r22, Y+21	; 0x15
    6062:	7e 89       	ldd	r23, Y+22	; 0x16
    6064:	8f 89       	ldd	r24, Y+23	; 0x17
    6066:	98 8d       	ldd	r25, Y+24	; 0x18
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	3f ef       	ldi	r19, 0xFF	; 255
    606c:	4f e7       	ldi	r20, 0x7F	; 127
    606e:	57 e4       	ldi	r21, 0x47	; 71
    6070:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6074:	18 16       	cp	r1, r24
    6076:	4c f5       	brge	.+82     	; 0x60ca <Set_Time+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6078:	69 8d       	ldd	r22, Y+25	; 0x19
    607a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    607c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    607e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	40 e2       	ldi	r20, 0x20	; 32
    6086:	51 e4       	ldi	r21, 0x41	; 65
    6088:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	bc 01       	movw	r22, r24
    6092:	cd 01       	movw	r24, r26
    6094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	9c 8b       	std	Y+20, r25	; 0x14
    609e:	8b 8b       	std	Y+19, r24	; 0x13
    60a0:	0f c0       	rjmp	.+30     	; 0x60c0 <Set_Time+0x114>
    60a2:	88 ec       	ldi	r24, 0xC8	; 200
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	9a 8b       	std	Y+18, r25	; 0x12
    60a8:	89 8b       	std	Y+17, r24	; 0x11
    60aa:	89 89       	ldd	r24, Y+17	; 0x11
    60ac:	9a 89       	ldd	r25, Y+18	; 0x12
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	f1 f7       	brne	.-4      	; 0x60ae <Set_Time+0x102>
    60b2:	9a 8b       	std	Y+18, r25	; 0x12
    60b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60b6:	8b 89       	ldd	r24, Y+19	; 0x13
    60b8:	9c 89       	ldd	r25, Y+20	; 0x14
    60ba:	01 97       	sbiw	r24, 0x01	; 1
    60bc:	9c 8b       	std	Y+20, r25	; 0x14
    60be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c0:	8b 89       	ldd	r24, Y+19	; 0x13
    60c2:	9c 89       	ldd	r25, Y+20	; 0x14
    60c4:	00 97       	sbiw	r24, 0x00	; 0
    60c6:	69 f7       	brne	.-38     	; 0x60a2 <Set_Time+0xf6>
    60c8:	14 c0       	rjmp	.+40     	; 0x60f2 <Set_Time+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ca:	6d 89       	ldd	r22, Y+21	; 0x15
    60cc:	7e 89       	ldd	r23, Y+22	; 0x16
    60ce:	8f 89       	ldd	r24, Y+23	; 0x17
    60d0:	98 8d       	ldd	r25, Y+24	; 0x18
    60d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60d6:	dc 01       	movw	r26, r24
    60d8:	cb 01       	movw	r24, r22
    60da:	9c 8b       	std	Y+20, r25	; 0x14
    60dc:	8b 8b       	std	Y+19, r24	; 0x13
    60de:	8b 89       	ldd	r24, Y+19	; 0x13
    60e0:	9c 89       	ldd	r25, Y+20	; 0x14
    60e2:	98 8b       	std	Y+16, r25	; 0x10
    60e4:	8f 87       	std	Y+15, r24	; 0x0f
    60e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    60e8:	98 89       	ldd	r25, Y+16	; 0x10
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    60ec:	f1 f7       	brne	.-4      	; 0x60ea <Set_Time+0x13e>
    60ee:	98 8b       	std	Y+16, r25	; 0x10
    60f0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_vClearScreen();
    60f2:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    60f6:	8a e0       	ldi	r24, 0x0A	; 10
    60f8:	91 e0       	ldi	r25, 0x01	; 1
    60fa:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    60fe:	82 e0       	ldi	r24, 0x02	; 2
    6100:	61 e0       	ldi	r22, 0x01	; 1
    6102:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    6106:	8b e1       	ldi	r24, 0x1B	; 27
    6108:	91 e0       	ldi	r25, 0x01	; 1
    610a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	}while (mode == NOTPRESSED || (mode != mode_12Hours && mode != mode_24Hours));
    610e:	80 91 11 03 	lds	r24, 0x0311
    6112:	8f 3f       	cpi	r24, 0xFF	; 255
    6114:	09 f4       	brne	.+2      	; 0x6118 <Set_Time+0x16c>
    6116:	62 cf       	rjmp	.-316    	; 0x5fdc <Set_Time+0x30>
    6118:	80 91 11 03 	lds	r24, 0x0311
    611c:	81 33       	cpi	r24, 0x31	; 49
    611e:	29 f0       	breq	.+10     	; 0x612a <Set_Time+0x17e>
    6120:	80 91 11 03 	lds	r24, 0x0311
    6124:	82 33       	cpi	r24, 0x32	; 50
    6126:	09 f0       	breq	.+2      	; 0x612a <Set_Time+0x17e>
    6128:	59 cf       	rjmp	.-334    	; 0x5fdc <Set_Time+0x30>

	// Set AM or PM flag based on selected mode
	if (mode ==  mode_12Hours)
    612a:	80 91 11 03 	lds	r24, 0x0311
    612e:	81 33       	cpi	r24, 0x31	; 49
    6130:	21 f4       	brne	.+8      	; 0x613a <Set_Time+0x18e>
	{
		Mode_Flag = 1;
    6132:	81 e0       	ldi	r24, 0x01	; 1
    6134:	80 93 0f 03 	sts	0x030F, r24
    6138:	06 c0       	rjmp	.+12     	; 0x6146 <Set_Time+0x19a>
	}
	else if (mode == mode_24Hours)
    613a:	80 91 11 03 	lds	r24, 0x0311
    613e:	82 33       	cpi	r24, 0x32	; 50
    6140:	11 f4       	brne	.+4      	; 0x6146 <Set_Time+0x19a>
	{
		Mode_Flag = 0;
    6142:	10 92 0f 03 	sts	0x030F, r1
	else
	{

	}

	CLCD_vClearScreen();
    6146:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>

	// Display the current time on the CLCD
	CLCD_vSendData(Hour /10 +48);
    614a:	80 91 10 03 	lds	r24, 0x0310
    614e:	9a e0       	ldi	r25, 0x0A	; 10
    6150:	69 2f       	mov	r22, r25
    6152:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6156:	80 5d       	subi	r24, 0xD0	; 208
    6158:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Hour %10 +48);
    615c:	80 91 10 03 	lds	r24, 0x0310
    6160:	9a e0       	ldi	r25, 0x0A	; 10
    6162:	69 2f       	mov	r22, r25
    6164:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6168:	89 2f       	mov	r24, r25
    616a:	80 5d       	subi	r24, 0xD0	; 208
    616c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    6170:	89 e3       	ldi	r24, 0x39	; 57
    6172:	91 e0       	ldi	r25, 0x01	; 1
    6174:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSendData(Minute/10 + 48);
    6178:	80 91 52 03 	lds	r24, 0x0352
    617c:	9a e0       	ldi	r25, 0x0A	; 10
    617e:	69 2f       	mov	r22, r25
    6180:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6184:	80 5d       	subi	r24, 0xD0	; 208
    6186:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Minute%10 + 48);
    618a:	80 91 52 03 	lds	r24, 0x0352
    618e:	9a e0       	ldi	r25, 0x0A	; 10
    6190:	69 2f       	mov	r22, r25
    6192:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6196:	89 2f       	mov	r24, r25
    6198:	80 5d       	subi	r24, 0xD0	; 208
    619a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendString(" : ");
    619e:	89 e3       	ldi	r24, 0x39	; 57
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSendData(Second/10 + 48);
    61a6:	80 91 53 03 	lds	r24, 0x0353
    61aa:	9a e0       	ldi	r25, 0x0A	; 10
    61ac:	69 2f       	mov	r22, r25
    61ae:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    61b2:	80 5d       	subi	r24, 0xD0	; 208
    61b4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(Second%10 + 48);
    61b8:	80 91 53 03 	lds	r24, 0x0353
    61bc:	9a e0       	ldi	r25, 0x0A	; 10
    61be:	69 2f       	mov	r22, r25
    61c0:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    61c4:	89 2f       	mov	r24, r25
    61c6:	80 5d       	subi	r24, 0xD0	; 208
    61c8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	CLCD_vSendData(' ');
    61cc:	80 e2       	ldi	r24, 0x20	; 32
    61ce:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	// Display AM/PM if in 12-hour mode
	if (mode == '1')
    61d2:	80 91 11 03 	lds	r24, 0x0311
    61d6:	81 33       	cpi	r24, 0x31	; 49
    61d8:	c9 f4       	brne	.+50     	; 0x620c <Set_Time+0x260>
	{
		if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    61da:	eb e3       	ldi	r30, 0x3B	; 59
    61dc:	f0 e0       	ldi	r31, 0x00	; 0
    61de:	80 81       	ld	r24, Z
    61e0:	88 2f       	mov	r24, r24
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	88 70       	andi	r24, 0x08	; 8
    61e6:	90 70       	andi	r25, 0x00	; 0
    61e8:	95 95       	asr	r25
    61ea:	87 95       	ror	r24
    61ec:	95 95       	asr	r25
    61ee:	87 95       	ror	r24
    61f0:	95 95       	asr	r25
    61f2:	87 95       	ror	r24
    61f4:	81 30       	cpi	r24, 0x01	; 1
    61f6:	91 05       	cpc	r25, r1
    61f8:	29 f4       	brne	.+10     	; 0x6204 <Set_Time+0x258>
		{
			CLCD_vSendString("AM");
    61fa:	8d e3       	ldi	r24, 0x3D	; 61
    61fc:	91 e0       	ldi	r25, 0x01	; 1
    61fe:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6202:	04 c0       	rjmp	.+8      	; 0x620c <Set_Time+0x260>
		}
		else
		{
			CLCD_vSendString("PM");
    6204:	80 e4       	ldi	r24, 0x40	; 64
    6206:	91 e0       	ldi	r25, 0x01	; 1
    6208:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	}

	/* Change Time */
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    620c:	8e e0       	ldi	r24, 0x0E	; 14
    620e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
	CLCD_vSetPosition(1,1);
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	61 e0       	ldi	r22, 0x01	; 1
    6216:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

	/* Set hours */
	// First Digit
	do
	{
		press = KPD_u8GetPressed();
    621a:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    621e:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6222:	80 91 56 03 	lds	r24, 0x0356
    6226:	8f 3f       	cpi	r24, 0xFF	; 255
    6228:	c1 f3       	breq	.-16     	; 0x621a <Set_Time+0x26e>
	CLCD_vSetPosition(1,1);
    622a:	81 e0       	ldi	r24, 0x01	; 1
    622c:	61 e0       	ldi	r22, 0x01	; 1
    622e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendData( press );
    6232:	80 91 56 03 	lds	r24, 0x0356
    6236:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Hour = (press - 48) * 10;
    623a:	80 91 56 03 	lds	r24, 0x0356
    623e:	88 2f       	mov	r24, r24
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	9c 01       	movw	r18, r24
    6244:	22 0f       	add	r18, r18
    6246:	33 1f       	adc	r19, r19
    6248:	c9 01       	movw	r24, r18
    624a:	88 0f       	add	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	88 0f       	add	r24, r24
    6250:	99 1f       	adc	r25, r25
    6252:	82 0f       	add	r24, r18
    6254:	93 1f       	adc	r25, r19
    6256:	80 5e       	subi	r24, 0xE0	; 224
    6258:	80 93 10 03 	sts	0x0310, r24

	// Second Digit
	do
	{
		press = KPD_u8GetPressed();
    625c:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6260:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6264:	80 91 56 03 	lds	r24, 0x0356
    6268:	8f 3f       	cpi	r24, 0xFF	; 255
    626a:	c1 f3       	breq	.-16     	; 0x625c <Set_Time+0x2b0>
	CLCD_vSendData(press);
    626c:	80 91 56 03 	lds	r24, 0x0356
    6270:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	// Calculate total hours
	Hour += (press - 48) ;
    6274:	90 91 56 03 	lds	r25, 0x0356
    6278:	80 91 10 03 	lds	r24, 0x0310
    627c:	89 0f       	add	r24, r25
    627e:	80 53       	subi	r24, 0x30	; 48
    6280:	80 93 10 03 	sts	0x0310, r24

	/* Check mode to change hour limit
	 * ==> if mode is 24 hours --> hour is less than 24
	 * ==> if mode is 12 hours --> hour is less than 12
	 */
	if (mode == mode_12Hours)
    6284:	80 91 11 03 	lds	r24, 0x0311
    6288:	81 33       	cpi	r24, 0x31	; 49
    628a:	19 f5       	brne	.+70     	; 0x62d2 <Set_Time+0x326>
	{
		if (Hour > 12 || Hour == 0)
    628c:	80 91 10 03 	lds	r24, 0x0310
    6290:	8d 30       	cpi	r24, 0x0D	; 13
    6292:	20 f4       	brcc	.+8      	; 0x629c <Set_Time+0x2f0>
    6294:	80 91 10 03 	lds	r24, 0x0310
    6298:	88 23       	and	r24, r24
    629a:	e1 f5       	brne	.+120    	; 0x6314 <Set_Time+0x368>
		{
			Hour = 12;
    629c:	8c e0       	ldi	r24, 0x0C	; 12
    629e:	80 93 10 03 	sts	0x0310, r24
			CLCD_vSetPosition(1, 1);
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	61 e0       	ldi	r22, 0x01	; 1
    62a6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData(Hour /10 +48);
    62aa:	80 91 10 03 	lds	r24, 0x0310
    62ae:	9a e0       	ldi	r25, 0x0A	; 10
    62b0:	69 2f       	mov	r22, r25
    62b2:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    62b6:	80 5d       	subi	r24, 0xD0	; 208
    62b8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData(Hour %10 +48);
    62bc:	80 91 10 03 	lds	r24, 0x0310
    62c0:	9a e0       	ldi	r25, 0x0A	; 10
    62c2:	69 2f       	mov	r22, r25
    62c4:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    62c8:	89 2f       	mov	r24, r25
    62ca:	80 5d       	subi	r24, 0xD0	; 208
    62cc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    62d0:	21 c0       	rjmp	.+66     	; 0x6314 <Set_Time+0x368>
		else
		{

		}
	}
	else if (mode == mode_24Hours)
    62d2:	80 91 11 03 	lds	r24, 0x0311
    62d6:	82 33       	cpi	r24, 0x32	; 50
    62d8:	e9 f4       	brne	.+58     	; 0x6314 <Set_Time+0x368>
	{
		if (Hour  > 23)
    62da:	80 91 10 03 	lds	r24, 0x0310
    62de:	88 31       	cpi	r24, 0x18	; 24
    62e0:	c8 f0       	brcs	.+50     	; 0x6314 <Set_Time+0x368>
		{
			Hour = 0;
    62e2:	10 92 10 03 	sts	0x0310, r1
			CLCD_vSetPosition(1, 1);
    62e6:	81 e0       	ldi	r24, 0x01	; 1
    62e8:	61 e0       	ldi	r22, 0x01	; 1
    62ea:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData(Hour /10 +48);
    62ee:	80 91 10 03 	lds	r24, 0x0310
    62f2:	9a e0       	ldi	r25, 0x0A	; 10
    62f4:	69 2f       	mov	r22, r25
    62f6:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    62fa:	80 5d       	subi	r24, 0xD0	; 208
    62fc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData(Hour %10 +48);
    6300:	80 91 10 03 	lds	r24, 0x0310
    6304:	9a e0       	ldi	r25, 0x0A	; 10
    6306:	69 2f       	mov	r22, r25
    6308:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    630c:	89 2f       	mov	r24, r25
    630e:	80 5d       	subi	r24, 0xD0	; 208
    6310:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	}
	/* Set minutes and seconds similar to hours */

	// Set minutes
	CLCD_vSetPosition(1,6);
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	66 e0       	ldi	r22, 0x06	; 6
    6318:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	do
	{
		press = KPD_u8GetPressed();
    631c:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6320:	80 93 56 03 	sts	0x0356, r24
	} while (press == NOTPRESSED);
    6324:	80 91 56 03 	lds	r24, 0x0356
    6328:	8f 3f       	cpi	r24, 0xFF	; 255
    632a:	c1 f3       	breq	.-16     	; 0x631c <Set_Time+0x370>
	CLCD_vSendData(press);
    632c:	80 91 56 03 	lds	r24, 0x0356
    6330:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Minute = (press - 48) * 10;
    6334:	80 91 56 03 	lds	r24, 0x0356
    6338:	88 2f       	mov	r24, r24
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	9c 01       	movw	r18, r24
    633e:	22 0f       	add	r18, r18
    6340:	33 1f       	adc	r19, r19
    6342:	c9 01       	movw	r24, r18
    6344:	88 0f       	add	r24, r24
    6346:	99 1f       	adc	r25, r25
    6348:	88 0f       	add	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	82 0f       	add	r24, r18
    634e:	93 1f       	adc	r25, r19
    6350:	80 5e       	subi	r24, 0xE0	; 224
    6352:	80 93 52 03 	sts	0x0352, r24

	do
	{
		press = KPD_u8GetPressed();
    6356:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    635a:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    635e:	80 91 56 03 	lds	r24, 0x0356
    6362:	8f 3f       	cpi	r24, 0xFF	; 255
    6364:	c1 f3       	breq	.-16     	; 0x6356 <Set_Time+0x3aa>
	CLCD_vSendData(press);
    6366:	80 91 56 03 	lds	r24, 0x0356
    636a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	Minute += (press - 48);
    636e:	90 91 56 03 	lds	r25, 0x0356
    6372:	80 91 52 03 	lds	r24, 0x0352
    6376:	89 0f       	add	r24, r25
    6378:	80 53       	subi	r24, 0x30	; 48
    637a:	80 93 52 03 	sts	0x0352, r24


	if (Minute > 59)
    637e:	80 91 52 03 	lds	r24, 0x0352
    6382:	8c 33       	cpi	r24, 0x3C	; 60
    6384:	c8 f0       	brcs	.+50     	; 0x63b8 <Set_Time+0x40c>
	{
		Minute = 0;
    6386:	10 92 52 03 	sts	0x0352, r1
		CLCD_vSetPosition(1,6);
    638a:	81 e0       	ldi	r24, 0x01	; 1
    638c:	66 e0       	ldi	r22, 0x06	; 6
    638e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendData(Minute/10 + 48);
    6392:	80 91 52 03 	lds	r24, 0x0352
    6396:	9a e0       	ldi	r25, 0x0A	; 10
    6398:	69 2f       	mov	r22, r25
    639a:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    639e:	80 5d       	subi	r24, 0xD0	; 208
    63a0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		CLCD_vSendData(Minute%10 + 48);
    63a4:	80 91 52 03 	lds	r24, 0x0352
    63a8:	9a e0       	ldi	r25, 0x0A	; 10
    63aa:	69 2f       	mov	r22, r25
    63ac:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    63b0:	89 2f       	mov	r24, r25
    63b2:	80 5d       	subi	r24, 0xD0	; 208
    63b4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	}

	// Set seconds
	CLCD_vSetPosition(1,11);
    63b8:	81 e0       	ldi	r24, 0x01	; 1
    63ba:	6b e0       	ldi	r22, 0x0B	; 11
    63bc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	do
	{
		press = KPD_u8GetPressed();
    63c0:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    63c4:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    63c8:	80 91 56 03 	lds	r24, 0x0356
    63cc:	8f 3f       	cpi	r24, 0xFF	; 255
    63ce:	c1 f3       	breq	.-16     	; 0x63c0 <Set_Time+0x414>
	CLCD_vSendData(press);
    63d0:	80 91 56 03 	lds	r24, 0x0356
    63d4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	Second = (press - 48) * 10;
    63d8:	80 91 56 03 	lds	r24, 0x0356
    63dc:	88 2f       	mov	r24, r24
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	9c 01       	movw	r18, r24
    63e2:	22 0f       	add	r18, r18
    63e4:	33 1f       	adc	r19, r19
    63e6:	c9 01       	movw	r24, r18
    63e8:	88 0f       	add	r24, r24
    63ea:	99 1f       	adc	r25, r25
    63ec:	88 0f       	add	r24, r24
    63ee:	99 1f       	adc	r25, r25
    63f0:	82 0f       	add	r24, r18
    63f2:	93 1f       	adc	r25, r19
    63f4:	80 5e       	subi	r24, 0xE0	; 224
    63f6:	80 93 53 03 	sts	0x0353, r24

	do
	{
		press = KPD_u8GetPressed();
    63fa:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    63fe:	80 93 56 03 	sts	0x0356, r24

	} while (press == NOTPRESSED);
    6402:	80 91 56 03 	lds	r24, 0x0356
    6406:	8f 3f       	cpi	r24, 0xFF	; 255
    6408:	c1 f3       	breq	.-16     	; 0x63fa <Set_Time+0x44e>
	CLCD_vSendData(press);
    640a:	80 91 56 03 	lds	r24, 0x0356
    640e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

	Second += (press - 48);
    6412:	90 91 56 03 	lds	r25, 0x0356
    6416:	80 91 53 03 	lds	r24, 0x0353
    641a:	89 0f       	add	r24, r25
    641c:	80 53       	subi	r24, 0x30	; 48
    641e:	80 93 53 03 	sts	0x0353, r24

	if (Second > 59)
    6422:	80 91 53 03 	lds	r24, 0x0353
    6426:	8c 33       	cpi	r24, 0x3C	; 60
    6428:	c8 f0       	brcs	.+50     	; 0x645c <Set_Time+0x4b0>
	{
		Second = 0;
    642a:	10 92 53 03 	sts	0x0353, r1
		CLCD_vSetPosition(1,11);
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	6b e0       	ldi	r22, 0x0B	; 11
    6432:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendData(Second/10 + 48);
    6436:	80 91 53 03 	lds	r24, 0x0353
    643a:	9a e0       	ldi	r25, 0x0A	; 10
    643c:	69 2f       	mov	r22, r25
    643e:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6442:	80 5d       	subi	r24, 0xD0	; 208
    6444:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		CLCD_vSendData(Second%10 + 48);
    6448:	80 91 53 03 	lds	r24, 0x0353
    644c:	9a e0       	ldi	r25, 0x0A	; 10
    644e:	69 2f       	mov	r22, r25
    6450:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6454:	89 2f       	mov	r24, r25
    6456:	80 5d       	subi	r24, 0xD0	; 208
    6458:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
	}

	/* Select AM or PM if mode is 12-hour */
	CLCD_vSetPosition(2, 1);
    645c:	82 e0       	ldi	r24, 0x02	; 2
    645e:	61 e0       	ldi	r22, 0x01	; 1
    6460:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("1 : AM    2 : PM");
    6464:	83 e4       	ldi	r24, 0x43	; 67
    6466:	91 e0       	ldi	r25, 0x01	; 1
    6468:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

	if (mode == mode_12Hours)
    646c:	80 91 11 03 	lds	r24, 0x0311
    6470:	81 33       	cpi	r24, 0x31	; 49
    6472:	09 f0       	breq	.+2      	; 0x6476 <Set_Time+0x4ca>
    6474:	01 c1       	rjmp	.+514    	; 0x6678 <Set_Time+0x6cc>
	{
		do
		{
			day_time = KPD_u8GetPressed();
    6476:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    647a:	80 93 57 03 	sts	0x0357, r24

			if (day_time != NOTPRESSED && (day_time != '1' && day_time != '2'))
    647e:	80 91 57 03 	lds	r24, 0x0357
    6482:	8f 3f       	cpi	r24, 0xFF	; 255
    6484:	09 f4       	brne	.+2      	; 0x6488 <Set_Time+0x4dc>
    6486:	ea c0       	rjmp	.+468    	; 0x665c <Set_Time+0x6b0>
    6488:	80 91 57 03 	lds	r24, 0x0357
    648c:	81 33       	cpi	r24, 0x31	; 49
    648e:	09 f4       	brne	.+2      	; 0x6492 <Set_Time+0x4e6>
    6490:	e5 c0       	rjmp	.+458    	; 0x665c <Set_Time+0x6b0>
    6492:	80 91 57 03 	lds	r24, 0x0357
    6496:	82 33       	cpi	r24, 0x32	; 50
    6498:	09 f4       	brne	.+2      	; 0x649c <Set_Time+0x4f0>
    649a:	e0 c0       	rjmp	.+448    	; 0x665c <Set_Time+0x6b0>
			{
				CLCD_vClearScreen();
    649c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSendString("Wrong Choise");
    64a0:	84 e5       	ldi	r24, 0x54	; 84
    64a2:	91 e0       	ldi	r25, 0x01	; 1
    64a4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    64a8:	80 e0       	ldi	r24, 0x00	; 0
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	aa ef       	ldi	r26, 0xFA	; 250
    64ae:	b3 e4       	ldi	r27, 0x43	; 67
    64b0:	8b 87       	std	Y+11, r24	; 0x0b
    64b2:	9c 87       	std	Y+12, r25	; 0x0c
    64b4:	ad 87       	std	Y+13, r26	; 0x0d
    64b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    64ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    64bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    64be:	9e 85       	ldd	r25, Y+14	; 0x0e
    64c0:	20 e0       	ldi	r18, 0x00	; 0
    64c2:	30 e0       	ldi	r19, 0x00	; 0
    64c4:	4a ef       	ldi	r20, 0xFA	; 250
    64c6:	54 e4       	ldi	r21, 0x44	; 68
    64c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    64cc:	dc 01       	movw	r26, r24
    64ce:	cb 01       	movw	r24, r22
    64d0:	8f 83       	std	Y+7, r24	; 0x07
    64d2:	98 87       	std	Y+8, r25	; 0x08
    64d4:	a9 87       	std	Y+9, r26	; 0x09
    64d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    64d8:	6f 81       	ldd	r22, Y+7	; 0x07
    64da:	78 85       	ldd	r23, Y+8	; 0x08
    64dc:	89 85       	ldd	r24, Y+9	; 0x09
    64de:	9a 85       	ldd	r25, Y+10	; 0x0a
    64e0:	20 e0       	ldi	r18, 0x00	; 0
    64e2:	30 e0       	ldi	r19, 0x00	; 0
    64e4:	40 e8       	ldi	r20, 0x80	; 128
    64e6:	5f e3       	ldi	r21, 0x3F	; 63
    64e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    64ec:	88 23       	and	r24, r24
    64ee:	2c f4       	brge	.+10     	; 0x64fa <Set_Time+0x54e>
		__ticks = 1;
    64f0:	81 e0       	ldi	r24, 0x01	; 1
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	9e 83       	std	Y+6, r25	; 0x06
    64f6:	8d 83       	std	Y+5, r24	; 0x05
    64f8:	3f c0       	rjmp	.+126    	; 0x6578 <Set_Time+0x5cc>
	else if (__tmp > 65535)
    64fa:	6f 81       	ldd	r22, Y+7	; 0x07
    64fc:	78 85       	ldd	r23, Y+8	; 0x08
    64fe:	89 85       	ldd	r24, Y+9	; 0x09
    6500:	9a 85       	ldd	r25, Y+10	; 0x0a
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	3f ef       	ldi	r19, 0xFF	; 255
    6506:	4f e7       	ldi	r20, 0x7F	; 127
    6508:	57 e4       	ldi	r21, 0x47	; 71
    650a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    650e:	18 16       	cp	r1, r24
    6510:	4c f5       	brge	.+82     	; 0x6564 <Set_Time+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6512:	6b 85       	ldd	r22, Y+11	; 0x0b
    6514:	7c 85       	ldd	r23, Y+12	; 0x0c
    6516:	8d 85       	ldd	r24, Y+13	; 0x0d
    6518:	9e 85       	ldd	r25, Y+14	; 0x0e
    651a:	20 e0       	ldi	r18, 0x00	; 0
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	40 e2       	ldi	r20, 0x20	; 32
    6520:	51 e4       	ldi	r21, 0x41	; 65
    6522:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6526:	dc 01       	movw	r26, r24
    6528:	cb 01       	movw	r24, r22
    652a:	bc 01       	movw	r22, r24
    652c:	cd 01       	movw	r24, r26
    652e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6532:	dc 01       	movw	r26, r24
    6534:	cb 01       	movw	r24, r22
    6536:	9e 83       	std	Y+6, r25	; 0x06
    6538:	8d 83       	std	Y+5, r24	; 0x05
    653a:	0f c0       	rjmp	.+30     	; 0x655a <Set_Time+0x5ae>
    653c:	88 ec       	ldi	r24, 0xC8	; 200
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	9c 83       	std	Y+4, r25	; 0x04
    6542:	8b 83       	std	Y+3, r24	; 0x03
    6544:	8b 81       	ldd	r24, Y+3	; 0x03
    6546:	9c 81       	ldd	r25, Y+4	; 0x04
    6548:	01 97       	sbiw	r24, 0x01	; 1
    654a:	f1 f7       	brne	.-4      	; 0x6548 <Set_Time+0x59c>
    654c:	9c 83       	std	Y+4, r25	; 0x04
    654e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6550:	8d 81       	ldd	r24, Y+5	; 0x05
    6552:	9e 81       	ldd	r25, Y+6	; 0x06
    6554:	01 97       	sbiw	r24, 0x01	; 1
    6556:	9e 83       	std	Y+6, r25	; 0x06
    6558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    655a:	8d 81       	ldd	r24, Y+5	; 0x05
    655c:	9e 81       	ldd	r25, Y+6	; 0x06
    655e:	00 97       	sbiw	r24, 0x00	; 0
    6560:	69 f7       	brne	.-38     	; 0x653c <Set_Time+0x590>
    6562:	14 c0       	rjmp	.+40     	; 0x658c <Set_Time+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6564:	6f 81       	ldd	r22, Y+7	; 0x07
    6566:	78 85       	ldd	r23, Y+8	; 0x08
    6568:	89 85       	ldd	r24, Y+9	; 0x09
    656a:	9a 85       	ldd	r25, Y+10	; 0x0a
    656c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6570:	dc 01       	movw	r26, r24
    6572:	cb 01       	movw	r24, r22
    6574:	9e 83       	std	Y+6, r25	; 0x06
    6576:	8d 83       	std	Y+5, r24	; 0x05
    6578:	8d 81       	ldd	r24, Y+5	; 0x05
    657a:	9e 81       	ldd	r25, Y+6	; 0x06
    657c:	9a 83       	std	Y+2, r25	; 0x02
    657e:	89 83       	std	Y+1, r24	; 0x01
    6580:	89 81       	ldd	r24, Y+1	; 0x01
    6582:	9a 81       	ldd	r25, Y+2	; 0x02
    6584:	01 97       	sbiw	r24, 0x01	; 1
    6586:	f1 f7       	brne	.-4      	; 0x6584 <Set_Time+0x5d8>
    6588:	9a 83       	std	Y+2, r25	; 0x02
    658a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_vClearScreen();
    658c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
				CLCD_vSetPosition(1, 1);
    6590:	81 e0       	ldi	r24, 0x01	; 1
    6592:	61 e0       	ldi	r22, 0x01	; 1
    6594:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData(Hour /10 +48);
    6598:	80 91 10 03 	lds	r24, 0x0310
    659c:	9a e0       	ldi	r25, 0x0A	; 10
    659e:	69 2f       	mov	r22, r25
    65a0:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    65a4:	80 5d       	subi	r24, 0xD0	; 208
    65a6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Hour %10 +48);
    65aa:	80 91 10 03 	lds	r24, 0x0310
    65ae:	9a e0       	ldi	r25, 0x0A	; 10
    65b0:	69 2f       	mov	r22, r25
    65b2:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    65b6:	89 2f       	mov	r24, r25
    65b8:	80 5d       	subi	r24, 0xD0	; 208
    65ba:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    65be:	89 e3       	ldi	r24, 0x39	; 57
    65c0:	91 e0       	ldi	r25, 0x01	; 1
    65c2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSendData(Minute/10 + 48);
    65c6:	80 91 52 03 	lds	r24, 0x0352
    65ca:	9a e0       	ldi	r25, 0x0A	; 10
    65cc:	69 2f       	mov	r22, r25
    65ce:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    65d2:	80 5d       	subi	r24, 0xD0	; 208
    65d4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Minute%10 + 48);
    65d8:	80 91 52 03 	lds	r24, 0x0352
    65dc:	9a e0       	ldi	r25, 0x0A	; 10
    65de:	69 2f       	mov	r22, r25
    65e0:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    65e4:	89 2f       	mov	r24, r25
    65e6:	80 5d       	subi	r24, 0xD0	; 208
    65e8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendString(" : ");
    65ec:	89 e3       	ldi	r24, 0x39	; 57
    65ee:	91 e0       	ldi	r25, 0x01	; 1
    65f0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSendData(Second/10 + 48);
    65f4:	80 91 53 03 	lds	r24, 0x0353
    65f8:	9a e0       	ldi	r25, 0x0A	; 10
    65fa:	69 2f       	mov	r22, r25
    65fc:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6600:	80 5d       	subi	r24, 0xD0	; 208
    6602:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(Second%10 + 48);
    6606:	80 91 53 03 	lds	r24, 0x0353
    660a:	9a e0       	ldi	r25, 0x0A	; 10
    660c:	69 2f       	mov	r22, r25
    660e:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6612:	89 2f       	mov	r24, r25
    6614:	80 5d       	subi	r24, 0xD0	; 208
    6616:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

				if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    661a:	eb e3       	ldi	r30, 0x3B	; 59
    661c:	f0 e0       	ldi	r31, 0x00	; 0
    661e:	80 81       	ld	r24, Z
    6620:	88 2f       	mov	r24, r24
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	88 70       	andi	r24, 0x08	; 8
    6626:	90 70       	andi	r25, 0x00	; 0
    6628:	95 95       	asr	r25
    662a:	87 95       	ror	r24
    662c:	95 95       	asr	r25
    662e:	87 95       	ror	r24
    6630:	95 95       	asr	r25
    6632:	87 95       	ror	r24
    6634:	81 30       	cpi	r24, 0x01	; 1
    6636:	91 05       	cpc	r25, r1
    6638:	29 f4       	brne	.+10     	; 0x6644 <Set_Time+0x698>
				{
					CLCD_vSendString(" AM");
    663a:	81 e6       	ldi	r24, 0x61	; 97
    663c:	91 e0       	ldi	r25, 0x01	; 1
    663e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6642:	04 c0       	rjmp	.+8      	; 0x664c <Set_Time+0x6a0>
				}
				else
				{
					CLCD_vSendString(" PM");
    6644:	85 e6       	ldi	r24, 0x65	; 101
    6646:	91 e0       	ldi	r25, 0x01	; 1
    6648:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				}
				CLCD_vSetPosition(2, 1);
    664c:	82 e0       	ldi	r24, 0x02	; 2
    664e:	61 e0       	ldi	r22, 0x01	; 1
    6650:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("1 : AM    2 : PM");
    6654:	83 e4       	ldi	r24, 0x43	; 67
    6656:	91 e0       	ldi	r25, 0x01	; 1
    6658:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			}
			else
			{

			}
		}while (day_time == NOTPRESSED || (day_time != '1' && day_time != '2'));
    665c:	80 91 57 03 	lds	r24, 0x0357
    6660:	8f 3f       	cpi	r24, 0xFF	; 255
    6662:	09 f4       	brne	.+2      	; 0x6666 <Set_Time+0x6ba>
    6664:	08 cf       	rjmp	.-496    	; 0x6476 <Set_Time+0x4ca>
    6666:	80 91 57 03 	lds	r24, 0x0357
    666a:	81 33       	cpi	r24, 0x31	; 49
    666c:	29 f0       	breq	.+10     	; 0x6678 <Set_Time+0x6cc>
    666e:	80 91 57 03 	lds	r24, 0x0357
    6672:	82 33       	cpi	r24, 0x32	; 50
    6674:	09 f0       	breq	.+2      	; 0x6678 <Set_Time+0x6cc>
    6676:	ff ce       	rjmp	.-514    	; 0x6476 <Set_Time+0x4ca>
	}
	else
	{

	}
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    6678:	8c e0       	ldi	r24, 0x0C	; 12
    667a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
	CLCD_vClearScreen();
    667e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - set time");
    6682:	83 ec       	ldi	r24, 0xC3	; 195
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2,1);
    668a:	82 e0       	ldi	r24, 0x02	; 2
    668c:	61 e0       	ldi	r22, 0x01	; 1
    668e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - select mode");
    6692:	80 ed       	ldi	r24, 0xD0	; 208
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    669a:	83 e0       	ldi	r24, 0x03	; 3
    669c:	61 e0       	ldi	r22, 0x01	; 1
    669e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("3 - Set Alarm");
    66a2:	85 e9       	ldi	r24, 0x95	; 149
    66a4:	90 e0       	ldi	r25, 0x00	; 0
    66a6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 1);
    66aa:	84 e0       	ldi	r24, 0x04	; 4
    66ac:	61 e0       	ldi	r22, 0x01	; 1
    66ae:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("4 - Weather");
    66b2:	83 ea       	ldi	r24, 0xA3	; 163
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 15);
    66ba:	84 e0       	ldi	r24, 0x04	; 4
    66bc:	6f e0       	ldi	r22, 0x0F	; 15
    66be:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("X:EXIT");
    66c2:	8f ea       	ldi	r24, 0xAF	; 175
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
}
    66ca:	6c 96       	adiw	r28, 0x1c	; 28
    66cc:	0f b6       	in	r0, 0x3f	; 63
    66ce:	f8 94       	cli
    66d0:	de bf       	out	0x3e, r29	; 62
    66d2:	0f be       	out	0x3f, r0	; 63
    66d4:	cd bf       	out	0x3d, r28	; 61
    66d6:	cf 91       	pop	r28
    66d8:	df 91       	pop	r29
    66da:	08 95       	ret

000066dc <Select_Mode>:

//======================================================================================================================================//

// Function to select time mode (12-hour or 24-hour)
void Select_Mode()
{
    66dc:	df 93       	push	r29
    66de:	cf 93       	push	r28
    66e0:	cd b7       	in	r28, 0x3d	; 61
    66e2:	de b7       	in	r29, 0x3e	; 62
    66e4:	2f 97       	sbiw	r28, 0x0f	; 15
    66e6:	0f b6       	in	r0, 0x3f	; 63
    66e8:	f8 94       	cli
    66ea:	de bf       	out	0x3e, r29	; 62
    66ec:	0f be       	out	0x3f, r0	; 63
    66ee:	cd bf       	out	0x3d, r28	; 61

	CLCD_vClearScreen();
    66f0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - 12-hour time");
    66f4:	8a e0       	ldi	r24, 0x0A	; 10
    66f6:	91 e0       	ldi	r25, 0x01	; 1
    66f8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    66fc:	82 e0       	ldi	r24, 0x02	; 2
    66fe:	61 e0       	ldi	r22, 0x01	; 1
    6700:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - 24-hour time");
    6704:	8b e1       	ldi	r24, 0x1B	; 27
    6706:	91 e0       	ldi	r25, 0x01	; 1
    6708:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

	do
	{

		mode = KPD_u8GetPressed();
    670c:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6710:	80 93 11 03 	sts	0x0311, r24
		if (mode == '1')
    6714:	80 91 11 03 	lds	r24, 0x0311
    6718:	81 33       	cpi	r24, 0x31	; 49
    671a:	e1 f4       	brne	.+56     	; 0x6754 <Select_Mode+0x78>
		{
			if (Mode_Flag == 0)
    671c:	80 91 0f 03 	lds	r24, 0x030F
    6720:	88 23       	and	r24, r24
    6722:	09 f0       	breq	.+2      	; 0x6726 <Select_Mode+0x4a>
    6724:	eb c0       	rjmp	.+470    	; 0x68fc <Select_Mode+0x220>
			{
				if (Hour > 12 )
    6726:	80 91 10 03 	lds	r24, 0x0310
    672a:	8d 30       	cpi	r24, 0x0D	; 13
    672c:	30 f0       	brcs	.+12     	; 0x673a <Select_Mode+0x5e>
				{
					Hour -= 12;
    672e:	80 91 10 03 	lds	r24, 0x0310
    6732:	8c 50       	subi	r24, 0x0C	; 12
    6734:	80 93 10 03 	sts	0x0310, r24
    6738:	09 c0       	rjmp	.+18     	; 0x674c <Select_Mode+0x70>
				}
				else if (Hour == 0)
    673a:	80 91 10 03 	lds	r24, 0x0310
    673e:	88 23       	and	r24, r24
    6740:	29 f4       	brne	.+10     	; 0x674c <Select_Mode+0x70>
				{
					Hour += 12;
    6742:	80 91 10 03 	lds	r24, 0x0310
    6746:	84 5f       	subi	r24, 0xF4	; 244
    6748:	80 93 10 03 	sts	0x0310, r24
				}
				else
				{

				}
				Mode_Flag = 1;
    674c:	81 e0       	ldi	r24, 0x01	; 1
    674e:	80 93 0f 03 	sts	0x030F, r24
    6752:	d4 c0       	rjmp	.+424    	; 0x68fc <Select_Mode+0x220>
			else
			{

			}
		}
		else if (mode == '2')
    6754:	80 91 11 03 	lds	r24, 0x0311
    6758:	82 33       	cpi	r24, 0x32	; 50
    675a:	d9 f5       	brne	.+118    	; 0x67d2 <Select_Mode+0xf6>
		{
			if (Mode_Flag == 1)
    675c:	80 91 0f 03 	lds	r24, 0x030F
    6760:	81 30       	cpi	r24, 0x01	; 1
    6762:	09 f0       	breq	.+2      	; 0x6766 <Select_Mode+0x8a>
    6764:	cb c0       	rjmp	.+406    	; 0x68fc <Select_Mode+0x220>
			{
				if (Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6766:	80 91 10 03 	lds	r24, 0x0310
    676a:	8c 30       	cpi	r24, 0x0C	; 12
    676c:	99 f4       	brne	.+38     	; 0x6794 <Select_Mode+0xb8>
    676e:	eb e3       	ldi	r30, 0x3B	; 59
    6770:	f0 e0       	ldi	r31, 0x00	; 0
    6772:	80 81       	ld	r24, Z
    6774:	88 2f       	mov	r24, r24
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	88 70       	andi	r24, 0x08	; 8
    677a:	90 70       	andi	r25, 0x00	; 0
    677c:	95 95       	asr	r25
    677e:	87 95       	ror	r24
    6780:	95 95       	asr	r25
    6782:	87 95       	ror	r24
    6784:	95 95       	asr	r25
    6786:	87 95       	ror	r24
    6788:	81 30       	cpi	r24, 0x01	; 1
    678a:	91 05       	cpc	r25, r1
    678c:	19 f4       	brne	.+6      	; 0x6794 <Select_Mode+0xb8>
				{
					Hour = 0;
    678e:	10 92 10 03 	sts	0x0310, r1
    6792:	1c c0       	rjmp	.+56     	; 0x67cc <Select_Mode+0xf0>
				}
				else if(Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3 == 0))
    6794:	80 91 10 03 	lds	r24, 0x0310
    6798:	8c 30       	cpi	r24, 0x0C	; 12
    679a:	21 f4       	brne	.+8      	; 0x67a4 <Select_Mode+0xc8>
    679c:	eb e3       	ldi	r30, 0x3B	; 59
    679e:	f0 e0       	ldi	r31, 0x00	; 0
    67a0:	80 81       	ld	r24, Z
    67a2:	14 c0       	rjmp	.+40     	; 0x67cc <Select_Mode+0xf0>
				{

				}
				else if (READ_BIT(PORTA_REG, DIO_PIN3) == 0)
    67a4:	eb e3       	ldi	r30, 0x3B	; 59
    67a6:	f0 e0       	ldi	r31, 0x00	; 0
    67a8:	80 81       	ld	r24, Z
    67aa:	88 2f       	mov	r24, r24
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	88 70       	andi	r24, 0x08	; 8
    67b0:	90 70       	andi	r25, 0x00	; 0
    67b2:	95 95       	asr	r25
    67b4:	87 95       	ror	r24
    67b6:	95 95       	asr	r25
    67b8:	87 95       	ror	r24
    67ba:	95 95       	asr	r25
    67bc:	87 95       	ror	r24
    67be:	00 97       	sbiw	r24, 0x00	; 0
    67c0:	29 f4       	brne	.+10     	; 0x67cc <Select_Mode+0xf0>
				{
					Hour += 12;
    67c2:	80 91 10 03 	lds	r24, 0x0310
    67c6:	84 5f       	subi	r24, 0xF4	; 244
    67c8:	80 93 10 03 	sts	0x0310, r24
				}
				else
				{

				}
				Mode_Flag = 0;
    67cc:	10 92 0f 03 	sts	0x030F, r1
    67d0:	95 c0       	rjmp	.+298    	; 0x68fc <Select_Mode+0x220>
			else
			{

			}
		}
		else if (mode != NOTPRESSED && (mode != '1' && mode != '2'))
    67d2:	80 91 11 03 	lds	r24, 0x0311
    67d6:	8f 3f       	cpi	r24, 0xFF	; 255
    67d8:	09 f4       	brne	.+2      	; 0x67dc <Select_Mode+0x100>
    67da:	90 c0       	rjmp	.+288    	; 0x68fc <Select_Mode+0x220>
    67dc:	80 91 11 03 	lds	r24, 0x0311
    67e0:	81 33       	cpi	r24, 0x31	; 49
    67e2:	09 f4       	brne	.+2      	; 0x67e6 <Select_Mode+0x10a>
    67e4:	8b c0       	rjmp	.+278    	; 0x68fc <Select_Mode+0x220>
    67e6:	80 91 11 03 	lds	r24, 0x0311
    67ea:	82 33       	cpi	r24, 0x32	; 50
    67ec:	09 f4       	brne	.+2      	; 0x67f0 <Select_Mode+0x114>
    67ee:	86 c0       	rjmp	.+268    	; 0x68fc <Select_Mode+0x220>
		{
			CLCD_vClearScreen();
    67f0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Wrong choise");
    67f4:	89 e6       	ldi	r24, 0x69	; 105
    67f6:	91 e0       	ldi	r25, 0x01	; 1
    67f8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    67fc:	80 e0       	ldi	r24, 0x00	; 0
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	aa ef       	ldi	r26, 0xFA	; 250
    6802:	b3 e4       	ldi	r27, 0x43	; 67
    6804:	8b 87       	std	Y+11, r24	; 0x0b
    6806:	9c 87       	std	Y+12, r25	; 0x0c
    6808:	ad 87       	std	Y+13, r26	; 0x0d
    680a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    680c:	6b 85       	ldd	r22, Y+11	; 0x0b
    680e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6810:	8d 85       	ldd	r24, Y+13	; 0x0d
    6812:	9e 85       	ldd	r25, Y+14	; 0x0e
    6814:	20 e0       	ldi	r18, 0x00	; 0
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	4a ef       	ldi	r20, 0xFA	; 250
    681a:	54 e4       	ldi	r21, 0x44	; 68
    681c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6820:	dc 01       	movw	r26, r24
    6822:	cb 01       	movw	r24, r22
    6824:	8f 83       	std	Y+7, r24	; 0x07
    6826:	98 87       	std	Y+8, r25	; 0x08
    6828:	a9 87       	std	Y+9, r26	; 0x09
    682a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    682c:	6f 81       	ldd	r22, Y+7	; 0x07
    682e:	78 85       	ldd	r23, Y+8	; 0x08
    6830:	89 85       	ldd	r24, Y+9	; 0x09
    6832:	9a 85       	ldd	r25, Y+10	; 0x0a
    6834:	20 e0       	ldi	r18, 0x00	; 0
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	40 e8       	ldi	r20, 0x80	; 128
    683a:	5f e3       	ldi	r21, 0x3F	; 63
    683c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6840:	88 23       	and	r24, r24
    6842:	2c f4       	brge	.+10     	; 0x684e <Select_Mode+0x172>
		__ticks = 1;
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	9e 83       	std	Y+6, r25	; 0x06
    684a:	8d 83       	std	Y+5, r24	; 0x05
    684c:	3f c0       	rjmp	.+126    	; 0x68cc <Select_Mode+0x1f0>
	else if (__tmp > 65535)
    684e:	6f 81       	ldd	r22, Y+7	; 0x07
    6850:	78 85       	ldd	r23, Y+8	; 0x08
    6852:	89 85       	ldd	r24, Y+9	; 0x09
    6854:	9a 85       	ldd	r25, Y+10	; 0x0a
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	3f ef       	ldi	r19, 0xFF	; 255
    685a:	4f e7       	ldi	r20, 0x7F	; 127
    685c:	57 e4       	ldi	r21, 0x47	; 71
    685e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6862:	18 16       	cp	r1, r24
    6864:	4c f5       	brge	.+82     	; 0x68b8 <Select_Mode+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6866:	6b 85       	ldd	r22, Y+11	; 0x0b
    6868:	7c 85       	ldd	r23, Y+12	; 0x0c
    686a:	8d 85       	ldd	r24, Y+13	; 0x0d
    686c:	9e 85       	ldd	r25, Y+14	; 0x0e
    686e:	20 e0       	ldi	r18, 0x00	; 0
    6870:	30 e0       	ldi	r19, 0x00	; 0
    6872:	40 e2       	ldi	r20, 0x20	; 32
    6874:	51 e4       	ldi	r21, 0x41	; 65
    6876:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    687a:	dc 01       	movw	r26, r24
    687c:	cb 01       	movw	r24, r22
    687e:	bc 01       	movw	r22, r24
    6880:	cd 01       	movw	r24, r26
    6882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6886:	dc 01       	movw	r26, r24
    6888:	cb 01       	movw	r24, r22
    688a:	9e 83       	std	Y+6, r25	; 0x06
    688c:	8d 83       	std	Y+5, r24	; 0x05
    688e:	0f c0       	rjmp	.+30     	; 0x68ae <Select_Mode+0x1d2>
    6890:	88 ec       	ldi	r24, 0xC8	; 200
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	9c 83       	std	Y+4, r25	; 0x04
    6896:	8b 83       	std	Y+3, r24	; 0x03
    6898:	8b 81       	ldd	r24, Y+3	; 0x03
    689a:	9c 81       	ldd	r25, Y+4	; 0x04
    689c:	01 97       	sbiw	r24, 0x01	; 1
    689e:	f1 f7       	brne	.-4      	; 0x689c <Select_Mode+0x1c0>
    68a0:	9c 83       	std	Y+4, r25	; 0x04
    68a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a4:	8d 81       	ldd	r24, Y+5	; 0x05
    68a6:	9e 81       	ldd	r25, Y+6	; 0x06
    68a8:	01 97       	sbiw	r24, 0x01	; 1
    68aa:	9e 83       	std	Y+6, r25	; 0x06
    68ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68ae:	8d 81       	ldd	r24, Y+5	; 0x05
    68b0:	9e 81       	ldd	r25, Y+6	; 0x06
    68b2:	00 97       	sbiw	r24, 0x00	; 0
    68b4:	69 f7       	brne	.-38     	; 0x6890 <Select_Mode+0x1b4>
    68b6:	14 c0       	rjmp	.+40     	; 0x68e0 <Select_Mode+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68b8:	6f 81       	ldd	r22, Y+7	; 0x07
    68ba:	78 85       	ldd	r23, Y+8	; 0x08
    68bc:	89 85       	ldd	r24, Y+9	; 0x09
    68be:	9a 85       	ldd	r25, Y+10	; 0x0a
    68c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68c4:	dc 01       	movw	r26, r24
    68c6:	cb 01       	movw	r24, r22
    68c8:	9e 83       	std	Y+6, r25	; 0x06
    68ca:	8d 83       	std	Y+5, r24	; 0x05
    68cc:	8d 81       	ldd	r24, Y+5	; 0x05
    68ce:	9e 81       	ldd	r25, Y+6	; 0x06
    68d0:	9a 83       	std	Y+2, r25	; 0x02
    68d2:	89 83       	std	Y+1, r24	; 0x01
    68d4:	89 81       	ldd	r24, Y+1	; 0x01
    68d6:	9a 81       	ldd	r25, Y+2	; 0x02
    68d8:	01 97       	sbiw	r24, 0x01	; 1
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <Select_Mode+0x1fc>
    68dc:	9a 83       	std	Y+2, r25	; 0x02
    68de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_vClearScreen();
    68e0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - 12-hour time");
    68e4:	8a e0       	ldi	r24, 0x0A	; 10
    68e6:	91 e0       	ldi	r25, 0x01	; 1
    68e8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    68ec:	82 e0       	ldi	r24, 0x02	; 2
    68ee:	61 e0       	ldi	r22, 0x01	; 1
    68f0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - 24-hour time");
    68f4:	8b e1       	ldi	r24, 0x1B	; 27
    68f6:	91 e0       	ldi	r25, 0x01	; 1
    68f8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}

	}while (mode == NOTPRESSED || (mode != '1' && mode != '2'));
    68fc:	80 91 11 03 	lds	r24, 0x0311
    6900:	8f 3f       	cpi	r24, 0xFF	; 255
    6902:	09 f4       	brne	.+2      	; 0x6906 <Select_Mode+0x22a>
    6904:	03 cf       	rjmp	.-506    	; 0x670c <Select_Mode+0x30>
    6906:	80 91 11 03 	lds	r24, 0x0311
    690a:	81 33       	cpi	r24, 0x31	; 49
    690c:	29 f0       	breq	.+10     	; 0x6918 <Select_Mode+0x23c>
    690e:	80 91 11 03 	lds	r24, 0x0311
    6912:	82 33       	cpi	r24, 0x32	; 50
    6914:	09 f0       	breq	.+2      	; 0x6918 <Select_Mode+0x23c>
    6916:	fa ce       	rjmp	.-524    	; 0x670c <Select_Mode+0x30>

	CLCD_vClearScreen();
    6918:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vClearScreen();
    691c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - set time");
    6920:	83 ec       	ldi	r24, 0xC3	; 195
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2,1);
    6928:	82 e0       	ldi	r24, 0x02	; 2
    692a:	61 e0       	ldi	r22, 0x01	; 1
    692c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - select mode");
    6930:	80 ed       	ldi	r24, 0xD0	; 208
    6932:	90 e0       	ldi	r25, 0x00	; 0
    6934:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6938:	83 e0       	ldi	r24, 0x03	; 3
    693a:	61 e0       	ldi	r22, 0x01	; 1
    693c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("3 - Set Alarm");
    6940:	85 e9       	ldi	r24, 0x95	; 149
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 1);
    6948:	84 e0       	ldi	r24, 0x04	; 4
    694a:	61 e0       	ldi	r22, 0x01	; 1
    694c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("4 - Weather");
    6950:	83 ea       	ldi	r24, 0xA3	; 163
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 15);
    6958:	84 e0       	ldi	r24, 0x04	; 4
    695a:	6f e0       	ldi	r22, 0x0F	; 15
    695c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("X:EXIT");
    6960:	8f ea       	ldi	r24, 0xAF	; 175
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
}
    6968:	2f 96       	adiw	r28, 0x0f	; 15
    696a:	0f b6       	in	r0, 0x3f	; 63
    696c:	f8 94       	cli
    696e:	de bf       	out	0x3e, r29	; 62
    6970:	0f be       	out	0x3f, r0	; 63
    6972:	cd bf       	out	0x3d, r28	; 61
    6974:	cf 91       	pop	r28
    6976:	df 91       	pop	r29
    6978:	08 95       	ret

0000697a <Set_Alarm>:

//======================================================================================================================================//

void Set_Alarm()
{
    697a:	df 93       	push	r29
    697c:	cf 93       	push	r28
    697e:	cd b7       	in	r28, 0x3d	; 61
    6980:	de b7       	in	r29, 0x3e	; 62
    6982:	a0 97       	sbiw	r28, 0x20	; 32
    6984:	0f b6       	in	r0, 0x3f	; 63
    6986:	f8 94       	cli
    6988:	de bf       	out	0x3e, r29	; 62
    698a:	0f be       	out	0x3f, r0	; 63
    698c:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    698e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("ALARM");
    6992:	86 e7       	ldi	r24, 0x76	; 118
    6994:	91 e0       	ldi	r25, 0x01	; 1
    6996:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    699a:	82 e0       	ldi	r24, 0x02	; 2
    699c:	61 e0       	ldi	r22, 0x01	; 1
    699e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("1 - Enable");
    69a2:	8c e7       	ldi	r24, 0x7C	; 124
    69a4:	91 e0       	ldi	r25, 0x01	; 1
    69a6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    69aa:	83 e0       	ldi	r24, 0x03	; 3
    69ac:	61 e0       	ldi	r22, 0x01	; 1
    69ae:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - Disable");
    69b2:	87 e8       	ldi	r24, 0x87	; 135
    69b4:	91 e0       	ldi	r25, 0x01	; 1
    69b6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>

	do
	{
		press = KPD_u8GetPressed();
    69ba:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    69be:	80 93 56 03 	sts	0x0356, r24
		if (press != NOTPRESSED &&press != '1' && press != '2')
    69c2:	80 91 56 03 	lds	r24, 0x0356
    69c6:	8f 3f       	cpi	r24, 0xFF	; 255
    69c8:	09 f4       	brne	.+2      	; 0x69cc <Set_Alarm+0x52>
    69ca:	98 c0       	rjmp	.+304    	; 0x6afc <Set_Alarm+0x182>
    69cc:	80 91 56 03 	lds	r24, 0x0356
    69d0:	81 33       	cpi	r24, 0x31	; 49
    69d2:	09 f4       	brne	.+2      	; 0x69d6 <Set_Alarm+0x5c>
    69d4:	93 c0       	rjmp	.+294    	; 0x6afc <Set_Alarm+0x182>
    69d6:	80 91 56 03 	lds	r24, 0x0356
    69da:	82 33       	cpi	r24, 0x32	; 50
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <Set_Alarm+0x66>
    69de:	8e c0       	rjmp	.+284    	; 0x6afc <Set_Alarm+0x182>
		{
			CLCD_vClearScreen();
    69e0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Wrong Choise");
    69e4:	84 e5       	ldi	r24, 0x54	; 84
    69e6:	91 e0       	ldi	r25, 0x01	; 1
    69e8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    69ec:	80 e0       	ldi	r24, 0x00	; 0
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	aa ef       	ldi	r26, 0xFA	; 250
    69f2:	b3 e4       	ldi	r27, 0x43	; 67
    69f4:	89 8f       	std	Y+25, r24	; 0x19
    69f6:	9a 8f       	std	Y+26, r25	; 0x1a
    69f8:	ab 8f       	std	Y+27, r26	; 0x1b
    69fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69fc:	69 8d       	ldd	r22, Y+25	; 0x19
    69fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a04:	20 e0       	ldi	r18, 0x00	; 0
    6a06:	30 e0       	ldi	r19, 0x00	; 0
    6a08:	4a ef       	ldi	r20, 0xFA	; 250
    6a0a:	54 e4       	ldi	r21, 0x44	; 68
    6a0c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a10:	dc 01       	movw	r26, r24
    6a12:	cb 01       	movw	r24, r22
    6a14:	8d 8b       	std	Y+21, r24	; 0x15
    6a16:	9e 8b       	std	Y+22, r25	; 0x16
    6a18:	af 8b       	std	Y+23, r26	; 0x17
    6a1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    6a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    6a20:	8f 89       	ldd	r24, Y+23	; 0x17
    6a22:	98 8d       	ldd	r25, Y+24	; 0x18
    6a24:	20 e0       	ldi	r18, 0x00	; 0
    6a26:	30 e0       	ldi	r19, 0x00	; 0
    6a28:	40 e8       	ldi	r20, 0x80	; 128
    6a2a:	5f e3       	ldi	r21, 0x3F	; 63
    6a2c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6a30:	88 23       	and	r24, r24
    6a32:	2c f4       	brge	.+10     	; 0x6a3e <Set_Alarm+0xc4>
		__ticks = 1;
    6a34:	81 e0       	ldi	r24, 0x01	; 1
    6a36:	90 e0       	ldi	r25, 0x00	; 0
    6a38:	9c 8b       	std	Y+20, r25	; 0x14
    6a3a:	8b 8b       	std	Y+19, r24	; 0x13
    6a3c:	3f c0       	rjmp	.+126    	; 0x6abc <Set_Alarm+0x142>
	else if (__tmp > 65535)
    6a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    6a40:	7e 89       	ldd	r23, Y+22	; 0x16
    6a42:	8f 89       	ldd	r24, Y+23	; 0x17
    6a44:	98 8d       	ldd	r25, Y+24	; 0x18
    6a46:	20 e0       	ldi	r18, 0x00	; 0
    6a48:	3f ef       	ldi	r19, 0xFF	; 255
    6a4a:	4f e7       	ldi	r20, 0x7F	; 127
    6a4c:	57 e4       	ldi	r21, 0x47	; 71
    6a4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6a52:	18 16       	cp	r1, r24
    6a54:	4c f5       	brge	.+82     	; 0x6aa8 <Set_Alarm+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a56:	69 8d       	ldd	r22, Y+25	; 0x19
    6a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a5e:	20 e0       	ldi	r18, 0x00	; 0
    6a60:	30 e0       	ldi	r19, 0x00	; 0
    6a62:	40 e2       	ldi	r20, 0x20	; 32
    6a64:	51 e4       	ldi	r21, 0x41	; 65
    6a66:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a6a:	dc 01       	movw	r26, r24
    6a6c:	cb 01       	movw	r24, r22
    6a6e:	bc 01       	movw	r22, r24
    6a70:	cd 01       	movw	r24, r26
    6a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a76:	dc 01       	movw	r26, r24
    6a78:	cb 01       	movw	r24, r22
    6a7a:	9c 8b       	std	Y+20, r25	; 0x14
    6a7c:	8b 8b       	std	Y+19, r24	; 0x13
    6a7e:	0f c0       	rjmp	.+30     	; 0x6a9e <Set_Alarm+0x124>
    6a80:	88 ec       	ldi	r24, 0xC8	; 200
    6a82:	90 e0       	ldi	r25, 0x00	; 0
    6a84:	9a 8b       	std	Y+18, r25	; 0x12
    6a86:	89 8b       	std	Y+17, r24	; 0x11
    6a88:	89 89       	ldd	r24, Y+17	; 0x11
    6a8a:	9a 89       	ldd	r25, Y+18	; 0x12
    6a8c:	01 97       	sbiw	r24, 0x01	; 1
    6a8e:	f1 f7       	brne	.-4      	; 0x6a8c <Set_Alarm+0x112>
    6a90:	9a 8b       	std	Y+18, r25	; 0x12
    6a92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a94:	8b 89       	ldd	r24, Y+19	; 0x13
    6a96:	9c 89       	ldd	r25, Y+20	; 0x14
    6a98:	01 97       	sbiw	r24, 0x01	; 1
    6a9a:	9c 8b       	std	Y+20, r25	; 0x14
    6a9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    6aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    6aa2:	00 97       	sbiw	r24, 0x00	; 0
    6aa4:	69 f7       	brne	.-38     	; 0x6a80 <Set_Alarm+0x106>
    6aa6:	14 c0       	rjmp	.+40     	; 0x6ad0 <Set_Alarm+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    6aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    6aac:	8f 89       	ldd	r24, Y+23	; 0x17
    6aae:	98 8d       	ldd	r25, Y+24	; 0x18
    6ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ab4:	dc 01       	movw	r26, r24
    6ab6:	cb 01       	movw	r24, r22
    6ab8:	9c 8b       	std	Y+20, r25	; 0x14
    6aba:	8b 8b       	std	Y+19, r24	; 0x13
    6abc:	8b 89       	ldd	r24, Y+19	; 0x13
    6abe:	9c 89       	ldd	r25, Y+20	; 0x14
    6ac0:	98 8b       	std	Y+16, r25	; 0x10
    6ac2:	8f 87       	std	Y+15, r24	; 0x0f
    6ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ac6:	98 89       	ldd	r25, Y+16	; 0x10
    6ac8:	01 97       	sbiw	r24, 0x01	; 1
    6aca:	f1 f7       	brne	.-4      	; 0x6ac8 <Set_Alarm+0x14e>
    6acc:	98 8b       	std	Y+16, r25	; 0x10
    6ace:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_vClearScreen();
    6ad0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("ALARM");
    6ad4:	86 e7       	ldi	r24, 0x76	; 118
    6ad6:	91 e0       	ldi	r25, 0x01	; 1
    6ad8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    6adc:	82 e0       	ldi	r24, 0x02	; 2
    6ade:	61 e0       	ldi	r22, 0x01	; 1
    6ae0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("1 - Enable");
    6ae4:	8c e7       	ldi	r24, 0x7C	; 124
    6ae6:	91 e0       	ldi	r25, 0x01	; 1
    6ae8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    6aec:	83 e0       	ldi	r24, 0x03	; 3
    6aee:	61 e0       	ldi	r22, 0x01	; 1
    6af0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - Disable");
    6af4:	87 e8       	ldi	r24, 0x87	; 135
    6af6:	91 e0       	ldi	r25, 0x01	; 1
    6af8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		}
	}while(press == NOTPRESSED || (press != '1' && press != '2'));
    6afc:	80 91 56 03 	lds	r24, 0x0356
    6b00:	8f 3f       	cpi	r24, 0xFF	; 255
    6b02:	09 f4       	brne	.+2      	; 0x6b06 <Set_Alarm+0x18c>
    6b04:	5a cf       	rjmp	.-332    	; 0x69ba <Set_Alarm+0x40>
    6b06:	80 91 56 03 	lds	r24, 0x0356
    6b0a:	81 33       	cpi	r24, 0x31	; 49
    6b0c:	29 f0       	breq	.+10     	; 0x6b18 <Set_Alarm+0x19e>
    6b0e:	80 91 56 03 	lds	r24, 0x0356
    6b12:	82 33       	cpi	r24, 0x32	; 50
    6b14:	09 f0       	breq	.+2      	; 0x6b18 <Set_Alarm+0x19e>
    6b16:	51 cf       	rjmp	.-350    	; 0x69ba <Set_Alarm+0x40>
	/* Check if chosen alarm is enable or disaple */
	/* if user choose alarm is enable */
	if (press == '1')
    6b18:	80 91 56 03 	lds	r24, 0x0356
    6b1c:	81 33       	cpi	r24, 0x31	; 49
    6b1e:	09 f0       	breq	.+2      	; 0x6b22 <Set_Alarm+0x1a8>
    6b20:	61 c1       	rjmp	.+706    	; 0x6de4 <Set_Alarm+0x46a>
	{
		switch(Alarm_EN)
    6b22:	80 91 51 03 	lds	r24, 0x0351
    6b26:	28 2f       	mov	r18, r24
    6b28:	30 e0       	ldi	r19, 0x00	; 0
    6b2a:	38 a3       	std	Y+32, r19	; 0x20
    6b2c:	2f 8f       	std	Y+31, r18	; 0x1f
    6b2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b30:	98 a1       	ldd	r25, Y+32	; 0x20
    6b32:	00 97       	sbiw	r24, 0x00	; 0
    6b34:	31 f0       	breq	.+12     	; 0x6b42 <Set_Alarm+0x1c8>
    6b36:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6b38:	38 a1       	ldd	r19, Y+32	; 0x20
    6b3a:	21 30       	cpi	r18, 0x01	; 1
    6b3c:	31 05       	cpc	r19, r1
    6b3e:	e1 f0       	breq	.+56     	; 0x6b78 <Set_Alarm+0x1fe>
    6b40:	4f c0       	rjmp	.+158    	; 0x6be0 <Set_Alarm+0x266>
		{
		case 0:
			CLCD_vClearScreen();
    6b42:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6b46:	83 e9       	ldi	r24, 0x93	; 147
    6b48:	91 e0       	ldi	r25, 0x01	; 1
    6b4a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6b4e:	82 e0       	ldi	r24, 0x02	; 2
    6b50:	66 e0       	ldi	r22, 0x06	; 6
    6b52:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("12 : 00");
    6b56:	8f e9       	ldi	r24, 0x9F	; 159
    6b58:	91 e0       	ldi	r25, 0x01	; 1
    6b5a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			if (mode == mode_12Hours)
    6b5e:	80 91 11 03 	lds	r24, 0x0311
    6b62:	81 33       	cpi	r24, 0x31	; 49
    6b64:	e9 f5       	brne	.+122    	; 0x6be0 <Set_Alarm+0x266>
			{
				CLCD_vSetPosition(2, 14);
    6b66:	82 e0       	ldi	r24, 0x02	; 2
    6b68:	6e e0       	ldi	r22, 0x0E	; 14
    6b6a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendString("AM");
    6b6e:	8d e3       	ldi	r24, 0x3D	; 61
    6b70:	91 e0       	ldi	r25, 0x01	; 1
    6b72:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
    6b76:	34 c0       	rjmp	.+104    	; 0x6be0 <Set_Alarm+0x266>
			}
			break;
		case 1 :
			CLCD_vClearScreen();
    6b78:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("Set Aalrm :");
    6b7c:	83 e9       	ldi	r24, 0x93	; 147
    6b7e:	91 e0       	ldi	r25, 0x01	; 1
    6b80:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2, 6);
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	66 e0       	ldi	r22, 0x06	; 6
    6b88:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData((Hours_Alarm / 10 ) + 48);
    6b8c:	80 91 55 03 	lds	r24, 0x0355
    6b90:	9a e0       	ldi	r25, 0x0A	; 10
    6b92:	69 2f       	mov	r22, r25
    6b94:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6b98:	80 5d       	subi	r24, 0xD0	; 208
    6b9a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Hours_Alarm % 10 ) + 48);
    6b9e:	80 91 55 03 	lds	r24, 0x0355
    6ba2:	9a e0       	ldi	r25, 0x0A	; 10
    6ba4:	69 2f       	mov	r22, r25
    6ba6:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6baa:	89 2f       	mov	r24, r25
    6bac:	80 5d       	subi	r24, 0xD0	; 208
    6bae:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendString(" : ");
    6bb2:	89 e3       	ldi	r24, 0x39	; 57
    6bb4:	91 e0       	ldi	r25, 0x01	; 1
    6bb6:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSendData((Minutes_Alarm / 10 ) + 48);
    6bba:	80 91 54 03 	lds	r24, 0x0354
    6bbe:	9a e0       	ldi	r25, 0x0A	; 10
    6bc0:	69 2f       	mov	r22, r25
    6bc2:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6bc6:	80 5d       	subi	r24, 0xD0	; 208
    6bc8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Minutes_Alarm % 10 ) + 48);
    6bcc:	80 91 54 03 	lds	r24, 0x0354
    6bd0:	9a e0       	ldi	r25, 0x0A	; 10
    6bd2:	69 2f       	mov	r22, r25
    6bd4:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6bd8:	89 2f       	mov	r24, r25
    6bda:	80 5d       	subi	r24, 0xD0	; 208
    6bdc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		}

		CLCD_vSetPosition(2, 6);
    6be0:	82 e0       	ldi	r24, 0x02	; 2
    6be2:	66 e0       	ldi	r22, 0x06	; 6
    6be4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>

		CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    6be8:	8e e0       	ldi	r24, 0x0E	; 14
    6bea:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>

		/* Set Hour Alarm */
		do
		{
			press = KPD_u8GetPressed();
    6bee:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6bf2:	80 93 56 03 	sts	0x0356, r24
		}while (press == NOTPRESSED);
    6bf6:	80 91 56 03 	lds	r24, 0x0356
    6bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    6bfc:	c1 f3       	breq	.-16     	; 0x6bee <Set_Alarm+0x274>

		CLCD_vSendData(press);
    6bfe:	80 91 56 03 	lds	r24, 0x0356
    6c02:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		Hours_Alarm = (press - 48) * 10;
    6c06:	80 91 56 03 	lds	r24, 0x0356
    6c0a:	88 2f       	mov	r24, r24
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	9c 01       	movw	r18, r24
    6c10:	22 0f       	add	r18, r18
    6c12:	33 1f       	adc	r19, r19
    6c14:	c9 01       	movw	r24, r18
    6c16:	88 0f       	add	r24, r24
    6c18:	99 1f       	adc	r25, r25
    6c1a:	88 0f       	add	r24, r24
    6c1c:	99 1f       	adc	r25, r25
    6c1e:	82 0f       	add	r24, r18
    6c20:	93 1f       	adc	r25, r19
    6c22:	80 5e       	subi	r24, 0xE0	; 224
    6c24:	80 93 55 03 	sts	0x0355, r24
		do
		{
			press = KPD_u8GetPressed();
    6c28:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6c2c:	80 93 56 03 	sts	0x0356, r24
		}while(press == NOTPRESSED);
    6c30:	80 91 56 03 	lds	r24, 0x0356
    6c34:	8f 3f       	cpi	r24, 0xFF	; 255
    6c36:	c1 f3       	breq	.-16     	; 0x6c28 <Set_Alarm+0x2ae>

		CLCD_vSendData(press);
    6c38:	80 91 56 03 	lds	r24, 0x0356
    6c3c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		Hours_Alarm += (press - 48);
    6c40:	90 91 56 03 	lds	r25, 0x0356
    6c44:	80 91 55 03 	lds	r24, 0x0355
    6c48:	89 0f       	add	r24, r25
    6c4a:	80 53       	subi	r24, 0x30	; 48
    6c4c:	80 93 55 03 	sts	0x0355, r24

		//Check if it valid or not
		switch(mode)
    6c50:	80 91 11 03 	lds	r24, 0x0311
    6c54:	28 2f       	mov	r18, r24
    6c56:	30 e0       	ldi	r19, 0x00	; 0
    6c58:	3e 8f       	std	Y+30, r19	; 0x1e
    6c5a:	2d 8f       	std	Y+29, r18	; 0x1d
    6c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6c5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6c60:	81 33       	cpi	r24, 0x31	; 49
    6c62:	91 05       	cpc	r25, r1
    6c64:	39 f0       	breq	.+14     	; 0x6c74 <Set_Alarm+0x2fa>
    6c66:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6c68:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6c6a:	22 33       	cpi	r18, 0x32	; 50
    6c6c:	31 05       	cpc	r19, r1
    6c6e:	09 f4       	brne	.+2      	; 0x6c72 <Set_Alarm+0x2f8>
    6c70:	45 c0       	rjmp	.+138    	; 0x6cfc <Set_Alarm+0x382>
    6c72:	62 c0       	rjmp	.+196    	; 0x6d38 <Set_Alarm+0x3be>
		{
		case mode_12Hours:
			if (Hours_Alarm > 12 && Hours_Alarm < 24 )
    6c74:	80 91 55 03 	lds	r24, 0x0355
    6c78:	8d 30       	cpi	r24, 0x0D	; 13
    6c7a:	08 f1       	brcs	.+66     	; 0x6cbe <Set_Alarm+0x344>
    6c7c:	80 91 55 03 	lds	r24, 0x0355
    6c80:	88 31       	cpi	r24, 0x18	; 24
    6c82:	e8 f4       	brcc	.+58     	; 0x6cbe <Set_Alarm+0x344>
			{
				Hours_Alarm -= 12;
    6c84:	80 91 55 03 	lds	r24, 0x0355
    6c88:	8c 50       	subi	r24, 0x0C	; 12
    6c8a:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6c8e:	82 e0       	ldi	r24, 0x02	; 2
    6c90:	66 e0       	ldi	r22, 0x06	; 6
    6c92:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6c96:	80 91 55 03 	lds	r24, 0x0355
    6c9a:	9a e0       	ldi	r25, 0x0A	; 10
    6c9c:	69 2f       	mov	r22, r25
    6c9e:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6ca2:	80 5d       	subi	r24, 0xD0	; 208
    6ca4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6ca8:	80 91 55 03 	lds	r24, 0x0355
    6cac:	9a e0       	ldi	r25, 0x0A	; 10
    6cae:	69 2f       	mov	r22, r25
    6cb0:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6cb4:	89 2f       	mov	r24, r25
    6cb6:	80 5d       	subi	r24, 0xD0	; 208
    6cb8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    6cbc:	3d c0       	rjmp	.+122    	; 0x6d38 <Set_Alarm+0x3be>
			}
			else if (Hours_Alarm > 23)
    6cbe:	80 91 55 03 	lds	r24, 0x0355
    6cc2:	88 31       	cpi	r24, 0x18	; 24
    6cc4:	c8 f1       	brcs	.+114    	; 0x6d38 <Set_Alarm+0x3be>
			{
				Hours_Alarm = 12;
    6cc6:	8c e0       	ldi	r24, 0x0C	; 12
    6cc8:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6ccc:	82 e0       	ldi	r24, 0x02	; 2
    6cce:	66 e0       	ldi	r22, 0x06	; 6
    6cd0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6cd4:	80 91 55 03 	lds	r24, 0x0355
    6cd8:	9a e0       	ldi	r25, 0x0A	; 10
    6cda:	69 2f       	mov	r22, r25
    6cdc:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6ce0:	80 5d       	subi	r24, 0xD0	; 208
    6ce2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6ce6:	80 91 55 03 	lds	r24, 0x0355
    6cea:	9a e0       	ldi	r25, 0x0A	; 10
    6cec:	69 2f       	mov	r22, r25
    6cee:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6cf2:	89 2f       	mov	r24, r25
    6cf4:	80 5d       	subi	r24, 0xD0	; 208
    6cf6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    6cfa:	1e c0       	rjmp	.+60     	; 0x6d38 <Set_Alarm+0x3be>

			}
			break;

		case mode_24Hours:
			if (Hours_Alarm > 23)
    6cfc:	80 91 55 03 	lds	r24, 0x0355
    6d00:	88 31       	cpi	r24, 0x18	; 24
    6d02:	d0 f0       	brcs	.+52     	; 0x6d38 <Set_Alarm+0x3be>
			{
				Hours_Alarm = 12;
    6d04:	8c e0       	ldi	r24, 0x0C	; 12
    6d06:	80 93 55 03 	sts	0x0355, r24
				CLCD_vSetPosition(2, 6);
    6d0a:	82 e0       	ldi	r24, 0x02	; 2
    6d0c:	66 e0       	ldi	r22, 0x06	; 6
    6d0e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((Hours_Alarm / 10) + 48);
    6d12:	80 91 55 03 	lds	r24, 0x0355
    6d16:	9a e0       	ldi	r25, 0x0A	; 10
    6d18:	69 2f       	mov	r22, r25
    6d1a:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6d1e:	80 5d       	subi	r24, 0xD0	; 208
    6d20:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((Hours_Alarm % 10) + 48);
    6d24:	80 91 55 03 	lds	r24, 0x0355
    6d28:	9a e0       	ldi	r25, 0x0A	; 10
    6d2a:	69 2f       	mov	r22, r25
    6d2c:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6d30:	89 2f       	mov	r24, r25
    6d32:	80 5d       	subi	r24, 0xD0	; 208
    6d34:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		default:
			break;
		}

		CLCD_vSetPosition(2, 11);
    6d38:	82 e0       	ldi	r24, 0x02	; 2
    6d3a:	6b e0       	ldi	r22, 0x0B	; 11
    6d3c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		/* Set Minute Alarm */
		do
		{
			press = KPD_u8GetPressed();
    6d40:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6d44:	80 93 56 03 	sts	0x0356, r24
		}while (press == NOTPRESSED);
    6d48:	80 91 56 03 	lds	r24, 0x0356
    6d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    6d4e:	c1 f3       	breq	.-16     	; 0x6d40 <Set_Alarm+0x3c6>

		CLCD_vSendData(press);
    6d50:	80 91 56 03 	lds	r24, 0x0356
    6d54:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>

		Minutes_Alarm = (press - 48) * 10;
    6d58:	80 91 56 03 	lds	r24, 0x0356
    6d5c:	88 2f       	mov	r24, r24
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	9c 01       	movw	r18, r24
    6d62:	22 0f       	add	r18, r18
    6d64:	33 1f       	adc	r19, r19
    6d66:	c9 01       	movw	r24, r18
    6d68:	88 0f       	add	r24, r24
    6d6a:	99 1f       	adc	r25, r25
    6d6c:	88 0f       	add	r24, r24
    6d6e:	99 1f       	adc	r25, r25
    6d70:	82 0f       	add	r24, r18
    6d72:	93 1f       	adc	r25, r19
    6d74:	80 5e       	subi	r24, 0xE0	; 224
    6d76:	80 93 54 03 	sts	0x0354, r24
		do
		{
			press = KPD_u8GetPressed();
    6d7a:	0e 94 97 19 	call	0x332e	; 0x332e <KPD_u8GetPressed>
    6d7e:	80 93 56 03 	sts	0x0356, r24
		}while(press == NOTPRESSED);
    6d82:	80 91 56 03 	lds	r24, 0x0356
    6d86:	8f 3f       	cpi	r24, 0xFF	; 255
    6d88:	c1 f3       	breq	.-16     	; 0x6d7a <Set_Alarm+0x400>

		CLCD_vSendData(press);
    6d8a:	80 91 56 03 	lds	r24, 0x0356
    6d8e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		Minutes_Alarm += (press - 48);
    6d92:	90 91 56 03 	lds	r25, 0x0356
    6d96:	80 91 54 03 	lds	r24, 0x0354
    6d9a:	89 0f       	add	r24, r25
    6d9c:	80 53       	subi	r24, 0x30	; 48
    6d9e:	80 93 54 03 	sts	0x0354, r24

		if (Minutes_Alarm > 12)
    6da2:	80 91 54 03 	lds	r24, 0x0354
    6da6:	8d 30       	cpi	r24, 0x0D	; 13
    6da8:	c8 f0       	brcs	.+50     	; 0x6ddc <Set_Alarm+0x462>
		{
			Minutes_Alarm = 0;
    6daa:	10 92 54 03 	sts	0x0354, r1
			CLCD_vSetPosition(2, 11);
    6dae:	82 e0       	ldi	r24, 0x02	; 2
    6db0:	6b e0       	ldi	r22, 0x0B	; 11
    6db2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendData((Minutes_Alarm / 10) + 48);
    6db6:	80 91 54 03 	lds	r24, 0x0354
    6dba:	9a e0       	ldi	r25, 0x0A	; 10
    6dbc:	69 2f       	mov	r22, r25
    6dbe:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6dc2:	80 5d       	subi	r24, 0xD0	; 208
    6dc4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
			CLCD_vSendData((Minutes_Alarm % 10) + 48);
    6dc8:	80 91 54 03 	lds	r24, 0x0354
    6dcc:	9a e0       	ldi	r25, 0x0A	; 10
    6dce:	69 2f       	mov	r22, r25
    6dd0:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    6dd4:	89 2f       	mov	r24, r25
    6dd6:	80 5d       	subi	r24, 0xD0	; 208
    6dd8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
		}
		/* Make Alarm Status : Alarm Enable  */
		Alarm_EN = 1 ;
    6ddc:	81 e0       	ldi	r24, 0x01	; 1
    6dde:	80 93 51 03 	sts	0x0351, r24
    6de2:	09 c0       	rjmp	.+18     	; 0x6df6 <Set_Alarm+0x47c>
		//=====================================
	}
	/* if user choose alarm is disaple */
	else if (press == '2')
    6de4:	80 91 56 03 	lds	r24, 0x0356
    6de8:	82 33       	cpi	r24, 0x32	; 50
    6dea:	29 f4       	brne	.+10     	; 0x6df6 <Set_Alarm+0x47c>
	{
		/* Make Alarm Status : Alarm Disaple  */
		Hours_Alarm = NOTPRESSED;
    6dec:	8f ef       	ldi	r24, 0xFF	; 255
    6dee:	80 93 55 03 	sts	0x0355, r24
		Alarm_EN = 0;
    6df2:	10 92 51 03 	sts	0x0351, r1
    6df6:	80 e0       	ldi	r24, 0x00	; 0
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	a8 e4       	ldi	r26, 0x48	; 72
    6dfc:	b3 e4       	ldi	r27, 0x43	; 67
    6dfe:	8b 87       	std	Y+11, r24	; 0x0b
    6e00:	9c 87       	std	Y+12, r25	; 0x0c
    6e02:	ad 87       	std	Y+13, r26	; 0x0d
    6e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e0e:	20 e0       	ldi	r18, 0x00	; 0
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	4a ef       	ldi	r20, 0xFA	; 250
    6e14:	54 e4       	ldi	r21, 0x44	; 68
    6e16:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e1a:	dc 01       	movw	r26, r24
    6e1c:	cb 01       	movw	r24, r22
    6e1e:	8f 83       	std	Y+7, r24	; 0x07
    6e20:	98 87       	std	Y+8, r25	; 0x08
    6e22:	a9 87       	std	Y+9, r26	; 0x09
    6e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e26:	6f 81       	ldd	r22, Y+7	; 0x07
    6e28:	78 85       	ldd	r23, Y+8	; 0x08
    6e2a:	89 85       	ldd	r24, Y+9	; 0x09
    6e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e2e:	20 e0       	ldi	r18, 0x00	; 0
    6e30:	30 e0       	ldi	r19, 0x00	; 0
    6e32:	40 e8       	ldi	r20, 0x80	; 128
    6e34:	5f e3       	ldi	r21, 0x3F	; 63
    6e36:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6e3a:	88 23       	and	r24, r24
    6e3c:	2c f4       	brge	.+10     	; 0x6e48 <Set_Alarm+0x4ce>
		__ticks = 1;
    6e3e:	81 e0       	ldi	r24, 0x01	; 1
    6e40:	90 e0       	ldi	r25, 0x00	; 0
    6e42:	9e 83       	std	Y+6, r25	; 0x06
    6e44:	8d 83       	std	Y+5, r24	; 0x05
    6e46:	3f c0       	rjmp	.+126    	; 0x6ec6 <Set_Alarm+0x54c>
	else if (__tmp > 65535)
    6e48:	6f 81       	ldd	r22, Y+7	; 0x07
    6e4a:	78 85       	ldd	r23, Y+8	; 0x08
    6e4c:	89 85       	ldd	r24, Y+9	; 0x09
    6e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e50:	20 e0       	ldi	r18, 0x00	; 0
    6e52:	3f ef       	ldi	r19, 0xFF	; 255
    6e54:	4f e7       	ldi	r20, 0x7F	; 127
    6e56:	57 e4       	ldi	r21, 0x47	; 71
    6e58:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6e5c:	18 16       	cp	r1, r24
    6e5e:	4c f5       	brge	.+82     	; 0x6eb2 <Set_Alarm+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	40 e2       	ldi	r20, 0x20	; 32
    6e6e:	51 e4       	ldi	r21, 0x41	; 65
    6e70:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e74:	dc 01       	movw	r26, r24
    6e76:	cb 01       	movw	r24, r22
    6e78:	bc 01       	movw	r22, r24
    6e7a:	cd 01       	movw	r24, r26
    6e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e80:	dc 01       	movw	r26, r24
    6e82:	cb 01       	movw	r24, r22
    6e84:	9e 83       	std	Y+6, r25	; 0x06
    6e86:	8d 83       	std	Y+5, r24	; 0x05
    6e88:	0f c0       	rjmp	.+30     	; 0x6ea8 <Set_Alarm+0x52e>
    6e8a:	88 ec       	ldi	r24, 0xC8	; 200
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	9c 83       	std	Y+4, r25	; 0x04
    6e90:	8b 83       	std	Y+3, r24	; 0x03
    6e92:	8b 81       	ldd	r24, Y+3	; 0x03
    6e94:	9c 81       	ldd	r25, Y+4	; 0x04
    6e96:	01 97       	sbiw	r24, 0x01	; 1
    6e98:	f1 f7       	brne	.-4      	; 0x6e96 <Set_Alarm+0x51c>
    6e9a:	9c 83       	std	Y+4, r25	; 0x04
    6e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    6ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    6ea2:	01 97       	sbiw	r24, 0x01	; 1
    6ea4:	9e 83       	std	Y+6, r25	; 0x06
    6ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    6eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    6eac:	00 97       	sbiw	r24, 0x00	; 0
    6eae:	69 f7       	brne	.-38     	; 0x6e8a <Set_Alarm+0x510>
    6eb0:	14 c0       	rjmp	.+40     	; 0x6eda <Set_Alarm+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    6eb4:	78 85       	ldd	r23, Y+8	; 0x08
    6eb6:	89 85       	ldd	r24, Y+9	; 0x09
    6eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ebe:	dc 01       	movw	r26, r24
    6ec0:	cb 01       	movw	r24, r22
    6ec2:	9e 83       	std	Y+6, r25	; 0x06
    6ec4:	8d 83       	std	Y+5, r24	; 0x05
    6ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    6eca:	9a 83       	std	Y+2, r25	; 0x02
    6ecc:	89 83       	std	Y+1, r24	; 0x01
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed2:	01 97       	sbiw	r24, 0x01	; 1
    6ed4:	f1 f7       	brne	.-4      	; 0x6ed2 <Set_Alarm+0x558>
    6ed6:	9a 83       	std	Y+2, r25	; 0x02
    6ed8:	89 83       	std	Y+1, r24	; 0x01
	{

	}

	_delay_ms(200);
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    6eda:	8c e0       	ldi	r24, 0x0C	; 12
    6edc:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <CLCD_vSendCommand>
	CLCD_vClearScreen();
    6ee0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("1 - set time");
    6ee4:	83 ec       	ldi	r24, 0xC3	; 195
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2,1);
    6eec:	82 e0       	ldi	r24, 0x02	; 2
    6eee:	61 e0       	ldi	r22, 0x01	; 1
    6ef0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("2 - select mode");
    6ef4:	80 ed       	ldi	r24, 0xD0	; 208
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    6efc:	83 e0       	ldi	r24, 0x03	; 3
    6efe:	61 e0       	ldi	r22, 0x01	; 1
    6f00:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("3 - Set Alarm");
    6f04:	85 e9       	ldi	r24, 0x95	; 149
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 1);
    6f0c:	84 e0       	ldi	r24, 0x04	; 4
    6f0e:	61 e0       	ldi	r22, 0x01	; 1
    6f10:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("4 - Weather");
    6f14:	83 ea       	ldi	r24, 0xA3	; 163
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(4, 15);
    6f1c:	84 e0       	ldi	r24, 0x04	; 4
    6f1e:	6f e0       	ldi	r22, 0x0F	; 15
    6f20:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("X:EXIT");
    6f24:	8f ea       	ldi	r24, 0xAF	; 175
    6f26:	90 e0       	ldi	r25, 0x00	; 0
    6f28:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
}
    6f2c:	a0 96       	adiw	r28, 0x20	; 32
    6f2e:	0f b6       	in	r0, 0x3f	; 63
    6f30:	f8 94       	cli
    6f32:	de bf       	out	0x3e, r29	; 62
    6f34:	0f be       	out	0x3f, r0	; 63
    6f36:	cd bf       	out	0x3d, r28	; 61
    6f38:	cf 91       	pop	r28
    6f3a:	df 91       	pop	r29
    6f3c:	08 95       	ret

00006f3e <Get_Temp>:

//======================================================================================================================================//

void Get_Temp()
{
    6f3e:	df 93       	push	r29
    6f40:	cf 93       	push	r28
    6f42:	00 d0       	rcall	.+0      	; 0x6f44 <Get_Temp+0x6>
    6f44:	00 d0       	rcall	.+0      	; 0x6f46 <Get_Temp+0x8>
    6f46:	0f 92       	push	r0
    6f48:	cd b7       	in	r28, 0x3d	; 61
    6f4a:	de b7       	in	r29, 0x3e	; 62
	volatile u8  TEMP_val, press_button = NOTPRESSED;
    6f4c:	8f ef       	ldi	r24, 0xFF	; 255
    6f4e:	8a 83       	std	Y+2, r24	; 0x02
	volatile u16 TEMP_volt ;
	CLCD_vClearScreen();
    6f50:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
	CLCD_vSendString("Press any key");
    6f54:	86 ee       	ldi	r24, 0xE6	; 230
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6f5c:	82 e0       	ldi	r24, 0x02	; 2
    6f5e:	61 e0       	ldi	r22, 0x01	; 1
    6f60:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
	CLCD_vSendString("To Exit");
    6f64:	87 ea       	ldi	r24, 0xA7	; 167
    6f66:	91 e0       	ldi	r25, 0x01	; 1
    6f68:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
	while (1)
	{
		if (press_button != NOTPRESSED)
    6f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    6f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f70:	71 f1       	breq	.+92     	; 0x6fce <Get_Temp+0x90>
		{
			CLCD_vClearScreen();
    6f72:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <CLCD_vClearScreen>
			CLCD_vSendString("1 - set time");
    6f76:	83 ec       	ldi	r24, 0xC3	; 195
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(2,1);
    6f7e:	82 e0       	ldi	r24, 0x02	; 2
    6f80:	61 e0       	ldi	r22, 0x01	; 1
    6f82:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("2 - select mode");
    6f86:	80 ed       	ldi	r24, 0xD0	; 208
    6f88:	90 e0       	ldi	r25, 0x00	; 0
    6f8a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    6f8e:	83 e0       	ldi	r24, 0x03	; 3
    6f90:	61 e0       	ldi	r22, 0x01	; 1
    6f92:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("3 - Set Alarm");
    6f96:	85 e9       	ldi	r24, 0x95	; 149
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 1);
    6f9e:	84 e0       	ldi	r24, 0x04	; 4
    6fa0:	61 e0       	ldi	r22, 0x01	; 1
    6fa2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("4 - Weather");
    6fa6:	83 ea       	ldi	r24, 0xA3	; 163
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
			CLCD_vSetPosition(4, 15);
    6fae:	84 e0       	ldi	r24, 0x04	; 4
    6fb0:	6f e0       	ldi	r22, 0x0F	; 15
    6fb2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
			CLCD_vSendString("X:EXIT");
    6fb6:	8f ea       	ldi	r24, 0xAF	; 175
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
				CLCD_vSendData(0xDF);
				CLCD_vSendData('C');
			}
		}
	}
}
    6fbe:	0f 90       	pop	r0
    6fc0:	0f 90       	pop	r0
    6fc2:	0f 90       	pop	r0
    6fc4:	0f 90       	pop	r0
    6fc6:	0f 90       	pop	r0
    6fc8:	cf 91       	pop	r28
    6fca:	df 91       	pop	r29
    6fcc:	08 95       	ret
			CLCD_vSendString("4 - Weather");
			CLCD_vSetPosition(4, 15);
			CLCD_vSendString("X:EXIT");
			break;
		}
		LM35_u8GetAnalogSignal(&LM350, &TEMP_volt);
    6fce:	80 e3       	ldi	r24, 0x30	; 48
    6fd0:	93 e0       	ldi	r25, 0x03	; 3
    6fd2:	9e 01       	movw	r18, r28
    6fd4:	2d 5f       	subi	r18, 0xFD	; 253
    6fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd8:	b9 01       	movw	r22, r18
    6fda:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <LM35_u8GetAnalogSignal>
		CLCD_vSetPosition(4, 10);
    6fde:	84 e0       	ldi	r24, 0x04	; 4
    6fe0:	6a e0       	ldi	r22, 0x0A	; 10
    6fe2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
		CLCD_vSendString("TEMP : ");
    6fe6:	8f ea       	ldi	r24, 0xAF	; 175
    6fe8:	91 e0       	ldi	r25, 0x01	; 1
    6fea:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <CLCD_vSendString>
		if(TEMP_volt >= 1000)
    6fee:	8b 81       	ldd	r24, Y+3	; 0x03
    6ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ff2:	23 e0       	ldi	r18, 0x03	; 3
    6ff4:	88 3e       	cpi	r24, 0xE8	; 232
    6ff6:	92 07       	cpc	r25, r18
    6ff8:	08 f4       	brcc	.+2      	; 0x6ffc <Get_Temp+0xbe>
    6ffa:	69 c0       	rjmp	.+210    	; 0x70ce <Get_Temp+0x190>
		{
			TEMP_val = (TEMP_volt - 1000) / 10;
    6ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    6ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    7000:	88 5e       	subi	r24, 0xE8	; 232
    7002:	93 40       	sbci	r25, 0x03	; 3
    7004:	2a e0       	ldi	r18, 0x0A	; 10
    7006:	30 e0       	ldi	r19, 0x00	; 0
    7008:	b9 01       	movw	r22, r18
    700a:	0e 94 50 39 	call	0x72a0	; 0x72a0 <__udivmodhi4>
    700e:	cb 01       	movw	r24, r22
    7010:	89 83       	std	Y+1, r24	; 0x01
			if (TEMP_val < 10)
    7012:	89 81       	ldd	r24, Y+1	; 0x01
    7014:	8a 30       	cpi	r24, 0x0A	; 10
    7016:	90 f4       	brcc	.+36     	; 0x703c <Get_Temp+0xfe>
			{
				CLCD_vSetPosition(4, 16);
    7018:	84 e0       	ldi	r24, 0x04	; 4
    701a:	60 e1       	ldi	r22, 0x10	; 16
    701c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData(TEMP_val + 48);
    7020:	89 81       	ldd	r24, Y+1	; 0x01
    7022:	80 5d       	subi	r24, 0xD0	; 208
    7024:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    7028:	8f ed       	ldi	r24, 0xDF	; 223
    702a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    702e:	83 e4       	ldi	r24, 0x43	; 67
    7030:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(' ');
    7034:	80 e2       	ldi	r24, 0x20	; 32
    7036:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    703a:	98 cf       	rjmp	.-208    	; 0x6f6c <Get_Temp+0x2e>
			}
			else if (TEMP_val < 100)
    703c:	89 81       	ldd	r24, Y+1	; 0x01
    703e:	84 36       	cpi	r24, 0x64	; 100
    7040:	e0 f4       	brcc	.+56     	; 0x707a <Get_Temp+0x13c>
			{
				CLCD_vSetPosition(4, 16);
    7042:	84 e0       	ldi	r24, 0x04	; 4
    7044:	60 e1       	ldi	r22, 0x10	; 16
    7046:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((TEMP_val /10) + 48);
    704a:	89 81       	ldd	r24, Y+1	; 0x01
    704c:	9a e0       	ldi	r25, 0x0A	; 10
    704e:	69 2f       	mov	r22, r25
    7050:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    7054:	80 5d       	subi	r24, 0xD0	; 208
    7056:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    705a:	89 81       	ldd	r24, Y+1	; 0x01
    705c:	9a e0       	ldi	r25, 0x0A	; 10
    705e:	69 2f       	mov	r22, r25
    7060:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    7064:	89 2f       	mov	r24, r25
    7066:	80 5d       	subi	r24, 0xD0	; 208
    7068:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    706c:	8f ed       	ldi	r24, 0xDF	; 223
    706e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    7072:	83 e4       	ldi	r24, 0x43	; 67
    7074:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    7078:	79 cf       	rjmp	.-270    	; 0x6f6c <Get_Temp+0x2e>
			}
			else if (TEMP_val < 1000)
    707a:	89 81       	ldd	r24, Y+1	; 0x01
			{
				CLCD_vSetPosition(4, 16);
    707c:	84 e0       	ldi	r24, 0x04	; 4
    707e:	60 e1       	ldi	r22, 0x10	; 16
    7080:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData((TEMP_val / 100) + 48);
    7084:	89 81       	ldd	r24, Y+1	; 0x01
    7086:	94 e6       	ldi	r25, 0x64	; 100
    7088:	69 2f       	mov	r22, r25
    708a:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    708e:	80 5d       	subi	r24, 0xD0	; 208
    7090:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(((TEMP_val / 10) % 10) + 48);
    7094:	89 81       	ldd	r24, Y+1	; 0x01
    7096:	9a e0       	ldi	r25, 0x0A	; 10
    7098:	69 2f       	mov	r22, r25
    709a:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    709e:	9a e0       	ldi	r25, 0x0A	; 10
    70a0:	69 2f       	mov	r22, r25
    70a2:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    70a6:	89 2f       	mov	r24, r25
    70a8:	80 5d       	subi	r24, 0xD0	; 208
    70aa:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    70ae:	89 81       	ldd	r24, Y+1	; 0x01
    70b0:	9a e0       	ldi	r25, 0x0A	; 10
    70b2:	69 2f       	mov	r22, r25
    70b4:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    70b8:	89 2f       	mov	r24, r25
    70ba:	80 5d       	subi	r24, 0xD0	; 208
    70bc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    70c0:	8f ed       	ldi	r24, 0xDF	; 223
    70c2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    70c6:	83 e4       	ldi	r24, 0x43	; 67
    70c8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    70cc:	4f cf       	rjmp	.-354    	; 0x6f6c <Get_Temp+0x2e>
			}
		}
		else
		{
			TEMP_val = (1000 - TEMP_volt ) / 10;
    70ce:	2b 81       	ldd	r18, Y+3	; 0x03
    70d0:	3c 81       	ldd	r19, Y+4	; 0x04
    70d2:	88 ee       	ldi	r24, 0xE8	; 232
    70d4:	93 e0       	ldi	r25, 0x03	; 3
    70d6:	82 1b       	sub	r24, r18
    70d8:	93 0b       	sbc	r25, r19
    70da:	2a e0       	ldi	r18, 0x0A	; 10
    70dc:	30 e0       	ldi	r19, 0x00	; 0
    70de:	b9 01       	movw	r22, r18
    70e0:	0e 94 50 39 	call	0x72a0	; 0x72a0 <__udivmodhi4>
    70e4:	cb 01       	movw	r24, r22
    70e6:	89 83       	std	Y+1, r24	; 0x01
			if (TEMP_val < 10)
    70e8:	89 81       	ldd	r24, Y+1	; 0x01
    70ea:	8a 30       	cpi	r24, 0x0A	; 10
    70ec:	a8 f4       	brcc	.+42     	; 0x7118 <Get_Temp+0x1da>
			{
				CLCD_vSetPosition(4, 16);
    70ee:	84 e0       	ldi	r24, 0x04	; 4
    70f0:	60 e1       	ldi	r22, 0x10	; 16
    70f2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData('-');
    70f6:	8d e2       	ldi	r24, 0x2D	; 45
    70f8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(TEMP_val + 48);
    70fc:	89 81       	ldd	r24, Y+1	; 0x01
    70fe:	80 5d       	subi	r24, 0xD0	; 208
    7100:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    7104:	8f ed       	ldi	r24, 0xDF	; 223
    7106:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    710a:	83 e4       	ldi	r24, 0x43	; 67
    710c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(' ');
    7110:	80 e2       	ldi	r24, 0x20	; 32
    7112:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    7116:	2a cf       	rjmp	.-428    	; 0x6f6c <Get_Temp+0x2e>
			}
			else if (TEMP_val < 100)
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	84 36       	cpi	r24, 0x64	; 100
    711c:	08 f0       	brcs	.+2      	; 0x7120 <Get_Temp+0x1e2>
    711e:	26 cf       	rjmp	.-436    	; 0x6f6c <Get_Temp+0x2e>
			{
				CLCD_vSetPosition(4, 16);
    7120:	84 e0       	ldi	r24, 0x04	; 4
    7122:	60 e1       	ldi	r22, 0x10	; 16
    7124:	0e 94 59 20 	call	0x40b2	; 0x40b2 <CLCD_vSetPosition>
				CLCD_vSendData('-');
    7128:	8d e2       	ldi	r24, 0x2D	; 45
    712a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val/10) + 48);
    712e:	89 81       	ldd	r24, Y+1	; 0x01
    7130:	9a e0       	ldi	r25, 0x0A	; 10
    7132:	69 2f       	mov	r22, r25
    7134:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    7138:	80 5d       	subi	r24, 0xD0	; 208
    713a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData((TEMP_val % 10) + 48);
    713e:	89 81       	ldd	r24, Y+1	; 0x01
    7140:	9a e0       	ldi	r25, 0x0A	; 10
    7142:	69 2f       	mov	r22, r25
    7144:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodqi4>
    7148:	89 2f       	mov	r24, r25
    714a:	80 5d       	subi	r24, 0xD0	; 208
    714c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData(0xDF);
    7150:	8f ed       	ldi	r24, 0xDF	; 223
    7152:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
				CLCD_vSendData('C');
    7156:	83 e4       	ldi	r24, 0x43	; 67
    7158:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <CLCD_vSendData>
    715c:	07 cf       	rjmp	.-498    	; 0x6f6c <Get_Temp+0x2e>

0000715e <ISR_TIMER2_OVF_MODE>:

//======================================================================================================================================//

/* ISR for timer OverFlow */
void ISR_TIMER2_OVF_MODE()
{
    715e:	df 93       	push	r29
    7160:	cf 93       	push	r28
    7162:	cd b7       	in	r28, 0x3d	; 61
    7164:	de b7       	in	r29, 0x3e	; 62
	Second++;
    7166:	80 91 53 03 	lds	r24, 0x0353
    716a:	8f 5f       	subi	r24, 0xFF	; 255
    716c:	80 93 53 03 	sts	0x0353, r24

	if (Second == 60)
    7170:	80 91 53 03 	lds	r24, 0x0353
    7174:	8c 33       	cpi	r24, 0x3C	; 60
    7176:	39 f4       	brne	.+14     	; 0x7186 <ISR_TIMER2_OVF_MODE+0x28>
	{
		Second = 0;
    7178:	10 92 53 03 	sts	0x0353, r1
		Minute++;
    717c:	80 91 52 03 	lds	r24, 0x0352
    7180:	8f 5f       	subi	r24, 0xFF	; 255
    7182:	80 93 52 03 	sts	0x0352, r24
	}
	if (Minute == 60)
    7186:	80 91 52 03 	lds	r24, 0x0352
    718a:	8c 33       	cpi	r24, 0x3C	; 60
    718c:	39 f4       	brne	.+14     	; 0x719c <ISR_TIMER2_OVF_MODE+0x3e>
	{
		Minute=0;
    718e:	10 92 52 03 	sts	0x0352, r1
		Hour++;
    7192:	80 91 10 03 	lds	r24, 0x0310
    7196:	8f 5f       	subi	r24, 0xFF	; 255
    7198:	80 93 10 03 	sts	0x0310, r24
	}
	if (mode == '1')
    719c:	80 91 11 03 	lds	r24, 0x0311
    71a0:	81 33       	cpi	r24, 0x31	; 49
    71a2:	d9 f4       	brne	.+54     	; 0x71da <ISR_TIMER2_OVF_MODE+0x7c>
	{
		if (Hour== 13)
    71a4:	80 91 10 03 	lds	r24, 0x0310
    71a8:	8d 30       	cpi	r24, 0x0D	; 13
    71aa:	19 f4       	brne	.+6      	; 0x71b2 <ISR_TIMER2_OVF_MODE+0x54>
		{
			Hour= 1;
    71ac:	81 e0       	ldi	r24, 0x01	; 1
    71ae:	80 93 10 03 	sts	0x0310, r24
		}
		if (Hour == 12 && Minute == 0 && Second == 0 )
    71b2:	80 91 10 03 	lds	r24, 0x0310
    71b6:	8c 30       	cpi	r24, 0x0C	; 12
    71b8:	81 f4       	brne	.+32     	; 0x71da <ISR_TIMER2_OVF_MODE+0x7c>
    71ba:	80 91 52 03 	lds	r24, 0x0352
    71be:	88 23       	and	r24, r24
    71c0:	61 f4       	brne	.+24     	; 0x71da <ISR_TIMER2_OVF_MODE+0x7c>
    71c2:	80 91 53 03 	lds	r24, 0x0353
    71c6:	88 23       	and	r24, r24
    71c8:	41 f4       	brne	.+16     	; 0x71da <ISR_TIMER2_OVF_MODE+0x7c>
		{
			TOG_BIT(PORTA_REG, DIO_PIN3);
    71ca:	ab e3       	ldi	r26, 0x3B	; 59
    71cc:	b0 e0       	ldi	r27, 0x00	; 0
    71ce:	eb e3       	ldi	r30, 0x3B	; 59
    71d0:	f0 e0       	ldi	r31, 0x00	; 0
    71d2:	90 81       	ld	r25, Z
    71d4:	88 e0       	ldi	r24, 0x08	; 8
    71d6:	89 27       	eor	r24, r25
    71d8:	8c 93       	st	X, r24
		}
	}
	if (mode == '2')
    71da:	80 91 11 03 	lds	r24, 0x0311
    71de:	82 33       	cpi	r24, 0x32	; 50
    71e0:	89 f5       	brne	.+98     	; 0x7244 <ISR_TIMER2_OVF_MODE+0xe6>
	{
		if (Hour == 24)
    71e2:	80 91 10 03 	lds	r24, 0x0310
    71e6:	88 31       	cpi	r24, 0x18	; 24
    71e8:	11 f4       	brne	.+4      	; 0x71ee <ISR_TIMER2_OVF_MODE+0x90>
		{
			Hour = 0;
    71ea:	10 92 10 03 	sts	0x0310, r1
		}
		else
		{

		}
		if (Hour < 12)
    71ee:	80 91 10 03 	lds	r24, 0x0310
    71f2:	8c 30       	cpi	r24, 0x0C	; 12
    71f4:	40 f4       	brcc	.+16     	; 0x7206 <ISR_TIMER2_OVF_MODE+0xa8>
		{
			SET_BIT(PORTA_REG, DIO_PIN3);
    71f6:	ab e3       	ldi	r26, 0x3B	; 59
    71f8:	b0 e0       	ldi	r27, 0x00	; 0
    71fa:	eb e3       	ldi	r30, 0x3B	; 59
    71fc:	f0 e0       	ldi	r31, 0x00	; 0
    71fe:	80 81       	ld	r24, Z
    7200:	88 60       	ori	r24, 0x08	; 8
    7202:	8c 93       	st	X, r24
    7204:	1f c0       	rjmp	.+62     	; 0x7244 <ISR_TIMER2_OVF_MODE+0xe6>
		}
		else if (Hour == 12 && Minute == 0 && Second == 0)
    7206:	80 91 10 03 	lds	r24, 0x0310
    720a:	8c 30       	cpi	r24, 0x0C	; 12
    720c:	81 f4       	brne	.+32     	; 0x722e <ISR_TIMER2_OVF_MODE+0xd0>
    720e:	80 91 52 03 	lds	r24, 0x0352
    7212:	88 23       	and	r24, r24
    7214:	61 f4       	brne	.+24     	; 0x722e <ISR_TIMER2_OVF_MODE+0xd0>
    7216:	80 91 53 03 	lds	r24, 0x0353
    721a:	88 23       	and	r24, r24
    721c:	41 f4       	brne	.+16     	; 0x722e <ISR_TIMER2_OVF_MODE+0xd0>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    721e:	ab e3       	ldi	r26, 0x3B	; 59
    7220:	b0 e0       	ldi	r27, 0x00	; 0
    7222:	eb e3       	ldi	r30, 0x3B	; 59
    7224:	f0 e0       	ldi	r31, 0x00	; 0
    7226:	80 81       	ld	r24, Z
    7228:	87 7f       	andi	r24, 0xF7	; 247
    722a:	8c 93       	st	X, r24
    722c:	0b c0       	rjmp	.+22     	; 0x7244 <ISR_TIMER2_OVF_MODE+0xe6>
		}
		else if (Hour > 12)
    722e:	80 91 10 03 	lds	r24, 0x0310
    7232:	8d 30       	cpi	r24, 0x0D	; 13
    7234:	38 f0       	brcs	.+14     	; 0x7244 <ISR_TIMER2_OVF_MODE+0xe6>
		{
			CLR_BIT(PORTA_REG, DIO_PIN3);
    7236:	ab e3       	ldi	r26, 0x3B	; 59
    7238:	b0 e0       	ldi	r27, 0x00	; 0
    723a:	eb e3       	ldi	r30, 0x3B	; 59
    723c:	f0 e0       	ldi	r31, 0x00	; 0
    723e:	80 81       	ld	r24, Z
    7240:	87 7f       	andi	r24, 0xF7	; 247
    7242:	8c 93       	st	X, r24
		else
		{

		}
	}
}
    7244:	cf 91       	pop	r28
    7246:	df 91       	pop	r29
    7248:	08 95       	ret

0000724a <__mulsi3>:
    724a:	62 9f       	mul	r22, r18
    724c:	d0 01       	movw	r26, r0
    724e:	73 9f       	mul	r23, r19
    7250:	f0 01       	movw	r30, r0
    7252:	82 9f       	mul	r24, r18
    7254:	e0 0d       	add	r30, r0
    7256:	f1 1d       	adc	r31, r1
    7258:	64 9f       	mul	r22, r20
    725a:	e0 0d       	add	r30, r0
    725c:	f1 1d       	adc	r31, r1
    725e:	92 9f       	mul	r25, r18
    7260:	f0 0d       	add	r31, r0
    7262:	83 9f       	mul	r24, r19
    7264:	f0 0d       	add	r31, r0
    7266:	74 9f       	mul	r23, r20
    7268:	f0 0d       	add	r31, r0
    726a:	65 9f       	mul	r22, r21
    726c:	f0 0d       	add	r31, r0
    726e:	99 27       	eor	r25, r25
    7270:	72 9f       	mul	r23, r18
    7272:	b0 0d       	add	r27, r0
    7274:	e1 1d       	adc	r30, r1
    7276:	f9 1f       	adc	r31, r25
    7278:	63 9f       	mul	r22, r19
    727a:	b0 0d       	add	r27, r0
    727c:	e1 1d       	adc	r30, r1
    727e:	f9 1f       	adc	r31, r25
    7280:	bd 01       	movw	r22, r26
    7282:	cf 01       	movw	r24, r30
    7284:	11 24       	eor	r1, r1
    7286:	08 95       	ret

00007288 <__udivmodqi4>:
    7288:	99 1b       	sub	r25, r25
    728a:	79 e0       	ldi	r23, 0x09	; 9
    728c:	04 c0       	rjmp	.+8      	; 0x7296 <__udivmodqi4_ep>

0000728e <__udivmodqi4_loop>:
    728e:	99 1f       	adc	r25, r25
    7290:	96 17       	cp	r25, r22
    7292:	08 f0       	brcs	.+2      	; 0x7296 <__udivmodqi4_ep>
    7294:	96 1b       	sub	r25, r22

00007296 <__udivmodqi4_ep>:
    7296:	88 1f       	adc	r24, r24
    7298:	7a 95       	dec	r23
    729a:	c9 f7       	brne	.-14     	; 0x728e <__udivmodqi4_loop>
    729c:	80 95       	com	r24
    729e:	08 95       	ret

000072a0 <__udivmodhi4>:
    72a0:	aa 1b       	sub	r26, r26
    72a2:	bb 1b       	sub	r27, r27
    72a4:	51 e1       	ldi	r21, 0x11	; 17
    72a6:	07 c0       	rjmp	.+14     	; 0x72b6 <__udivmodhi4_ep>

000072a8 <__udivmodhi4_loop>:
    72a8:	aa 1f       	adc	r26, r26
    72aa:	bb 1f       	adc	r27, r27
    72ac:	a6 17       	cp	r26, r22
    72ae:	b7 07       	cpc	r27, r23
    72b0:	10 f0       	brcs	.+4      	; 0x72b6 <__udivmodhi4_ep>
    72b2:	a6 1b       	sub	r26, r22
    72b4:	b7 0b       	sbc	r27, r23

000072b6 <__udivmodhi4_ep>:
    72b6:	88 1f       	adc	r24, r24
    72b8:	99 1f       	adc	r25, r25
    72ba:	5a 95       	dec	r21
    72bc:	a9 f7       	brne	.-22     	; 0x72a8 <__udivmodhi4_loop>
    72be:	80 95       	com	r24
    72c0:	90 95       	com	r25
    72c2:	bc 01       	movw	r22, r24
    72c4:	cd 01       	movw	r24, r26
    72c6:	08 95       	ret

000072c8 <__udivmodsi4>:
    72c8:	a1 e2       	ldi	r26, 0x21	; 33
    72ca:	1a 2e       	mov	r1, r26
    72cc:	aa 1b       	sub	r26, r26
    72ce:	bb 1b       	sub	r27, r27
    72d0:	fd 01       	movw	r30, r26
    72d2:	0d c0       	rjmp	.+26     	; 0x72ee <__udivmodsi4_ep>

000072d4 <__udivmodsi4_loop>:
    72d4:	aa 1f       	adc	r26, r26
    72d6:	bb 1f       	adc	r27, r27
    72d8:	ee 1f       	adc	r30, r30
    72da:	ff 1f       	adc	r31, r31
    72dc:	a2 17       	cp	r26, r18
    72de:	b3 07       	cpc	r27, r19
    72e0:	e4 07       	cpc	r30, r20
    72e2:	f5 07       	cpc	r31, r21
    72e4:	20 f0       	brcs	.+8      	; 0x72ee <__udivmodsi4_ep>
    72e6:	a2 1b       	sub	r26, r18
    72e8:	b3 0b       	sbc	r27, r19
    72ea:	e4 0b       	sbc	r30, r20
    72ec:	f5 0b       	sbc	r31, r21

000072ee <__udivmodsi4_ep>:
    72ee:	66 1f       	adc	r22, r22
    72f0:	77 1f       	adc	r23, r23
    72f2:	88 1f       	adc	r24, r24
    72f4:	99 1f       	adc	r25, r25
    72f6:	1a 94       	dec	r1
    72f8:	69 f7       	brne	.-38     	; 0x72d4 <__udivmodsi4_loop>
    72fa:	60 95       	com	r22
    72fc:	70 95       	com	r23
    72fe:	80 95       	com	r24
    7300:	90 95       	com	r25
    7302:	9b 01       	movw	r18, r22
    7304:	ac 01       	movw	r20, r24
    7306:	bd 01       	movw	r22, r26
    7308:	cf 01       	movw	r24, r30
    730a:	08 95       	ret

0000730c <__divmodsi4>:
    730c:	97 fb       	bst	r25, 7
    730e:	09 2e       	mov	r0, r25
    7310:	05 26       	eor	r0, r21
    7312:	0e d0       	rcall	.+28     	; 0x7330 <__divmodsi4_neg1>
    7314:	57 fd       	sbrc	r21, 7
    7316:	04 d0       	rcall	.+8      	; 0x7320 <__divmodsi4_neg2>
    7318:	d7 df       	rcall	.-82     	; 0x72c8 <__udivmodsi4>
    731a:	0a d0       	rcall	.+20     	; 0x7330 <__divmodsi4_neg1>
    731c:	00 1c       	adc	r0, r0
    731e:	38 f4       	brcc	.+14     	; 0x732e <__divmodsi4_exit>

00007320 <__divmodsi4_neg2>:
    7320:	50 95       	com	r21
    7322:	40 95       	com	r20
    7324:	30 95       	com	r19
    7326:	21 95       	neg	r18
    7328:	3f 4f       	sbci	r19, 0xFF	; 255
    732a:	4f 4f       	sbci	r20, 0xFF	; 255
    732c:	5f 4f       	sbci	r21, 0xFF	; 255

0000732e <__divmodsi4_exit>:
    732e:	08 95       	ret

00007330 <__divmodsi4_neg1>:
    7330:	f6 f7       	brtc	.-4      	; 0x732e <__divmodsi4_exit>
    7332:	90 95       	com	r25
    7334:	80 95       	com	r24
    7336:	70 95       	com	r23
    7338:	61 95       	neg	r22
    733a:	7f 4f       	sbci	r23, 0xFF	; 255
    733c:	8f 4f       	sbci	r24, 0xFF	; 255
    733e:	9f 4f       	sbci	r25, 0xFF	; 255
    7340:	08 95       	ret

00007342 <__prologue_saves__>:
    7342:	2f 92       	push	r2
    7344:	3f 92       	push	r3
    7346:	4f 92       	push	r4
    7348:	5f 92       	push	r5
    734a:	6f 92       	push	r6
    734c:	7f 92       	push	r7
    734e:	8f 92       	push	r8
    7350:	9f 92       	push	r9
    7352:	af 92       	push	r10
    7354:	bf 92       	push	r11
    7356:	cf 92       	push	r12
    7358:	df 92       	push	r13
    735a:	ef 92       	push	r14
    735c:	ff 92       	push	r15
    735e:	0f 93       	push	r16
    7360:	1f 93       	push	r17
    7362:	cf 93       	push	r28
    7364:	df 93       	push	r29
    7366:	cd b7       	in	r28, 0x3d	; 61
    7368:	de b7       	in	r29, 0x3e	; 62
    736a:	ca 1b       	sub	r28, r26
    736c:	db 0b       	sbc	r29, r27
    736e:	0f b6       	in	r0, 0x3f	; 63
    7370:	f8 94       	cli
    7372:	de bf       	out	0x3e, r29	; 62
    7374:	0f be       	out	0x3f, r0	; 63
    7376:	cd bf       	out	0x3d, r28	; 61
    7378:	09 94       	ijmp

0000737a <__epilogue_restores__>:
    737a:	2a 88       	ldd	r2, Y+18	; 0x12
    737c:	39 88       	ldd	r3, Y+17	; 0x11
    737e:	48 88       	ldd	r4, Y+16	; 0x10
    7380:	5f 84       	ldd	r5, Y+15	; 0x0f
    7382:	6e 84       	ldd	r6, Y+14	; 0x0e
    7384:	7d 84       	ldd	r7, Y+13	; 0x0d
    7386:	8c 84       	ldd	r8, Y+12	; 0x0c
    7388:	9b 84       	ldd	r9, Y+11	; 0x0b
    738a:	aa 84       	ldd	r10, Y+10	; 0x0a
    738c:	b9 84       	ldd	r11, Y+9	; 0x09
    738e:	c8 84       	ldd	r12, Y+8	; 0x08
    7390:	df 80       	ldd	r13, Y+7	; 0x07
    7392:	ee 80       	ldd	r14, Y+6	; 0x06
    7394:	fd 80       	ldd	r15, Y+5	; 0x05
    7396:	0c 81       	ldd	r16, Y+4	; 0x04
    7398:	1b 81       	ldd	r17, Y+3	; 0x03
    739a:	aa 81       	ldd	r26, Y+2	; 0x02
    739c:	b9 81       	ldd	r27, Y+1	; 0x01
    739e:	ce 0f       	add	r28, r30
    73a0:	d1 1d       	adc	r29, r1
    73a2:	0f b6       	in	r0, 0x3f	; 63
    73a4:	f8 94       	cli
    73a6:	de bf       	out	0x3e, r29	; 62
    73a8:	0f be       	out	0x3f, r0	; 63
    73aa:	cd bf       	out	0x3d, r28	; 61
    73ac:	ed 01       	movw	r28, r26
    73ae:	08 95       	ret

000073b0 <_exit>:
    73b0:	f8 94       	cli

000073b2 <__stop_program>:
    73b2:	ff cf       	rjmp	.-2      	; 0x73b2 <__stop_program>
